<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-64) 2017.2.2 (Build 865_3_19046U)" ts="2024-07-17 21:35:34">
<Class name="GC.AcuityADTBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64600,52423.154813</TimeChanged>
<TimeCreated>64069,60455.004402</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="PV1.3 table lookup" disabled="false">
<constraint name="source" value="HL7.S.CrAcuityADT"></constraint>
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A02,ADT_A03,ADT_A04,ADT_A05,ADT_A06,ADT_A07,ADT_A08,ADT_A11,ADT_A13,ADT_A21,ADT_A22,ADT_A17,ADT_A18,ADT_A34,ADT_A35"></constraint>
<when condition="1">
<send transform="" target="Bso.P.AcuityADT"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.AcuityADTBsoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64653,38594.05335</TimeChanged>
<TimeCreated>64069,60455.004402</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Block enctr type: Outpatient Message" disabled="false">
<when condition="HL7.{PV1:PatientType}=&quot;Outpatient Message&quot;">
<return></return>
</when>
</rule>
<rule name="Archive - 01052018 - Alj" disabled="false">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="Blocking test patient msgs" disabled="false">
<constraint name="source" value="Bso.P.AcuityADT"></constraint>
<when condition="(HL7.{PID:PatientIdentifierList(1).ID} In &quot;507424,515173,600000,600001&quot;)">
<return></return>
</when>
</rule>
<rule name="PV1.3 table lookup" disabled="false">
<constraint name="source" value="Bs.P.AcuityADT"></constraint>
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A02,ADT_A03,ADT_A04,ADT_A05,ADT_A06,ADT_A07,ADT_A08,ADT_A11,ADT_A13,ADT_A21,ADT_A22,ADT_A17"></constraint>
<when condition="1">
<send transform="GC.CernerAdt2AcuityAdt" target="HL7.O.AcuityAdt"></send>
<return></return>
</when>
</rule>
<rule name="Merge" disabled="false">
<constraint name="source" value="HL7.S.CrAcuityADT"></constraint>
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34,ADT_A35"></constraint>
<when condition="1">
<send transform="GC.Cerner2AcuityADTMrg" target="HL7.O.AcuityAdt"></send>
<send transform="GC.AcuityMRGtoADTa08" target="HL7.O.AcuityAdt"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.AcuityBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64768,52256.93471</TimeChanged>
<TimeCreated>64069,60455.004402</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="PV1.3 table lookup" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A02,ADT_A03,ADT_A04,ADT_A05,ADT_A06,ADT_A07,ADT_A08,ADT_A11,ADT_A13,ADT_A21,ADT_A22,ADT_A17"></constraint>
<when condition="1">
<send transform="GC.CernerAdt2AcuityAdt" target="HL7.O.AcuityAdt"></send>
<return></return>
</when>
</rule>
<rule name="Merge" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34,ADT_A35"></constraint>
<when condition="1">
<send transform="GC.Cerner2AcuityADTMrg" target="HL7.O.AcuityAdt"></send>
<send transform="GC.AcuityMRGtoADTa08" target="HL7.O.AcuityAdt"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.AcuityBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65730,41209.008677</TimeChanged>
<TimeCreated>64069,60455.004402</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Block enctr type: Outpatient Message" disabled="false">
<when condition="HL7.{PV1:PatientType}=&quot;Outpatient Message&quot;">
<return></return>
</when>
</rule>
<rule name="Block Test Patients - ADT" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="Archive - 01052018 - Alj" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="Acuity.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.AcuityMRGtoADTa08">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64453,53173.976677</TimeChanged>
<TimeCreated>64450,44634.287488</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A35' targetDocType='231.Cerner:ADT_A08' create='new' language='objectscript' >
<annotation>Need to generate an A08 after Merge is sent to get the correct location in Acuity</annotation>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<if condition='source.{MSH:MessageType.triggerevent} = "A35"' >
<true>
<assign value='"A08"' property='target.{MSH:MessageType.triggerevent}' action='set' />
</true>
</if>
<assign value='source.{EVN}' property='target.{EVN}' action='set' />
<if condition='source.{EVN:EventTypeCode}= "A35"' >
<true>
<assign value='"A08"' property='target.{EVN:EventTypeCode}' action='set' />
</true>
</if>
<assign value='source.{PID}' property='target.{PID}' action='set' />
<assign value='source.{PV1}' property='target.{PV1}' action='set' />
<assign value='..Lookup("T_Cr2Acuity_Unit",source.{PV1:AssignedPatientLocation.pointofcare})' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.AgilitiBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>66207,36099.137069</TimeChanged>
<TimeCreated>63873,39817.970464</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="CernerAdtsforAgiliti" effectiveBegin="" effectiveEnd="">
<rule name="Cerner Adt to Agiliti" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="GC.Cerner2AgilitiADT" target="SFTP.O.AgilitiAdt"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.AgilitiBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>66001,58716.390512</TimeChanged>
<TimeCreated>63873,39817.970464</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="CernerAdtsforAgiliti" effectiveBegin="" effectiveEnd="">
<rule name="Block Test Patients - ADT" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="Agiliti.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.AlertCustomRule">
<Description>
</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64288,58164.719575</TimeChanged>
<TimeCreated>62723,4705.069437</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="" disabled="false">
<constraint name="msgClass" value="Ens.AlertRequest"></constraint>
<when condition="(DoesNotContain(Document.AlertText,&quot;timeout&quot;))&amp;&amp;(DoesNotContain(Document.AlertText,&quot;No Connection&quot;))&amp;&amp;(DoesNotContain(Document.AlertText,&quot;NOWAIT&quot;))">
<send transform="" target="Email.O.AlertEmailEnsemble"></send>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.AlertRule">
<Description>
07/11/11 updated source names</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64288,58457.2004</TimeChanged>
<TimeCreated>62723,4705.11898</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="" disabled="false">
<when condition="1">
<send transform="" target="Bo.P.AlertsCustom"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.AviziaBoRuleMock">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64895,36285.853126</TimeChanged>
<TimeCreated>64845,55678.838408</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="CERT.CERT">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="ADT to not send to Avizia" disabled="false">
<constraint name="docCategory" value="231.Cernerbase"></constraint>
<constraint name="docName" value="ADT_A31"></constraint>
<when condition="1">
<return></return>
</when>
</rule>
<rule name="SIU " disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="SIU_S12,SIU_S13,SIU_S14,SIU_S15,SIU_S17,SIU_S26"></constraint>
<when condition="1">
<send transform="GC.AviziaSiu" target="HL7.O.AviziaAdtSiu"></send>
<return></return>
</when>
</rule>
<rule name="">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="HL7.O.AviziaAdtSiu"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.AviziaBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65463,56846.675389</TimeChanged>
<TimeCreated>64845,55083.228984</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Block Test Patients - ADT" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A02,ADT_A03,ADT_A04,ADT_A05,ADT_A06,ADT_A07,ADT_A08,ADT_A09,ADT_A10,ADT_A11,ADT_A12,ADT_A13,ADT_A14,ADT_A15,ADT_A16,ADT_A17,ADT_A21,ADT_A22,ADT_A23,ADT_A24,ADT_A25,ADT_A26,ADT_A28,ADT_A29,ADT_A31,ADT_A34,ADT_A35,ADT_A38,ADT_A44,ADT_ADSC"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="Block Test Patients - SIU" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="SIU_S12,SIU_S13,SIU_S14,SIU_S15,SIU_S17,SIU_S26"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PIDgrp(1).PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="no MRN person add / update" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A28,ADT_A31"></constraint>
<when condition="(HL7.{PID:PatientIdentifierList(1).ID}=&quot;&quot;)">
<return></return>
</when>
</rule>
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="SIU_S12,SIU_S13,SIU_S14,SIU_S15,SIU_S17,SIU_S26"></constraint>
<when condition="HL7.{SCH:AppointmentReason.identifier} In &quot;Telephone Visit,Virtual Video Visit&quot;">
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="AviziaVirtualCare.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.AviziaSiu">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64902,46596.85564</TimeChanged>
<TimeCreated>64895,35228.526341</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:SIU_S12' targetDocType='231.Cerner:SIU_S12' create='new' language='objectscript' >
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='source.{SCH}' property='target.{SCH}' action='set' />
<assign value='source.{NTE()}' property='target.{NTE()}' action='set' />
<assign value='source.{ZBX()}' property='target.{ZBX()}' action='set' />
<assign value='source.{PIDgrp()}' property='target.{PIDgrp()}' action='set' />
<assign value='source.{RGSgrp()}' property='target.{RGSgrp()}' action='set' />
<assign value='source.{RGSgrp().RGS}' property='target.{RGSgrp().RGS}' action='set' />
<assign value='source.{RGSgrp().AISgrp()}' property='target.{RGSgrp().AISgrp()}' action='set' />
<assign value='source.{RGSgrp().AIGgrp()}' property='target.{RGSgrp().AIGgrp()}' action='set' />
<assign value='source.{RGSgrp().AILgrp()}' property='target.{RGSgrp().AILgrp()}' action='set' />
<assign value='source.{RGSgrp().AILgrp().AIL}' property='target.{RGSgrp().AILgrp().AIL}' action='set' />
<assign value='source.{RGSgrp().AILgrp().AIL:LocationResourceID.facilityHD}' property='target.{RGSgrp().AILgrp().AIL:LocationResourceID}' action='set' />
<assign value='source.{PIDgrp().PV1:AssignedPatientLocation.facilityHD}' property='target.{PIDgrp().PV1:AssignedPatientLocation}' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.AviziaboRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65280,56792.52593</TimeChanged>
<TimeCreated>64845,56045.519433</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="ADT not to send to Avizia" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A31"></constraint>
<when condition="1">
<return></return>
</when>
</rule>
<rule name="SIU for Interpreter" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="SIU_S12,SIU_S13,SIU_S14,SIU_S15,SIU_S17,SIU_S26"></constraint>
<when condition="HL7.{SCH:AppointmentReason.identifier}=&quot;Interpreter&quot;">
<return></return>
</when>
</rule>
<rule name="SIU missing AIP segment sent alert email" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="SIU_S12,SIU_S13,SIU_S14,SIU_S15,SIU_S17,SIU_S26"></constraint>
<when condition="HL7.{RGSgrp(1).AIPgrp(1).AIP}=&quot;&quot;">
<send transform="" target="Email.O.AlertEmailVirtualCare"></send>
<return></return>
</when>
</rule>
<rule name="SIU" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="SIU_S12,SIU_S13,SIU_S14,SIU_S15,SIU_S17,SIU_S26"></constraint>
<when condition="1">
<send transform="GC.AviziaSiu" target="HL7.O.AviziaVirutalCareAdtSiu"></send>
<return></return>
</when>
</rule>
<rule name="">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="HL7.O.AviziaVirutalCareAdtSiu"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.BreezeSuiteBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>66427,47060.856504</TimeChanged>
<TimeCreated>66261,57188.577256</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="report only" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="1">
<send transform="" target="HL7.O.CrBreezeSuiteOru"></send>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="1">
<send transform="" target="HL7.O.BreezeSuiteOrm"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.BreezeSuiteBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>66428,68376.402485</TimeChanged>
<TimeCreated>66261,57273.252213</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Archive" disabled="false">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="Block Test Patients" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<send transform="" target="File.O.ArchiveStopped"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORM_O01,ORU_R01"></constraint>
<when condition="1">
<send transform="" target="BreezeSuite.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.Carefusion2CernerBase64">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64838,57400.181776</TimeChanged>
<TimeCreated>61607,43175.348783</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORU_R01' targetDocType='231.Cerner:ORU_R01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Updated 07/09/2018
	//  Last Updated in Prod: 02/03/2017 Al Johnson
	//  Create: 02/03/2017  Al Johnson 
	//  Description:  
	//	ORU from CarefusionPFT has both base64 report and discrete elements
	//  Carefusion2CernerBase64 will create ORU with only report
	//  Carefusion2CernerDiscrete will create ORU with only discrete OBX and append Carefusion Order with PDF
    //
    //  Copy the Cerner order id from ORC-2 to ORC-3 and OBR-2 to OBR-3.  07/09/2018
    //   Result on order without the PFT appended will go to the message center  07/09/2018
    //   Kristin wants the result for the report to go and not the discrete items  07/09/2018
    //  Copy OBR:7 if populated, else MSH:7 to OBR:22 resultstatuschangedate.  07/09/2018
    //  Copy OBR:7 if populated, else MSH:7 to OBR:27.4 quatitytimingstartdate.  07/09/2018
    //  Read T_CarefusionPFT_OrderingProvider.  Populate ORC-12 and OBR-16.  07/09/2018
]]]]><![CDATA[></code>
<foreach property='target.{ORCgrp(1).OBXgrp()}' key='k1' >
<if condition='target.{ORCgrp(1).OBXgrp(k1).OBX:2}="ED"' >
<false>
<assign value='' property='target.{ORCgrp(1).OBXgrp(k1)}' action='remove' />
</false>
</if>
</foreach>
<code>
<![CDATA[ 
    //  Copy OBR:2 PlacerOrderID to OBR:3 FillerOrderID
    //  Populate OBR:22 and OBR:27.4
]]]]><![CDATA[></code>

<assign value='source.{ORCgrp(1).ORC:2.1}' property='target.{ORCgrp(1).ORC:3.1}' action='set' />
<assign value='source.{ORCgrp(1).OBR:2.1}' property='target.{ORCgrp(1).OBR:3.1}' action='set' />

<assign value='""' property='tholdresultdate' action='set' />
<if condition='(source.{ORCgrp(1).OBR:7.1}="")' >
<true>
<assign value='source.{MSH:7.1}' property='tholdresultdate' action='set' />
</true>
<false>
<assign value='source.{ORCgrp(1).OBR:7.1}' property='tholdresultdate' action='set' />
</false>
</if>

<if condition='(source.{ORCgrp(1).OBR:22.1}="")' >
<true>
<assign value='tholdresultdate' property='target.{ORCgrp(1).OBR:22}' action='set' />
</true>
</if>

<if condition='(source.{ORCgrp(1).OBR:27.4}="")' >
<true>
<assign value='tholdresultdate' property='target.{ORCgrp(1).OBR:27.4}' action='set' />
</true>
</if>

<code>
<![CDATA[ 
    //  Check table T_CarefusionPFT_OrderingProvider for a change in ordering provider
    //  Change result message to table ordering provider
]]]]><![CDATA[></code>
<assign value='source.{ORCgrp(1).OBR:2(1).1}' property='tempCernerOrder' action='set' />
<assign value='source.{ORCgrp(1).ORC:12(1)}' property='tempORC12' action='set' />
<assign value='source.{ORCgrp(1).OBR:16(1)}' property='tempOBR16' action='set' />
<assign value='source.{ORCgrp(1).ORC:12(1).1}' property='tempInORC12id' action='set' />
<assign value='source.{ORCgrp(1).OBR:16(1).1}' property='tempInOBR16id' action='set' />
<assign value='""' property='tempDateResult' action='set' />
<assign value='""' property='tempDateCancel' action='set' />
<assign value='tempCernerOrder' property='wTableKey' action='set' />
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_CarefusionPFT_OrderingProvider",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<code>
<![CDATA[ 
    // no entry found - so send to Cerner as received
]]]]><![CDATA[></code>
</true>
<false>
<code>
<![CDATA[ 
    // table entry found - change ordering doc in message
]]]]><![CDATA[></code>
<assign value='$PIECE(wtableresult,"|",1)' property='temptblORC12' action='set' />
<assign value='$PIECE(temptblORC12,"^",1)' property='temptblORC12id' action='set' />
<assign value='$PIECE(wtableresult,"|",2)' property='temptblOBR16' action='set' />
<assign value='$PIECE(temptblOBR16,"^",1)' property='temptblOBR16id' action='set' />
<assign value='$PIECE(wtableresult,"|",3)' property='temptblDateAdd' action='set' />
<assign value='$PIECE(wtableresult,"|",4)' property='temptblDateResult' action='set' />
<assign value='$PIECE(wtableresult,"|",5)' property='temptblDateCancel' action='set' />
<assign value='$ZDATE($NOW(),8)' property='tempDateResult' action='set' />
<code>
<![CDATA[ 
    // result from Carefusion - update table with result date
        set wTableData=(temptblORC12_"|"_temptblOBR16_"|"_temptblDateAdd_"|"_tempDateResult_"|"_temptblDateCancel_"|") 
        set wTableName="T_CarefusionPFT_OrderingProvider"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,wTableKey,wTableData)	
]]]]><![CDATA[></code>
<if condition='(tempInORC12id = temptblORC12id)&amp;(tempInOBR16id = temptblOBR16id)' >
<false>
<code>
<![CDATA[ 
    // ordering doc on table differs from Carefusion hl7 message
    //  update hl7 message
]]]]><![CDATA[></code>
<assign value='temptblORC12' property='target.{ORCgrp(1).ORC:12(1)}' action='set' />
<assign value='temptblOBR16' property='target.{ORCgrp(1).OBR:16(1)}' action='set' />
</false>
</if>
</false>
</if>
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Carefusion2CernerDicrete">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64838,60232.744091</TimeChanged>
<TimeCreated>61607,43175.348783</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORU_R01' targetDocType='231.Cerner:ORU_R01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Updated 07/09/2018
	//  Last Updated in Prod: 02/03/2017 Al Johnson
	//  Create: 02/03/2017  Al Johnson 
	//  Description:  
	//	ORU from CarefusionPFT has both base64 report and discrete elements
	//  Carefusion2CernerBase64 will create ORU with only report
	//  Carefusion2CernerDiscrete will create ORU with only discrete OBX and append Carefusion Order with PDF
	//
    //  Copy the Cerner order id from ORC-2 to ORC-3 and OBR-2 to OBR-3.  07/09/2018
    //   Result on order without the PFT appended will go to the message center  07/09/2018
    //   Kristin wants the result for the report to go and not the discrete items  07/09/2018
    //  Copy OBR:7 if populated, else MSH:9 to OBR:22 resultstatuschangedate.  07/09/2018
    //  Copy OBR:7 if populated, else MSH:9 to OBR:27.4 quatitytimingstartdate.  07/09/2018
    //  Read T_CarefusionPFT_OrderingProvider.  Populate ORC-12 and OBR-16.  07/09/2018
    //
    //  Table each unique OBX item from Carefusion
]]]]><![CDATA[></code>

<code>
<![CDATA[ 
    //  Copy OBR:2 PlacerOrderID to OBR:3 FillerOrderID
    //  Original kept Carefusion Filler and appended PFT - 07/09/2018
]]]]><![CDATA[></code>
<assign value='""' property='tempOrcFillerOrd' action='set' />
<assign value='""' property='tempObrFillerOrd' action='set' />
<assign value='(target.{ORCgrp(1).ORC:PlacerOrderNumber.entityidentifier})_"PFT"' property='tempOrcFillerOrd' action='set' />
<assign value='(target.{ORCgrp(1).OBR:PlacerOrderNumber.entityidentifier})_"PFT"' property='tempObrFillerOrd' action='set' />
<assign value='tempOrcFillerOrd' property='target.{ORCgrp(1).ORC:FillerOrderNumber.entityidentifier}' action='set' />
<assign value='tempObrFillerOrd' property='target.{ORCgrp(1).OBR:FillerOrderNumber.entityidentifier}' action='set' />

<foreach property='target.{ORCgrp(1).OBXgrp()}' key='k1' >
<if condition='target.{ORCgrp(1).OBXgrp(k1).OBX:2}="ED"' >
<true>
<assign value='' property='target.{ORCgrp(1).OBXgrp(k1)}' action='remove' />
</true>
<false>
<assign value='target.{ORCgrp(1).OBXgrp(k1).OBX:3.1}' property='wTableKey' action='set' />
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_CarefusionPFTOBX",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<code>
<![CDATA[ 
        set wTableData=$ZDATETIME($NOW(),3,2,0)
        set wTableName="T_CarefusionPFTOBX"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,wTableKey,wTableData)
			
	]]]]><![CDATA[></code>
	</true>
	</if>
	</false>
</if>
</foreach>

<code>
<![CDATA[ 
    //  Populate OBR:22 and OBR:27.4
]]]]><![CDATA[></code>

<assign value='""' property='tholdresultdate' action='set' />
<if condition='(source.{ORCgrp(1).OBR:7.1}="")' >
<true>
<assign value='source.{MSH:7.1}' property='tholdresultdate' action='set' />
</true>
<false>
<assign value='source.{ORCgrp(1).OBR:7.1}' property='tholdresultdate' action='set' />
</false>
</if>

<if condition='(source.{ORCgrp(1).OBR:22.1}="")' >
<true>
<assign value='tholdresultdate' property='target.{ORCgrp(1).OBR:22}' action='set' />
</true>
</if>

<if condition='(source.{ORCgrp(1).OBR:27.4}="")' >
<true>
<assign value='tholdresultdate' property='target.{ORCgrp(1).OBR:27.4}' action='set' />
</true>
</if>

<code>
<![CDATA[ 
    //  Check table T_CarefusionPFT_OrderingProvider for a change in ordering provider
    //  Change result message to table ordering provider
]]]]><![CDATA[></code>
<assign value='source.{ORCgrp(1).OBR:2(1).1}' property='tempCernerOrder' action='set' />
<assign value='source.{ORCgrp(1).ORC:12(1)}' property='tempORC12' action='set' />
<assign value='source.{ORCgrp(1).OBR:16(1)}' property='tempOBR16' action='set' />
<assign value='source.{ORCgrp(1).ORC:12(1).1}' property='tempInORC12id' action='set' />
<assign value='source.{ORCgrp(1).OBR:16(1).1}' property='tempInOBR16id' action='set' />
<assign value='""' property='tempDateResult' action='set' />
<assign value='""' property='tempDateCancel' action='set' />
<assign value='tempCernerOrder' property='wTableKey' action='set' />
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_CarefusionPFT_OrderingProvider",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<code>
<![CDATA[ 
    // no entry found - so send to Cerner as received
]]]]><![CDATA[></code>
</true>
<false>
<code>
<![CDATA[ 
    // table entry found - change ordering doc in message
]]]]><![CDATA[></code>
<assign value='$PIECE(wtableresult,"|",1)' property='temptblORC12' action='set' />
<assign value='$PIECE(temptblORC12,"^",1)' property='temptblORC12id' action='set' />
<assign value='$PIECE(wtableresult,"|",2)' property='temptblOBR16' action='set' />
<assign value='$PIECE(temptblOBR16,"^",1)' property='temptblOBR16id' action='set' />
<assign value='$PIECE(wtableresult,"|",3)' property='temptblDateAdd' action='set' />
<assign value='$PIECE(wtableresult,"|",4)' property='temptblDateResult' action='set' />
<assign value='$PIECE(wtableresult,"|",5)' property='temptblDateCancel' action='set' />
<assign value='$ZDATE($NOW(),8)' property='tempDateResult' action='set' />
<code>
<![CDATA[ 
    // result from Carefusion - update table with result date
        set wTableData=(temptblORC12_"|"_temptblOBR16_"|"_temptblDateAdd_"|"_tempDateResult_"|"_temptblDateCancel_"|") 
        set wTableName="T_CarefusionPFT_OrderingProvider"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,wTableKey,wTableData)	
]]]]><![CDATA[></code>
<if condition='(tempInORC12id = temptblORC12id)&amp;(tempInOBR16id = temptblOBR16id)' >
<false>
<code>
<![CDATA[ 
    // ordering doc on table differs from Carefusion hl7 message
    //  update hl7 message
]]]]><![CDATA[></code>
<assign value='temptblORC12' property='target.{ORCgrp(1).ORC:12(1)}' action='set' />
<assign value='temptblOBR16' property='target.{ORCgrp(1).OBR:16(1)}' action='set' />
</false>
</if>
</false>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.CarefusionPFTBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65632,62639.793492</TimeChanged>
<TimeCreated>63901,50866.591032</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="block specific order status" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="HL7.{ORCgrp(1).ORC:1}=&quot;SC&quot;||HL7.{ORCgrp(1).ORC:1}=&quot;CM&quot;">
<return></return>
</when>
</rule>
<rule name="Orders To Carefusion" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="1">
<send transform="GC.Cerner2CarefusionPFTOrm" target="HL7.O.CarefusionPFTOrm"></send>
<return></return>
</when>
</rule>
<rule name="Report Only-NO Return" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="1">
<send transform="GC.Carefusion2CernerBase64" target="HL7.O.CrCarefusionPFTOru"></send>
</when>
</rule>
<rule name="Discrete Results Only" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="1">
<send transform="GC.Carefusion2CernerDicrete" target="HL7.O.CrCarefusionPFTOru"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.CarefusionPFTBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65440,49499.547791</TimeChanged>
<TimeCreated>63901,50866.591032</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Block Test Patients - ORM and ORU" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="CarefusionPFT.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.CarefusionPFTBsoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64334,34277.482289</TimeChanged>
<TimeCreated>63901,50866.591032</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="source" value="HL7.S.CrCarefusionPFTOrm"></constraint>
<when condition="(HL7.{PID:PatientIdentifierList(1).ID} In &quot;507424,515173,600000,600001&quot;)">
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="source" value="HL7.S.CrCarefusionPFTOrm"></constraint>
<when condition="1">
<send transform="" target="HL7.O.CarefusionPFTOrm"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="source" value="HL7.S.CarefusionPFTOru"></constraint>
<when condition="1">
<send transform="GC.Carefusion2CernerBase64" target="HL7.O.CrCarefusionPFTOru"></send>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="source" value="HL7.S.CarefusionPFTOru"></constraint>
<when condition="1">
<send transform="GC.Carefusion2CernerDicrete" target="HL7.O.CrCarefusionPFTOru"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner.HTTP.GenericOperationRev1">
<Description>
Forwards contents of an HTTP request to a remote HTTP service and sends the HTTP response as its reply message</Description>
<Super>Ens.BusinessOperation</Super>
<System>4</System>
<TimeChanged>65219,30914.635984</TimeChanged>
<TimeCreated>60402,62499</TimeCreated>

<Property name="SOAPPrefix">
<Description>
Prefix to be used for the SOAP Envelope namespace if envelope elements must be constructed</Description>
<Type>%String</Type>
<InitialExpression>"SOAP-ENV"</InitialExpression>
</Property>

<Parameter name="ADAPTER">
<Default>EnsLib.HTTP.OutboundAdapter</Default>
</Parameter>

<Property name="%HttpRequest">
<Description>
Holds request object used to submit requests and get reponses</Description>
<Type>%Net.HttpRequest</Type>
<Internal>1</Internal>
</Property>

<Property name="%ExcludeOutboundHeaders">
<Description>
Comma separated list of HTTP Headers associated with the message request 
sent to the business operation that are not to be passed to the external system.
The values are case-insensitive.
The appropriate Content-Length, Content-Type, Host and SOAPAction will be sent and ought not be specified here.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="ReadRawMode">
<Description><![CDATA[
Read Raw Mode<br>
If true (the default) then the body of the response will be read in using RAW mode<br>
ie. with no characterset translation. If false then it will use the charset specified<br>
in the response headers. This uses the ReadRawMode property of the HTTP request object<br>
Uncheck to not use Read Raw Mode<br>]]></Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="WriteRawMode">
<Description><![CDATA[
Write Raw Mode<br>
If true then the body of the request will be written using RAW mode<br>
ie. with no characterset translation. If false (the default) then it will use the charset specified<br>
in the request headers. This uses the WriteRawMode property of the HTTP request object<br>
Check to use Write Raw Mode<br>]]></Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Parameter name="SETTINGS">
<Default>ReadRawMode,WriteRawMode</Default>
</Parameter>

<Method name="OnInit">
<Description>
This user callback method is called via initConfig() from %OnNew() or in the case of SOAP Services from OnPreSOAP()</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ..%HttpRequest=##class(%Net.HttpRequest).%New()
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnMessage">
<Description>
Invoke a remote HTTP Service given a generic HTTP request</Description>
<FormalSpec>pRequest:EnsLib.HTTP.GenericMessage,*pResponse:EnsLib.HTTP.GenericMessage</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC=$$$OK, ..%HttpRequest.Location="", ..%HttpRequest.AcceptGzip=0, ..%HttpRequest.FollowRedirect=0, ..%HttpRequest.ReadRawMode=..ReadRawMode,  ..%HttpRequest.WriteRawMode=..WriteRawMode
	Do ..%HttpRequest.Reset()
	Do ..%HttpRequest.RemoveHeader("HOST"), ..%HttpRequest.RemoveHeader("USER-AGENT"), ..%HttpRequest.RemoveHeader("REFERER")

	#; Pass along selected HTTP headers
	Set (tReq,tURL,tCT,tLen,tNParams,tRawParams,tApp,tCfg)="", tDoNotPassThrough=","_$ZCVT(..%ExcludeOutboundHeaders,"L")_",host,cspapplication,ensconfigname,ensattribute,url,httprequest,httpversion,content-length,content-type,charencoding,translationtable,iparams,params,rawparams,"
	Set tHeaderKey="" For { Set tHeaderKey=pRequest.HTTPHeaders.Next(tHeaderKey)  Quit:""=tHeaderKey  Set tHeaderLwr=$ZCVT(tHeaderKey,"L")
		Set tPass=(tDoNotPassThrough'[(","_tHeaderLwr_","))  Set:tPass&&(tHeaderLwr?1"iparams_"1.N) tPass=0
		Do:tPass ..%HttpRequest.SetHeader(tHeaderKey,pRequest.HTTPHeaders.GetAt(tHeaderKey)) ; no need to handle multiple on one line
		// Set:tHeaderLwr="httprequest" tReq=pRequest.HTTPHeaders.GetAt(tHeaderKey)
		
		Set:tHeaderLwr="httprequest" tReq="PUT"
		If (tHeaderLwr="httprequest"){Do ..%HttpRequest.SetHeader(tHeaderKey,tReq)}
		
		Set:tHeaderLwr="url" tURL=pRequest.HTTPHeaders.GetAt(tHeaderKey)
		// Set:tHeaderLwr="content-type" tCT=$TR(pRequest.HTTPHeaders.GetAt(tHeaderKey),$C(34,39)) ; remove possible "  and '
		Set:tHeaderLwr="content-type" tCT="application/xml"
		Set:tHeaderLwr="content-length" tLen=pRequest.HTTPHeaders.GetAt(tHeaderKey)
		Set:tHeaderLwr="iparams" tNParams=pRequest.HTTPHeaders.GetAt(tHeaderKey)
		Set:tHeaderLwr="rawparams" tRawParams=pRequest.HTTPHeaders.GetAt(tHeaderKey)
		Set:tHeaderLwr="cspapplication" tApp=pRequest.HTTPHeaders.GetAt(tHeaderKey)
		Set:tHeaderLwr="ensconfigname" tCfg=pRequest.HTTPHeaders.GetAt(tHeaderKey)
	}
	#; if rawparams then remove any query string from tURL
	If tRawParams'="" Set tURL = $P(tURL,"?",1)
	
	#; if you want to POST both form body data and form variables then pass RAWPARAMS - the RAWPARAMS form variables will go in the URL and not in the form body, leaving the form body to contain your data
	Set tFormVarNames="", tDataArray="", n=0, tGenRawParams = ""
	Set:$Case($ZCVT(tReq,"U"),"":1,"POST":1,:0)&&$IsObject(pRequest.Stream) tNParams=0
	For i=1:1:tNParams {
		Set tParam=pRequest.HTTPHeaders.GetAt("IParams_"_i)
		Set tKey=$ZStrip($P(tParam,"="),"<>W"), tVal=$S($F(tParam,"="):$E(tParam,$F(tParam,"="),*),1:"")
		If tRawParams="" Set tGenRawParams=tGenRawParams_$S(tGenRawParams="":"",1:"&")_$S(tKey="":"", 1:tKey)_$S(tVal="":"", 1:"="_tVal)
		If (tKey'=""),(tVal'="") {
			Set tFormVarNames=tFormVarNames_$S(tFormVarNames="":"",1:",")_tKey
			Set tDataArray($I(n))=tVal
		}
	}
	#; if the conversion to FormVarNames meant we did do not use all e.g. for  ?WSDL&abc=1 we would only set abc=1 then do not use tFormVarNames
	If +tNParams && (n'=tNParams) {
		Set tFormVarNames=""
		#;if no tRawParams then need to use the one generated from iparams
		If tRawParams="" {$$$sysTRACE("Using generated RAWPARMS of "_tGenRawParams) Set tRawRarams = tGenRawParams}
	}

	#; If no IPARAMS then use RAWPARAMS in the URL
	Set tRawParams=$S(""=tFormVarNames&&$L(tRawParams):"?"_tRawParams, 1:"")
	Set ..%HttpRequest.ContentType=tCT
	Set tSC=..constructHTTPRequest(pRequest,tLen,tCT)  Quit:$$$ISERR(tSC) tSC

	#; Now send to the target address
	Set tAdURL=..Adapter.URL, tAdURL1=$E(tAdURL)
	If tAdURL1="^" {
		#; strip Application from URL and replace it with the remaining adapter URL part, if any
		Set $E(tAdURL,1)=""  Set:"*"=tAdURL tAdURL=""  Set:"/"'=$E(tAdURL,1) tAdURL="/"_tAdURL
		If (""'=tApp) {
			If (tApp=$E(tURL,1,$L(tApp)))&&("/"=$E(tApp,*)) {
				Set tURL=tAdURL_$S($L(tAdURL)>1:"/",1:"")_$E(tURL,$L(tApp)+1,*), tAdURL=""
			}
		} Else {
			/*	Come in via the adapter and the Application name is not at the front so keep inbound URL.
				Prepend anthing after the | to the URL that came in.
			*/
			Set tURL=$S($L(tAdURL)>1:tAdURL,1:"")_tURL, tAdURL = ""			}
	} ElseIf tAdURL1="|" {
		#; strip Application and ConfigName from URL and replace it with the remaining adapter URL part, if any
		If ""=tApp { Set:""'=tCfg tCfg="/"_tCfg_"/" } Else { Set tCfg=$S(""=tCfg:tApp, 1:tApp_tCfg_"/") }
		Set $E(tAdURL,1)=""  Set:"*"=tAdURL tAdURL=""  Set:"/"'=$E(tAdURL,1) tAdURL="/"_tAdURL
		If (""'=tCfg){
			If (tCfg=$E(tURL,1,$L(tCfg))) {
				Set tURL=tAdURL_$S($L(tAdURL)>1:"/",1:"")_$E(tURL,$L(tCfg)+1,*), tAdURL=""
			} ElseIf (tApp="") {
				/*	Come in via the adapter and the tCfg name is not the same so keep inbound URL. 
					Prepend anthing after the | to the URL that came in.
				*/
				Set tURL=$S($L(tAdURL)>1:tAdURL,1:"")_tURL, tAdURL = ""	
			}
		}
	}
#dim tHttpResponse As %Net.HttpResponse
	//  $$$TRACE("treq= "_tReq)
	Set tSC=..Adapter.SendFormDataArray(.tHttpResponse,$S(""=tReq:"POST",1:tReq),..%HttpRequest,tFormVarNames,.tDataArray,$Case(tAdURL,"":tURL,"*":tURL,:tAdURL)_tRawParams)

	If ##class(Ens.Util.Statistics).StatsStarted(..%ConfigName) {
		Set tStatsUserDimension=$LG(pRequest.HTTPHeaders.GetAt("EnsAttribute"),2)
		If (tStatsUserDimension'="") Do ##class(Ens.Util.Statistics).SetStatsUserDimension(..%ConfigName,tStatsUserDimension)
	}

	#; Suppress HTTP status errors and just pass back the status, headers and body
	If $$$ISERR(tSC)&&'$$$StatusEquals(tSC,$$$EnsErrHTTPStatus) { Set ..%HttpRequest=##class(%Net.HttpRequest).%New()  Quit tSC }
	Quit ..constructResponse(tHttpResponse,.pResponse)
]]></Implementation>
</Method>

<Method name="constructHTTPRequest">
<Description>
Assemble Envelope and Body into HTTP EntityBody stream</Description>
<Internal>1</Internal>
<FormalSpec>pRequest:EnsLib.SOAP.GenericMessage,pLen:%Integer,pCT:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Quit:'pLen $$$OK
	//Set ..%HttpRequest.EntityBody = pRequest.Stream
	//Quit $$$OK
	Do ..%HttpRequest.EntityBody.Write() ;Set AtEnd=false since ..%HttpRequest.Reset() leads to EntityBody.Clear() which marks AtEnd true.
	Quit ..%HttpRequest.EntityBody.CopyFrom(pRequest.Stream)
]]></Implementation>
</Method>

<Method name="constructResponse">
<Description>
Split response Envelope and Body into separate streams</Description>
<Internal>1</Internal>
<FormalSpec>pHttpResponse:%Net.HttpResponse,pResponse:EnsLib.HTTP.GenericMessage</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC=$$$OK
	If $IsObject(pHttpResponse.Data) {
		Set tStream=pHttpResponse.Data
	} Else {
		Set tStream=##class(%GlobalBinaryStream).%New()
		Set tSC=tStream.Write(pHttpResponse.Data)  Quit:$$$ISERR(tSC) tSC
	}
	Set pResponse=##class(EnsLib.HTTP.GenericMessage).%New(tStream,,pHttpResponse)
	Do pResponse.HTTPHeaders.SetAt(pHttpResponse.StatusLine,"StatusLine")
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="GC.Cerner.HTTP.GenericServiceRev1">
<Description>
Ensemble Generic HTTP Service based BusinessService class. Can use an HTTP InboundAdapter listener, or the standard CSP Service mechanism, or both.
In order for the CSP mechanism to work, HTTP Services using this class must be configured with the invoking URL including ?CfgItem= giving the config item name.
(Configured Services exposed using the HTTP Inbound Adapter may also be invoked with this URL parameter but because
 each configured Inbound Adapter listens on its own TCP/IP port this parameter is just a safety check for them.)</Description>
<Super>EnsLib.HTTP.Service</Super>
<System>4</System>
<TimeChanged>65064,48422.020982</TimeChanged>
<TimeCreated>59538,81504.383995</TimeCreated>

<Parameter name="DOCCLASS">
<Default>EnsLib.HTTP.GenericMessage</Default>
</Parameter>

<Property name="TargetConfigName">
<Description>
Configuration item to which to send messages</Description>
<Type>Ens.DataType.ConfigName</Type>
</Property>

<Property name="SearchTableClass">
<Description><![CDATA[
Store a set of searchable properties associated with each XML Document processed.<br>
These records will be stored in the named SearchTable class, if any.]]></Description>
<Type>%String</Type>
</Property>

<Property name="Validation">
<Description>
Specifies types of Validation to perform.
Set to non-empty to invoke OnValidate() in your subclass. You may add it to SETTINGS in your subclass if you want to distinguish several types of validation.</Description>
<Type>%String</Type>
</Property>

<Parameter name="SETTINGS">
<Default><![CDATA[TargetConfigName:Basic:selector?multiSelect=0&context={Ens.ContextSearch/ProductionItems?targets=1&productionName=@productionId},PersistInProcData:Additional,KeepCSPPartition:Additional,CSPNoCharSetConvert:Additional,OneWay]]></Default>
</Parameter>

<Property name="OneWay">
<Description>
No response stream expected</Description>
<Type>%Boolean</Type>
</Property>

<Property name="%ExcludeResponseHttpHeaders">
<Description>
Comma separated list of response HTTP Headers from the external systems not to be 
passed back to the requesting Ensemble service.
The values are case-insensitive.
The appropriate Content-Length will be used and ought not be specified here.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN"/>
</Property>

<Parameter name="REMOVECSPATTRIBS">
<Description>
Set this to remove CSP inserted stream attributes (e.g. FileName, MimeSection)
Need these removed for generic.</Description>
<Default>1</Default>
</Parameter>

<Property name="PersistInProcData">
<Description><![CDATA[
Persist data to operations with invocation InProc that are called Synchronously.<br/>
The default is On. <br/>
This setting is only used if calling an operation with invocation InProc. <br/>
If this setting is off then no message headers will be created and message bodies will not be saved.<br/>
If this setting is off there will be no trace in the message viewer. <br/>
If this setting is off there will be no retry attempts by the operation - only one attempt will be made. <br/> ]]></Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="KeepCSPPartition">
<Description><![CDATA[
When calling the service through the CSP WebServer (Standard Request) and the target of the
service is a business operation invoked InProc then it is possible to attempt to maintain connection
to the external system defined in the operation in between messages by setting this to true.<br>
There is still the possibility that the external system will close the connection.<br/>
The default is On. <br/>]]></Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Method name="OnInit">
<Description>
This user callback method is called via initConfig() from %OnNew() or in the case of SOAP Services from OnPreSOAP()</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If ""=..TargetConfigName { $$$LOGWARNING("No Target Config Name configured") }
	Set $$$EnsInProcPersist=..PersistInProcData
	Quit ##super()
]]></Implementation>
</Method>

<Method name="OnProcessInput">
<FormalSpec><![CDATA[pRequestBody:%CharacterStream,pResponseBody:%CharacterStream,&pAction:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 #Dim tResponse As GenericMessage

	If $$$IsdefObject(%request) {
		#; If called from CSP, disable session and check if cached InProc object
		Set %session.UseSessionCookie=0
		Set %response.OutputSessionToken=0
		If ..KeepCSPPartition,$D($$$EnsLocalCache($$$EnsJobLocal("ConfigName"))) {
			Merge $$$EnsJobLocal("CachedObject")=$$$EnsLocalCache($$$EnsJobLocal("ConfigName"),"CachedObject")
			Merge $$$EnsJobLocal("CachedChecksum")=$$$EnsLocalCache($$$EnsJobLocal("ConfigName"),"CachedChecksum")
			Kill $$$EnsLocalCache($$$EnsJobLocal("ConfigName"))
		}
	}
	Set pResponseBody=$$$NULLOREF
	Set tRequest=##class(EnsLib.HTTP.GenericMessage).%New(pRequestBody,,pRequestBody)
	Do pRequestBody.SetAttributeList("") ; prevent double output; we just copied them to tRequest.HTTPHeaders
	Set tSC=..resolveAndIndex(tRequest)  Quit:$$$ISERR(tSC) tSC

	Quit:..OneWay ..SendRequestAsync(..TargetConfigName,tRequest)

	Set tSC=..SendRequestSync(..TargetConfigName,tRequest,.tResponse)  Quit:$$$ISERR(tSC) tSC
	Set pResponseBody=tResponse.Stream

	If $$$IsdefObject(%request) {
		#; Since a CSP job can become multiple business services need to preserve even if current BS does not specify it.
		If ($D($$$EnsLocalCacheRoot)||(..KeepCSPPartition&&$D($$$EnsJobLocal("CachedObject")))) {
			Set %response.AvoidPartitionCleanup=1
		}
	}

	#; Pass along Status line and selected response HTTP headers
	Set tSL="",tDoNotPassThrough=","_$ZCVT(..%ExcludeResponseHttpHeaders,"L")_",content-length,"
	Set tHasAttrs=pResponseBody.%Extends("%Library.AbstractStream")
	Set tHeaderKey="" For { Set tHeaderKey=tResponse.HTTPHeaders.Next(tHeaderKey)  Quit:""=tHeaderKey  Set tHeaderLwr=$ZCVT(tHeaderKey,"L")
		If tHasAttrs { Set:tDoNotPassThrough'[(","_tHeaderLwr_",") pResponseBody.Attributes(tHeaderKey)=tResponse.HTTPHeaders.GetAt(tHeaderKey) } ; no need to handle multiple on one line
		Else {         Set:tDoNotPassThrough'[(","_tHeaderLwr_",") pResponseBody(tHeaderKey)=tResponse.HTTPHeaders.GetAt(tHeaderKey) }
		Set:tHeaderLwr="statusline" tSL=tResponse.HTTPHeaders.GetAt(tHeaderKey)
	}
	If tHasAttrs { Set:tDoNotPassThrough'["statusline"&&$L(tSL) pResponseBody.Attributes("StatusLine")=tSL }
	Else {         Set:tDoNotPassThrough'["statusline"&&$L(tSL) pResponseBody("StatusLine")=tSL }
	Quit tSC
]]></Implementation>
</Method>

<Method name="OnValidate">
<Description>
Override this method to implement your own custom method for validating an incoming Document
Return non-zero to prevent default validation of the message (if any);</Description>
<FormalSpec>pMsg:EnsLib.HTTP.GenericMessage,pValSpec:%String,*pStatus:%Status</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit 0
]]></Implementation>
</Method>

<Method name="OnResolveDocType">
<Description>
Override this method to implement your own custom method for resolving the DocType of an incoming Message
Returning nonzero means you are overriding the framework's standard DocType resolution.</Description>
<FormalSpec><![CDATA[pMsg:EnsLib.HTTP.GenericMessage,&pDocType:%String,&pHeaderDocType:%String]]></FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit 0
]]></Implementation>
</Method>

<Method name="resolveAndIndex">
<Description>
Accept only specified document names; resolve DocType and perform requested validation if any</Description>
<FormalSpec>pMsg:EnsLib.HTTP.GenericMessage</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC=$$$OK

	#; Do further validation if required
	If ""'=..Validation&&'..OnValidate(pMsg,..Validation,.tSC) {
		#; no default validation
	}
	Quit:$$$ISERR(tSC) tSC

	If ""'=..SearchTableClass {
		TRY {
			Set tObj=pMsg
			Set:$IsObject(tObj) tSCStore=$classmethod(..SearchTableClass,"IndexDoc",tObj)
			If $$$ISERR(tSCStore) $$$LOGWARNING("Failed to construct SearchTable entries for document "_tObj_"/"_tObj.%Id()_" using class '"_..SearchTableClass_"' "_$$$StatusDisplayString(tSCStore))
		} CATCH errobj { $$$LOGWARNING("Failed to invoke SearchTable method "_..SearchTableClass_".IndexDoc() for message "_tObj_"/"_tObj.%Id()_" with DocType='"_tObj.DocType_"' : "_errobj.AsSystemError()) }
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="resolveDocType">
<Description>
Return the DocType that this service will assign to this message's body document</Description>
<FormalSpec>pMsg:EnsLib.HTTP.GenericMessage,*pHeaderDocType:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	/// Subclass responsibility
	Set pHeaderDocType=""
	Quit ""
]]></Implementation>
</Method>

<Method name="OnAdapterHTTPResponse">
<Description>
Callback for allowing Service to override and control construction of the HTTP response if invoked via the SOAP Inbound Adapter
Split www-authenticate HTTP header and add proxy-support header if needed</Description>
<FormalSpec><![CDATA[&pStatus:%Status,&pHTTPResponseStatus:%String,&pBodyLen:%Integer,&pResponseBodyStream:%Stream.Object,&pMainResponseHeader:%String,&pHeaderExtra:%String]]></FormalSpec>
<Implementation><![CDATA[
	Set pos=$F($ZCVT(pHeaderExtra,"L"),"www-authenticate: ")
	If pos {
		Set auth=$E(pHeaderExtra,pos-$L("www-authenticate: "),pos-1)
		Set pos2=$F(pHeaderExtra,$C(13,10),pos)
		Set pos2=$S(pos2:pos2-3,1:$L(pHeaderExtra))
		Set val=$E(pHeaderExtra,pos,pos2), tCount=$L(val,",")
		For i = 1:1:tCount { Set iVal=$ZStrip($P(val,",",i),"<>W")  Continue:""=iVal
			If i=1 { Set newHdr=iVal_$C(13,10) }
			Else { Set newHdr=newHdr_auth_iVal_$C(13,10) }
		}
		Set $E(pHeaderExtra,pos,pos2) = $E(newHdr,1,*-2)
	}
	Set:($P(pMainResponseHeader,$C(13,10))["401") pHeaderExtra = pHeaderExtra_"Proxy-support: Session-Based-Authentication"_$C(13,10)
]]></Implementation>
</Method>

<Method name="OnTearDown">
<Description>
This user callback method is called from %OnClose()</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; Detect if webserver because Ensemble is done and the job may get re-used by the CSP server
	If ""'=..%OutsideCreated {
		If 1'=..%OutsideCreated {
			Kill $$$EnsLocalCache(..%ConfigName)
			If ..KeepCSPPartition {
				Merge $$$EnsLocalCache(..%ConfigName,"CachedObject")=$$$EnsJobLocal("CachedObject")
				Merge $$$EnsLocalCache(..%ConfigName,"CachedChecksum")=$$$EnsJobLocal("CachedChecksum")
			}
		}
	}
	Quit ##super()
]]></Implementation>
</Method>
</Class>


<Class name="GC.Cerner2AcuityADTMrg">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64495,41165.788648</TimeChanged>
<TimeCreated>64421,53595.11276</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A35' targetDocType='231.Cerner:ADT_A35' create='new' language='objectscript' >
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<if condition='source.{MSH:MessageType.triggerevent}= "A35"' >
<true>
<assign value='"A18"' property='target.{MSH:MessageType.triggerevent}' action='set' />
</true>
</if>
<assign value='source.{EVN}' property='target.{EVN}' action='set' />
<if condition='source.{EVN:EventTypeCode}= "A35"' >
<true>
<assign value='"A18"' property='target.{EVN:EventTypeCode}' action='set' />
</true>
</if>
<assign value='source.{PID}' property='target.{PID}' action='set' />
<assign value='source.{PD1}' property='target.{PD1}' action='set' />
<assign value='source.{MRG}' property='target.{MRG}' action='set' />
<assign value='source.{PV1}' property='target.{PV1}' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2AgilitiADT">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>66001,58892.016396</TimeChanged>
<TimeCreated>63949,42579.646118</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A01' targetDocType='231.Cerner:ADT_A01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
  // Last Updated 09/09/2021 Al Johnson
  // Moved to Prod 09/09/2021 Al Johnson
  // Create: 09/26/2018 Al Johnson
  // Description:
  //
  //    Check for swing bed - change unit - table T_Swingbed_All
  //
  //  9/9/2021 - GCSH Periop change to Periop SD-96525
  //  0/14/2021 - Change Name UHS to Agiliti
]]]]><![CDATA[></code>

<code>
<![CDATA[ 
    //  09/25/2018 - check location for swingbed
    //
	//  Read table T_Swingbed_All - unit^room^bed is key to table
	//  If found, replace unit number
	//  Check PV1-3 location and PV1-6 prior location
	]]]]><![CDATA[></code>

<assign value='""' property='wTableKey' action='set' />
<assign value='""' property='temproom' action='set' />
<assign value='""' property='tempbed' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.pointofcare}' property='tempunit' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.room}' property='temproom' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.bed}' property='tempbed' action='set' />
<assign value='tempunit_"^"_temproom_"^"_tempbed' property='wTableKey' action='set' />

<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_Swingbed_All",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<false>
<assign value='wtableresult' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</false>
</if>

<assign value='""' property='wTableKey' action='set' />
<assign value='""' property='temproom' action='set' />
<assign value='""' property='tempbed' action='set' />
<assign value='source.{PV1:PriorPatientLocation.pointofcare}' property='tempunit' action='set' />
<assign value='source.{PV1:PriorPatientLocation.room}' property='temproom' action='set' />
<assign value='source.{PV1:PriorPatientLocation.bed}' property='tempbed' action='set' />
<assign value='tempunit_"^"_temproom_"^"_tempbed' property='wTableKey' action='set' />

<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_Swingbed_All",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<false>
<assign value='wtableresult' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
</false>
</if>

<if condition='target.{PV1:AssignedPatientLocation.pointofcare} = "GCSH Periop"' >
<true>
<assign value='"Periop"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</true>
</if>

<if condition='target.{PV1:PriorPatientLocation.pointofcare} = "GCSH Periop"' >
<true>
<assign value='"Periop"' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
</true>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2CarefusionPFTOrm">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64835,61687.227092</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORM_O01' targetDocType='231.Cerner:ORM_O01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Updated 07/06/2018
	//  Last Updated in Prod: 07/06/2018 Al Johnson
	//  Create: 07/06/2018  Al Johnson 
	//  Description:  
	//	Store OBR:16 ordering doctor so result back can read and update message
	//   Store in table T_CarefusionPFT_OrderingProvider

]]]]><![CDATA[></code>

<code>
<![CDATA[ 
    //  07/06/2018 - table ordering provider
    //
	//  Read table T_CarefusionPFT_OrderingProvider - Cerner OrderNbr is key to table
	//  to delete specific entry - do ##class(Ens.Util.LookupTable).%RemoveValue(wTableName,wTableKey)
	//  add / update - do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,wTableKey,wTableData)
	//
	//  table entire field - id and name for result messages
	//   extract just id to check for change
	]]]]><![CDATA[></code>
	
<assign property='tempCernerOrder' value='source.{ORCgrp(1).ORC:2.1}' action='set' />
<assign property='tempORC12' value='source.{ORCgrp(1).ORC:12}' action='set' />
<assign property='tempOBR16' value='source.{ORCgrp(1).OBRgrp.OBR:16(1)}' action='set' />

<assign property='tempInORC12id' value='source.{ORCgrp(1).ORC:12.1}' action='set' />
<assign property='tempInOBR16id' value='source.{ORCgrp(1).OBRgrp.OBR:16(1).1}' action='set' />

<assign property='tempDateAdd' value='$ZDATE($NOW(),8)' action='set' />
<assign property='tempDateResult' value='""' action='set' />
<assign property='tempDateCancel' value='""' action='set' />
<if condition='(source.{ORCgrp(1).ORC:1}="CA")||(source.{ORCgrp(1).ORC:1}="DC")' >
<true>
<assign property='tempDateCancel' value='$ZDATE($NOW(),8)' action='set' />
</true>
</if>

<assign value='tempCernerOrder' property='wTableKey' action='set' />
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_CarefusionPFT_OrderingProvider",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<code>
<![CDATA[
    // no entry found - so add new entry
        set wTableData=(tempORC12_"|"_tempOBR16_"|"_tempDateAdd_"|"_tempDateResult_"|"_tempDateCancel_"|") 
        set wTableName="T_CarefusionPFT_OrderingProvider"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,wTableKey,wTableData)
	]]]]><![CDATA[></code>
</true>
<false>
<assign value='$PIECE(wtableresult,"|",1)' property='temptblORC12' action='set' />
<assign value='$PIECE(temptblORC12,"^",1)' property='temptblORC12id' action='set' />
<assign value='$PIECE(wtableresult,"|",2)' property='temptblOBR16' action='set' />
<assign value='$PIECE(temptblOBR16,"^",1)' property='temptblOBR16id' action='set' />
<assign value='$PIECE(wtableresult,"|",3)' property='temptblDateAdd' action='set' />
<assign value='$PIECE(wtableresult,"|",4)' property='temptblDateResult' action='set' />
<assign value='$PIECE(wtableresult,"|",5)' property='temptblDateCancel' action='set' />

<if condition='(source.{ORCgrp(1).ORC:1}="CA")||(source.{ORCgrp(1).ORC:1}="DC")' >
<true>
<code>
<![CDATA[
    // cancel or discontinue - update table with cancel date
        set wTableData=(tempORC12_"|"_tempOBR16_"|"_temptblDateAdd_"|"_temptblDateResult_"|"_tempDateCancel_"|") 
        set wTableName="T_CarefusionPFT_OrderingProvider"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,wTableKey,wTableData)	
	]]]]><![CDATA[></code>
</true>
<false>
<if condition='(tempInORC12id = temptblORC12id)&amp;(tempInOBR16id = temptblOBR16id)' >
<false>
<code>
<![CDATA[
    // ordering doc on table differs from order - update table with orm data - update date add
        set wTableData=(tempORC12_"|"_tempOBR16_"|"_tempDateAdd_"|"_temptblDateResult_"|"_temptblDateCancel_"|") 
        set wTableName="T_CarefusionPFT_OrderingProvider"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,wTableKey,wTableData)	
	]]]]><![CDATA[></code>
</false>
</if>
</false>
</if>
</false>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2KobleMnADT">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65253,53672.606451</TimeChanged>
<TimeCreated>63993,59397.54959</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A01' targetDocType='231.Cerner:ADT_A01' create='new' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Updated: 08/09/2019 Al Johnson
	//  Last Updated in Prod: 08/28/2019 Al Johnson
	//  Create: 08/09/2019  Al Johnson
	//
	//  Description:  New Interface - ADT to KobleMN HIE for PHS home health care
	//
	//  Remove Z segments
	//  Remove NK1 segments - until Gillette fixes / cleans up
	//  Remove multiple doctors in PD1-4, send npi
	//  Copy Fin into PV1-19
	//  Koble manual accepts ADT and ORU
	//  does not designate structure of each
	//  valid segments = AL1, DG1, EVN, MSH, NK1, NTE, OBR, OBX, ORC, PID, PR1, PV1 and PV2
	//
]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='source.{MSH:3.1}' property='target.{MSH:3.2}' action='set' />
<assign value='source.{MSH:4.1}' property='target.{MSH:4.2}' action='set' />
<assign value='source.{MSH:5.1}' property='target.{MSH:5.2}' action='set' />
<assign value='source.{MSH:6.1}' property='target.{MSH:6.2}' action='set' />
<assign value='source.{EVN}' property='target.{EVN}' action='set' />
<assign value='source.{PID}' property='target.{PID}' action='set' />
<assign value='source.{MSH:4.1}' property='target.{PID:3.4.2}' action='set' />
<assign value='"MR"' property='target.{PID:3.5}' action='set' />
<assign value='source.{NTE()}' property='target.{NTE()}' action='set' />
<assign value='source.{PV1}' property='target.{PV1}' action='set' />
<assign value='source.{PID:18}' property='target.{PV1:19}' action='set' />
<assign value='source.{MSH:4.1}' property='target.{PV1:19.4.2}' action='set' />
<assign value='source.{PV2}' property='target.{PV2}' action='set' />
<assign value='source.{AL1grp()}' property='target.{AL1grp()}' action='set' />
<foreach property='target.{AL1grp()}' key='k2' >
<assign value='""' property='target.{AL1grp(k2).ZAL}' action='remove' />
</foreach>
<assign value='source.{DG1()}' property='target.{DG1()}' action='set' />
<assign value='source.{PR1grp()}' property='target.{PR1grp()}' action='set' />
<assign value='source.{IN1grp()}' property='target.{IN1grp()}' action='set' />
<foreach property='target.{IN1grp()}' key='k1' >
<assign value='""' property='target.{IN1grp(k1).ZNI}' action='remove' />
<foreach property='target.{IN1grp(k1).IN3grp()}' key='k3' >
<assign value='""' property='target.{IN1grp(k1).IN3grp(k3).ZN3}' action='remove' />
</foreach>
</foreach>
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2MneasADT">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65735,55976.83353</TimeChanged>
<TimeCreated>63993,59397.54959</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A01' targetDocType='231.MNEAS:ADT_A01' create='new' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Updated: 12/15/2020 Al Johnson
	//  Last Updated in Prod: 12/22/2020 Al Johnson
	//  Create: 05/17/2019  Al Johnson
	//
	//  Description:  New Interface - ADT to State of Minnesota for Medicaid patients
	//  Send all segments per Mneas
	//
	//  Remove Z segments
	//  Remove NK1 segments - until Gillette fixes / cleans up
	//  Blank out GT1-2 - remove fhir id
	//  Remove multiple doctors in PD1-4, send npi
	//  Copy Fin into PV1-19
	//
	//  Created Custom Schema - 231.MNEAS added segment CON to A01 definition (4/24/2020) sd-43697 RFC SD-39265
	//
	//  Cerner Modobject mobj_mneas_out changed to send NPI in PD1 EMR-135 (cert), EMR-136 (prod)RFC SD-66825
]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='source.{EVN}' property='target.{EVN}' action='set' />
<assign value='source.{PID}' property='target.{PID}' action='set' />
<assign value='source.{NTE()}' property='target.{NTE()}' action='set' />
<assign value='source.{PD1}' property='target.{PD1}' action='set' />

<assign value='"1"' property='target.{CON:1}' action='set' />
<assign value='"001"' property='target.{CON:2}' action='set' />
<if condition='source.{MSH:14}="NO"' >
<true>
<assign value='"A"' property='target.{CON:11}' action='set' />
</true>
<false>
<if condition='source.{MSH:14}="YES"' >
<true>
<assign value='"R"' property='target.{CON:11}' action='set' />
</true>
</if>
</false>
</if>

<assign value='""' property='temppd1doc1' action='set' />
<assign value='""' property='temppd1doc2' action='set' />
<assign value='""' property='temppd1doc3' action='set' />
<assign value='""' property='temppd1doc4' action='set' />
<assign value='""' property='temppd1doc5' action='set' />
<assign value='""' property='temppd1doc6' action='set' />
<assign value='""' property='temppd1doc7' action='set' />
<foreach property='source.{PD1:4()}' key='k3' >
<if condition='(source.{PD1:4(k3).13}="National Provider Identifier")||(source.{PD1:4(k3).13}="NPI")' >
<true>
<assign value='source.{PD1:4(k3).1}' property='temppd1doc1' action='set' />
<assign value='source.{PD1:4(k3).2}' property='temppd1doc2' action='set' />
<assign value='source.{PD1:4(k3).3}' property='temppd1doc3' action='set' />
<assign value='source.{PD1:4(k3).4}' property='temppd1doc4' action='set' />
<assign value='source.{PD1:4(k3).5}' property='temppd1doc5' action='set' />
<assign value='source.{PD1:4(k3).6}' property='temppd1doc6' action='set' />
<assign value='source.{PD1:4(k3).7}' property='temppd1doc7' action='set' />
</true>
</if>
</foreach>
<assign value='(source.{PD1:4(*)})' property='PD1PCPcnt' action='set' />
<if condition='PD1PCPcnt &gt; 0' >
<true>
<assign value='""' property='target.{PD1:4}' action='set' />
<assign value='temppd1doc1' property='target.{PD1:4(1).1}' action='set' />
<assign value='temppd1doc2' property='target.{PD1:4(1).2}' action='set' />
<assign value='temppd1doc3' property='target.{PD1:4(1).3}' action='set' />
<assign value='temppd1doc4' property='target.{PD1:4(1).4}' action='set' />
<assign value='temppd1doc5' property='target.{PD1:4(1).5}' action='set' />
<assign value='temppd1doc6' property='target.{PD1:4(1).6}' action='set' />
<assign value='temppd1doc7' property='target.{PD1:4(1).7}' action='set' />
<assign value='"NPI"' property='target.{PD1:4(1).9}' action='set' />
<assign value='"NPI"' property='target.{PD1:4(1).13}' action='set' />
</true>
</if>

<assign value='source.{PV1}' property='target.{PV1}' action='set' />
<assign value='source.{PID:18}' property='target.{PV1:19}' action='set' />
<assign value='source.{PV2}' property='target.{PV2}' action='set' />
<assign value='source.{OBX()}' property='target.{OBX()}' action='set' />
<assign value='source.{AL1grp()}' property='target.{AL1grp()}' action='set' />
<assign value='source.{DG1()}' property='target.{DG1()}' action='set' />
<assign value='source.{DRG()}' property='target.{DRG()}' action='set' />
<assign value='source.{PR1grp()}' property='target.{PR1grp()}' action='set' />
<assign value='source.{GT1(1)}' property='target.{GT1(1)}' action='set' />
<code>
<![CDATA[ 
    //  Remove fhir id
    ]]]]><![CDATA[></code>
<if condition='target.{GT1(1):GuarantorNumber(1).ID}=""' >
<false>
<assign value='""' property='target.{GT1(1):GuarantorNumber(1).ID}' action='set' />
</false>
</if>
<code>
<![CDATA[ 
    //  Only send Minnesota Medicaid insurance IN1-2.1 = 2875642
    ]]]]><![CDATA[></code>
<code>
<![CDATA[ 
    //  Only send Minnesota Medicaid insurance IN1-2.1 = 2875642
    //  4/2/2020 Covid19 - send all insurances
    //
    //  <foreach property='source.{IN1grp()}' key='k1' >
    //  <if condition='source.{IN1grp(k1).IN1:2.1}="2875642"' >
    //  <true>
    //  <assign value='tmpidx+1' property='tmpidx' action='set' />
    //  <assign value='source.{IN1grp(k1).IN1}' property='target.{IN1grp(tmpidx).IN1}' action='set' />
    //  <assign value='source.{IN1grp(k1).IN2}' property='target.{IN1grp(tmpidx).IN2}' action='set' />
    //  <foreach property='source.{IN1grp(k1).IN3grp()}' key='k2' >
    //  <assign value='source.{IN1grp(k1).IN3grp(k2).IN3}' property='target.{IN1grp(tmpidx).IN3grp(k2).IN3}' action='set' />
    //  </foreach>
    //  </true>
    //  </if>
    //  </foreach>
    ]]]]><![CDATA[></code>
<assign value='"0"' property='tmpidx' action='set' />
<foreach property='source.{IN1grp()}' key='k1' >
<assign value='tmpidx+1' property='tmpidx' action='set' />
<assign value='source.{IN1grp(k1).IN1}' property='target.{IN1grp(tmpidx).IN1}' action='set' />
<assign value='source.{IN1grp(k1).IN2}' property='target.{IN1grp(tmpidx).IN2}' action='set' />
<foreach property='source.{IN1grp(k1).IN3grp()}' key='k2' >
<assign value='source.{IN1grp(k1).IN3grp(k2).IN3}' property='target.{IN1grp(tmpidx).IN3grp(k2).IN3}' action='set' />
</foreach>
</foreach>
<assign value='source.{ACC()}' property='target.{ACC()}' action='set' />
<assign value='source.{UB1}' property='target.{UB1}' action='set' />
<assign value='source.{UB2}' property='target.{UB2}' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2NowPowADT">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65351,51674.26236</TimeChanged>
<TimeCreated>63993,59397.54959</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A01' targetDocType='231.Cerner:ADT_A01' create='new' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Updated: 10/22/2019 Al Johnson
	//  Last Updated in Prod: 12/04/2019 Al Johnson
	//  Create: 10/22/2019  Al Johnson
	//
	//  Description:  New Interface - ADT to NowPow
	//
	//  Remove Z segments
	//  Remove NK1 segments - until Gillette fixes / cleans up
	//  Remove multiple doctors in PD1-4, send npi
	//  Remove ssn if in record
	//  Copy Fin into PV1-19
	//
	//  Send Primary Language in PID-15
	//
]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='source.{MSH:3.1}' property='target.{MSH:3.2}' action='set' />
<assign value='source.{MSH:4.1}' property='target.{MSH:4.2}' action='set' />
<assign value='source.{MSH:5.1}' property='target.{MSH:5.2}' action='set' />
<assign value='source.{MSH:6.1}' property='target.{MSH:6.2}' action='set' />
<assign value='source.{EVN}' property='target.{EVN}' action='set' />
<assign value='source.{PID}' property='target.{PID}' action='set' />
<assign value='source.{MSH:4.1}' property='target.{PID:3.4.2}' action='set' />
<assign value='"MR"' property='target.{PID:3.5}' action='set' />
<assign value='source.{NTE()}' property='target.{NTE()}' action='set' />
<assign value='source.{PV1}' property='target.{PV1}' action='set' />
<assign value='source.{PID:18}' property='target.{PV1:19}' action='set' />
<assign value='""' property='target.{PID:19}' action='set' />
<assign value='source.{MSH:4.1}' property='target.{PV1:19.4.2}' action='set' />
<assign value='source.{PV2}' property='target.{PV2}' action='set' />
<assign value='source.{AL1grp()}' property='target.{AL1grp()}' action='set' />
<foreach property='target.{AL1grp()}' key='k2' >
<assign value='""' property='target.{AL1grp(k2).ZAL}' action='remove' />
</foreach>
<assign value='source.{DG1()}' property='target.{DG1()}' action='set' />
<assign value='source.{PR1grp()}' property='target.{PR1grp()}' action='set' />
<assign value='source.{IN1grp()}' property='target.{IN1grp()}' action='set' />
<foreach property='target.{IN1grp()}' key='k1' >
<assign value='""' property='target.{IN1grp(k1).ZNI}' action='remove' />
<foreach property='target.{IN1grp(k1).IN3grp()}' key='k3' >
<assign value='""' property='target.{IN1grp(k1).IN3grp(k3).ZN3}' action='remove' />
</foreach>
</foreach>
<assign value='""' property='tmplang' action='set' />
<foreach property='source.{OBX()}' key='k4' >
<if condition='source.{OBX(k4):3}="PREFERRED_LA"' >
<true>
<assign value='source.{OBX(k4):5(1)}' property='tmplang' action='set' />
</true>
</if>
</foreach>
<if condition='tmplang=""' >
<false>
<assign value='tmplang' property='target.{PID:15}' action='set' />
</false>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2NowPowMRG">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65351,51718.16081</TimeChanged>
<TimeCreated>63993,59397.54959</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A34' targetDocType='231.Cerner:ADT_A34' create='new' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Updated: 11/11/2019 Al Johnson
	//  Last Updated in Prod: 12/04/2019 Al Johnson
	//  Create: 11/11/2019  Al Johnson
	//
	//  Description:  New Interface - ADT Merge to NowPow
	//   NowPow does not process merges but will report out on their side A34 patient merges
	//
]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='source.{MSH:3.1}' property='target.{MSH:3.2}' action='set' />
<assign value='source.{MSH:4.1}' property='target.{MSH:4.2}' action='set' />
<assign value='source.{MSH:5.1}' property='target.{MSH:5.2}' action='set' />
<assign value='source.{MSH:6.1}' property='target.{MSH:6.2}' action='set' />
<assign value='source.{EVN}' property='target.{EVN}' action='set' />
<assign value='source.{PID}' property='target.{PID}' action='set' />
<assign value='source.{MSH:4.1}' property='target.{PID:3.4.2}' action='set' />
<assign value='"MR"' property='target.{PID:3.5}' action='set' />

<assign value='source.{MRG}' property='target.{MRG}' action='set' />
<assign value='source.{MRG:1.1}' property='target.{MRG:1}' action='set' />
<assign value='source.{MSH:4.1}' property='target.{MRG:1.4.2}' action='set' />
<assign value='"MR"' property='target.{MRG:1.5}' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2NuanceDaxADT">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>66081,40575.501649</TimeChanged>
<TimeCreated>63993,59397.54959</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A01' targetDocType='231.Cerner:ADT_A01' create='new' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Updated: 11/19/2021 Al Johnson
	//  Last Updated in Prod: 12/03/2021 Al Johnson
	//  Create: 11/19/2021  Al Johnson
	//
	//  Description:  New Interface - ADT and SIU to NuanceDax
	//   Used for doctors to dictate
	//  New Interface RFC SD-107657
]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='source.{PID}' property='target.{PID}' action='set' />
<assign value='"MRN"' property='target.{PID:3.5}' action='set' />
<assign value='""' property='target.{PID:19}' action='set' />
<assign value='source.{EVN}' property='target.{EVN}' action='set' />
<assign value='source.{PV1}' property='target.{PV1}' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2NuanceDaxADTA28A31">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>66085,42805.893134</TimeChanged>
<TimeCreated>63993,59397.54959</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A31' targetDocType='231.Cerner:ADT_A31' create='new' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Updated: 11/19/2021 Al Johnson
	//  Last Updated in Prod: 12/03/2021 Al Johnson
	//  Create: 11/19/2021  Al Johnson
	//
	//  Description:  New Interface - ADT and SIU to NuanceDax
	//   Used for doctors to dictate
	//  New Interface RFC SD-107657
]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='source.{PID}' property='target.{PID}' action='set' />
<assign value='"MRN"' property='target.{PID:3.5}' action='set' />
<assign value='""' property='target.{PID:19}' action='set' />
<assign value='source.{EVN}' property='target.{EVN}' action='set' />
<assign value='source.{PV1}' property='target.{PV1}' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2NuanceDaxMRG">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>66081,40622.941717</TimeChanged>
<TimeCreated>63993,59397.54959</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A34' targetDocType='231.Cerner:ADT_A34' create='new' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Updated: 11/19/2021 Al Johnson
	//  Last Updated in Prod: 12/03/2021 Al Johnson
	//  Create: 11/19/2021  Al Johnson
	//
	//  Description:  New Interface - ADT and SIU to NuanceDax
	//   Used for doctors to dictate
	//  New Interface RFC SD-107657
]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='source.{EVN}' property='target.{EVN}' action='set' />
<assign value='source.{PID}' property='target.{PID}' action='set' />
<assign value='"MRN"' property='target.{PID:3.5}' action='set' />
<assign value='""' property='target.{PID:19}' action='set' />
<assign value='source.{MRG}' property='target.{MRG}' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2NuanceDaxSIU">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>66081,40667.389717</TimeChanged>
<TimeCreated>63993,59397.54959</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:SIU_S12' targetDocType='231.Cerner:SIU_S12' create='new' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Updated: 11/19/2021 Al Johnson
	//  Last Updated in Prod: 12/03/2021 Al Johnson
	//  Create: 11/19/2021  Al Johnson
	//
	//  Description:  New Interface - ADT and SIU to NuanceDax
	//   Used for doctors to dictate
	//
	//  Send MSH, PID, SCH, PV1 and RGSgrp RGS, AIS, AIG, AIL, AIP
	//  New Interface RFC SD-107657
]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />

<assign value='source.{PIDgrp(1).PID}' property='target.{PIDgrp(1).PID}' action='set' />
<assign value='"MRN"' property='target.{PIDgrp(1).PID:3.5}' action='set' />
<assign value='""' property='target.{PIDgrp(1).PID:19}' action='set' />

<assign value='source.{PIDgrp(1).PV1}' property='target.{PIDgrp(1).PV1}' action='set' />

<code>
<![CDATA[ 
    // AIP:3.1 send npi
    // Remove decimal points on siu schedule id
]]]]><![CDATA[></code>
<assign value='source.{SCH}' property='target.{SCH}' action='set' />

<assign value='source.{SCH:7.1}' property='target.{SCH:8}' action='set' />

<assign value='$PIECE(source.{SCH:1.1},".",1)' property='holdschid' action='set' />
<assign value='holdschid' property='target.{SCH:1}' action='set' />
<assign value='holdschid' property='target.{PIDgrp(1).PV1:19}' action='set' />

<if condition='target.{PIDgrp(1).PV1:44}=""' >
<true>
<assign value='source.{SCH:11.4}' property='target.{PIDgrp(1).PV1:44}' action='set' />
</true>
</if>

<assign value='source.{RGSgrp(1).RGS}' property='target.{RGSgrp(1).RGS}' action='set' />

<foreach property='source.{RGSgrp(1).AISgrp()}' key='k1' >
<assign value='source.{RGSgrp(1).AISgrp(k1).AIS}' property='target.{RGSgrp(1).AISgrp(k1).AIS}' action='set' />
</foreach>

<foreach property='source.{RGSgrp(1).AIGgrp()}' key='k2' >
<assign value='source.{RGSgrp(1).AIGgrp(k2).AIG}' property='target.{RGSgrp(1).AIGgrp(k2).AIG}' action='set' />
</foreach>

<foreach property='source.{RGSgrp(1).AILgrp()}' key='k3' >
<assign value='source.{RGSgrp(1).AILgrp(k3).AIL}' property='target.{RGSgrp(1).AILgrp(k3).AIL}' action='set' />
</foreach>

<foreach property='source.{RGSgrp(1).AIPgrp()}' key='k4' >
<assign value='source.{RGSgrp(1).AIPgrp(k4).AIP:1}' property='target.{RGSgrp(1).AIPgrp(k4).AIP:1}' action='set' />
<assign value='source.{RGSgrp(1).AIPgrp(k4).AIP:2}' property='target.{RGSgrp(1).AIPgrp(k4).AIP:2}' action='set' />
<assign value='source.{RGSgrp(1).AIPgrp(k4).AIP:4}' property='target.{RGSgrp(1).AIPgrp(k4).AIP:4}' action='set' />
<assign value='source.{RGSgrp(1).AIPgrp(k4).AIP:5}' property='target.{RGSgrp(1).AIPgrp(k4).AIP:5}' action='set' />
<assign value='source.{RGSgrp(1).AIPgrp(k4).AIP:6}' property='target.{RGSgrp(1).AIPgrp(k4).AIP:6}' action='set' />
<assign value='source.{RGSgrp(1).AIPgrp(k4).AIP:7}' property='target.{RGSgrp(1).AIPgrp(k4).AIP:7}' action='set' />
<assign value='source.{RGSgrp(1).AIPgrp(k4).AIP:8}' property='target.{RGSgrp(1).AIPgrp(k4).AIP:8}' action='set' />
<assign value='source.{RGSgrp(1).AIPgrp(k4).AIP:9}' property='target.{RGSgrp(1).AIPgrp(k4).AIP:9}' action='set' />
<assign value='source.{RGSgrp(1).AIPgrp(k4).AIP:10}' property='target.{RGSgrp(1).AIPgrp(k4).AIP:10}' action='set' />
<assign value='source.{RGSgrp(1).AIPgrp(k4).AIP:11}' property='target.{RGSgrp(1).AIPgrp(k4).AIP:11}' action='set' />
<assign value='source.{RGSgrp(1).AIPgrp(k4).AIP:12}' property='target.{RGSgrp(1).AIPgrp(k4).AIP:12}' action='set' />
<assign value='""' property='tmpnpi' action='set' />
<assign value='""' property='tmpdoc' action='set' />

<foreach property='source.{RGSgrp(1).AIPgrp(k4).AIP:3()}' key='k5' >
<if condition='source.{RGSgrp(1).AIPgrp(k4).AIP:3(k5).9}="National Provider Identifier"' >
<true>
<assign value='source.{RGSgrp(1).AIPgrp(k4).AIP:3(k5)}' property='tmpnpi' action='set' />
</true>
</if>
<if condition='source.{RGSgrp(1).AIPgrp(k4).AIP:3(k5)}="Doctor Nbr"' >
<true>
<assign value='source.{RGSgrp(1).AIPgrp(k4).AIP:3(k5)}' property='tmpdoc' action='set' />
</true>
</if>
</foreach>
<if condition='tmpnpi=""' >
<false>
<assign value='tmpnpi' property='target.{RGSgrp(1).AIPgrp(k4).AIP:3}' action='set' />
</false>
<true>
<if condition='tmpdoc=""' >
<false>
<assign value='tmpdoc' property='target.{RGSgrp(1).AIPgrp(k4).AIP:3}' action='set' />
</false>
<true>
<assign value='source.{RGSgrp(1).AIPgrp(k4).AIP:3(1)}' property='target.{RGSgrp(1).AIPgrp(k4).AIP:3}' action='set' />
</true>
</if>
</true>
</if>
</foreach>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2NuanceSiu">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65359,33793.590936</TimeChanged>
<TimeCreated>64895,35228.526341</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:SIU_S12' targetDocType='231.Cerner:SIU_S12' create='copy' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Updated 11/01/2019 Al Johnson
	//  Last Moved to Prod: 12/18/2019 Al Johnson
	//  Create: 11/01/2019  Al Johnson 
	//  Description:  Check table for combined appt type
	//  If on table load table id value to AIP(1) and shift other AIP segments down
	//  Nuance Mobile App uses so multiple doctors can see appt schedule
]]]]><![CDATA[></code>

<code>
<![CDATA[
     // Read table T_Escription_Comb_Appt_Type for combined appt type
]]]]><![CDATA[></code>
<assign value='""' property='tempseq' action='set' />
<assign value='target.{SCH:7.1}' property='wTableAliasKey' action='set' />
<assign value='""' property='wtablealiasresult' action='set' />
<assign value='..Lookup("T_Escription_Comb_Appt_Type",wTableAliasKey)' property='wtablealiasresult' action='set' />
<if condition='wtablealiasresult=""' >
<false>
<foreach property='source.{RGSgrp(1).AIPgrp()}' key='k1' >
<assign value='source.{RGSgrp(1).AIPgrp(k1).AIP:1}' property='tempseq' action='set' />
<assign value='tempseq+1' property='tempseq' action='set' />
<assign value='source.{RGSgrp(1).AIPgrp(k1)}' property='target.{RGSgrp(1).AIPgrp(k1+1)}' action='set' />
<assign value='tempseq' property='target.{RGSgrp(1).AIPgrp(k1+1).AIP:1}' action='set' />
</foreach>
<assign value='"1"' property='target.{RGSgrp(1).AIPgrp(1).AIP:1}' action='set' />
<assign value='wtablealiasresult' property='target.{RGSgrp(1).AIPgrp(1).AIP:3}' action='set' />
</false>
</if> 

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2OberdADT">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>66855,38961.911815</TimeChanged>
<TimeCreated>63993,59397.54959</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A01' targetDocType='231.Cerner:ADT_A01' create='new' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Updated: 07/24/2020 Al Johnson
	//  Last Updated in Prod: 07/28/2020 Al Johnson
	//  Create: 11/11/2019  Al Johnson
	//
	//  Description:  New Interface - ADT to Oberd
	//   Used to direct surveys for specific doctors and schedules
	//
	//  Demographic Spec for ADT shows PID and IN1
	//  Events A28 add, A29 delete, A31 update, A18 merge
	//  Only send primary insurance - testing 11/13/19
	//
	//  Send Preferred Language in PID-15 01/30/2020
	//   Modobject in Cerner changed to send OBX with PREFERRED_LA  this value is aliased
	//   PID-15.1 is sent with aliased Primary Language
	//   PID-15.5 is unaliased (text) of Preferred Language
	//   SIU does not have OBX in Cerner schema so modobject sending text in PID-15.5
	//     Crosswalk to alias is Ensemble table T_Oberd_Language_Preferred
	//   ADT A34 Merge also does not have OBX segments - Oberd is taking language off each ADT and SIU
	//
	//  Send Phone Email Text?: in PID-20 3/10/2020
	//   Value is sent in OBX = PHON_EMAI_TX
	//
	//  On Cerner upgrade, Cerner didnot convert multiple emails correctly.   7/24/2020 SD-49862 RFC SD-49907
	//  If multiples sent, need to take the first email in PID-11.
	//
]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='source.{MSH:3.1}' property='target.{MSH:3.2}' action='set' />
<assign value='source.{MSH:4.1}' property='target.{MSH:4.2}' action='set' />
<assign value='source.{MSH:5.1}' property='target.{MSH:5.2}' action='set' />
<assign value='source.{MSH:6.1}' property='target.{MSH:6.2}' action='set' />

<code>
<![CDATA[
    // Oberd MSH spec
    // A18 Merge
    // A28 Patient Add
    // A29 Patient Delete
    // A31 Patient Update
]]]]><![CDATA[></code>
<assign value='source.{MSH:9.2}' property='tmsh92' action='set' />
<if condition='(tmsh92="A01")||(tmsh92="A04")||(tmsh92="A05")||(tmsh92="A08")' >
<true>
<assign value='"A31"' property='target.{MSH:9.2}' action='set' />
</true>
</if>

<code>
<![CDATA[
    // Oberd PID spec
    // PID:2 patient id
    // PID:5 name
    // PID:7 date of birth
    // PID:8 gender
    // PID:11 address
    // PID:13.1 home phone
    // PID:13.4 email
    // PID:14.1 cell phone
    // IN1:4 insurance company
    // IN1:15 insurance plan type 
    // PID30.1 Patient Death Indicator
]]]]><![CDATA[></code>

<assign value='source.{PID:3}' property='target.{PID:2}' action='set' />
<assign value='source.{PID:3}' property='target.{PID:3}' action='set' />
<assign value='source.{PID:5}' property='target.{PID:5}' action='set' />
<assign value='source.{PID:7}' property='target.{PID:7}' action='set' />
<assign value='source.{PID:8}' property='target.{PID:8}' action='set' />
<assign value='source.{PID:10}' property='target.{PID:10}' action='set' />
<assign value='source.{PID:18}' property='target.{PID:18}' action='set' />
<assign value='source.{PID:22}' property='target.{PID:22}' action='set' />
<assign value='source.{PID:30}' property='target.{PID:30}' action='set' />
<assign value='""' property='target.{PID:19}' action='set' />

<assign value='""' property='tmpemail' action='set' />

<foreach property='source.{PID:11()}' key='k1' >
<if condition='source.{PID:11(k1).7}="E-mail"' >
<true>
<if condition='tmpemail=""' >
<true>
<assign value='source.{PID:11(k1).1}' property='tmpemail' action='set' />
</true>
</if>
</true>
<false>
<if condition='source.{PID:11(k1).7}="Home"' >
<true>
<assign value='source.{PID:11(k1)}' property='target.{PID:11(1)}' action='set' />
</true>
</if>
</false>
</if>
</foreach>

<assign value='tmpemail' property='target.{PID:13(1).4}' action='set' />

<foreach property='source.{PID:13()}' key='k2' >
<if condition='source.{PID:13(k2).2}="Home"' >
<true>
<assign value='source.{PID:13(k2).1}' property='target.{PID:13(1).1}' action='set' />
</true>
<false>
<if condition='source.{PID:13(k2).2}="CP"' >
<true>
<assign value='source.{PID:13(k2).1}' property='target.{PID:14(1).1}' action='set' />
</true>
</if>
</false>
</if>
</foreach>

<code>
<![CDATA[
    // Oberd testing 11/13/19 only send primary insurance
    // <foreach property='source.{IN1grp()}' key='k3' >
    // <assign value='source.{IN1grp(k3).IN1}' property='target.{IN1grp(k3).IN1}' action='set' />
    // </foreach>
]]]]><![CDATA[></code>
<assign value='source.{IN1grp(1).IN1}' property='target.{IN1grp(1).IN1}' action='set' />

<code>
<![CDATA[
    // Send Prefferd Language
    //  1. off OBX PREFERRED_LA
    //  2. Crosswalk PID-15.5 preferred text to alias
    //  3. send primary language PID-15.1
    // Send Phone Email Text?:
    //  1. off OBX PHON_EMAI_TX send in PID-20
]]]]><![CDATA[></code>

<assign value='""' property='tmplang' action='set' />
<assign value='""' property='tmpphnemltxt' action='set' />
<foreach property='source.{OBX()}' key='k4' >
<if condition='source.{OBX(k4):3}="PREFERRED_LA"' >
<true>
<assign value='source.{OBX(k4):5(1)}' property='tmplang' action='set' />
</true>
</if>
<if condition='source.{OBX(k4):3}="PHON_EMAI_TX"' >
<true>
<assign value='source.{OBX(k4):5(1)}' property='tmpphnemltxt' action='set' />
</true>
</if>
</foreach>

<assign value='tmpphnemltxt' property='target.{PID:20}' action='set' />

<if condition='tmplang=""' >
<true>
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='source.{PID:15.5}' property='wTableKey' action='set' />
<assign value='..Lookup("T_Oberd_Language_Preferred",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<assign value='source.{PID:15.1}' property='tmplang' action='set' />
</true>
<false>
<assign value='wtableresult' property='tmplang' action='set' />
</false>
</if>
</true>
</if>

<assign value='tmplang' property='target.{PID:15}' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2OberdADT1">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>66616,34945.493109</TimeChanged>
<TimeCreated>63993,59397.54959</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A01' targetDocType='231.Cerner:ADT_A01' create='new' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Updated: 07/24/2020 Al Johnson
	//  Last Updated in Prod: 07/28/2020 Al Johnson
	//  Create: 11/11/2019  Al Johnson
	//
	//  Description:  New Interface - ADT to Oberd
	//   Used to direct surveys for specific doctors and schedules
	//
	//  Demographic Spec for ADT shows PID and IN1
	//  Events A28 add, A29 delete, A31 update, A18 merge
	//  Only send primary insurance - testing 11/13/19
	//
	//  Send Preferred Language in PID-15 01/30/2020
	//   Modobject in Cerner changed to send OBX with PREFERRED_LA  this value is aliased
	//   PID-15.1 is sent with aliased Primary Language
	//   PID-15.5 is unaliased (text) of Preferred Language
	//   SIU does not have OBX in Cerner schema so modobject sending text in PID-15.5
	//     Crosswalk to alias is Ensemble table T_Oberd_Language_Preferred
	//   ADT A34 Merge also does not have OBX segments - Oberd is taking language off each ADT and SIU
	//
	//  Send Phone Email Text?: in PID-20 3/10/2020
	//   Value is sent in OBX = PHON_EMAI_TX
	//
	//  On Cerner upgrade, Cerner didnot convert multiple emails correctly.   7/24/2020 SD-49862 RFC SD-49907
	//  If multiples sent, need to take the first email in PID-11.
	//
]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='source.{MSH:3.1}' property='target.{MSH:3.2}' action='set' />
<assign value='source.{MSH:4.1}' property='target.{MSH:4.2}' action='set' />
<assign value='source.{MSH:5.1}' property='target.{MSH:5.2}' action='set' />
<assign value='source.{MSH:6.1}' property='target.{MSH:6.2}' action='set' />

<code>
<![CDATA[
    // Oberd MSH spec
    // A18 Merge
    // A28 Patient Add
    // A29 Patient Delete
    // A31 Patient Update
]]]]><![CDATA[></code>
<assign value='source.{MSH:9.2}' property='tmsh92' action='set' />
<if condition='(tmsh92="A01")||(tmsh92="A04")||(tmsh92="A05")||(tmsh92="A08")' >
<true>
<assign value='"A31"' property='target.{MSH:9.2}' action='set' />
</true>
</if>

<code>
<![CDATA[
    // Oberd PID spec
    // PID:2 patient id
    // PID:5 name
    // PID:7 date of birth
    // PID:8 gender
    // PID:11 address
    // PID:13.1 home phone
    // PID:13.4 email
    // PID:14.1 cell phone
    // IN1:4 insurance company
    // IN1:15 insurance plan type 
]]]]><![CDATA[></code>

<assign value='source.{PID:3}' property='target.{PID:2}' action='set' />
<assign value='source.{PID:3}' property='target.{PID:3}' action='set' />
<assign value='source.{PID:5}' property='target.{PID:5}' action='set' />
<assign value='source.{PID:7}' property='target.{PID:7}' action='set' />
<assign value='source.{PID:8}' property='target.{PID:8}' action='set' />
<assign value='source.{PID:18}' property='target.{PID:18}' action='set' />
<assign value='""' property='target.{PID:19}' action='set' />

<assign value='""' property='tmpemail' action='set' />

<foreach property='source.{PID:11()}' key='k1' >
<if condition='source.{PID:11(k1).7}="E-mail"' >
<true>
<if condition='tmpemail=""' >
<true>
<assign value='source.{PID:11(k1).1}' property='tmpemail' action='set' />
</true>
</if>
</true>
<false>
<if condition='source.{PID:11(k1).7}="Home"' >
<true>
<assign value='source.{PID:11(k1)}' property='target.{PID:11(1)}' action='set' />
</true>
</if>
</false>
</if>
</foreach>

<assign value='tmpemail' property='target.{PID:13(1).4}' action='set' />

<foreach property='source.{PID:13()}' key='k2' >
<if condition='source.{PID:13(k2).2}="Home"' >
<true>
<assign value='source.{PID:13(k2).1}' property='target.{PID:13(1).1}' action='set' />
</true>
<false>
<if condition='source.{PID:13(k2).2}="CP"' >
<true>
<assign value='source.{PID:13(k2).1}' property='target.{PID:14(1).1}' action='set' />
</true>
</if>
</false>
</if>
</foreach>

<code>
<![CDATA[
    // Oberd testing 11/13/19 only send primary insurance
    // <foreach property='source.{IN1grp()}' key='k3' >
    // <assign value='source.{IN1grp(k3).IN1}' property='target.{IN1grp(k3).IN1}' action='set' />
    // </foreach>
]]]]><![CDATA[></code>
<assign value='source.{IN1grp(1).IN1}' property='target.{IN1grp(1).IN1}' action='set' />

<code>
<![CDATA[
    // Send Prefferd Language
    //  1. off OBX PREFERRED_LA
    //  2. Crosswalk PID-15.5 preferred text to alias
    //  3. send primary language PID-15.1
    // Send Phone Email Text?:
    //  1. off OBX PHON_EMAI_TX send in PID-20
]]]]><![CDATA[></code>

<assign value='""' property='tmplang' action='set' />
<assign value='""' property='tmpphnemltxt' action='set' />
<foreach property='source.{OBX()}' key='k4' >
<if condition='source.{OBX(k4):3}="PREFERRED_LA"' >
<true>
<assign value='source.{OBX(k4):5(1)}' property='tmplang' action='set' />
</true>
</if>
<if condition='source.{OBX(k4):3}="PHON_EMAI_TX"' >
<true>
<assign value='source.{OBX(k4):5(1)}' property='tmpphnemltxt' action='set' />
</true>
</if>
</foreach>

<assign value='tmpphnemltxt' property='target.{PID:20}' action='set' />

<if condition='tmplang=""' >
<true>
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='source.{PID:15.5}' property='wTableKey' action='set' />
<assign value='..Lookup("T_Oberd_Language_Preferred",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<assign value='source.{PID:15.1}' property='tmplang' action='set' />
</true>
<false>
<assign value='wtableresult' property='tmplang' action='set' />
</false>
</if>
</true>
</if>

<assign value='tmplang' property='target.{PID:15}' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2OberdMRG">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65588,48097.827135</TimeChanged>
<TimeCreated>63993,59397.54959</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A34' targetDocType='231.Cerner:ADT_A34' create='new' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Updated: 07/24/2020 Al Johnson
	//  Last Updated in Prod: 07/28/2020 Al Johnson
	//  Create: 11/11/2019  Al Johnson
	//
	//  Description:  New Interface - ADT Merge to Oberd
	//   Used to direct surveys for specific doctors and schedules
	//
	//  Demographic Spec for ADT shows PID and IN1
	//  Events A28 add, A29 delete, A31 update, A18 merge
	//
	//  Send Preferred Language in PID-15 01/30/2020
	//   Modobject in Cerner changed to send OBX with PREFERRED_LA  this value is aliased
	//   PID-15.1 is sent with aliased Primary Language
	//   PID-15.5 is unaliased (text) of Preferred Language
	//   SIU does not have OBX in Cerner schema so modobject sending text in PID-15.5
	//     Crosswalk to alias is Ensemble table T_Oberd_Language_Preferred
	//   ADT A34 Merge also does not have OBX segments - Oberd is taking language off each ADT and SIU
	//
	//  On Cerner upgrade, Cerner didnot convert multiple emails correctly.   7/24/2020 SD-49862 RFC SD-49907
	//  If multiples sent, need to take the first email in PID-11.
	//
]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='source.{MSH:3.1}' property='target.{MSH:3.2}' action='set' />
<assign value='source.{MSH:4.1}' property='target.{MSH:4.2}' action='set' />
<assign value='source.{MSH:5.1}' property='target.{MSH:5.2}' action='set' />
<assign value='source.{MSH:6.1}' property='target.{MSH:6.2}' action='set' />
<code>
<![CDATA[ 
    // Oberd MSH spec
    // A18 Merge
    // A28 Patient Add
    // A29 Patient Delete
    // A31 Patient Update
]]]]><![CDATA[></code>
<assign value='"A18"' property='target.{MSH:9.2}' action='set' />

<assign value='source.{MRG}' property='target.{MRG}' action='set' />
<assign value='source.{MRG:1.1}' property='target.{MRG:1}' action='set' />

<code>
<![CDATA[ 
    // Oberd PID spec
    // PID:2 patient id
    // PID:5 name
    // PID:7 date of birth
    // PID:8 gender
    // PID:11 address
    // PID:13.1 home phone
    // PID:13.4 email
    // PID:14.1 cell phone
    // IN1:4 insurance company
    // IN1:15 insurance plan type 
]]]]><![CDATA[></code>
<assign value='source.{PID:3}' property='target.{PID:2}' action='set' />
<assign value='source.{PID:3}' property='target.{PID:3}' action='set' />
<assign value='source.{PID:5}' property='target.{PID:5}' action='set' />
<assign value='source.{PID:7}' property='target.{PID:7}' action='set' />
<assign value='source.{PID:8}' property='target.{PID:8}' action='set' />
<assign value='source.{PID:18}' property='target.{PID:18}' action='set' />
<assign value='""' property='target.{PID:19}' action='set' />

<assign value='""' property='tmpemail' action='set' />

<foreach property='source.{PID:11()}' key='k1' >
<if condition='source.{PID:11(k1).7}="E-mail"' >
<true>
<if condition='tmpemail=""' >
<true>
<assign value='source.{PID:11(k1).1}' property='tmpemail' action='set' />
</true>
</if>
</true>
<false>
<if condition='source.{PID:11(k1).7}="Home"' >
<true>
<assign value='source.{PID:11(k1)}' property='target.{PID:11(1)}' action='set' />
</true>
</if>
</false>
</if>
</foreach>
<foreach property='source.{PID:13()}' key='k2' >
<if condition='source.{PID:13(k2).2}="Home"' >
<true>
<assign value='source.{PID:13(k2).1}' property='target.{PID:13(1).1}' action='set' />
</true>
<false>
<if condition='source.{PID:13(k2).2}="CP"' >
<true>
<assign value='source.{PID:13(k2).1}' property='target.{PID:14(1).1}' action='set' />
</true>
</if>
</false>
</if>
</foreach>

<assign value='tmpemail' property='target.{PID:13(1).4}' action='set' />

<code>
<![CDATA[
    // Send Prefferd Language
    //  **  off OBX PREFERRED_LA  (No OBX for MRG in schema)
    //  2. Crosswalk PID-15.5 preferred text to alias
    //  3. send primary language PID-15.1
]]]]><![CDATA[></code>

<assign value='""' property='tmplang' action='set' />

<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='source.{PID:15.5}' property='wTableKey' action='set' />
<assign value='..Lookup("T_Oberd_Language_Preferred",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<assign value='source.{PID:15.1}' property='tmplang' action='set' />
</true>
<false>
<assign value='wtableresult' property='tmplang' action='set' />
</false>
</if>

<assign value='tmplang' property='target.{PID:15}' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2OberdSIU">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>66855,38775.517158</TimeChanged>
<TimeCreated>63993,59397.54959</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:SIU_S12' targetDocType='231.Cerner:SIU_S12' create='new' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Updated: 07/24/2020 Al Johnson
	//  Last Updated in Prod: 07/28/2020 Al Johnson
	//  Create: 11/11/2019  Al Johnson
	//
	//  Description:  New Interface - SIU to Oberd
	//   Used to direct surveys for specific doctors and schedules
	//
	//  Schedule Spec for SIU shows PID, SCH, PV1, AIL, AIP
	//  Events S12 new appt, S14 update and S15 cancel
	//
	//  Send reschedule as update
	//  Send S26 Noshow as S14 update; load "NO SHOW" in SCH-25.2
	//
	//  Appt Type Ortho Gait Lab - if no doctor add 60690^Georgiadis^Andrew^^^MD
	//   Handle above in GC.Cerner2OberdSIUGaitLab
	//  Remove decimal points on siu schedule id
	//
	//  Send Preferred Language in PID-15 01/30/2020
	//   Modobject in Cerner changed to send OBX with PREFERRED_LA  this value is aliased
	//   PID-15.1 is sent with aliased Primary Language
	//   PID-15.5 is unaliased (text) of Preferred Language
	//   SIU does not have OBX in Cerner schema so modobject sending text in PID-15.5
	//     Crosswalk to alias is Ensemble table T_Oberd_Language_Preferred
	//   ADT A34 Merge also does not have OBX segments - Oberd is taking language off each ADT and SIU
	//
	//  On Cerner upgrade, Cerner didnot convert multiple emails correctly.   7/24/2020 SD-49862 RFC SD-49907
	//  If multiples sent, need to take the first email in PID-11.
	//
]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='source.{MSH:3.1}' property='target.{MSH:3.2}' action='set' />
<assign value='source.{MSH:4.1}' property='target.{MSH:4.2}' action='set' />
<assign value='source.{MSH:5.1}' property='target.{MSH:5.2}' action='set' />
<assign value='source.{MSH:6.1}' property='target.{MSH:6.2}' action='set' />
<code>
<![CDATA[ 
    // Oberd MSH spec
    // S12 New Appt
    // S14 Update Appt
    // S15 Cancel Appt
    // S17 Appt Delete - Send S15
    // S26 No Show - Send S14
]]]]><![CDATA[></code>
<assign value='source.{MSH:9.2}' property='tmsh92' action='set' />
<if condition='(tmsh92="S13")||(tmsh92="S26")' >
<true>
<assign value='"S14"' property='target.{MSH:9.2}' action='set' />
</true>
<false>
<if condition='(tmsh92="S17")' >
<true>
<assign value='"S15"' property='target.{MSH:9.2}' action='set' />
</true>
</if>
</false>
</if>

<code>
<![CDATA[ 
    // Oberd PID spec
    // PID:2 patient id
    // PID:5 name
    // PID:7 date of birth
    // PID:8 gender
    // PID:11 address
    // PID:13.1 home phone
    // PID:13.4 email
    // PID:14.1 cell phone
    // PID:30.1 Patient Death Indicator
]]]]><![CDATA[></code>
<assign value='source.{PIDgrp(1).PID:3}' property='target.{PIDgrp(1).PID:2}' action='set' />
<assign value='source.{PIDgrp(1).PID:3}' property='target.{PIDgrp(1).PID:3}' action='set' />
<assign value='source.{PIDgrp(1).PID:5}' property='target.{PIDgrp(1).PID:5}' action='set' />
<assign value='source.{PIDgrp(1).PID:7}' property='target.{PIDgrp(1).PID:7}' action='set' />
<assign value='source.{PIDgrp(1).PID:8}' property='target.{PIDgrp(1).PID:8}' action='set' />
<assign value='source.{PIDgrp(1).PID:10}' property='target.{PIDgrp(1).PID:10}' action='set' />
<assign value='source.{PIDgrp(1).PID:18}' property='target.{PIDgrp(1).PID:18}' action='set' />
<assign value='source.{PIDgrp(1).PID:30}' property='target.{PIDgrp(1).PID:30}' action='set' />
<assign value='""' property='target.{PIDgrp(1).PID:19}' action='set' />
<assign value='source.{PIDgrp(1).PID:22}' property='target.{PIDgrp(1).PID:22}' action='set' />
<assign value='""' property='tmpemail' action='set' />
<assign value='""' property='tmphomephone' action='set' />

<foreach property='source.{PIDgrp(1).PID:11()}' key='k1' >
<if condition='source.{PIDgrp(1).PID:11(k1).7}="E-mail"' >
<true>
<if condition='tmpemail=""' >
<true>
<assign value='source.{PIDgrp(1).PID:11(k1).1}' property='tmpemail' action='set' />
</true>
</if>
</true>
<false>
<if condition='source.{PIDgrp(1).PID:11(k1).7}="Home"' >
<true>
<assign value='source.{PIDgrp(1).PID:11(k1)}' property='target.{PIDgrp(1).PID:11(1)}' action='set' />
</true>
</if>
</false>
</if>
</foreach>

<foreach property='source.{PIDgrp(1).PID:13()}' key='k2' >
<if condition='source.{PIDgrp(1).PID:13(k2).2}="Home"' >
<true>
<if condition='tmphomephone=""' >
<true>
<assign value='source.{PIDgrp(1).PID:13(k2).1}' property='tmphomephone' action='set' />
</true>
</if>
</true>
<false>
<if condition='source.{PIDgrp(1).PID:13(k2).2}="CP"' >
<true>
<assign value='source.{PIDgrp(1).PID:13(k2).1}' property='target.{PIDgrp(1).PID:14(1).1}' action='set' />
</true>
</if>
</false>
</if>
</foreach>

<assign value='tmpemail' property='target.{PIDgrp(1).PID:13(1).4}' action='set' />
<assign value='tmphomephone' property='target.{PIDgrp(1).PID:13(1).1}' action='set' />

<code>
<![CDATA[ 
    // Oberd SIU spec
    // SCH.1 / PV1.19 Appt ID
    // SCH:8 Appt Type
    // AIL:3.1 Appt Location
    // SCH:11.4 / PV1:44 Appt Date and Time
    // AIP:3.1 / PV1:7 Physician ID
    // --- CPT (Gillette will not send)
    // Remove decimal points on siu schedule id
]]]]><![CDATA[></code>
<assign value='source.{SCH}' property='target.{SCH}' action='set' />
<assign value='source.{PIDgrp(1).PV1}' property='target.{PIDgrp(1).PV1}' action='set' />

<assign value='source.{SCH:7.1}' property='target.{SCH:8}' action='set' />

<assign value='$PIECE(source.{SCH:1.1},".",1)' property='holdschid' action='set' />
<assign value='holdschid' property='target.{SCH:1}' action='set' />
<assign value='holdschid' property='target.{PIDgrp(1).PV1:19}' action='set' />

<assign value='source.{SCH:11.4}' property='target.{PIDgrp(1).PV1:44}' action='set' />
<assign value='source.{RGSgrp(1).AIPgrp(1).AIP:3(1)}' property='target.{PIDgrp(1).PV1:7}' action='set' />

<assign value='source.{RGSgrp(1).RGS}' property='target.{RGSgrp(1).RGS}' action='set' />

<if condition='(source.{SCH:7.1}="Surgery")||(source.{SCH:7.1}="Surgery Rapid")' >
<true>
<foreach property='source.{RGSgrp(1).AISgrp()}' key='k3' >
<assign value='source.{RGSgrp(1).AISgrp(k3).AIS}' property='target.{RGSgrp(1).AISgrp(k3).AIS}' action='set' />
</foreach>
</true>
</if>

<if condition='source.{MSH:9.2}="S26"' >
<true>
<assign value='"NO SHOW"' property='target.{SCH:25.2}' action='set' />
</true>
</if>

<assign value='source.{RGSgrp(1).AIPgrp(1).AIP}' property='target.{RGSgrp(1).AIPgrp(1).AIP}' action='set' />
<assign value='source.{RGSgrp(1).AILgrp(1).AIL}' property='target.{RGSgrp(1).AILgrp(1).AIL}' action='set' />

<code>
<![CDATA[
    // Send Prefferd Language
    //  1. off OBX PREFERRED_LA
    //  2. Crosswalk PID-15.5 preferred text to alias
    //  3. send primary language PID-15.1
]]]]><![CDATA[></code>

<assign value='""' property='tmplang' action='set' />
<foreach property='source.{PIDgrp(1).OBX()}' key='k4' >
<if condition='source.{PIDgrp(1).OBX(k4):3}="PREFERRED_LA"' >
<true>
<assign value='source.{PIDgrp(1).OBX(k4):5(1)}' property='tmplang' action='set' />
</true>
</if>
</foreach>

<if condition='tmplang=""' >
<true>
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='source.{PIDgrp(1).PID:15.5}' property='wTableKey' action='set' />
<assign value='..Lookup("T_Oberd_Language_Preferred",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<assign value='source.{PIDgrp(1).PID:15.1}' property='tmplang' action='set' />
</true>
<false>
<assign value='wtableresult' property='tmplang' action='set' />
</false>
</if>
</true>
</if>

<assign value='tmplang' property='target.{PIDgrp(1).PID:15}' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2OberdSIU1">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>66616,35031.90211</TimeChanged>
<TimeCreated>63993,59397.54959</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:SIU_S12' targetDocType='231.Cerner:SIU_S12' create='new' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Updated: 07/24/2020 Al Johnson
	//  Last Updated in Prod: 07/28/2020 Al Johnson
	//  Create: 11/11/2019  Al Johnson
	//
	//  Description:  New Interface - SIU to Oberd
	//   Used to direct surveys for specific doctors and schedules
	//
	//  Schedule Spec for SIU shows PID, SCH, PV1, AIL, AIP
	//  Events S12 new appt, S14 update and S15 cancel
	//
	//  Send reschedule as update
	//  Send S26 Noshow as S14 update; load "NO SHOW" in SCH-25.2
	//
	//  Appt Type Ortho Gait Lab - if no doctor add 60690^Georgiadis^Andrew^^^MD
	//   Handle above in GC.Cerner2OberdSIUGaitLab
	//  Remove decimal points on siu schedule id
	//
	//  Send Preferred Language in PID-15 01/30/2020
	//   Modobject in Cerner changed to send OBX with PREFERRED_LA  this value is aliased
	//   PID-15.1 is sent with aliased Primary Language
	//   PID-15.5 is unaliased (text) of Preferred Language
	//   SIU does not have OBX in Cerner schema so modobject sending text in PID-15.5
	//     Crosswalk to alias is Ensemble table T_Oberd_Language_Preferred
	//   ADT A34 Merge also does not have OBX segments - Oberd is taking language off each ADT and SIU
	//
	//  On Cerner upgrade, Cerner didnot convert multiple emails correctly.   7/24/2020 SD-49862 RFC SD-49907
	//  If multiples sent, need to take the first email in PID-11.
	//
]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='source.{MSH:3.1}' property='target.{MSH:3.2}' action='set' />
<assign value='source.{MSH:4.1}' property='target.{MSH:4.2}' action='set' />
<assign value='source.{MSH:5.1}' property='target.{MSH:5.2}' action='set' />
<assign value='source.{MSH:6.1}' property='target.{MSH:6.2}' action='set' />
<code>
<![CDATA[ 
    // Oberd MSH spec
    // S12 New Appt
    // S14 Update Appt
    // S15 Cancel Appt
    // S17 Appt Delete - Send S15
    // S26 No Show - Send S14
]]]]><![CDATA[></code>
<assign value='source.{MSH:9.2}' property='tmsh92' action='set' />
<if condition='(tmsh92="S13")||(tmsh92="S26")' >
<true>
<assign value='"S14"' property='target.{MSH:9.2}' action='set' />
</true>
<false>
<if condition='(tmsh92="S17")' >
<true>
<assign value='"S15"' property='target.{MSH:9.2}' action='set' />
</true>
</if>
</false>
</if>

<code>
<![CDATA[ 
    // Oberd PID spec
    // PID:2 patient id
    // PID:5 name
    // PID:7 date of birth
    // PID:8 gender
    // PID:11 address
    // PID:13.1 home phone
    // PID:13.4 email
    // PID:14.1 cell phone
]]]]><![CDATA[></code>
<assign value='source.{PIDgrp(1).PID:3}' property='target.{PIDgrp(1).PID:2}' action='set' />
<assign value='source.{PIDgrp(1).PID:3}' property='target.{PIDgrp(1).PID:3}' action='set' />
<assign value='source.{PIDgrp(1).PID:5}' property='target.{PIDgrp(1).PID:5}' action='set' />
<assign value='source.{PIDgrp(1).PID:7}' property='target.{PIDgrp(1).PID:7}' action='set' />
<assign value='source.{PIDgrp(1).PID:8}' property='target.{PIDgrp(1).PID:8}' action='set' />
<assign value='source.{PIDgrp(1).PID:18}' property='target.{PIDgrp(1).PID:18}' action='set' />
<assign value='""' property='target.{PIDgrp(1).PID:19}' action='set' />

<assign value='""' property='tmpemail' action='set' />
<assign value='""' property='tmphomephone' action='set' />

<foreach property='source.{PIDgrp(1).PID:11()}' key='k1' >
<if condition='source.{PIDgrp(1).PID:11(k1).7}="E-mail"' >
<true>
<if condition='tmpemail=""' >
<true>
<assign value='source.{PIDgrp(1).PID:11(k1).1}' property='tmpemail' action='set' />
</true>
</if>
</true>
<false>
<if condition='source.{PIDgrp(1).PID:11(k1).7}="Home"' >
<true>
<assign value='source.{PIDgrp(1).PID:11(k1)}' property='target.{PIDgrp(1).PID:11(1)}' action='set' />
</true>
</if>
</false>
</if>
</foreach>

<foreach property='source.{PIDgrp(1).PID:13()}' key='k2' >
<if condition='source.{PIDgrp(1).PID:13(k2).2}="Home"' >
<true>
<if condition='tmphomephone=""' >
<true>
<assign value='source.{PIDgrp(1).PID:13(k2).1}' property='tmphomephone' action='set' />
</true>
</if>
</true>
<false>
<if condition='source.{PIDgrp(1).PID:13(k2).2}="CP"' >
<true>
<assign value='source.{PIDgrp(1).PID:13(k2).1}' property='target.{PIDgrp(1).PID:14(1).1}' action='set' />
</true>
</if>
</false>
</if>
</foreach>

<assign value='tmpemail' property='target.{PIDgrp(1).PID:13(1).4}' action='set' />
<assign value='tmphomephone' property='target.{PIDgrp(1).PID:13(1).1}' action='set' />

<code>
<![CDATA[ 
    // Oberd SIU spec
    // SCH.1 / PV1.19 Appt ID
    // SCH:8 Appt Type
    // AIL:3.1 Appt Location
    // SCH:11.4 / PV1:44 Appt Date and Time
    // AIP:3.1 / PV1:7 Physician ID
    // --- CPT (Gillette will not send)
    // Remove decimal points on siu schedule id
]]]]><![CDATA[></code>
<assign value='source.{SCH}' property='target.{SCH}' action='set' />
<assign value='source.{PIDgrp(1).PV1}' property='target.{PIDgrp(1).PV1}' action='set' />

<assign value='source.{SCH:7.1}' property='target.{SCH:8}' action='set' />

<assign value='$PIECE(source.{SCH:1.1},".",1)' property='holdschid' action='set' />
<assign value='holdschid' property='target.{SCH:1}' action='set' />
<assign value='holdschid' property='target.{PIDgrp(1).PV1:19}' action='set' />

<assign value='source.{SCH:11.4}' property='target.{PIDgrp(1).PV1:44}' action='set' />
<assign value='source.{RGSgrp(1).AIPgrp(1).AIP:3(1)}' property='target.{PIDgrp(1).PV1:7}' action='set' />

<assign value='source.{RGSgrp(1).RGS}' property='target.{RGSgrp(1).RGS}' action='set' />

<if condition='(source.{SCH:7.1}="Surgery")||(source.{SCH:7.1}="Surgery Rapid")' >
<true>
<foreach property='source.{RGSgrp(1).AISgrp()}' key='k3' >
<assign value='source.{RGSgrp(1).AISgrp(k3).AIS}' property='target.{RGSgrp(1).AISgrp(k3).AIS}' action='set' />
</foreach>
</true>
</if>

<if condition='source.{MSH:9.2}="S26"' >
<true>
<assign value='"NO SHOW"' property='target.{SCH:25.2}' action='set' />
</true>
</if>

<assign value='source.{RGSgrp(1).AIPgrp(1).AIP}' property='target.{RGSgrp(1).AIPgrp(1).AIP}' action='set' />
<assign value='source.{RGSgrp(1).AILgrp(1).AIL}' property='target.{RGSgrp(1).AILgrp(1).AIL}' action='set' />

<code>
<![CDATA[
    // Send Prefferd Language
    //  1. off OBX PREFERRED_LA
    //  2. Crosswalk PID-15.5 preferred text to alias
    //  3. send primary language PID-15.1
]]]]><![CDATA[></code>

<assign value='""' property='tmplang' action='set' />
<foreach property='source.{PIDgrp(1).OBX()}' key='k4' >
<if condition='source.{PIDgrp(1).OBX(k4):3}="PREFERRED_LA"' >
<true>
<assign value='source.{PIDgrp(1).OBX(k4):5(1)}' property='tmplang' action='set' />
</true>
</if>
</foreach>

<if condition='tmplang=""' >
<true>
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='source.{PIDgrp(1).PID:15.5}' property='wTableKey' action='set' />
<assign value='..Lookup("T_Oberd_Language_Preferred",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<assign value='source.{PIDgrp(1).PID:15.1}' property='tmplang' action='set' />
</true>
<false>
<assign value='wtableresult' property='tmplang' action='set' />
</false>
</if>
</true>
</if>

<assign value='tmplang' property='target.{PIDgrp(1).PID:15}' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2OberdSIUResched">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65588,49086.58414</TimeChanged>
<TimeCreated>63993,59397.54959</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:SIU_S12' targetDocType='231.Cerner:SIU_S12' create='new' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Updated: 07/24/2020 Al Johnson
	//  Last Updated in Prod: 07/28/2020 Al Johnson
	//  Create: 11/11/2019  Al Johnson
	//
	//  Description:  New Interface - SIU to Oberd
	//   Used to direct surveys for specific doctors and schedules
	//
	//  Schedule Spec for SIU shows PID, SCH, PV1, AIL, AIP
	//  Events S12 new appt, S14 update and S15 cancel
	//
	//  Send reschedule as update
	//  Send S26 Noshow as S14 update; load "NO SHOW" in SCH-25.2
	//
	//  Reschedule for a valid appointment type - but not valid doctor
	//  Send S15 Cancel
	//  Remove decimal points on siu schedule id
	//
	//  Send Preferred Language in PID-15 02/06/2020
	//   Modobject in Cerner changed to send OBX with PREFERRED_LA  this value is aliased
	//   PID-15.1 is sent with aliased Primary Language
	//   PID-15.5 is unaliased (text) of Preferred Language
	//   SIU does not have OBX in Cerner schema so modobject sending text in PID-15.5
	//     Crosswalk to alias is Ensemble table T_Oberd_Language_Preferred
	//   ADT A34 Merge also does not have OBX segments - Oberd is taking language off each ADT and SIU
	//
	//  On Cerner upgrade, Cerner didnot convert multiple emails correctly.   7/24/2020 SD-49862 RFC SD-49907
	//  If multiples sent, need to take the first email in PID-11.
	//
]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='source.{MSH:3.1}' property='target.{MSH:3.2}' action='set' />
<assign value='source.{MSH:4.1}' property='target.{MSH:4.2}' action='set' />
<assign value='source.{MSH:5.1}' property='target.{MSH:5.2}' action='set' />
<assign value='source.{MSH:6.1}' property='target.{MSH:6.2}' action='set' />
<code>
<![CDATA[ 
    // Oberd MSH spec
    // S12 New Appt
    // S14 Update Appt
    // S15 Cancel Appt
    // S17 Appt Delete - Send S15
    // S26 No Show - Send S14
    //
    //  These are S13 reschedules but not valid doctor - so send cancel
    //
]]]]><![CDATA[></code>
<assign value='source.{MSH:9.2}' property='tmsh92' action='set' />
<if condition='(tmsh92="S13")' >
<true>
<assign value='"S15"' property='target.{MSH:9.2}' action='set' />
</true>
</if>

<code>
<![CDATA[ 
    // Oberd PID spec
    // PID:2 patient id
    // PID:5 name
    // PID:7 date of birth
    // PID:8 gender
    // PID:11 address
    // PID:13.1 home phone
    // PID:13.4 email
    // PID:14.1 cell phone
]]]]><![CDATA[></code>
<assign value='source.{PIDgrp(1).PID:3}' property='target.{PIDgrp(1).PID:2}' action='set' />
<assign value='source.{PIDgrp(1).PID:3}' property='target.{PIDgrp(1).PID:3}' action='set' />
<assign value='source.{PIDgrp(1).PID:5}' property='target.{PIDgrp(1).PID:5}' action='set' />
<assign value='source.{PIDgrp(1).PID:7}' property='target.{PIDgrp(1).PID:7}' action='set' />
<assign value='source.{PIDgrp(1).PID:8}' property='target.{PIDgrp(1).PID:8}' action='set' />
<assign value='source.{PIDgrp(1).PID:18}' property='target.{PIDgrp(1).PID:18}' action='set' />
<assign value='""' property='target.{PIDgrp(1).PID:19}' action='set' />

<assign value='""' property='tmpemail' action='set' />
<assign value='""' property='tmphomephone' action='set' />

<foreach property='source.{PIDgrp(1).PID:11()}' key='k1' >
<if condition='source.{PIDgrp(1).PID:11(k1).7}="E-mail"' >
<true>
<if condition='tmpemail=""' >
<true>
<assign value='source.{PIDgrp(1).PID:11(k1).1}' property='tmpemail' action='set' />
</true>
</if>
</true>
<false>
<if condition='source.{PIDgrp(1).PID:11(k1).7}="Home"' >
<true>
<assign value='source.{PIDgrp(1).PID:11(k1)}' property='target.{PIDgrp(1).PID:11(1)}' action='set' />
</true>
</if>
</false>
</if>
</foreach>
<foreach property='source.{PIDgrp(1).PID:13()}' key='k2' >
<if condition='source.{PIDgrp(1).PID:13(k2).2}="Home"' >
<true>
<if condition='tmphomephone=""' >
<true>
<assign value='source.{PIDgrp(1).PID:13(k2).1}' property='tmphomephone' action='set' />
</true>
</if>
</true>
<false>
<if condition='source.{PIDgrp(1).PID:13(k2).2}="CP"' >
<true>
<assign value='source.{PIDgrp(1).PID:13(k2).1}' property='target.{PIDgrp(1).PID:14(1).1}' action='set' />
</true>
</if>
</false>
</if>
</foreach>

<assign value='tmpemail' property='target.{PIDgrp(1).PID:13(1).4}' action='set' />
<assign value='tmphomephone' property='target.{PIDgrp(1).PID:13(1).1}' action='set' />

<code>
<![CDATA[
    // Send Prefferd Language
    //  1. off OBX PREFERRED_LA
    //  2. Crosswalk PID-15.5 preferred text to alias
    //  3. send primary language PID-15.1
]]]]><![CDATA[></code>

<assign value='""' property='tmplang' action='set' />
<foreach property='source.{PIDgrp(1).OBX()}' key='k4' >
<if condition='source.{PIDgrp(1).OBX(k4):3}="PREFERRED_LA"' >
<true>
<assign value='source.{PIDgrp(1).OBX(k4):5(1)}' property='tmplang' action='set' />
</true>
</if>
</foreach>

<if condition='tmplang=""' >
<true>
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='source.{PIDgrp(1).PID:15.5}' property='wTableKey' action='set' />
<assign value='..Lookup("T_Oberd_Language_Preferred",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<assign value='source.{PIDgrp(1).PID:15.1}' property='tmplang' action='set' />
</true>
<false>
<assign value='wtableresult' property='tmplang' action='set' />
</false>
</if>
</true>
</if>

<assign value='tmplang' property='target.{PIDgrp(1).PID:15}' action='set' />

<code>
<![CDATA[ 
    // Oberd SIU spec
    // SCH.1 / PV1.19 Appt ID
    // SCH:8 Appt Type
    // AIL:3.1 Appt Location
    // SCH:11.4 / PV1:44 Appt Date and Time
    // AIP:3.1 / PV1:7 Physician ID
    // --- CPT (Gillette will not send)
    // Remove decimal points on siu schedule id
]]]]><![CDATA[></code>
<assign value='source.{SCH}' property='target.{SCH}' action='set' />
<assign value='source.{PIDgrp(1).PV1}' property='target.{PIDgrp(1).PV1}' action='set' />

<assign value='source.{SCH:7.1}' property='target.{SCH:8}' action='set' />

<assign value='$PIECE(source.{SCH:1.1},".",1)' property='holdschid' action='set' />
<assign value='holdschid' property='target.{SCH:1}' action='set' />
<assign value='holdschid' property='target.{PIDgrp(1).PV1:19}' action='set' />

<assign value='source.{SCH:11.4}' property='target.{PIDgrp(1).PV1:44}' action='set' />
<assign value='source.{RGSgrp(1).AIPgrp(1).AIP:3(1)}' property='target.{PIDgrp(1).PV1:7}' action='set' />

<assign value='source.{RGSgrp(1).RGS}' property='target.{RGSgrp(1).RGS}' action='set' />

<if condition='(source.{SCH:7.1}="Surgery")||(source.{SCH:7.1}="Surgery Rapid")' >
<true>
<foreach property='source.{RGSgrp(1).AISgrp()}' key='k3' >
<assign value='source.{RGSgrp(1).AISgrp(k3).AIS}' property='target.{RGSgrp(1).AISgrp(k3).AIS}' action='set' />
</foreach>
</true>
</if>

<if condition='source.{MSH:9.2}="S26"' >
<true>
<assign value='"NO SHOW"' property='target.{SCH:25.2}' action='set' />
</true>
</if>

<assign value='source.{RGSgrp(1).AIPgrp(1).AIP}' property='target.{RGSgrp(1).AIPgrp(1).AIP}' action='set' />
<assign value='source.{RGSgrp(1).AILgrp(1).AIL}' property='target.{RGSgrp(1).AILgrp(1).AIL}' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2OberdSIUcheckAIP">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>66934,41859.695954</TimeChanged>
<TimeCreated>63993,59397.54959</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:SIU_S12' targetDocType='231.Cerner:SIU_S12' create='copy' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Updated: 02/25/2021 Al Johnson
	//  Last Updated in Prod: 03/03/2021 Al Johnson
	//  Create: 11/26/2019  Al Johnson
	//
	//  Description:  New Interface - SIU to Oberd
	//   Used to direct surveys for specific doctors and schedules
	//
	//  There are appointment groups which have multiple physicians
	//  Go thru all AIP segments checking for valid Oberd doc, if found set MSH-14 to YES
	//
	//  Appt Type Ortho Gait Lab - if no doctor add 60690^Georgiadis^Andrew^^^MD
	//   Handle above in GC.Cerner2OberdSIUGaitLab
	//  Remove decimal points on siu schedule id
	//
	//  Sending last valid doc (tabled) when checking AIP segments - not primary surgeon 8/21/2020 SD-52572 Story CNR-20608 RFC SD-55071
	//  Change logic if surgery appointment - must be main surgeon on procedure
	//  Non surgery will take first valid doctor (multple docs outpatient not flagged i.e. Spasticity Clinic)
	//
	//  Change logice on Gait Labs - check for three appointment types
	//     1. Gait and Motion Analysis - Complete
	//     2. Gait and Motion Analysis - Physical Exam and Video
	//     3. Gait and Motion Analysis - Video
	//  Update using dummy provider ID# 99, first name "Doctor", last name "Gait Lab" 12/07/2020 CNR-20874 RFC SD-66890
	//
	//  Change logice on Gait Labs - appointment types  1/18/2021 CE-1790 RFC SD-69944
	//     1. Remove - Gait and Motion Analysis - Video
	//     2. Leave - Gait and Motion Analysis - Physical Exam and Video
	//     3. Leave - Gait and Motion Analysis - Complete
	//     4. Add - Gait and Motion Analysis - MD
	//     5. Add - Gait and Motion Analysis - Spasticity
	//
	//  Add 10 appointment type for Gait Labs (spoke with Becky ok to change from specific types to all starting Gait and Motion Analysis)
	//    Jira 2/25/2021 CNR-21232 Cert CNR-21234 Prod RFC SD-74627
	//      Gait and Motion Analysis - CMD Split Screen Video Plus Physical Exam	 	 
    //      Gait and Motion Analysis - Complex Mvmt Disorder Video	 	 
    //      Gait and Motion Analysis - Direct SetUp Activity Monitoring	 	 
    //      Gait and Motion Analysis - EMG only	 	 
    //      Gait and Motion Analysis - Fitness Monitoring	 	 
    //      Gait and Motion Analysis - Motion Lab O2 only	 	 
    //      Gait and Motion Analysis - Plantar Pressure	 	 
    //      Gait and Motion Analysis - Split Screen Video Plus O2	 	 
    //      Gait and Motion Analysis - Upper Extremity	 	 
    //      Gait and Motion Analysis - Video
]]]]><![CDATA[></code>

<code>
<![CDATA[ 
    // initialize MSH-14 to "NO"
    // set to "YES" if AIP doc found or if Gait Lab
    // 39827^Healy^Michael^T^^MD^^^Doctor Nbr^Personnel^^^ORGANIZATION DOCTOR
]]]]><![CDATA[></code>
<assign value='"NO"' property='target.{MSH:14}' action='set' />

<assign value='"Doctor Nbr"' property='holddoctype' action='set' />
<assign value='""' property='holddocid' action='set' />
<assign value='""' property='holddocname1' action='set' />
<assign value='""' property='holddocname2' action='set' />
<assign value='""' property='holddocname3' action='set' />
<assign value='""' property='holddocname4' action='set' />
<assign value='""' property='holddocname5' action='set' />
<assign value='"External Id"' property='holddoctype' action='set' />
<assign value='""' property='holddocid' action='set' />
<assign value='""' property='holddocname1' action='set' />
<assign value='""' property='holddocname2' action='set' />
<assign value='""' property='holddocname3' action='set' />
<assign value='""' property='holddocname4' action='set' />
<assign value='""' property='holddocname5' action='set' />

<code>
<![CDATA[ 
    // Oberd can only accept one doc
    // Surgery appts only send main surgeon - if multiple procedures send 1st valid main surgeon
    // Not Surgery - send first valid doctor
]]]]><![CDATA[></code>
<foreach property='source.{RGSgrp(1).AIPgrp()}' key='k1' >
<if condition='holddocid=""' >
<true>
<foreach property='source.{RGSgrp(1).AIPgrp(k1).AIP:3()}' key='k2' >
<if condition='source.{RGSgrp(1).AIPgrp(k1).AIP:3(k2).9}="Doctor Nbr"' >
<true>
<if condition='(source.{SCH:7.1}="Surgery")||(source.{SCH:7.1}="Surgery Rapid")' >
<true>
<if condition='source.{RGSgrp(1).AIPgrp(k1).AIP:4.1}="Surgeon"' >
<true>
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='source.{RGSgrp(1).AIPgrp(k1).AIP:3(k2).1}' property='wTableKey' action='set' />
<assign value='..Lookup("T_Oberd_SIUdocs",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<false>
<code>
<![CDATA[ 
    // table entry found - change AIP in msg and update MSH
    //  only change AIP if first valid doc found
]]]]><![CDATA[></code>
<assign value='source.{RGSgrp(1).AIPgrp(k1).AIP:3(k2).1}' property='holddocid' action='set' />
<assign value='source.{RGSgrp(1).AIPgrp(k1).AIP:3(k2).2}' property='holddocname1' action='set' />
<assign value='source.{RGSgrp(1).AIPgrp(k1).AIP:3(k2).3}' property='holddocname2' action='set' />
<assign value='source.{RGSgrp(1).AIPgrp(k1).AIP:3(k2).4}' property='holddocname3' action='set' />
<assign value='source.{RGSgrp(1).AIPgrp(k1).AIP:3(k2).5}' property='holddocname4' action='set' />
<assign value='source.{RGSgrp(1).AIPgrp(k1).AIP:3(k2).6}' property='holddocname5' action='set' />
<assign value='"YES"' property='target.{MSH:14}' action='set' />
</false>
</if>
</true>
</if>
</true>
<false>
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='source.{RGSgrp(1).AIPgrp(k1).AIP:3(k2).1}' property='wTableKey' action='set' />
<assign value='..Lookup("T_Oberd_SIUdocs",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<false>
<code>
<![CDATA[ 
    // table entry found - change AIP in msg and update MSH
    //  only change AIP if first valid doc found
]]]]><![CDATA[></code>
<assign value='source.{RGSgrp(1).AIPgrp(k1).AIP:3(k2).1}' property='holddocid' action='set' />
<assign value='source.{RGSgrp(1).AIPgrp(k1).AIP:3(k2).2}' property='holddocname1' action='set' />
<assign value='source.{RGSgrp(1).AIPgrp(k1).AIP:3(k2).3}' property='holddocname2' action='set' />
<assign value='source.{RGSgrp(1).AIPgrp(k1).AIP:3(k2).4}' property='holddocname3' action='set' />
<assign value='source.{RGSgrp(1).AIPgrp(k1).AIP:3(k2).5}' property='holddocname4' action='set' />
<assign value='source.{RGSgrp(1).AIPgrp(k1).AIP:3(k2).6}' property='holddocname5' action='set' />
<assign value='"YES"' property='target.{MSH:14}' action='set' />
</false>
</if>
</false>
</if>
</true>
</if>
</foreach>
</true>
</if>
</foreach>

<foreach property='target.{RGSgrp(1).AIPgrp()}' key='k3' >
<assign value='' property='target.{RGSgrp(1).AIPgrp(k3)}' action='remove' />
</foreach>

<if condition='holddocid=""' >
<false>
<assign value='"1"' property='target.{RGSgrp(1).AIPgrp(1).AIP:1}' action='set' />
<assign value='holddocid' property='target.{RGSgrp(1).AIPgrp(1).AIP:3.1}' action='set' />
<assign value='holddocname1' property='target.{RGSgrp(1).AIPgrp(1).AIP:3.2}' action='set' />
<assign value='holddocname2' property='target.{RGSgrp(1).AIPgrp(1).AIP:3.3}' action='set' />
<assign value='holddocname3' property='target.{RGSgrp(1).AIPgrp(1).AIP:3.4}' action='set' />
<assign value='holddocname4' property='target.{RGSgrp(1).AIPgrp(1).AIP:3.5}' action='set' />
<assign value='holddocname5' property='target.{RGSgrp(1).AIPgrp(1).AIP:3.6}' action='set' />
</false>
</if>

<code>
<![CDATA[ 
    // SIU is for GaitLab and does not have valid doc
    // Add 60690^Georgiadis^Andrew^^^MD
    // <assign value='source.{RGSgrp(1).AIPgrp(1).AIP}' property='target.{RGSgrp(1).AIPgrp(1).AIP}' action='set' />
    // 12/7/2020 CNR-20874 send dummy doc on these 3 (do not send 60690)
    //   1. Gait and Motion Analysis - Complete
	//   2. Gait and Motion Analysis - Physical Exam and Video
	//   3. Gait and Motion Analysis - Video
	//  Update using dummy provider ID# 99, first name "Doctor", last name "Gait Lab" 12/07/2020 CNR-20874
	//
	//  2/25/2021 CNR-21232  (Jira has 10 new types, ok to use starts with per Becky)
	//  Update change from specific appointment value to starting with Gait and Motion Analysis
	//  orig <if condition='source.{SCH:7.1}="Gait and Motion Analysis - Complete"' > then next if on false condition
]]]]><![CDATA[></code>
<assign value='"99^Gait Lab^Doctor^^^MD"' property='tmpdocid' action='set' />
<assign value='source.{SCH:7.1}' property='tempapptreason' action='set' />
<if condition='(..StartsWith(tempapptreason,"Gait and Motion Analysis -"))' >
<true>
<assign value='tmpdocid' property='target.{PIDgrp(1).PV1:7}' action='set' />
<assign value='tmpdocid' property='target.{RGSgrp(1).AIPgrp(1).AIP:3(1)}' action='set' />
<assign value='"1"' property='target.{RGSgrp(1).AIPgrp(1).AIP:1}' action='set' />
<assign value='"YES"' property='target.{MSH:14}' action='set' />
</true>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2PacsA34toA40">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64447,50089.730289</TimeChanged>
<TimeCreated>61585,64668.522271</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A34' targetDocType='231.Cerner:ADT_A34' create='new' language='objectscript' >
<code>
<![CDATA[ 
	// Last Updated 06/01/2017 Al Johnson
  	// Last Moved to Prod  06/14/2017
  	// Created 06/01/2017 
 	// Description:
 	// Cerner sends A34 mrn merge, A35 fin merge and A44 mrn and fin merge
 	//  PACS only wants mrn merge.  Send to PACS as A40
]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='"A40"' property='target.{MSH:MessageType.triggerevent}' action='set' />
<assign value='source.{EVN}' property='target.{EVN}' action='set' />
<assign value='"A40"' property='target.{EVN:EventTypeCode}' action='set' />
<assign value='source.{PID}' property='target.{PID}' action='set' />
<assign value='source.{MRG}' property='target.{MRG}' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2PacsADT">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64918,51774.368288</TimeChanged>
<TimeCreated>63949,42579.646118</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A01' targetDocType='231.Cerner:ADT_A01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
  // Last Updated 09/25/2018 Al Johnson
  // Moved to Prod 09/27/2018 Al Johnson
  // Create: 09/25/2018 Al Johnson
  // Description:
  //    Check for swing bed - change unit - table T_Swingbed_All
]]]]><![CDATA[></code>

<code>
<![CDATA[ 
    //  09/25/2018 - check location for swingbed
    //
	//  Read table T_Swingbed_All - unit^room^bed is key to table
	//  If found, replace unit number
	//  Check PV1-3 location and PV1-6 prior location
	]]]]><![CDATA[></code>

<assign value='""' property='wTableKey' action='set' />
<assign value='""' property='temproom' action='set' />
<assign value='""' property='tempbed' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.pointofcare}' property='tempunit' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.room}' property='temproom' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.bed}' property='tempbed' action='set' />
<assign value='tempunit_"^"_temproom_"^"_tempbed' property='wTableKey' action='set' />

<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_Swingbed_All",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<false>
<assign value='wtableresult' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</false>
</if>

<assign value='""' property='wTableKey' action='set' />
<assign value='""' property='temproom' action='set' />
<assign value='""' property='tempbed' action='set' />
<assign value='source.{PV1:PriorPatientLocation.pointofcare}' property='tempunit' action='set' />
<assign value='source.{PV1:PriorPatientLocation.room}' property='temproom' action='set' />
<assign value='source.{PV1:PriorPatientLocation.bed}' property='tempbed' action='set' />
<assign value='tempunit_"^"_temproom_"^"_tempbed' property='wTableKey' action='set' />

<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_Swingbed_All",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<false>
<assign value='wtableresult' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
</false>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2PacsORM">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64918,51367.690947</TimeChanged>
<TimeCreated>63949,42579.646118</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORM_O01' targetDocType='231.Cerner:ORM_O01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
  // Last Updated 09/25/2018 Al Johnson
  // Moved to Prod 09/27/2018 Al Johnson
  // Create: 09/25/2018 Al Johnson
  // Description:
  //    Check for swing bed - change unit - table T_Swingbed_All
]]]]><![CDATA[></code>

<code>
<![CDATA[ 
    //  09/25/2018 - check location for swingbed
    //
	//  Read table T_Swingbed_All - unit^room^bed is key to table
	//  If found, replace unit number
	//  Check PV1-3 location and PV1-6 prior location
	]]]]><![CDATA[></code>
<assign value='""' property='wTableKey' action='set' />
<assign value='""' property='temproom' action='set' />
<assign value='""' property='tempbed' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.pointofcare}' property='tempunit' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.room}' property='temproom' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.bed}' property='tempbed' action='set' />
<assign value='tempunit_"^"_temproom_"^"_tempbed' property='wTableKey' action='set' />
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_Swingbed_All",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<false>
<assign value='wtableresult' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</false>
</if>
<assign value='""' property='wTableKey' action='set' />
<assign value='""' property='temproom' action='set' />
<assign value='""' property='tempbed' action='set' />
<assign value='source.{PV1:PriorPatientLocation.pointofcare}' property='tempunit' action='set' />
<assign value='source.{PV1:PriorPatientLocation.room}' property='temproom' action='set' />
<assign value='source.{PV1:PriorPatientLocation.bed}' property='tempbed' action='set' />
<assign value='tempunit_"^"_temproom_"^"_tempbed' property='wTableKey' action='set' />
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_Swingbed_All",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<false>
<assign value='wtableresult' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
</false>
</if>
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2PacsORU">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64918,51346.947333</TimeChanged>
<TimeCreated>63949,42579.646118</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORU_R01' targetDocType='231.Cerner:ORU_R01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
  // Last Updated 09/25/2018 Al Johnson
  // Moved to Prod 09/27/2018 Al Johnson
  // Create: 09/25/2018 Al Johnson
  // Description:
  //    Check for swing bed - change unit - table T_Swingbed_All
]]]]><![CDATA[></code>
<code>
<![CDATA[ 
    //  09/25/2018 - check location for swingbed
    //
	//  Read table T_Swingbed_All - unit^room^bed is key to table
	//  If found, replace unit number
	//  Check PV1-3 location and PV1-6 prior location
	]]]]><![CDATA[></code>
<assign value='""' property='wTableKey' action='set' />
<assign value='""' property='temproom' action='set' />
<assign value='""' property='tempbed' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.pointofcare}' property='tempunit' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.room}' property='temproom' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.bed}' property='tempbed' action='set' />
<assign value='tempunit_"^"_temproom_"^"_tempbed' property='wTableKey' action='set' />
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_Swingbed_All",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<false>
<assign value='wtableresult' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</false>
</if>
<assign value='""' property='wTableKey' action='set' />
<assign value='""' property='temproom' action='set' />
<assign value='""' property='tempbed' action='set' />
<assign value='source.{PV1:PriorPatientLocation.pointofcare}' property='tempunit' action='set' />
<assign value='source.{PV1:PriorPatientLocation.room}' property='temproom' action='set' />
<assign value='source.{PV1:PriorPatientLocation.bed}' property='tempbed' action='set' />
<assign value='tempunit_"^"_temproom_"^"_tempbed' property='wTableKey' action='set' />
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_Swingbed_All",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<false>
<assign value='wtableresult' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
</false>
</if>
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2PyxisADT">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64918,55297.264196</TimeChanged>
<TimeCreated>63949,42579.646118</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A01' targetDocType='231.Cerner:ADT_A01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
  // Last Updated 09/26/2018 Al Johnson
  // Moved to Prod 09/27/2018 Al Johnson
  // Create: 09/26/2018 Al Johnson
  // Description:
  //
  //    Check for swing bed - change unit - table T_Swingbed_All
]]]]><![CDATA[></code>

<code>
<![CDATA[ 
    //  09/25/2018 - check location for swingbed
    //
	//  Read table T_Swingbed_All - unit^room^bed is key to table
	//  If found, replace unit number
	//  Check PV1-3 location and PV1-6 prior location
	]]]]><![CDATA[></code>

<assign value='""' property='wTableKey' action='set' />
<assign value='""' property='temproom' action='set' />
<assign value='""' property='tempbed' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.pointofcare}' property='tempunit' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.room}' property='temproom' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.bed}' property='tempbed' action='set' />
<assign value='tempunit_"^"_temproom_"^"_tempbed' property='wTableKey' action='set' />

<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_Swingbed_All",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<false>
<assign value='wtableresult' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</false>
</if>

<assign value='""' property='wTableKey' action='set' />
<assign value='""' property='temproom' action='set' />
<assign value='""' property='tempbed' action='set' />
<assign value='source.{PV1:PriorPatientLocation.pointofcare}' property='tempunit' action='set' />
<assign value='source.{PV1:PriorPatientLocation.room}' property='temproom' action='set' />
<assign value='source.{PV1:PriorPatientLocation.bed}' property='tempbed' action='set' />
<assign value='tempunit_"^"_temproom_"^"_tempbed' property='wTableKey' action='set' />

<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_Swingbed_All",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<false>
<assign value='wtableresult' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
</false>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2PyxisMerge">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64551,42406.112611</TimeChanged>
<TimeCreated>64551,40873.403383</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A35' targetDocType='231.Cerner:ADT_A35' create='new' language='objectscript' >
<annotation>Cerner A35 to Pyxis A42</annotation>
<code>
<![CDATA[ // Adding Merge msg to ADT feed. A35 to A42_9.25.17 mmw
  ]]]]><![CDATA[></code>
<code>
<![CDATA[ //Move mrg.3.1 to mrg.5.1_9.25.17 mmw
  ]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<if condition='source.{MSH:MessageType.triggerevent}="A35"' >
<true>
<assign value='"A42"' property='target.{MSH:MessageType.triggerevent}' action='set' />
</true>
</if>
<assign value='source.{PID}' property='target.{PID}' action='set' />
<assign value='source.{PD1}' property='target.{PD1}' action='set' />
<assign value='source.{MRG}' property='target.{MRG}' action='set' />
<if condition='source.{MSH:MessageType.triggerevent}="A35"' >
<true>
<assign value='source.{MRG:PriorPatientAccountNumber}' property='target.{MRG:PriorVisitNumber}' action='set' />
<assign value='' property='target.{MRG:PriorPatientAccountNumber}' action='clear' />
</true>
</if>
<assign value='source.{PV1}' property='target.{PV1}' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2PyxisMrg2ADT03">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64551,43272.770208</TimeChanged>
<TimeCreated>64539,57284.952453</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A35' targetDocType='231.Cerner:ADT_A03' create='new' language='objectscript' >
<annotation>sending an A03 for the nonsurviving FIN when an A34/A42 is sent from Cerner to Pyxis</annotation>
<code>
<![CDATA[ //sending an A03 to discharge the non-surviving FIN in Pyxis when A35 is sent_9.25.17 mmw]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='"A03"' property='target.{MSH:MessageType.triggerevent}' action='set' />
<assign value='source.{PID}' property='target.{PID}' action='set' />
<assign value='source.{MRG:PriorPatientAccountNumber.ID}' property='target.{PID:PatientAccountNumber.ID}' action='set' />
<assign value='source.{PD1}' property='target.{PD1}' action='set' />
<assign value='source.{PV1}' property='target.{PV1}' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2PyxisRDE">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65598,37233.766334</TimeChanged>
<TimeCreated>63993,59397.54959</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>0</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>0</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cernerbase:RDE_O01' targetDocType='231.Cernerbase:RDE_O01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
    // Created: 08/19/2016 Al Johnson
	// Last Updated: 08/05/2020 Al Johnson
	// Moved to Prod: 08/05/2020
	//    Description:
	//     For IV solutions: (original thought - RXE-2.5 contains Premix) - changed to check routing of IV RXR-4.1
	//     Search RXC components.  If either additive or base is 0 id, remove RXC and update RXE-2.1 drug id and RXE-2.2 description from valid RXC
	//updated 1/10/2017 Mia/Added: copy 1st iteration RXE.2.1 & RXE.2.2 to RXC.2.1 & RXC.2.2 respectivly.
	//
	//     Check for swing bed - change unit - table T_Swingbed_All 9/26/2018
	//
	//  remove explicit times (ORC-7.2.2 and RXE-1.2.2) if PRN code 8/5/2020 SD-50837 RFC SD-51056
	//
]]]]><![CDATA[></code>
<assign value='""' property='holdupdatesw' action='set' />
<assign value='""' property='holdmedid' action='set' />
<assign value='""' property='holdmediddesc' action='set' />
<assign value='""' property='holddeletek2' action='set' />
<assign value='""' property='testRXR' action='set' />
<foreach property='target.{ORCgrp(1).RXR()}' key='k1' >
<if condition='target.{ORCgrp(1).RXR(k1):AdministrationMethod.identifier} = "IV"' >
<true>
<assign value='"IV"' property='testRXR' action='set' />
</true>
</if>
</foreach>
<if condition='testRXR="IV"' >
<true>
<foreach property='target.{ORCgrp(1).RXC()}' key='k2' >
<if condition='(target.{ORCgrp(1).RXC(k2):ComponentCode.Identifier}="0")||(target.{ORCgrp(1).RXC(k2):ComponentCode.Identifier}="")' >
<true>
<assign value='"X"' property='holdupdatesw' action='set' />
<assign value='k2' property='holddeletek2' action='set' />
</true>
<false>
<assign value='target.{ORCgrp(1).RXC(k2):ComponentCode.Identifier}' property='holdmedid' action='set' />
<assign value='target.{ORCgrp(1).RXC(k2):ComponentCode.Text}' property='holdmediddesc' action='set' />
</false>
</if>
</foreach>
</true>
</if>
<if condition='holdupdatesw="X"' >
<true>
<assign value='holdmedid' property='target.{ORCgrp(1).RXE:GiveCode.Identifier}' action='set' />
<assign value='holdmediddesc' property='target.{ORCgrp(1).RXE:GiveCode.text}' action='set' />
<assign value='' property='target.{ORCgrp(1).RXC(holddeletek2)}' action='remove' />
</true>
</if>
<if condition='source.{ORCgrp(1).RXC(1):ComponentCode.identifier}' >
<true>
<assign value='source.{ORCgrp(1).RXC(1):ComponentCode.identifier}' property='target.{ORCgrp(1).RXE:GiveCode.identifier}' action='set' />
</true>
</if>

<code>
<![CDATA[ 
    //  08/05/2020 - new PRN code
    //  remove explicit times (ORC-7.2.2 and RXE-1.2.2) if PRN code
	]]]]><![CDATA[></code>
	
	<if condition='source.{ORCgrp(1).ORC:7.7}="PRN"' >
	<true>
	<assign value='""' property='target.{ORCgrp(1).ORC:7.2.2}' action='set' />
	</true>
	</if>
	
	<if condition='source.{ORCgrp(1).RXE:1.7}="PRN"' >
	<true>
	<assign value='""' property='target.{ORCgrp(1).RXE:1.2.2}' action='set' />
	</true>
	</if>
	
<code>
<![CDATA[ 
    //  09/26/2018 - check location for swingbed
    //
	//  Read table T_Swingbed_All - unit^room^bed is key to table
	//  If found, replace unit number
	//  Check PV1-3 location and PV1-6 prior location
	]]]]><![CDATA[></code>

<assign value='""' property='wTableKey' action='set' />
<assign value='""' property='temproom' action='set' />
<assign value='""' property='tempbed' action='set' />
<assign value='source.{PIDgrp.PV1grp.PV1:AssignedPatientLocation.pointofcare}' property='tempunit' action='set' />
<assign value='source.{PIDgrp.PV1grp.PV1:AssignedPatientLocation.room}' property='temproom' action='set' />
<assign value='source.{PIDgrp.PV1grp.PV1:AssignedPatientLocation.bed}' property='tempbed' action='set' />
<assign value='tempunit_"^"_temproom_"^"_tempbed' property='wTableKey' action='set' />

<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_Swingbed_All",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<false>
<assign value='wtableresult' property='target.{PIDgrp.PV1grp.PV1:AssignedPatientLocation.pointofcare}' action='set' />
</false>
</if>

<assign value='""' property='wTableKey' action='set' />
<assign value='""' property='temproom' action='set' />
<assign value='""' property='tempbed' action='set' />
<assign value='source.{PIDgrp.PV1grp.PV1:PriorPatientLocation.pointofcare}' property='tempunit' action='set' />
<assign value='source.{PIDgrp.PV1grp.PV1:PriorPatientLocation.room}' property='temproom' action='set' />
<assign value='source.{PIDgrp.PV1grp.PV1:PriorPatientLocation.bed}' property='tempbed' action='set' />
<assign value='tempunit_"^"_temproom_"^"_tempbed' property='wTableKey' action='set' />

<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_Swingbed_All",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<false>
<assign value='wtableresult' property='target.{PIDgrp.PV1grp.PV1:PriorPatientLocation.pointofcare}' action='set' />
</false>
</if>
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2RLSolutionsADT">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65045,33527.042119</TimeChanged>
<TimeCreated>63993,59397.54959</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A01' targetDocType='231.Cerner:ADT_A01' create='new' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Updated: 12/13/2018 Al Johnson
	//  Last Updated in Prod: 02/12/2019 Al Johnson
	//  Create: 12/13/2018  Al Johnson
	//
	//  Description:  New Interface - ADT to RL Solutions for Occurence Reporting
	//
]]]]><![CDATA[></code>

<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='source.{EVN}' property='target.{EVN}' action='set' />
<assign value='source.{PID}' property='target.{PID}' action='set' />
<assign value='source.{PV1}' property='target.{PV1}' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2RLSolutionsMrg">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65045,33549.468358</TimeChanged>
<TimeCreated>63993,59949.21722</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A34' targetDocType='231.Cerner:ADT_A34' create='new' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Updated: 12/13/2018 Al Johnson
	//  Last Updated in Prod: 02/12/2019 Al Johnson
	//  Create: 12/13/2018  Al Johnson
	//
	//  Description:  New Interface - ADT to RL Solutions for Occurence Reporting
	//
]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='source.{EVN}' property='target.{EVN}' action='set' />
<assign value='source.{PID}' property='target.{PID}' action='set' />
<assign value='source.{MRG}' property='target.{MRG}' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2RegDietADT">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64918,49330.582584</TimeChanged>
<TimeCreated>63949,42579.646118</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A01' targetDocType='231.Cerner:ADT_A01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
  // Last Updated 09/25/2018 Al Johnson
  // Moved to Prod 09/27/2018 Al Johnson
  // Create: 02/16/2018 Al Johnson
  // Description:
  //    Set aliased Pid-15.1 language to Pid-15.2 language text
  //    Remove Pid-15.1
  //    Jim Beersman put preferred language in Pid-15.5, use that if exists
  //
  //    Check for swing bed - change unit - table T_Swingbed_Diet - 09/27/2018
]]]]><![CDATA[></code>

<assign value='""' property='target.{PID:15}' action='set' />
<assign value='source.{PID:15.1}' property='target.{PID:15.2}' action='set' />
<assign value='""' property='target.{PID:15.1}' action='set' />

<if condition='(source.{PID:15.5} = "")' >
<false>
<assign value='source.{PID:15.5}' property='target.{PID:15.2}' action='set' />
</false>
</if>

<code>
<![CDATA[ 
    //  09/25/2018 - check location for swingbed
    //
	//  Read table T_Swingbed_Diet - unit^room^bed is key to table
	//  If found, replace unit number
	//  Check PV1-3 location and PV1-6 prior location
	]]]]><![CDATA[></code>

<assign value='""' property='wTableKey' action='set' />
<assign value='""' property='temproom' action='set' />
<assign value='""' property='tempbed' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.pointofcare}' property='tempunit' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.room}' property='temproom' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.bed}' property='tempbed' action='set' />
<assign value='tempunit_"^"_temproom_"^"_tempbed' property='wTableKey' action='set' />

<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_Swingbed_Diet",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<false>
<assign value='wtableresult' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</false>
</if>

<assign value='""' property='wTableKey' action='set' />
<assign value='""' property='temproom' action='set' />
<assign value='""' property='tempbed' action='set' />
<assign value='source.{PV1:PriorPatientLocation.pointofcare}' property='tempunit' action='set' />
<assign value='source.{PV1:PriorPatientLocation.room}' property='temproom' action='set' />
<assign value='source.{PV1:PriorPatientLocation.bed}' property='tempbed' action='set' />
<assign value='tempunit_"^"_temproom_"^"_tempbed' property='wTableKey' action='set' />

<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_Swingbed_Diet",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<false>
<assign value='wtableresult' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
</false>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2RegDietORM">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64918,49278.235215</TimeChanged>
<TimeCreated>63949,42579.646118</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORM_O01' targetDocType='231.Cerner:ORM_O01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
  // Last Updated 09/25/2018 Al Johnson
  // Moved to Prod 09/27/018 Al Johnson
  // Create: 09/25/2018 Al Johnson
  // Description:
  //    Check for swing bed - change unit - table T_Swingbed_Diet
]]]]><![CDATA[></code>

<code>
<![CDATA[ 
    //  09/25/2018 - check location for swingbed
    //
	//  Read table T_Swingbed_Diet - unit^room^bed is key to table
	//  If found, replace unit number
	//  Check PV1-3 location and PV1-6 prior location
	]]]]><![CDATA[></code>
<assign value='""' property='wTableKey' action='set' />
<assign value='""' property='temproom' action='set' />
<assign value='""' property='tempbed' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.pointofcare}' property='tempunit' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.room}' property='temproom' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.bed}' property='tempbed' action='set' />
<assign value='tempunit_"^"_temproom_"^"_tempbed' property='wTableKey' action='set' />
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_Swingbed_Diet",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<false>
<assign value='wtableresult' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</false>
</if>
<assign value='""' property='wTableKey' action='set' />
<assign value='""' property='temproom' action='set' />
<assign value='""' property='tempbed' action='set' />
<assign value='source.{PV1:PriorPatientLocation.pointofcare}' property='tempunit' action='set' />
<assign value='source.{PV1:PriorPatientLocation.room}' property='temproom' action='set' />
<assign value='source.{PV1:PriorPatientLocation.bed}' property='tempbed' action='set' />
<assign value='tempunit_"^"_temproom_"^"_tempbed' property='wTableKey' action='set' />
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_Swingbed_Diet",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<false>
<assign value='wtableresult' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
</false>
</if>
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2RegLabBkrADT">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65973,43049.054396</TimeChanged>
<TimeCreated>63949,42579.646118</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A01' targetDocType='231.Cerner:ADT_A01' create='copy' language='objectscript' >
<subtransform class='GC.Cerner2RegLabBkrSub' targetObj='target' sourceObj='source' />
<code>
<![CDATA[ 
  //    Last Updated 08/17/2021 Al Johnson
  //    Moved to Prod 08/17/2021 Al Johnson
  // Create: 07/16/2018 Al Johnson
  // Description:
  //   Copied from GC.Cerner2RegionsADT
  //   (orignal - ) logic either Cerner alias or Cerner modobject
  //  changed from new to copy - include guarantor, insurance
  //  remove z segments
  //
  //    10/28/16 Eliminate repetitions of EVN-5 name field
  //  original dtl below
  // if A03 PV1:3 is blank; 
  // if A08 is for inpatient account send as A28
  // chg A06 into A01 and A07 into A04
  // chg A22 and A21 into A02 and use location GILD^GILD^99
  // Update Attending & Admitting to prefix E if starts with non-alpha; blank out admitting
  //
  //  Do not change to A28 for Epic Beaker - 8/8/2018
  //  Do not change A06/A07 for Epic Beaker - 8/28/2018
  //  Cerner modobject is changing the MSH but leaving the EVN
  //
  //  Remove A21, A22 send in Cerner Modobject - remove code here - 11/28/2018
  //  Do Not Remove PV1-3 on discharge - 08/17/2021  CNR-22075 RFC SD-94409
]]]]><![CDATA[></code>

<code>
<![CDATA[ 
   // <assign value='' property='target.{EVN}' action='remove' />
   // <assign value='source.{EVN:1}' property='target.{EVN:1}' action='set' />
   // <assign value='source.{EVN:2}' property='target.{EVN:2}' action='set' />
   // <assign value='source.{EVN:3}' property='target.{EVN:3}' action='set' />
   // <assign value='source.{EVN:4}' property='target.{EVN:4}' action='set' />
   // <assign value='source.{EVN:5(1).1}' property='target.{EVN:5(1).1}' action='set' />
   // <assign value='source.{EVN:5(1).2}' property='target.{EVN:5(1).2}' action='set' />
   // <assign value='source.{EVN:5(1).3}' property='target.{EVN:5(1).3}' action='set' />
   // <assign value='source.{EVN:6}' property='target.{EVN:6}' action='set' />
   //
   // <assign value='""' property='target.{PV1:AssignedPatientLocation}' action='remove' />
]]]]><![CDATA[></code>

<if condition='..Contains(source.{MSH:9.2},"A03")' >
<true>
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
</true>
</if>
<code>
<![CDATA[ 
	// Do not change to A28 for Epic Beaker - 8/8/2018
    // <if condition='source.{MSH:9.2} = "A08" &amp;  ..Contains(source.{PV1:2},"I")' >
    // <true>
    // <assign value='""' property='target.{PV1:AssignedPatientLocation}' action='remove' />
    // <assign value='"A28"' property='target.{EVN:EventTypeCode}' action='set' />
    // <assign value='"A28"' property='target.{MSH:9.2}' action='set' />
    // </true>
    // </if>
    //
    //  <if condition='..Contains(source.{MSH:9.2},"A06")' >
    //  <true>
    //  <assign value='source.{EVN}' property='target.{EVN}' action='set' />
    //  <assign value='"A01"' property='target.{EVN:EventTypeCode}' action='set' />
    //  <assign value='"A01"' property='target.{MSH:9.2}' action='set' />
    //  </true>
    //  </if>
    //  <if condition='..Contains(source.{MSH:9.2},"A07")' >
    //  <true>
    //  <assign value='source.{EVN}' property='target.{EVN}' action='set' />
    //  <assign value='"A04"' property='target.{EVN:EventTypeCode}' action='set' />
    //  <assign value='"A04"' property='target.{MSH:9.2}' action='set' />
    //  </true>
    //  </if>

    // <if condition='..Contains(source.{MSH:9.2},"A22")' >
    // <true>
    // <assign value='"A02"' property='target.{MSH:9.2}' action='set' />
    // <assign value='source.{EVN}' property='target.{EVN}' action='set' />
    // <assign value='"A02"' property='target.{EVN:1}' action='set' />
    // <assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
    // <assign value='"GILD^GILD^99"' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
    // </true>
    // </if>
    // <if condition='..Contains(source.{MSH:9.2},"A21")' >
    // <true>
    // <assign value='"A02"' property='target.{MSH:9.2}' action='set' />
    // <assign value='source.{EVN}' property='target.{EVN}' action='set' />
    // <assign value='"A02"' property='target.{EVN:1}' action='set' />
    // <assign value='""' property='target.{PV1:3}' action='set' />
    // <assign value='"GILD^GILD^99"' property='target.{PV1:3}' action='set' />
    // </true>
    // </if>

]]]]><![CDATA[></code>
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2RegLabBkrORMgenlab">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>66464,36576.046652</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORM_O01' targetDocType='231.Cerner:ORM_O01' create='copy' language='objectscript' >
<subtransform class='GC.Cerner2RegLabBkrORMsub' targetObj='target' sourceObj='source' />
<code>
<![CDATA[ 
	//  Last Updated 03/28/2022 Al Johnson
	//  Last Moved to Prod: 03/29/2022 Al Johnson
	//  Create: 07/16/2018  Al Johnson 
	//  Description:  Epic Beaker replaces Sunquest
	//  Outpatient ADT will be created off ORM in Epic
	//  Sunquest - GC.Cerner2RegLabORMgenlab schema 22.Reglab
	//  Beaker - GC.Cerner2RegLabORMBkrgenlab schema 231.Cerner
	//	Uses subtransform CernerRegLabORMBkrSub
	//
	//  Send all OBX out as Cerner created
	//  Put back OBX delete - per testing session 9/18/2018
	//
	//  OBX:3.1 = COMT change to NTE segment
	//  OBX:3.1 = DONOTSEND - remove
	//
	//  delete obx and add back - may need to resequence 02/13/2019
	//  if date and time of last dose, split into 2 obx one for date and one for time 02/13/2019
	//  date of last dose - obx-2 = DT obx-3 = 12300122 02/25/2019
	//  time of last does - obx-2 = TM obx-3 = 12300142 02/25/2019
	//  chg time to 4 digits vs 6
	//
	//  ormsub changes obx-3 value of IS to ST.  2/13 OBX delete logic removed 02/19/2019
	//  remove commas in obx-5 NM type 3/11/2019
	//  time of last dose - obx-3 different based on orderable obr-4.1 3/11/2019
	//  get obx-3 date alias and obx-3 time alias off table T_RegionsLab_DateTimeLastDose
	//
	//  body type and source may be sent in either obr-15 or obx segments 3/26/2019
	//  read tables T_RegLab_SpecimenSource and T_RegLab_SpecimenType for Epic codes 3/26/2019
	//  Update OBR-15.1.2 with type and OBR-15.4 with source/site 3/26/2019
	//
	//  Remove OBX segments from Cerner for NAME, SDES, PLAB, TLPHN 4/8/2019
	//  Remove OBX segments from Cerner for "Attention to" 4/9/2019
	//
	//  Remove carriage return from OBX-5 4/17/2019
	//
	//  Some users have favorites loaded which are ordering old sunquest values 4/19/2019
	//  Change to Beaker, table value for result back in 4/19/2019
	//  Table = T_RegionsLab_OrderedConversion
	//
	//  OBX COMNT converted to NTE is not removing the carriage returns 4/24/2019
	//  Remove carriage return from NTE segments following PID 4/25/2019
	//
	//  Remove OBX for Legacy Order Question - Jira CNR-18307 6/12/2019
	//
	//  Resequence OBX segments so they start at 1 and no gaps - RFC SD-41677 4/28/2020
	//
	//  Covid19 orders Cerner questions limit to 100 characters.  Amy put in aliases for answers, expand in dtl 5/11/2020
	//  Covid19 additional types SD-43424 5/19/2020 RFC-43633
	//  Covid19 type COVIDYOUNGER3 - added space SD-43916
	//
	//  Covid19 update failing when obx lines deleted or inserted - needed to use tmpobxseq for obx index - RFC SD-44430 5/29/2020
	//
	//  Covid19 types COVIDGROUP, COVIDISOLATE and COVIDCHEMO 6/5/2020 SD-44923 RFC SD-44927
	//  Covid19 types change COVIDSURGICAL remove COVIDCHEMO 6/9/2020 RFC SD-44927
	//  Covid19 types changes Add COVIDTRAVEL and COVIDWELL, remove COVIDTRANSIT and COVIDGROUP 6/22/2020 SD-46565 RFC SD-46681
	//  Covid19 types change COVIDBEHAVIORAL 7/1/2020 SD-47724 RFC SD-47790
	//
	//  Covid19 types change verbiage in COVIDWORKER, COVIDOLDER3, COVIDYOUNGER3, COVIDTRAVEL and COVIDOTHER 8/7/2020 SD-51108 RFC SD-51305
	//
	//  Covid19 type change remove COVIDPREGNANT, add COVIDSCHOOL 8/12/2020 SD-51588 RFC SD-51636
	//
	//  Covid19 type change verbiage in COVIDOTHER add COVIDADMIT, COVIDIPEMERGENT, COVIDOLDER3EMT, COVIDYOUNGER3EMT 8/19/2020 SD-524099 RFC SD-52622
	//   the description in covidother has an ampersand - need to handle differently
	//
	//  Covid19 type change verbiage in COVIDWORKER, COVIDOLDER3, COVIDYOUNGER3, COVIDSCHOOL, COVIDSURGICAL, COVIDBEHAVIORAL, COVIDTRAVEL,
	//    COVIDWELL, COVIDOLDER3EMT, COVIDYOUNGER3EMT  Add COVIDNONWORKER, COVIDNONOLDER3, COVIDNONYOUNGER3  8/25/2020 SD-53080 RFC SD-53456
	//
	//  Covid19 type add COVIDRESEARCH 9/1/2020 SD-53612 RFC SD-53869
	//
	//  Covid19 type add COVIDEXPOSURE 9/16/2020 SD-55539 RFC SD-55606
	//
	//  Covid19 type add COVIDSURVEILLANCE 9/29/2020 SD-57246 RFC SD-57513
	//
	//  Covid19 type change COVIDOTHER 10/5/2020 SD-57979 RFC SD-58029
	//
	//  Covid19 type change COVIDWELL 10/22/2020 SD-59895 RFC SD-60094
	//
	//  New check for Inluenza A and B INFABADMIT, INFABLTC, INFABHIGHRISK, INFABLESSTHANTWO, INFABOTHER 11/10/2020 SD-61614 RFC SD-62660
	//
	//  Covid19 type change COVIDTRAVEL 11/13/2020 SD-62522 RFC SD-62660
	//
	//  Covid19 type change COVIDNONWORKER 12/30/2020 SD-67394 RFC SD-68228
	//
	//  Covid19 type change remove COVIDOLDER3EMT, COVIDYOUNGER3EMT, COVIDNONWORKER, COVIDNONOLDER3, COVIDNONYOUNGER3, COVIDRESEARCH,
	//    COVIDEXPOSURE, COVIDSURVEILLANCE, COVIDOLDER3, COVIDYOUNGER3, COVIDCONGREGATE, COVIDWELL, COVIDSCHOOL
	//    8/11/2021 SD-93827 RFC SD-95567
	//
	//  Covid19 type add COVIDSURVEILLANCE 9/08/2021 SSD-97136  RFC SD-97140
	//        Was in list to delete 8/11/2021 RFC SD-95567
	//
	//  Covid19 type change COVIDOTHER and COVIDWORKER 9/15/2021 RFC SD-97905
	//
	//  Covid19 type change COVIDWORKER 11/17/2021 SD-105971 RFC SD-106147
	//
	//  Covid19 type change COVIDWORKER 01/05/2022 SD-111200 RFC SD-111257
	//
	//  Covid19 type change COVIDWORKER 01/06/2022 SD-111435
	//
	//  Additional Source Codes to extract - 123000011 and 123000019 2/21/2022 SD-117053 RFC SD-120662
	//  Original Source Codes continue to remove obx and update obr, new codes do not remove obx
	//  Add 123000230 2/23/2022
	//  Add 123001061 3/15/2022
	//
	//  Future Order release logic obr-27.4 out of Cerner has wrong date/time 3/28/2022 SD-120953 RFC SD-121184
	// Covid19 type change COVIDSURGICAL 12/21/2022 SD-152399
	//
]]]]><![CDATA[></code>

<assign value='"Cerner2RegLabORMgen"' property='target.{MSH:8}' action='set' />

<code>
<![CDATA[
     // *************************** Remove OBX from output OBX
]]]]><![CDATA[></code>

<foreach property='target.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<assign value='' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1)}' action='remove' />
</foreach>

<code>
<![CDATA[
     // On NW new orders, that are OBR-27.6 RO routine and scheduled OBR-27.4 for 030000
     //  Move ORC-15 order effective date/time to OBR-27.4 timing start date/time
     //  Cerner sending orders out with date/time order was placed (i.e. followup orders, surgical orders) 11/5/2021
     //  New logic 3/22/2022
     //  Subroutine is executed first so somevalues change i.e. GCSH Periop change to GOR
]]]]><![CDATA[></code>

<assign value='$EXTRACT(target.{ORCgrp(1).OBRgrp.OBR:27(1).4},9,14)' property='tobr27time' action='set' />
<if condition='(target.{ORCgrp(1).ORC:1}="NW")&amp;(tobr27time="030000")&amp;(target.{ORCgrp(1).OBRgrp.OBR:27(1).6}="RO")' >
<true>
<if condition='..In(target.{PV1:18},"Day Surgery,Outpatient,Outpatient in a Bed,Recurring,Virtual Care")' >
<true>
<assign value='target.{ORCgrp(1).ORC:15.1}' property='target.{ORCgrp(1).OBRgrp.OBR:27(1).4}' action='set' />
</true>
<false>
<if condition='(target.{PV1:2}="I")&amp;((target.{PV1:3.1}="GCSH Periop")||(target.{PV1:3.1}="GOR"))' >
<true>
<assign value='target.{ORCgrp(1).ORC:15.1}' property='target.{ORCgrp(1).OBRgrp.OBR:27(1).4}' action='set' />
</true>
</if>
</false>
</if>
</true>
</if>

<code>
<![CDATA[
     // Check orderable for Sunquest value - change to Beaker value
     // Table for result on initial NW order
]]]]><![CDATA[></code>

<if condition='..In(target.{ORCgrp(1).OBRgrp.OBR:4.2},"UAMIC,UAC,UCIF,UAM,UA,URIS")' >
<true>
<if condition='target.{ORCgrp(1).ORC:1}="NW"' >
<true>
<assign value='target.{ORCgrp(1).OBRgrp.OBR:2.1}' property='holdordernbr' action='set' />
<assign value='target.{ORCgrp(1).OBRgrp.OBR:4.2}' property='holdordertest' action='set' />
<code>
<![CDATA[ 
    // write ordered prior to conversion - convert result back
        set wTableNameOrder="T_RegionsLab_OrderedConversion"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableNameOrder,holdordernbr,holdordertest)	
	]]]]><![CDATA[></code>
</true>
</if>

<if condition='(target.{ORCgrp(1).OBRgrp.OBR:4.2}="UAMIC")' >
<true>
<assign value='"RH0261"' property='target.{ORCgrp(1).OBRgrp.OBR:4.2}' action='set' />
<assign value='"Urinalysis with Micro (St. Paul Order Only)"' property='target.{ORCgrp(1).OBRgrp.OBR:4.3}' action='set' />
</true>
</if>

<if condition='(target.{ORCgrp(1).OBRgrp.OBR:4.2}="UAC")' >
<true>
<assign value='"RH0258"' property='target.{ORCgrp(1).OBRgrp.OBR:4.2}' action='set' />
<assign value='"Urinalysis with Micro, Culture if Positive (St. Paul Order Only)"' property='target.{ORCgrp(1).OBRgrp.OBR:4.3}' action='set' />
</true>
</if>

<if condition='(target.{ORCgrp(1).OBRgrp.OBR:4.2}="UCIF")' >
<true>
<assign value='"3307"' property='target.{ORCgrp(1).OBRgrp.OBR:4.2}' action='set' />
<assign value='"Urinalysis, Micro if Positive (Phalen Order Only)"' property='target.{ORCgrp(1).OBRgrp.OBR:4.3}' action='set' />
</true>
</if>

<if condition='(target.{ORCgrp(1).OBRgrp.OBR:4.2}="UAM")' >
<true>
<assign value='"LABS11919"' property='target.{ORCgrp(1).OBRgrp.OBR:4.2}' action='set' />
<assign value='"Urinalysis, Micro if Pos, Culture if Pos (Phalen Order Only)"' property='target.{ORCgrp(1).OBRgrp.OBR:4.3}' action='set' />
</true>
</if>

<if condition='(target.{ORCgrp(1).OBRgrp.OBR:4.2}="UA")' >
<true>
<assign value='"3308"' property='target.{ORCgrp(1).OBRgrp.OBR:4.2}' action='set' />
<assign value='"Urinalysis, No Micro"' property='target.{ORCgrp(1).OBRgrp.OBR:4.3}' action='set' />
</true>
</if>

<if condition='(target.{ORCgrp(1).OBRgrp.OBR:4.2}="URIS")' >
<true>
<assign value='"3308"' property='target.{ORCgrp(1).OBRgrp.OBR:4.2}' action='set' />
<assign value='"Urinalysis, No Micro"' property='target.{ORCgrp(1).OBRgrp.OBR:4.3}' action='set' />
</true>
</if>

</true>
</if>

<code>
<![CDATA[
     // Read table T_RegionsLab_AliasLastDose for Date and Time of Last Dose OBX-3 Alias values
]]]]><![CDATA[></code>
<assign value='target.{ORCgrp(1).OBRgrp.OBR:4.2}' property='wTableAliasKey' action='set' />
<assign value='""' property='wDateAlias' action='set' />
<assign value='""' property='wTimeAlias' action='set' />
<assign value='""' property='wtablealiasresult' action='set' />
<assign value='..Lookup("T_RegionsLab_AliasLastDose",wTableAliasKey)' property='wtablealiasresult' action='set' />
<if condition='wtablealiasresult=""' >
<true>
<assign value='"MissingTableEntry"' property='wDateAlias' action='set' />
<assign value='"MissingTableEntry"' property='wTimeAlias' action='set' />
</true>
<false>
<assign value='$PIECE(wtablealiasresult,"|",1)' property='wDateAlias' action='set' />
<assign value='$PIECE(wtablealiasresult,"|",2)' property='wTimeAlias' action='set' />
</false>
</if>

<code>
<![CDATA[
     // if COMT - change to NTE
     // if DONOTSEND - remove
     // if Date and Time of Last Dose - split into 2 OBX - first date, then time
     // check for specimen source and type, hold values in work fields and remove obx segments
     // remove carriage return on NTE converted from OBX COMT - 04/24/2019
     //
     //  add obx back on source
]]]]><![CDATA[></code>
<assign value='"0"' property='tmpobxseq' action='set' />

<assign value='""' property='holdtype' action='set' />
<assign value='""' property='holdsource' action='set' />

<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1} = "COMT"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdcomment' action='set' />
<assign value='$REPLACE(holdcomment,"\.br\"," ")' property='holdcomment' action='set' />
<assign value='"1"' property='target.{ORCgrp(1).OBRgrp.NTE(1):1}' action='set' />
<assign value='holdcomment' property='target.{ORCgrp(1).OBRgrp.NTE(1):3(1)}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBRgrp.NTE(1):4}' action='set' />
</true>
<false>
<if condition='..In(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1},"DONOTSEND,NAME,SDES,PLAB,TLPHN,Attention to,CSF Evaluate For")' >
<false>
<assign value='tmpobxseq+1' property='tmpobxseq' action='set' />
<if condition='(..StartsWith(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.2},"Date and Time of Last Dose"))' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='tmpdatetime' action='set' />
<assign value='$EXTRACT(tmpdatetime,1,8)' property='tmpdate' action='set' />
<assign value='$EXTRACT(tmpdatetime,9,12)' property='tmptime' action='set' />

<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1)}' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq)}' action='set' />
<assign value='tmpobxseq' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq).OBX:1}' action='set' />
<assign value='"DT"' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq).OBX:2}' action='set' />
<assign value='wDateAlias' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq).OBX:3.1}' action='set' />
<assign value='"Date of Last Dose"' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq).OBX:3.2}' action='set' />
<assign value='tmpdate' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq).OBX:5}' action='set' />

<assign value='tmpobxseq+1' property='tmpobxseq' action='set' />
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1)}' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq)}' action='set' />
<assign value='tmpobxseq' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq).OBX:1}' action='set' />
<assign value='"TM"' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq).OBX:2}' action='set' />
<assign value='wTimeAlias' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq).OBX:3.1}' action='set' />
<assign value='"Time of Last Dose"' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq).OBX:3.2}' action='set' />
<assign value='tmptime' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq).OBX:5}' action='set' />

</true>
<false>

<if condition='..In(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1},"BFTYPE,CSFTYPE,SPECIMENTYPE")' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdtype' action='set' />
</true>
<false>
<if condition='..In(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1},"BFSOURCE,CSFSOURCE,GENSOURCE,SPECIMENSOURCE")' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdsource' action='set' />
</true>
<false>
<if condition='..In(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1},"123000011,123000019,123000230,123001061")' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdsource' action='set' />

<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdobx5in' action='set' />
<assign value='$REPLACE(holdobx5in,"\.br\"," ")' property='holdobx5in' action='set' />
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1)}' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq)}' action='set' />
<assign value='tmpobxseq' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq).OBX:1}' action='set' />
<assign value='holdobx5in' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq).OBX:5}' action='set' />

</true>
<false>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdobx5in' action='set' />
<assign value='$REPLACE(holdobx5in,"\.br\"," ")' property='holdobx5in' action='set' />
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1)}' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq)}' action='set' />
<assign value='tmpobxseq' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq).OBX:1}' action='set' />
<assign value='holdobx5in' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq).OBX:5}' action='set' />
</false>
</if>
</false>

</if>
</false>
</if>

</false>
</if>
</false>
</if>
</false>
</if>

<code>
<![CDATA[
     // OBX segments question specific to COVID19 test
     // OBX-3 = 138035^Lab COVID Patient Type
     // Change OBX-5 answer - 5/11/2020
     // OBX segments question specific to Influenza A and B
     // OBX-3 = 123000199
     // Change OBX-5 answer - 11/10/2020
]]]]><![CDATA[></code>

<assign value='""' property='tmpanswer' action='set' />
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1} = "138035"' >
<true>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5} = "COVIDWORKER"' >
<true>
<assign value='"Employee or Family Member of HP Family of Care/Gillette"' property='tmpanswer' action='set' />
<assign value='tmpanswer' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq).OBX:5}' action='set' />
</true>
</if>

<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5} = "COVIDSURGICAL"' >
<true>
<assign value='"Pre-procedure or pre-surgical testing for patients who are expected to be admitted to the hospital following the procedure or surgery"' property='tmpanswer' action='set' />
<assign value='tmpanswer' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq).OBX:5}' action='set' />
</true>
</if>

<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5} = "COVIDOTHER"' >
<true>
<assign value='"All other patients eligible for testing (Comment Required for Inpatient Setting)"' property='tmpanswer' action='set' />
<assign value='tmpanswer' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq).OBX:5}' action='set' />
</true>
</if>

<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5} = "COVIDISOLATE"' >
<true>
<assign value='"(Inpatient only) Instructed to self-isolate for 14 days by Department of Health"' property='tmpanswer' action='set' />
<assign value='tmpanswer' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq).OBX:5}' action='set' />
</true>
</if>

<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5} = "COVIDTRAVEL"' >
<true>
<assign value='"Travel testing for travel to states or countries that require testing for entry"' property='tmpanswer' action='set' />
<assign value='tmpanswer' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq).OBX:5}' action='set' />
</true>
</if>

<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5} = "COVIDADMIT"' >
<true>
<assign value='"(Inpatient only) Symptomatic Admit Likely"' property='tmpanswer' action='set' />
<assign value='tmpanswer' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq).OBX:5}' action='set' />
</true>
</if>

<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5} = "COVIDIPEMERGENT"' >
<true>
<assign value='"(Inpatient only) Emergent (not prescheduled) Pre-Op or AGP"' property='tmpanswer' action='set' />
<assign value='tmpanswer' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq).OBX:5}' action='set' />
</true>
</if>

<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5} = "COVIDBEHAVIORAL"' >
<true>
<assign value='"Behavioral Health pre-admission/Congregate Living re-admission"' property='tmpanswer' action='set' />
<assign value='tmpanswer' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq).OBX:5}' action='set' />
</true>
</if>

<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5} = "COVIDSURVEILLANCE"' >
<true>
<assign value='"Surveillance Testing"' property='tmpanswer' action='set' />
<assign value='tmpanswer' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq).OBX:5}' action='set' />
</true>
</if>

</true>
</if>

<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1} = "123000199"' >
<true>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5} = "INFABADMIT"' >
<true>
<assign value='"Symptomatic patient being admitted"' property='tmpanswer' action='set' />
<assign value='tmpanswer' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq).OBX:5}' action='set' />
</true>
</if>

<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5} = "INFABLTC"' >
<true>
<assign value='"Long term care facility residents"' property='tmpanswer' action='set' />
<assign value='tmpanswer' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq).OBX:5}' action='set' />
</true>
</if>

<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5} = "INFABHIGHRISK"' >
<true>
<assign value='"Patients with high risk household contacts who are eligible for prophylaxis"' property='tmpanswer' action='set' />
<assign value='tmpanswer' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq).OBX:5}' action='set' />
</true>
</if>

<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5} = "INFABLESSTHANTWO"' >
<true>
<assign value='"Patients under 2 if diagnostic evaluation or clinical care impacted"' property='tmpanswer' action='set' />
<assign value='tmpanswer' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq).OBX:5}' action='set' />
</true>
</if>

<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5} = "INFABOTHER"' >
<true>
<assign value='"Other: (add comment)"' property='tmpanswer' action='set' />
<assign value='tmpanswer' property='target.{ORCgrp(1).OBRgrp.OBXgrp(tmpobxseq).OBX:5}' action='set' />
</true>
</if>

</true>
</if>

</foreach>

<code>
<![CDATA[
    // Populate OBR-15 with table values - Epic codes
    //  if bad read - send Gillette value
]]]]><![CDATA[></code>

<if condition='target.{ORCgrp(1).OBRgrp.OBR:15.1.2}=""' >
<false>
<assign value='target.{ORCgrp(1).OBRgrp.OBR:15.1.2}' property='holdtype' action='set' />
</false>
</if>

<if condition='target.{ORCgrp(1).OBRgrp.OBR:15.4}=""' >
<false>
<assign value='target.{ORCgrp(1).OBRgrp.OBR:15.4}' property='holdsource' action='set' />
</false>
</if>

<assign value='""' property='wtablesourceresult' action='set' />
<assign value='""' property='wtabletyperesult' action='set' />

<if condition='holdsource=""' >
<false>
<assign value='..Lookup("T_RegionsLab_SpecimenSource",holdsource)' property='wtablesourceresult' action='set' />
<if condition='wtablesourceresult=""' >
<false>
<assign value='wtablesourceresult' property='holdsource' action='set' />
</false>
</if>
</false>
</if>

<if condition='holdtype=""' >
<false>
<assign value='..Lookup("T_RegionsLab_SpecimenType",holdtype)' property='wtabletyperesult' action='set' />
<if condition='wtabletyperesult=""' >
<false>
<assign value='wtabletyperesult' property='holdtype' action='set' />
</false>
</if>
</false>
</if>

<assign value='""' property='target.{ORCgrp(1).OBRgrp.OBR:15}' action='set' />
<assign value='holdtype' property='target.{ORCgrp(1).OBRgrp.OBR:15.1.2}' action='set' />
<assign value='holdsource' property='target.{ORCgrp(1).OBRgrp.OBR:15.4}' action='set' />

<code>
<![CDATA[
    // Epic Beaker Orders only accepts ST, TX, NM, DT, RP in OBX-2
    //  if condition='..In(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:2},"ST,TX,NM,DT,RP")' >
    //    <false>
    //   <assign value='"ST"' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:2}' action='set' />
    //  </false>
    //
    //  Remove commas from obx-5 on type NM
]]]]><![CDATA[></code>
<foreach property='target.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k3' >
<if condition='..In(target.{ORCgrp(1).OBRgrp.OBXgrp(k3).OBX:2},"IS")' >
<true>
<assign value='"ST"' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k3).OBX:2}' action='set' />
</true>
</if>
<if condition='..In(target.{ORCgrp(1).OBRgrp.OBXgrp(k3).OBX:2},"NM")' >
<true>
<assign value='target.{ORCgrp(1).OBRgrp.OBXgrp(k3).OBX:5(1)}' property='holdobx5' action='set' />
<assign value='$ZSTRIP(holdobx5,"*",",")' property='holdobx5a' action='set' />
<assign value='holdobx5a' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k3).OBX:5(1)}' action='set' />
</true>
</if>
</foreach>

<code>
<![CDATA[
    //  Remove carriage return from NTE segments following PID - 04/25/2019
 ]]]]><![CDATA[></code>
 <foreach property='target.{NTE()}' key='k4' >
 <foreach property='target.{NTE(k4):3()}' key='k5' >
 <assign value='target.{NTE(k4):3(k5)}' property='holdpidcomment' action='set' />
 <assign value='$REPLACE(holdpidcomment,"\.br\"," ")' property='holdpidcomment' action='set' />
 <assign value='holdpidcomment' property='target.{NTE(k4):3(k5)}' action='set' />
 </foreach>
 </foreach>

<code>
<![CDATA[     // *************************** Config Custom Questions for SDES
    // only create SDES when value for gen lab
]]]]><![CDATA[></code>

<assign value='$ZCONVERT(target.{PID},"U" )' property='target.{PID}' action='set' />

<code>
<![CDATA[  
    // resequence obx segments
]]]]><![CDATA[></code>

<assign value='"0"' property='tmpobxseq1' action='set' />
<foreach property='target.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k6' >
<if condition='target.{ORCgrp(1).OBRgrp.OBXgrp(k6).OBX:1}&gt;"0"'>
<true>
<assign value='tmpobxseq1+1' property='tmpobxseq1' action='set' />
<assign value='tmpobxseq1' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k6).OBX:1}' action='set' />
</true>
</if>
</foreach>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2RegLabBkrORMmicro">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>66197,42846.008834</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORM_O01' targetDocType='231.Cerner:ORM_O01' create='copy' language='objectscript' >
<subtransform class='GC.Cerner2RegLabBkrORMsub' targetObj='target' sourceObj='source' />
<code>
<![CDATA[ 
	//  Last Updated 03/28/2022
	//  Last Updated in Prod: 03/29/2022 Al Johnson
	//  Create: 11/02/2018  Al Johnson 
	//  Description:  Epic Beaker replaces Sunquest
	//  Outpatient ADT will be created off ORM in Epic
	//  Sunquest - GC.Cerner2RegLabORMgenlab schema 22.Reglab
	//  Beaker - schema 231.Cerner  Results back from Regions - Beaker use schema 251.Regions
	//	Uses subtransform CernerRegLabORMBkrSub
	//
	//  kept from sunquest
    //  change discontinued (DC) orders to Cancel orders (CA)
    //  Change ASAP Priority to DD for Discharage Dependant
    //  create NTE from OBX:3.1 COMT
    //  remove all OBX segments
    //  shift PID to uppercase
    //
    //  new
    //  update OBR:15.1.2 with type and OBR:15.4 with soure - no modifier defined
    //    if modifier sent, prefix source with modifer and a space
    //   OBX:3.1 = SPECIMENTYPE  (sunquest=sdes)
    //   OBX:3.1 = SPECIMENSOURCE (sunquest=site)
    //
    //  Future Order release logic obr-27.4 out of Cerner has wrong date/time 3/28/2022 SD-120953 RFC SD-121184
    //
]]]]><![CDATA[></code>

<code>
<![CDATA[
     // On NW new orders, that are OBR-27.6 RO routine and scheduled OBR-27.4 for 030000
     //  Move ORC-15 order effective date/time to OBR-27.4 timing start date/time
     //  Cerner sending orders out with date/time order was placed (i.e. followup orders, surgical orders) 11/5/2021
     // new logic 3/22/2022
]]]]><![CDATA[></code>
<assign value='$EXTRACT(target.{ORCgrp(1).OBRgrp.OBR:27(1).4},9,14)' property='tobr27time' action='set' />
<if condition='(target.{ORCgrp(1).ORC:1}="NW")&amp;(tobr27time="030000")&amp;(target.{ORCgrp(1).OBRgrp.OBR:27(1).6}="RO")' >
<true>
<if condition='..In(target.{PV1:18},"Day Surgery,Outpatient,Outpatient in a Bed,Recurring,Virtual Care")' >
<true>
<assign value='target.{ORCgrp(1).ORC:15.1}' property='target.{ORCgrp(1).OBRgrp.OBR:27(1).4}' action='set' />
</true>
<false>
<if condition='(target.{PV1:2}="I")&amp;((target.{PV1:3.1}="GCSH Periop")||(target.{PV1:3.1}="GOR"))' >
<true>
<assign value='target.{ORCgrp(1).ORC:15.1}' property='target.{ORCgrp(1).OBRgrp.OBR:27(1).4}' action='set' />
</true>
</if>
</false>
</if>
</true>
</if>

<assign value='"Cerner2RegLabMicro"' property='target.{MSH:8}' action='set' />
<code>
<![CDATA[ 
	// ***************************** START ORDER LOGIC ********************************
    // kept from orig sunquest logic
    // change discontinued (DC) orders to Cancel orders (CA)
    // Change ASAP Priority to DD for Discharage Dependant
    // Clear Specimen Source
]]]]><![CDATA[></code>
<if condition='..Contains(source.{ORCgrp(1).ORC:OrderControl},"DC")' >
<true>
<assign value='"CA"' property='target.{ORCgrp(1).ORC:OrderControl}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBR:QuantityTiming(1).priority},"ASAP")' >
<true>
<assign value='"DD"' property='target.{ORCgrp(1).OBRgrp.OBR:QuantityTiming(1).priority}' action='set' />
</true>
</if>
<code>
<![CDATA[  	// *****************************  OBX LOGIC ********************************
]]]]><![CDATA[></code>
<code>
<![CDATA[ 
	// find comment and site description in obx segments
]]]]><![CDATA[></code>
<assign value='""' property='holdcomment' action='set' />
<assign value='""' property='holdcommentdesc' action='set' />
<assign value='""' property='holdsdes' action='set' />
<assign value='""' property='holdsite' action='set' />
<assign value='""' property='holdsite1' action='set' />
<assign value='""' property='holdmodifier' action='set' />
<assign value='""' property='holdmodifierdesc' action='set' />
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="COMT"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdcomment' action='set' />
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.2}' property='holdcommentdesc' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="SPECIMENTYPE"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdsdes' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="SPECIMENSOURCE"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdsite' action='set' />
</true>
</if>
</foreach>

<code>
<![CDATA[     // *************************** Remove OBX from output OBX
]]]]><![CDATA[></code>
<foreach property='target.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<assign value='' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1)}' action='remove' />
</foreach>

<code>
<![CDATA[  
    // create OBR-15 specimen, modifier and site
]]]]><![CDATA[></code>
<assign value='""' property='target.{ORCgrp(1).OBRgrp.OBR:SpecimenSource}' action='clear' />
<assign value='holdsdes' property='target.{ORCgrp(1).OBRgrp.OBR:15.1.2}' action='set' />
<if condition='($LENGTH(holdmodifier) &lt; 1)' >
<true>
<assign value='holdsite' property='target.{ORCgrp(1).OBRgrp.OBR:SpecimenSource.bodysite}' action='set' />
</true>
<false>
<assign value='holdmodifier_" "_holdsite' property='target.{ORCgrp(1).OBRgrp.OBR:SpecimenSource.bodysite}' action='set' />
</false>
</if>

<code>
<![CDATA[
     // Create NTERemove blank NTE
]]]]><![CDATA[></code>
<if condition='($LENGTH(holdcomment) &lt; 1)' >
<false>
<assign value='"1"' property='target.{ORCgrp(1).OBRgrp.NTE(1):1}' action='set' />
<assign value='holdcommentdesc' property='target.{ORCgrp(1).OBRgrp.NTE(1):2}' action='set' />
<assign value='holdcomment' property='target.{ORCgrp(1).OBRgrp.NTE(1):3(1)}' action='set' />
</false>
</if>
<assign value='$ZCONVERT(target.{PID},"U" )' property='target.{PID}' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2RegLabBkrORMpath">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>66332,35661.857845</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORM_O01' targetDocType='231.Cerner:ORM_O01' create='copy' language='objectscript' >
<subtransform class='GC.Cerner2RegLabBkrORMsub' targetObj='target' sourceObj='source' />
<code>
<![CDATA[ 
    //  Last Update: 02/21/2022 Al Johnson
    //  Last Moved to Prod: 03/24/2022 Al Johnson
	//  Create: 07/16/2018  Al Johnson
	//  Description:  Epic Beaker replaces Sunquest
	//  Outpatient ADT will be created off ORM in Epic
	//  Sunquest - GC.Cerner2RegLabORMgenlab schema 22.Reglab
	//  Beaker - schema 231.Cerner  Results back from Regions - Beaker use schema 251.Regions
	//	Uses subtransform CernerRegLabORMBkrSub
	//
	//  kept from sunquest
	//  change discontinued (DC) orders to Cancel orders (CA)
    //  Change ASAP Priority to DD for Discharage Dependant
    //  clear OBR:14 specimen received date/time
	//
    //  new
    //  update OBR:15.1.2 with type and OBR:15.4 with soure - no modifier defined
    //    if modifier sent, prefix source with modifer and a space
    //   OBX:3.1 = SPECIMENTYPE  (sunquest=sdes)
    //   OBX:3.1 = SPECIMENSOURCE (sunquest=site)
	//  Send OBX to Beaker as Cerner configured.  Do not convert to NTE
	//  Send Specimen, Modifier and Site in OBR-15
	//
	// Change OBX COMT to NTE segment
	//
	//  remove commas in obx-5 NM type 3/11/2019
	//  remove carriage return from obx-5 4/17/2019
	//
	//  OBX COMNT converted to NTE is not removing the carriage returns 4/24/2019
	//
	//  Order LABS20249 questions too long for Cerner 01/12/2021 SD-68975 RFC SD-69432
	//
	//  Additional Source Codes to extract - create table to store T_RegionsLab_AP_SpecSource 2/21/2022 SD-117053
	//   Remove obx if SPECIMENSOURCE else Do not remove obx segment when updating obr with source code RFC SD-120662
	//  Change OBX to NTE on specific codes for surgical pathology orders.  OBX codes are SPECDESC1, SPECDESC2,
	//            SPECDESC3, SPECDESC4 and SPECDESC5  08/11/2022 CE-3259
	//     Link SPECDESC1 - SPECDESC5 to corresponding OBX with 123100100, 101, 102, 104 and 105 (103 skipped)
]]]]><![CDATA[></code>

<assign value='"Cerner2RegLabORMpath"' property='target.{MSH:8}' action='set' />

<if condition='..Contains(source.{ORCgrp(1).ORC:OrderControl},"DC")' >
<true>
<assign value='"CA"' property='target.{ORCgrp(1).ORC:OrderControl}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBR:QuantityTiming(1).priority},"ASAP")' >
<true>
<assign value='"DD"' property='target.{ORCgrp(1).OBRgrp.OBR:QuantityTiming(1).priority}' action='set' />
</true>
</if>

<assign value='""' property='target.{ORCgrp(1).OBRgrp.OBR:SpecimenSource}' action='clear' />

<code>
<![CDATA[ 
	// find last NTE segment
]]]]><![CDATA[></code>
<assign value='"0"' property='holdNTEseq' action='set' />
<foreach property='source.{ORCgrp(1).OBRgrp.NTE()}' key='k4' >
<assign value='k4' property='holdNTEseq' action='set' />
</foreach>

<code>
<![CDATA[ 
	// find comment and site description in obx segments
	//  leave comment as OBX for now - may change to NTE
	// remove carriage return on NTE converted from OBX COMT - 04/24/2019
	// change of OBX to NTE for SPECDESC1 - 5, store index of specific OBX to tie it to
]]]]><![CDATA[></code>
<assign value='""' property='holdcomment' action='set' />
<assign value='""' property='holdcommentdesc' action='set' />
<assign value='""' property='holdsdes' action='set' />
<assign value='""' property='holdsite' action='set' />
<assign value='""' property='holdsite1' action='set' />
<assign value='""' property='holdmodifier' action='set' />
<assign value='""' property='holdmodifierdesc' action='set' />
<assign value='""' property='holdntedes' action='set' />

<assign value='""' property='holdspecdesc1' action='set' />
<assign value='""' property='holdspecdesc2' action='set' />
<assign value='""' property='holdspecdesc3' action='set' />
<assign value='""' property='holdspecdesc4' action='set' />
<assign value='""' property='holdspecdesc5' action='set' />

<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="COMT"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdcomment' action='set' />
<assign value='$REPLACE(holdcomment,"\.br\"," ")' property='holdcomment' action='set' />
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.2}' property='holdcommentdesc' action='set' />
<assign value='' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1)}' action='remove' />

<assign property='holdNTEseq' value='holdNTEseq+1' action='set' />
<assign value='holdNTEseq' property='target.{ORCgrp(1).OBRgrp.NTE(holdNTEseq):1}' action='set' />
<assign value='holdcomment' property='target.{ORCgrp(1).OBRgrp.NTE(holdNTEseq):3(1)}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBRgrp.NTE(holdNTEseq):4}' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="SPECIMENTYPE"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdsdes' action='set' />
<assign value='' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1)}' action='remove' />
</true>
</if>

<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="123100100"' >
<true>
<assign value='k1' property='holdspecdesc1' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="123100101"' >
<true>
<assign value='k1' property='holdspecdesc2' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="123100102"' >
<true>
<assign value='k1' property='holdspecdesc3' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="123100104"' >
<true>
<assign value='k1' property='holdspecdesc4' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="123100105"' >
<true>
<assign value='k1' property='holdspecdesc5' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="SPECDESC1"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdntedes' action='set' />
<assign value="1" property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc1).NTE(1):1}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc1).NTE(1):2}' action='set' />
<assign value='holdntedes' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc1).NTE(1):3}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc1).NTE(1):4}' action='set' />
<assign value='' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX}' action='remove' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="SPECDESC2"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdntedes' action='set' />
<assign value="1" property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc2).NTE(1):1}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc2).NTE(1):2}' action='set' />
<assign value='holdntedes' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc2).NTE(1):3}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc2).NTE(1):4}' action='set' />
<assign value='' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX}' action='remove' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="SPECDESC3"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdntedes' action='set' />
<assign value="1" property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc3).NTE(1):1}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc3).NTE(1):2}' action='set' />
<assign value='holdntedes' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc3).NTE(1):3}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc3).NTE(1):4}' action='set' />
<assign value='' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX}' action='remove' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="SPECDESC4"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdntedes' action='set' />
<assign value="1" property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc4).NTE(1):1}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc4).NTE(1):2}' action='set' />
<assign value='holdntedes' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc4).NTE(1):3}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc4).NTE(1):4}' action='set' />
<assign value='' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX}' action='remove' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="SPECDESC5"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdntedes' action='set' />
<assign value="1" property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc5).NTE(1):1}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc5).NTE(1):2}' action='set' />
<assign value='holdntedes' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc5).NTE(1):3}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc5).NTE(1):4}' action='set' />
<assign value='' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX}' action='remove' />
</true>
</if>

<code>
<![CDATA[ 
	// specimen source change from if statement to table read T_RegionsLab_AP_SpecSource 2/21/2022
	//  remove if 'specimensource' else leave obx
]]]]><![CDATA[></code>
<assign value='""' property='wtblAPsourceresult' action='set' />
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}' property='wtblAPsourcekey' action='set' />

<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="SPECIMENSOURCE"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdsite' action='set' />
<assign value='' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1)}' action='remove' />
</true>
<false>
<assign value='..Lookup("T_RegionsLab_AP_SpecSource",wtblAPsourcekey)' property='wtblAPsourceresult' action='set' />
<if condition='wtblAPsourceresult=""' >
<false>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdsite' action='set' />
</false>
</if>
</false>
</if>

<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1} = "123102802"' >
<true>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5} = "HPVHISTORY"' >
<true>
<assign value='"History of Cervical, Vaginal, or Vulvar CANCER with plan for HPV surveillance PER GYNECOLOGIC ONCOLOGY"' property='tmpanswer' action='set' />
<assign value='tmpanswer' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5} = "HPVABNORMAL"' >
<true>
<assign value='"Prior abnormal vaginal pap meriting recheck PER CCSM as based on expert opinion"' property='tmpanswer' action='set' />
<assign value='tmpanswer' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5} = "HPV25YEARS"' >
<true>
<assign value='"History of CIN 2, CIN 3 or AIS in the preceding 25 years"' property='tmpanswer' action='set' />
<assign value='tmpanswer' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' action='set' />
</true>
</if>
</true>
</if>

</foreach>

<code>
<![CDATA[ 
	//    leave NTE for now
	//    <assign value='""' property='target.{ORCgrp(1).OBRgrp.NTE(1)}' action='remove' />
]]]]><![CDATA[></code>
<assign value='' property='target.{ORCgrp(1).OBRgrp.OBR:SpecimenReceivedDateTime}' action='clear' />
  
<code>
<![CDATA[  
    // create OBR-15 specimen, modifier and site
]]]]><![CDATA[></code>
<assign value='""' property='target.{ORCgrp(1).OBRgrp.OBR:SpecimenSource}' action='clear' />
<assign value='holdsdes' property='target.{ORCgrp(1).OBRgrp.OBR:15.1.2}' action='set' />
<if condition='($LENGTH(holdmodifier) &lt; 1)' >
<true>
<assign value='holdsite' property='target.{ORCgrp(1).OBRgrp.OBR:SpecimenSource.bodysite}' action='set' />
</true>
<false>
<assign value='holdmodifier_" "_holdsite' property='target.{ORCgrp(1).OBRgrp.OBR:SpecimenSource.bodysite}' action='set' />
</false>
</if>

<code>
<![CDATA[ 
	// renumber OBX segments in case some were removed
	// remove commas from NM type 3/11/2019
	// remove carriage return from OBX-5 4/17/2019
]]]]><![CDATA[></code>

<foreach property='target.{ORCgrp()}' key='k2' >
<assign value='""' property='holdobxseq' action='set' />
<foreach property='target.{ORCgrp(k2).OBRgrp.OBXgrp()}' key='k3' >
<assign property='holdobxseq' value='holdobxseq+1' action='set' />
<assign value='holdobxseq' property='target.{ORCgrp(k2).OBRgrp.OBXgrp(k3).OBX:SetIDOBX}' action='set' />
<if condition='..In(target.{ORCgrp(k2).OBRgrp.OBXgrp(k3).OBX:2},"NM")' >
<true>
<assign value='target.{ORCgrp(k2).OBRgrp.OBXgrp(k3).OBX:5(1)}' property='holdobx5' action='set' />
<assign value='$ZSTRIP(holdobx5,"*",",")' property='holdobx5a' action='set' />
<assign value='holdobx5a' property='target.{ORCgrp(k2).OBRgrp.OBXgrp(k3).OBX:5(1)}' action='set' />
</true>
</if>
<assign value='target.{ORCgrp(k2).OBRgrp.OBXgrp(k3).OBX:5(1)}' property='holdobx5b' action='set' />
<assign value='$REPLACE(holdobx5b,"\.br\"," ")' property='holdobx5b' action='set' />
<assign value='holdobx5b' property='target.{ORCgrp(k2).OBRgrp.OBXgrp(k3).OBX:5(1)}' action='set' />
</foreach>
</foreach>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2RegLabBkrORMpathSS">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>66332,34653.853428</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORM_O01' targetDocType='231.Cerner:ORM_O01' create='copy' language='objectscript' >
<subtransform class='GC.Cerner2RegLabBkrORMsub' targetObj='target' sourceObj='source' />
<code>
<![CDATA[ 
    //  Last Update: 02/21/2022 Al Johnson
    //  Last Moved to Prod: 03/24/2022 Al Johnson
	//  Create: 07/16/2018  Al Johnson
	//  Description:  Epic Beaker replaces Sunquest
	//  Outpatient ADT will be created off ORM in Epic
	//  Sunquest - GC.Cerner2RegLabORMgenlab schema 22.Reglab
	//  Beaker - schema 231.Cerner  Results back from Regions - Beaker use schema 251.Regions
	//	Uses subtransform CernerRegLabORMBkrSub
	//
	//  kept from sunquest
	//  change discontinued (DC) orders to Cancel orders (CA)
    //  Change ASAP Priority to DD for Discharage Dependant
    //  clear OBR:14 specimen received date/time
	//
    //  new
    //  update OBR:15.1.2 with type and OBR:15.4 with soure - no modifier defined
    //    if modifier sent, prefix source with modifer and a space
    //   OBX:3.1 = SPECIMENTYPE  (sunquest=sdes)
    //   OBX:3.1 = SPECIMENSOURCE (sunquest=site)
	//  Send OBX to Beaker as Cerner configured.  Do not convert to NTE
	//  Send Specimen, Modifier and Site in OBR-15
	//
	// Change OBX COMT to NTE segment
	//
	//  remove commas in obx-5 NM type 3/11/2019
	//  remove carriage return from obx-5 4/17/2019
	//
	//  OBX COMNT converted to NTE is not removing the carriage returns 4/24/2019
	//
	//  Order LABS20249 questions too long for Cerner 01/12/2021 SD-68975 RFC SD-69432
	//
	//  Additional Source Codes to extract - create table to store T_RegionsLab_AP_SpecSource 2/21/2022 SD-117053
	//   Remove obx if SPECIMENSOURCE else Do not remove obx segment when updating obr with source code RFC SD-120662
	//  Change OBX to NTE on specific codes for surgical pathology orders.  OBX codes are SPECDESC1, SPECDESC2,
	//            SPECDESC3, SPECDESC4 and SPECDESC5  5/3/2022 CE-3126
	//     Link SPECDESC1 - SPECDESC5 to corresponding OBX with 123100100, 101, 102, 104 and 105 (103 skipped)
]]]]><![CDATA[></code>

<assign value='"Cerner2RegLabORMpath"' property='target.{MSH:8}' action='set' />

<if condition='..Contains(source.{ORCgrp(1).ORC:OrderControl},"DC")' >
<true>
<assign value='"CA"' property='target.{ORCgrp(1).ORC:OrderControl}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBR:QuantityTiming(1).priority},"ASAP")' >
<true>
<assign value='"DD"' property='target.{ORCgrp(1).OBRgrp.OBR:QuantityTiming(1).priority}' action='set' />
</true>
</if>

<assign value='""' property='target.{ORCgrp(1).OBRgrp.OBR:SpecimenSource}' action='clear' />

<code>
<![CDATA[ 
	// find last NTE segment
]]]]><![CDATA[></code>
<assign value='"0"' property='holdNTEseq' action='set' />
<foreach property='source.{ORCgrp(1).OBRgrp.NTE()}' key='k4' >
<assign value='k4' property='holdNTEseq' action='set' />
</foreach>

<![CDATA[ 
	// find comment and site description in obx segments
	//  leave comment as OBX for now - may change to NTE
	// remove carriage return on NTE converted from OBX COMT - 04/24/2019
	// change of OBX to NTE for SPECDESC1 - 5, store index of specific OBX to tie it to
]]]]><![CDATA[></code>
<assign value='""' property='holdcomment' action='set' />
<assign value='""' property='holdcommentdesc' action='set' />
<assign value='""' property='holdsdes' action='set' />
<assign value='""' property='holdsite' action='set' />
<assign value='""' property='holdsite1' action='set' />
<assign value='""' property='holdmodifier' action='set' />
<assign value='""' property='holdmodifierdesc' action='set' />
<assign value='""' property='holdntedes' action='set' />

<assign value='""' property='holdspecdesc1' action='set' />
<assign value='""' property='holdspecdesc2' action='set' />
<assign value='""' property='holdspecdesc3' action='set' />
<assign value='""' property='holdspecdesc4' action='set' />
<assign value='""' property='holdspecdesc5' action='set' />

<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="COMT"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdcomment' action='set' />
<assign value='$REPLACE(holdcomment,"\.br\"," ")' property='holdcomment' action='set' />
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.2}' property='holdcommentdesc' action='set' />
<assign value='' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1)}' action='remove' />

<assign property='holdNTEseq' value='holdNTEseq+1' action='set' />
<assign value='holdNTEseq' property='target.{ORCgrp(1).OBRgrp.NTE(holdNTEseq):1}' action='set' />
<assign value='holdcomment' property='target.{ORCgrp(1).OBRgrp.NTE(holdNTEseq):3(1)}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBRgrp.NTE(holdNTEseq):4}' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="SPECIMENTYPE"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdsdes' action='set' />
<assign value='' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1)}' action='remove' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="123100100"' >
<true>
<assign value='k1' property='holdspecdesc1' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="123100101"' >
<true>
<assign value='k1' property='holdspecdesc2' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="123100102"' >
<true>
<assign value='k1' property='holdspecdesc3' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="123100104"' >
<true>
<assign value='k1' property='holdspecdesc4' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="123100105"' >
<true>
<assign value='k1' property='holdspecdesc5' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="SPECDESC1"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdntedes' action='set' />
<assign value="1" property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc1).NTE(1):1}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc1).NTE(1):2}' action='set' />
<assign value='holdntedes' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc1).NTE(1):3}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc1).NTE(1):4}' action='set' />
<assign value='' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX}' action='remove' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="SPECDESC2"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdntedes' action='set' />
<assign value="1" property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc2).NTE(1):1}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc2).NTE(1):2}' action='set' />
<assign value='holdntedes' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc2).NTE(1):3}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc2).NTE(1):4}' action='set' />
<assign value='' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX}' action='remove' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="SPECDESC3"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdntedes' action='set' />
<assign value="1" property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc3).NTE(1):1}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc3).NTE(1):2}' action='set' />
<assign value='holdntedes' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc3).NTE(1):3}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc3).NTE(1):4}' action='set' />
<assign value='' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX}' action='remove' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="SPECDESC4"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdntedes' action='set' />
<assign value="1" property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc4).NTE(1):1}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc4).NTE(1):2}' action='set' />
<assign value='holdntedes' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc4).NTE(1):3}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc4).NTE(1):4}' action='set' />
<assign value='' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX}' action='remove' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="SPECDESC5"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdntedes' action='set' />
<assign value="1" property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc5).NTE(1):1}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc5).NTE(1):2}' action='set' />
<assign value='holdntedes' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc5).NTE(1):3}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBRgrp.OBXgrp(holdspecdesc5).NTE(1):4}' action='set' />
<assign value='' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX}' action='remove' />
</true>
</if>
<code>
<![CDATA[ 

<code>
<![CDATA[ 
	// find comment and site description in obx segments
	//  leave comment as OBX for now - may change to NTE
	// remove carriage return on NTE converted from OBX COMT - 04/24/2019
]]]]><![CDATA[></code>
<assign value='""' property='holdcomment' action='set' />
<assign value='""' property='holdcommentdesc' action='set' />
<assign value='""' property='holdsdes' action='set' />
<assign value='""' property='holdsite' action='set' />
<assign value='""' property='holdsite1' action='set' />
<assign value='""' property='holdmodifier' action='set' />
<assign value='""' property='holdmodifierdesc' action='set' />
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="COMT"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdcomment' action='set' />
<assign value='$REPLACE(holdcomment,"\.br\"," ")' property='holdcomment' action='set' />
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.2}' property='holdcommentdesc' action='set' />
<assign value='' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1)}' action='remove' />

<assign property='holdNTEseq' value='holdNTEseq+1' action='set' />
<assign value='holdNTEseq' property='target.{ORCgrp(1).OBRgrp.NTE(holdNTEseq):1}' action='set' />
<assign value='holdcomment' property='target.{ORCgrp(1).OBRgrp.NTE(holdNTEseq):3(1)}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBRgrp.NTE(holdNTEseq):4}' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="SPECIMENTYPE"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdsdes' action='set' />
<assign value='' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1)}' action='remove' />
</true>
</if>

<code>
<![CDATA[ 
	// specimen source change from if statement to table read T_RegionsLab_AP_SpecSource 2/21/2022
	//  remove if 'specimensource' else leave obx
]]]]><![CDATA[></code>
<assign value='""' property='wtblAPsourceresult' action='set' />
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}' property='wtblAPsourcekey' action='set' />

<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="SPECIMENSOURCE"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdsite' action='set' />
<assign value='' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1)}' action='remove' />
</true>
<false>
<assign value='..Lookup("T_RegionsLab_AP_SpecSource",wtblAPsourcekey)' property='wtblAPsourceresult' action='set' />
<if condition='wtblAPsourceresult=""' >
<false>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdsite' action='set' />
</false>
</if>
</false>
</if>

<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1} = "123102802"' >
<true>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5} = "HPVHISTORY"' >
<true>
<assign value='"History of Cervical, Vaginal, or Vulvar CANCER with plan for HPV surveillance PER GYNECOLOGIC ONCOLOGY"' property='tmpanswer' action='set' />
<assign value='tmpanswer' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5} = "HPVABNORMAL"' >
<true>
<assign value='"Prior abnormal vaginal pap meriting recheck PER CCSM as based on expert opinion"' property='tmpanswer' action='set' />
<assign value='tmpanswer' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5} = "HPV25YEARS"' >
<true>
<assign value='"History of CIN 2, CIN 3 or AIS in the preceding 25 years"' property='tmpanswer' action='set' />
<assign value='tmpanswer' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' action='set' />
</true>
</if>
</true>
</if>

</foreach>

<code>
<![CDATA[ 
	//    leave NTE for now
	//    <assign value='""' property='target.{ORCgrp(1).OBRgrp.NTE(1)}' action='remove' />
]]]]><![CDATA[></code>
<assign value='' property='target.{ORCgrp(1).OBRgrp.OBR:SpecimenReceivedDateTime}' action='clear' />
  
<code>
<![CDATA[  
    // create OBR-15 specimen, modifier and site
]]]]><![CDATA[></code>
<assign value='""' property='target.{ORCgrp(1).OBRgrp.OBR:SpecimenSource}' action='clear' />
<assign value='holdsdes' property='target.{ORCgrp(1).OBRgrp.OBR:15.1.2}' action='set' />
<if condition='($LENGTH(holdmodifier) &lt; 1)' >
<true>
<assign value='holdsite' property='target.{ORCgrp(1).OBRgrp.OBR:SpecimenSource.bodysite}' action='set' />
</true>
<false>
<assign value='holdmodifier_" "_holdsite' property='target.{ORCgrp(1).OBRgrp.OBR:SpecimenSource.bodysite}' action='set' />
</false>
</if>

<code>
<![CDATA[ 
	// renumber OBX segments in case some were removed
	// remove commas from NM type 3/11/2019
	// remove carriage return from OBX-5 4/17/2019
]]]]><![CDATA[></code>

<foreach property='target.{ORCgrp()}' key='k2' >
<assign value='""' property='holdobxseq' action='set' />
<foreach property='target.{ORCgrp(k2).OBRgrp.OBXgrp()}' key='k3' >
<assign property='holdobxseq' value='holdobxseq+1' action='set' />
<assign value='holdobxseq' property='target.{ORCgrp(k2).OBRgrp.OBXgrp(k3).OBX:SetIDOBX}' action='set' />
<if condition='..In(target.{ORCgrp(k2).OBRgrp.OBXgrp(k3).OBX:2},"NM")' >
<true>
<assign value='target.{ORCgrp(k2).OBRgrp.OBXgrp(k3).OBX:5(1)}' property='holdobx5' action='set' />
<assign value='$ZSTRIP(holdobx5,"*",",")' property='holdobx5a' action='set' />
<assign value='holdobx5a' property='target.{ORCgrp(k2).OBRgrp.OBXgrp(k3).OBX:5(1)}' action='set' />
</true>
</if>
<assign value='target.{ORCgrp(k2).OBRgrp.OBXgrp(k3).OBX:5(1)}' property='holdobx5b' action='set' />
<assign value='$REPLACE(holdobx5b,"\.br\"," ")' property='holdobx5b' action='set' />
<assign value='holdobx5b' property='target.{ORCgrp(k2).OBRgrp.OBXgrp(k3).OBX:5(1)}' action='set' />
</foreach>
</foreach>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2RegLabBkrORMsub">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65329,38303.261117</TimeChanged>
<TimeCreated>61585,36930.746895</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORM_O01' targetDocType='231.Cerner:ORM_O01' create='existing' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Updated: 11/01/2019 Al Johnson
	//  Last Updated in Prod: 11/12/2019 Al Johnson
	//  Create: 07/16/2018  Al Johnson
	//  Copied from GC.Cerner2RegLabORMsub 
	//  Description:  Orders DTL Subroutine for Epic Beaker Lab
	//  (orignal - ) logic either Cerner alias or Cerner modobject
	//   original output schema 22.Reglab changed to 231.Cerner for Epic Beaker
	//   changed from new to copy
	//   remove z segments
	//
	// Changed the transform create to "EXISTING"
	//  Then works from dtl - but does not work on individual test
	//
	// convert all PID chars to CAPS
	//
	// original - set PID:2.1 to C and prefix MRN with G  (set in Cerner ModObject)
	// original - set PID:3.2 and 3.3 to 1 - set PID:3.4 to 2 (set in Cerner ModObject)
	// original - clear PID:4 PID:9 and PV1_10 (set in Cerner ModObject)
	// original - remove PV1:10 Hosp Serv Code (set in Cerner ModObject)
    // original - Inpatient if hosp service code is 0IP or 0ss or current unit is 0NU,0AU,0RU,0OSU,0OSE,0OSW,00IC,0ND or 07W
	// original - set PV1_2 to A and PV1_18 to N for inpatient other wise (set in Cerner ModObject)
	// original - set PV1_2 to O PV1_18 to S PV1_3 to GILL for outpatient (set in Cerner ModObject) 
	// original - Rooms Add Prefix of C if starts with 4, Prefix of G if starts with 7 (set in Cerner Aliasing)
	// original - Prefix Room with 0 (set in Cerner Aliasing)
	// 
	// Translate both Assigned and Previous Patient Location (set in Cerner ModObject) (set in Cerner ModObject)
	// 0AIM to GAIM; 0WR to GSDS; 07W to G7W; and 0PAN,0PAC,0OR,REG,REGS all to GOR
	// If 4OP then set Assigned Patient Location to GLSH
	//   01/20/17 send GLSH for Lifetime and GPSH for Phalen second floor
	// If 0SDS then set Assigned Patient Location to GSDS
	//
	// Coding to send Regions Company account as account number for XCOM
    //           if PV1:14 = 10 send GPHS in PV1:3
	// If PV1:10 is XCOM and Guarantor Name contains :  move PID:18 to PID:3.2
	// Take data after : in GT1:3 and move to PID:18
	// If XEH then set PID:18 to C828 and move PID:18 to PID:3.2
	//
	// Send patient location for GPHS Gillette Pediatric Home service *********
	// If PV1:14 is 10 than set PV1:3 to GPHS
	//
	//  PV1-2 must be IP, OP, ER, or OS per Todd Sommer - Regions 11/21/2016
	//  PV1-3.1 or PV1-6.1 GCSH - send GOR  02/15/2017
	//  PV1-3.1 or PV1-6.1 GCSH Main OR - send GOR  02/17/2017
	//  PV1-3.1 or PV1-6.1 PACU - send GOR  02/17/2017
	//  PV1-3.1 or PV1-6.1 GCSH Periop - send GOR  02/17/2017
	//  PV1-8 Referring Doc 11845887^Conversion^BlankProvider - remove 02/17/2017
	//
	//  Remove value from ORC-13 Point of Care - receiving LTC Cline and PGC Clinic 03/07/2017
	//  Add E to PV1-8 referring doctor - PV1-8 was not sent out of QCPR  03/07/2017
	//   GOR unit needs GOR99 for room GOR^GOR99 - 03/27/2017
	//
	//  OBR-27.6 = 'RO' Timing Priority = Routine and not cancel or discontinue
	//    If OBR-11 = "L"   set OBR-7 = ORC-9
	//    If OBR-11 Not = "L" set OBR-7 = ORC-15
	//
	//  Regions consolidating lab orders under one accession when within a certain time period
	//    not sure the time period, but thought 5 - 30 minutes (Sunquest Labs)
	//  Table ordering provider out of Cerner ORC-12, OBR-16, key is Cerner order number
	//  Read ORU from Regions and update to Cerner values
	//
	//  Remove 'E' prefix on PV1-7, PV1-8, PV1-17, ORC-12 and OBR-16
	//
	//  Remove duplicate DG1 DG1-6 = DONOTSEND
	//
	//  Send Observation as Inpatient
	//
	//    Check for swing bed - change unit - table T_Swingbed_Lab
	//
	//   Epic Beaker Orders only accepts ST, TX, NM, DT, RP in OBX-2
	//     Actual list accepted is larger, above list is Epic documentation
	//     Cerner says OBX-2 is a calculated value based on OBX-5 data
	//     Cerner is sending IS which is invalid.  Appears to come out when OBX-5 has a CD:####
	//     Change IS to ST in OBX-2
	//
	//   Do not populate OBR-7
	//
	//   Pass thru PV1-18 from Cerner - 12/12/2018
	//
	//   Ensure Regions receives HNA in MSH-4 - 1/9/2019
	//
	//   Remove carriage return line feed from notes segment "\.br\" - 4/03/2019
	//   PV1:3.1 copy from Sunquest - 22.Reglab schema defined as AssignedPatientLocation.pointofcareID
	//   Cerner 231 schema defined as AssignedPatientLocation.pointofcare  - removed ID from name - 4/04/2019
	//
	//   Remove the "G" prefix on IN1-49 - 4/5/2019
	//   Remove the "G" prefix on IN2-25 - 4/5/2019
	//
	//   Remove DG1 segments on ORM CA cancels and DC discontinues - 11/01/2019 Jira SD-22416
]]]]><![CDATA[></code>
<code>
<![CDATA[ 
	// ******
	// <assign value='' property='target.{PV1:HospitalService}' action='remove' />
]]]]><![CDATA[></code>
<assign value='"Cerner2RegORMBKRsub"' property='target.{MSH:16}' action='set' />
<assign value='"HNA"' property='target.{MSH:4}' action='set' />
<assign value='' property='target.{PID:9}' action='clear' />
<assign value='""' property='target.{PID:10}' action='set' />
<assign value='source.{PID:10(1)}' property='target.{PID:10}' action='set' />
<assign value='$ZCONVERT(target.{PID},"U" )' property='target.{PID}' action='set' />
<assign value='source.{ORCgrp(1).OBRgrp.OBR:16.1}' property='tempdocid' action='set' />
<assign value='$Translate(tempdocid,"E","")' property='tempdocid2' action='set' />
<assign value='tempdocid2' property='target.{ORCgrp(1).OBRgrp.OBR:16.1}' action='set' />
<assign value='source.{ORCgrp(1).ORC:12.1}' property='tempdocid' action='set' />
<assign value='$Translate(tempdocid,"E","")' property='tempdocid2' action='set' />
<assign value='tempdocid2' property='target.{ORCgrp(1).ORC:12.1}' action='set' />
<assign value='source.{PV1:7.1}' property='tempdocid' action='set' />
<assign value='$Translate(tempdocid,"E","")' property='tempdocid2' action='set' />
<assign value='tempdocid2' property='target.{PV1:7.1}' action='set' />
<assign value='source.{PV1:8.1}' property='tempdocid' action='set' />
<assign value='$Translate(tempdocid,"E","")' property='tempdocid2' action='set' />
<assign value='tempdocid2' property='target.{PV1:8.1}' action='set' />
<assign value='source.{PV1:17.1}' property='tempdocid' action='set' />
<assign value='$Translate(tempdocid,"E","")' property='tempdocid2' action='set' />
<assign value='tempdocid2' property='target.{PV1:17.1}' action='set' />

<assign value='' property='target.{ZPI}' action='remove' />
<assign value='' property='target.{ZEI}' action='remove' />
<assign value='' property='target.{ZVI}' action='remove' />

<code>
<![CDATA[ 
	// *******************   IP vs OP Location Logic ***********************************************
	//  <assign value='"N"' property='target.{PV1:PatientType}' action='set' />
]]]]><![CDATA[></code>
<if condition='..In(source.{PV1:18},"Observation,PreObservation")' >
<true>
<assign value='"I"' property='target.{PV1:PatientClass}' action='set' />
</true>
<false>
<if condition='..In(source.{PV1:18},"Inpatient,PreInpatient,Sleep Study,PreSleepStudy") || ..In(source.{PV1:3.1},"0NU,0AU,0RU,0OSU,0OSE,0OSW,0IC,0ND,G7W")' >
<true>
<assign value='"I"' property='target.{PV1:PatientClass}' action='set' />
</true>
<false>
<if condition='..In(source.{PV1:3.1},"GCSH,GCSH Main OR,PACU,GCSH Periop")' >
<true>
<assign value='"I"' property='target.{PV1:PatientClass}' action='set' />
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='clear' />
<assign value='"GOR"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
<assign value='"GOR99"' property='target.{PV1:AssignedPatientLocation.room}' action='set' />
</true>
<false>
<assign value='"O"' property='target.{PV1:PatientClass}' action='set' />
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='clear' />
<assign value='"GILL"' property='target.{PV1:AssignedPatientLocation}' action='set' />
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
</false>
</if>
</false>
</if>
</false>
</if>
<if condition='..In(source.{PV1:3.1},"GCSH,GCSH Main OR,PACU,GCSH Periop")' >
<true>
<assign value='"I"' property='target.{PV1:PatientClass}' action='set' />
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='clear' />
<assign value='"GOR"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
<assign value='"GOR99"' property='target.{PV1:AssignedPatientLocation.room}' action='set' />
</true>
</if>
<if condition='..In(source.{PV1:6.1},"GCSH,GCSH Main OR,PACU,GCSH Periop")' >
<true>
<assign value='"I"' property='target.{PV1:PatientClass}' action='set' />
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='clear' />
<assign value='"GOR"' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
<assign value='"GOR99"' property='target.{PV1:PriorPatientLocation.room}' action='set' />
</true>
</if>
<assign value='""' property='target.{ORCgrp(1).ORC:13}' action='set' />
<if condition='source.{PV1:8(1).1}="11845887"' >
<true>
<assign value='""' property='target.{PV1:8(1)}' action='set' />
</true>
</if>
<code>
<![CDATA[ 
	// *******************   Other Location Logic **********************************************************
]]]]><![CDATA[></code>
<if condition='..Contains(source.{PV1:AssignedPatientLocation.pointofcare},"0AIM")' >
<true>
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='set' />
<assign value='"GAIM"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</true>
</if>
<if condition='..Contains(source.{PV1:AssignedPatientLocation.pointofcare},"0WR") || ..In(source.{PV1:18},"Day Surgery,PreDaySurgery")' >
<true>
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='set' />
<assign value='"GSDS"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</true>
</if>
<if condition='(source.{PV1:AssignedPatientLocation.pointofcare} = "07W")' >
<true>
<assign value='"G7W"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</true>
</if>
<if condition='..In(source.{PV1:AssignedPatientLocation.pointofcare},"0PAN,0PAC,0OR,REG,REGS")' >
<true>
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='set' />
<assign value='"GOR"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</true>
</if>
<code>
<![CDATA[ 
	// *******************   Prior Location Logic **********************************************************
]]]]><![CDATA[></code>
<if condition='..Contains(source.{PV1:PriorPatientLocation.pointofcare},"0AIM")' >
<true>
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
<assign value='"GAIM"' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
</true>
</if>
<if condition='..Contains(source.{PV1:PriorPatientLocation.pointofcare},"0WR") || ..In(source.{PV1:18},"Day Surgery,PreDaySurgery")' >
<true>
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
<assign value='"GSDS"' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
</true>
</if>
<if condition='(source.{PV1:PriorPatientLocation.pointofcare} = "07W")' >
<true>
<assign value='"G7W"' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
</true>
</if>
<if condition='..In(source.{PV1:PriorPatientLocation.pointofcare},"0PAN,0PAC,0OR,REG,REGS")' >
<true>
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
<assign value='"GOR"' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
</true>
</if>
<code>
<![CDATA[ 
	// *******************   Hosptial Service Logic ************************************
]]]]><![CDATA[></code>
<if condition='..In(source.{PV1:AssignedPatientLocation.facilityHD},"LTC")' >
<true>
<if condition='..In(source.{PV1:18},"Recurring,PreRecurring")' >
<false>
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='clear' />
<assign value='"GLSH"' property='target.{PV1:AssignedPatientLocation}' action='set' />
</false>
</if>
</true>
</if>
<if condition='..In(source.{PV1:AssignedPatientLocation.facilityHD},"PGC")' >
<true>
<if condition='..In(source.{PV1:18},"Recurring,PreRecurring")' >
<false>
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='clear' />
<assign value='"GPSH"' property='target.{PV1:AssignedPatientLocation}' action='set' />
</false>
</if>
</true>
</if>
<if condition='..Contains(source.{PV1:HospitalService},"XEH")' >
<true>
<assign value='source.{PID:PatientAccountNumber}' property='target.{PID:PatientIDInternalID(1).Checkdigit}' action='set' />
<assign value='"C828"' property='target.{PID:PatientAccountNumber}' action='set' />
</true>
</if>
<if condition='..Contains(source.{PV1:HospitalService},"0SDS")' >
<true>
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='set' />
<assign value='"GSDS"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</true>
</if>
<code>
<![CDATA[ 
	// **********  Special Coding to send patient location for GPHS Gillette Pediatric Home service ***************
]]]]><![CDATA[></code>
<if condition='source.{PV1:AdmitSource} = 10' >
<true>
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='clear' />
<assign value='"GPHS"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
</true>
</if>
<code>
<![CDATA[ 
	// **********  Coding to send Region Company Code as account for XCOM Hosp Service Codes***************
	// **********  If value not found in global then send account number ********* 
]]]]><![CDATA[></code>
<if condition='..Contains(source.{PV1:HospitalService},"XCOM") ' >
<true>
<assign value='""' property='RegCC' action='set' />
<assign value='source.{PID:PatientAccountNumber}' property='target.{PID:3(1).2}' action='set' />
<code>
<![CDATA[ 
  //		s RegCC = ##class(GCH.RegLab.ADTtbl).GetRegLabCAccount(source.GetValueAt("PID:18.1"))
]]]]><![CDATA[></code>
<assign value='RegCC' property='target.{PID:PatientAccountNumber}' action='set' />
</true>
</if>
<code>
<![CDATA[ 
	// **********  Coding to send Region Company Code for LIO orders ***************
	//  <assign value='source.{PID:3(1).2}' property='target.{PID:18.1}' action='set' />
	]]]]><![CDATA[></code>
<if condition='..Contains(source.{PID:3(1).2},"C") ' >
<true>
<assign value='source.{PID:PatientAccountNumber}' property='target.{PID:3(1).2}' action='set' />
</true>
</if>
<code>
<![CDATA[ 
	//  OBR-27.6 = 'RO' Timing Priority = Routine and not cancel or discontinue
	//    If OBR-11 = "L"   set OBR-7 = ORC-9
	//    If OBR-11 Not = "L" set OBR-7 = ORC-15
	]]]]><![CDATA[></code>
	<code>
<![CDATA[
    // <if condition='target.{ORCgrp(1).OBRgrp.OBR:27.6}="RO"' >
    // <true>
    // <if condition='(target.{ORCgrp(1).ORC:1}="CA") || (target.{ORCgrp(1).ORC:1}="DC")' >
    // <false>
    // <if condition='(target.{ORCgrp(1).OBRgrp.OBR:11}="L")' >
    // <true>
    // <assign value='target.{ORCgrp(1).ORC:9.1}' property='target.{ORCgrp(1).OBRgrp.OBR:7}' action='set' />
    // </true>
    // <false>
    // <assign value='target.{ORCgrp(1).ORC:15.1}' property='target.{ORCgrp(1).OBRgrp.OBR:7}' action='set' />
    // </false>
    // </if>
    // </false>
    // </if>
    // </true>
    // </if>
    //
    //  <assign value='target.{IN1grp(k1).IN2:25(1).1}' property='holdpayerid' action='set' />
    //  <assign value='"G"_holdpayerid' property='holdpayerid1' action='set' />
    //  <assign value='holdpayerid1' property='target.{IN1grp(k1).IN2:25}' action='set' />
    //  <assign value='holdpayerid1' property='target.{IN1grp(k1).IN1:49}' action='set' />
]]]]><![CDATA[></code>
<foreach property='target.{IN1grp()}' key='k1' >
<assign value='' property='target.{IN1grp(k1).ZNI}' action='remove' />
<assign value='' property='target.{IN1grp(k1).ZN2}' action='remove' />
<foreach property='target.{IN1grp(k1).IN3grp()}' key='k2' >
<assign value='' property='target.{IN1grp(k1).IN3grp(k2).ZN3}' action='remove' />
</foreach>
</foreach>
<code>
<![CDATA[ 
    //  08/20/2018 - prefix guarantor (person id) with 'G'
	]]]]><![CDATA[></code>
<if condition='target.{GT1(1):GuarantorNumber(1).ID}=""' >
<false>
<assign value='target.{GT1(1):GuarantorNumber(1).ID}' property='holdpersonid' action='set' />
<assign value='"G"_holdpersonid' property='holdpersonid1' action='set' />
<assign value='holdpersonid1' property='target.{GT1(1):GuarantorNumber(1).ID}' action='set' />
</false>
</if>

<code>
<![CDATA[
	// Remove duplicate DG1 ICD9 to Order
	]]]]><![CDATA[></code>
	
<foreach property='target.{ORCgrp(1).OBRgrp.DG1()}' key='k3' >
<if condition='target.{ORCgrp(1).OBRgrp.DG1(k3):DiagnosisType}="DONOTSEND"' >
<true>
<assign value='' property='target.{ORCgrp(1).OBRgrp.DG1(k3)}' action='remove' />
</true>
</if>
</foreach>

<code>
<![CDATA[
	// Remove DG1 on cancels and discontinues
	]]]]><![CDATA[></code>
<if condition='(source.{ORCgrp(1).ORC:1}="CA")||(source.{ORCgrp(1).ORC:1}="DC")' >
<true>
<foreach property='target.{ORCgrp(1).OBRgrp.DG1()}' key='k6' >
<assign value='' property='target.{ORCgrp(1).OBRgrp.DG1(k6)}' action='remove' />
</foreach>
</true>
</if>

<code>
<![CDATA[
	// Remove carriage return from order notes
	]]]]><![CDATA[></code>
	
<assign value='""' property='holdnote' action='set' />
<foreach property='target.{ORCgrp(1).OBRgrp.NTE()}' key='k4' >
<foreach property='target.{ORCgrp(1).OBRgrp.NTE(k4):3()}' key='k5' >
<assign value='target.{ORCgrp(1).OBRgrp.NTE(k4):3(k5)}' property='holdnote' action='set' />
<assign value='$REPLACE(holdnote,"\.br\"," ")' property='holdnote' action='set' />
<assign value='holdnote' property='target.{ORCgrp(1).OBRgrp.NTE(k4):3(k5)}' action='set' />
</foreach>
</foreach>

<code>
<![CDATA[ 
    //  11/22/2017 - table ordering provider
    //
	//  Read table T_RegionsLab_OrderingProvider - Cerner OrderNbr is key to table
	//  to delete specific entry - do ##class(Ens.Util.LookupTable).%RemoveValue(wTableName,wTableKey)
	//  add / update - do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,wTableKey,wTableData)
	//
	//  table entire field - id and name for result messages
	//   extract just id to check for change
	]]]]><![CDATA[></code>
<assign value='source.{ORCgrp(1).ORC:2.1}' property='tempCernerOrder' action='set' />
<assign value='source.{ORCgrp(1).ORC:12}' property='tempORC12' action='set' />
<assign value='source.{ORCgrp(1).OBRgrp.OBR:16(1)}' property='tempOBR16' action='set' />
<assign value='source.{ORCgrp(1).ORC:12.1}' property='tempInORC12id' action='set' />
<assign value='source.{ORCgrp(1).OBRgrp.OBR:16(1).1}' property='tempInOBR16id' action='set' />
<assign value='$ZDATE($NOW(),8)' property='tempDateAdd' action='set' />
<assign value='""' property='tempDateResult' action='set' />
<assign value='""' property='tempDateCancel' action='set' />
<if condition='(source.{ORCgrp(1).ORC:1}="CA")||(source.{ORCgrp(1).ORC:1}="DC")' >
<true>
<assign value='$ZDATE($NOW(),8)' property='tempDateCancel' action='set' />
</true>
</if>
<assign value='tempCernerOrder' property='wTableKey' action='set' />
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_RegionsLab_OrderingProvider",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<code>
<![CDATA[ 
    // no entry found - so add new entry
        set wTableData=(tempORC12_"|"_tempOBR16_"|"_tempDateAdd_"|"_tempDateResult_"|"_tempDateCancel_"|") 
        set wTableName="T_RegionsLab_OrderingProvider"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,wTableKey,wTableData)
	]]]]><![CDATA[></code>
</true>
<false>
<assign value='$PIECE(wtableresult,"|",1)' property='temptblORC12' action='set' />
<assign value='$PIECE(temptblORC12,"^",1)' property='temptblORC12id' action='set' />
<assign value='$PIECE(wtableresult,"|",2)' property='temptblOBR16' action='set' />
<assign value='$PIECE(temptblOBR16,"^",1)' property='temptblOBR16id' action='set' />
<assign value='$PIECE(wtableresult,"|",3)' property='temptblDateAdd' action='set' />
<assign value='$PIECE(wtableresult,"|",4)' property='temptblDateResult' action='set' />
<assign value='$PIECE(wtableresult,"|",5)' property='temptblDateCancel' action='set' />
<if condition='(source.{ORCgrp(1).ORC:1}="CA")||(source.{ORCgrp(1).ORC:1}="DC")' >
<true>
<code>
<![CDATA[ 
    // cancel or discontinue - update table with cancel date
        set wTableData=(tempORC12_"|"_tempOBR16_"|"_temptblDateAdd_"|"_temptblDateResult_"|"_tempDateCancel_"|") 
        set wTableName="T_RegionsLab_OrderingProvider"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,wTableKey,wTableData)	
	]]]]><![CDATA[></code>
</true>
<false>
<if condition='(tempInORC12id = temptblORC12id)&amp;(tempInOBR16id = temptblOBR16id)' >
<false>
<code>
<![CDATA[ 
    // ordering doc on table differs from order - update table with orm data - update date add
        set wTableData=(tempORC12_"|"_tempOBR16_"|"_tempDateAdd_"|"_temptblDateResult_"|"_temptblDateCancel_"|") 
        set wTableName="T_RegionsLab_OrderingProvider"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,wTableKey,wTableData)	
	]]]]><![CDATA[></code>
</false>
</if>
</false>
</if>
</false>
</if>

<code>
<![CDATA[ 
    //  09/25/2018 - check location for swingbed
    //
	//  Read table T_Swingbed_Lab - unit^room^bed is key to table
	//  If found, replace unit number
	//  Check PV1-3 location and PV1-6 prior location
	]]]]><![CDATA[></code>

<assign value='""' property='wTableKey' action='set' />
<assign value='""' property='temproom' action='set' />
<assign value='""' property='tempbed' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.pointofcare}' property='tempunit' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.room}' property='temproom' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.bed}' property='tempbed' action='set' />
<assign value='tempunit_"^"_temproom_"^"_tempbed' property='wTableKey' action='set' />

<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_Swingbed_Lab",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<false>
<assign value='wtableresult' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</false>
</if>

<assign value='""' property='wTableKey' action='set' />
<assign value='""' property='temproom' action='set' />
<assign value='""' property='tempbed' action='set' />
<assign value='source.{PV1:PriorPatientLocation.pointofcare}' property='tempunit' action='set' />
<assign value='source.{PV1:PriorPatientLocation.room}' property='temproom' action='set' />
<assign value='source.{PV1:PriorPatientLocation.bed}' property='tempbed' action='set' />
<assign value='tempunit_"^"_temproom_"^"_tempbed' property='wTableKey' action='set' />

<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_Swingbed_Lab",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<false>
<assign value='wtableresult' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
</false>
</if>

<code>
<![CDATA[
    // Epic Beaker Orders only accepts ST, TX, NM, DT, RP in OBX-2
    //  if condition='..In(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:2},"ST,TX,NM,DT,RP")' >
    //    <false>
    //   <assign value='"ST"' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:2}' action='set' />
    //  </false>
]]]]><![CDATA[></code>
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<if condition='..In(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:2},"IS")' >
<true>
<assign value='"ST"' property='target.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:2}' action='set' />
</true>
</if>
</foreach>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2RegLabBkrSub">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>66181,50758.39154</TimeChanged>
<TimeCreated>61585,36930.746895</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A01' targetDocType='231.Cerner:ADT_A01' create='existing' language='objectscript' >
<code>
<![CDATA[ 
    //  Last Updated 01/25/2022 Al Johnson
	//  Last Updated in Prod: 03/13/2022 Al Johnson
	//  Create: 07/16/2018  Al Johnson
	//  Copied from GC.Cerner2RegLabsub 
	//  Description:  ADT Subroutine for Epic Beaker Lab
	//  (orignal - ) logic either Cerner alias or Cerner modobject
	//   changed from new to copy - include guarantor, insurance
	//   remove z segments
	//
	// Changed the transform create to "EXISTING"
	//  Then works from dtl - but does not work on individual test
	//
	// Created:  Started with copy of Cerner2RegLabSub  
	//  Description
	//    05/29/14 Only send 1st race code in PID-10  - ALJ
	// convert all PID chars to CAPS set PID:2.1 to C and prefix MRN with G
	// set PID:3.2 and 3.3 to 1 - set PID:3.4 to 2
	// clear PID:4 PID:9 and PV1_10
	// remove PV1:10 Hosp Serv Code
    // Inpatient if hosp service code is 0IP or 0ss or current unit is 0NU,0AU,0RU,0OSU,0OSE,0OSW,00IC,0ND or 07W
	// set PV1_2 to A and PV1_18 to N for inpatient other wise
	// set PV1_2 to O PV1_18 to S PV1_3 to GILL for outpatient 
	// Rooms Add Prefix of C if starts with 4, Prefix of G if starts with 7
	// Prefix Room with 0
	// Translate both Assigned and Previous Patient Location
	// 0AIM to GAIM; 0WR to GSDS; 07W to G7W; and 0PAN,0PAC,0OR,REG,REGS all to GOR
	// If 4OP then set Assigned Patient Location to GLSH
	//   01/20/17 Lifetime use GLSH, Phalen 2nd floor use GLSH
	// If 0SDS then set Assigned Patient Location to GSDS
	// Coding to send Regions Company account as account number for XCOM
    //           if PV1:14 = 10 send GPHS in PV1:3
	// If PV1:10 is XCOM and Guarantor Name contains :  move PID:18 to PID:3.2
	// Take data after : in GT1:3 and move to PID:18
	// If XEH then set PID:18 to C828 and move PID:18 to PID:3.2
	// Send patient location for GPHS Gillette Pediatric Home service *********
	// If PV1:14 is 10 than set PV1:3 to GPHS
	//
	//  PV1-2 must be IP, OP, ER, or OS per Todd Sommer - Regions 11/21/2016
	//  PV1-3.1 or PV1-6.1 GCSH - send GOR  02/15/2017
	//  PV1-3.1 or PV1-6.1 GCSH Main OR - send GOR  02/17/2017
	//  PV1-3.1 or PV1-6.1 PACU - send GOR  02/17/2017
	//  PV1-3.1 or PV1-6.1 GCSH Periop - send GOR  02/17/2017
	//  PV1-8 Referring Doc 11845887^Conversion^BlankProvider - remove 02/17/2017
	//  PV1-8 Add leading E to referring doctor number - 03/08/2017
	//   GOR unit needs GOR99 for room GOR^GOR99 - 03/27/2017
	//
	//  Remove 'E' prefix on PV1-7, PV1-8, PV1-17
	//
	//  Send actual event for Epic Beaker - Cerner Sunquest sending A28 on update
	//  Change back if EVN different
	//  Do Not change PV1-2 from I to IP for inpatient
	//  Do Not change PV1-2 from O to OP
	//
	//  Prefix GT1-2 person-id with 'G' 
	//
	//  Cerner Modobject changes MSH on A06/A07 - change back based on EVN - 08/30/2018
	//  Cerner Modobject changes MSH to A11 on A23 - change EVN from A23 to A11 - 08/30/2018
	//
	//  Send Observation as Inpatient 9/18/2018
	//
	//    Check for swing bed - change unit - table T_Swingbed_Lab
	//
	//  Send Observation and Outpatient in a Bed (A04 -> A01 and A06 -> A08) - 11/20/2018 (not chged yet)
	//
	//  Pass thru PV1-18 patient types from Cerner 12/12/2018
	//
    //   Ensure Regions receives HNA500 for ADT in MSH-4 - 1/21/2019
    //
    //  Send Day Surgery and Sleep Study (A04 -> A01) - 03/29/2019
    //
    //  Remove the "G" prefix on IN1-49 - 4/5/2019
    //  Remove the "G" prefix on IN2-25 - 4/5/2019
    //
    //  Infusion Therapy - leave as A04 -5/9/2019
    //  Change PV1-18 to InfusionTherapy so outpatient ADT can be sent to Regions - 5/9/2019
    //
    //  SameDaySurgery patient checked in for Observation being sent to Regions as A07 Inpatient to Outpatient - 5/29/2019
    //    This is because of EVN segment - in this case send as A08 update - 5/29/2019
    //
    //  Updated POC system (Glucomoters) in Regions needs outpatient GILL etc in PV1-3.4 8/17/2021 CNR-22075 RFC SD-94409
    //
    //  POC system does not process transfer correctly, creates second reg if diff facility in PV1-3.4
    //  Change to always send GCH Regions Beaker does not process PV1-3.4 so ok with them SD-98366 RFC SD-101391
    //
    //  New Patient Type "Overnight Outpatient" send as A01 and Inpatient CNR-22738 RFC SD-118497
    //
]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='"2.3"' property='target.{MSH:VersionID}' action='set' />
<assign value='"HNA500"' property='target.{MSH:4}' action='set' />
<assign value='"Beaker"' property='target.{MSH:5}' action='set' />
<assign value='"RLAB"' property='target.{MSH:6}' action='set' />
<assign value='"Cerner2RegLabBkrSub"' property='target.{MSH:16}' action='set' />
<assign value='' property='target.{EVN}' action='remove' />
<assign value='source.{EVN:1}' property='target.{EVN:1}' action='set' />
<assign value='source.{EVN:2}' property='target.{EVN:2}' action='set' />
<assign value='source.{EVN:3}' property='target.{EVN:3}' action='set' />
<assign value='source.{EVN:4}' property='target.{EVN:4}' action='set' />
<assign value='source.{EVN:5(1).1}' property='target.{EVN:5(1).1}' action='set' />
<assign value='source.{EVN:5(1).2}' property='target.{EVN:5(1).2}' action='set' />
<assign value='source.{EVN:5(1).3}' property='target.{EVN:5(1).3}' action='set' />
<assign value='source.{EVN:6}' property='target.{EVN:6}' action='set' />
<assign value='source.{PID}' property='target.{PID}' action='set' />
<assign value='source.{PV1}' property='target.{PV1}' action='set' />
<assign value='' property='target.{PID:9}' action='remove' />
<assign value='""' property='target.{PID:10}' action='set' />
<assign value='source.{PID:10(1)}' property='target.{PID:10}' action='set' />
<assign value='' property='target.{PV1:HospitalService}' action='remove' />

<assign value='' property='target.{ZPI}' action='remove' />
<assign value='' property='target.{ZEI}' action='remove' />
<assign value='' property='target.{ZVI}' action='remove' />
<assign value='' property='target.{ZBE}' action='remove' />
<assign value='' property='target.{ZFP}' action='remove' />
<assign value='' property='target.{ZVF}' action='remove' />
<assign value='' property='target.{ZFM}' action='remove' />
<assign value='' property='target.{ZFD}' action='remove' />
<assign value='' property='target.{ZAC}' action='remove' />

<code>
<![CDATA[ 
	// Cerner for Sunquest changing to A28 - put back to original for Epic Beaker 8/08/2018
]]]]><![CDATA[></code>
<if condition='(source.{MSH:9.2}="A28")' >
<true>
<if condition='(source.{EVN:EventTypeCode}="")' >
<false>
<assign value='source.{EVN:EventTypeCode}' property='target.{MSH:9.2}' action='set' />
</false>
</if>
</true>
</if>

<code>
<![CDATA[ 
	// Change Observation and Outpatient In a Bed A04 to A01 for Epic Beaker 11/20/2018
	// Send Day Surgery and Sleep Study (A04 -> A01) - 03/29/2019
	// Infusion Therapy being sent as Outpatient In a Bed - see logic below nested if - 5/9/2019
	// Change Overnight Outpatient A04 to A01 - 1/25/2022
]]]]><![CDATA[></code>
<if condition='(source.{EVN:EventTypeCode}="A04")' >
<true>
<if condition='(source.{PV1:18}="Observation")||(source.{PV1:18}="Outpatient in a Bed")' >
<true>
<assign value='"A01"' property='target.{MSH:9.2}' action='set' />
<assign value='"A01"' property='target.{EVN:EventTypeCode}' action='set' />
</true>
</if>
<if condition='(source.{PV1:18}="Day Surgery")||(source.{PV1:18}="Sleep Study")' >
<true>
<assign value='"A01"' property='target.{MSH:9.2}' action='set' />
<assign value='"A01"' property='target.{EVN:EventTypeCode}' action='set' />
</true>
</if>
<if condition='(source.{PV1:18}="Overnight Outpatient")' >
<true>
<assign value='"A01"' property='target.{MSH:9.2}' action='set' />
<assign value='"A01"' property='target.{EVN:EventTypeCode}' action='set' />
</true>
</if>
</true>
</if>

<code>
<![CDATA[ 
	// Infusion Therapy being sent as Outpatient In a Bed - leave as A04 - 5/9/2019
	// Infusion Therapy change PV1-18 for identification - 5/9/2019
]]]]><![CDATA[></code>
<if condition='source.{PV1:3.1}="Infusion Therapy"' >
<true>
<assign value='"InfusionTherapy"' property='target.{PV1:18}' action='set' />
<if condition='source.{EVN:EventTypeCode}="A04"' >
<true>
<assign value='"A04"' property='target.{MSH:9.2}' action='set' />
<assign value='"A04"' property='target.{EVN:EventTypeCode}' action='set' />
</true>
</if>
</true>
</if>

<code>
<![CDATA[ 
	// Cerner for Sunquest changing A06/A07 to A01/A04 - put back to original for Epic Beaker 8/30/2018
	//  A06 outpatient to inpatient - change to A08, A04 changed to A01 on reg 11/20/2018
	// <if condition='(source.{EVN:EventTypeCode}="A06" || (source.{EVN:EventTypeCode}="A07"))' >
	//
	//  A07 change to A08 for Observation, Outpatient in a Bed, Day Surgery or Sleep Study - 5/29/2019
	//  A07 logic add Overnight Outpatient - 1/25/2022
]]]]><![CDATA[></code>
<if condition='(source.{EVN:EventTypeCode}="A06")' >
<true>
<assign value='"A08"' property='target.{MSH:9.2}' action='set' />
<assign value='"A08"' property='target.{EVN:EventTypeCode}' action='set' />
</true>
<false>
<if condition='(source.{EVN:EventTypeCode}="A07")' >
<true>
<if condition='(source.{PV1:18}="Observation")||(source.{PV1:18}="Outpatient in a Bed")' >
<true>
<assign value='"A08"' property='target.{MSH:9.2}' action='set' />
<assign value='"A08"' property='target.{EVN:EventTypeCode}' action='set' />
</true>
<false>
<if condition='(source.{PV1:18}="Day Surgery")||(source.{PV1:18}="Sleep Study")' >
<true>
<assign value='"A08"' property='target.{MSH:9.2}' action='set' />
<assign value='"A08"' property='target.{EVN:EventTypeCode}' action='set' />
</true>
<false>
<if condition='(source.{PV1:18}="Overnight Outpatient")' >
<true>
<assign value='"A08"' property='target.{MSH:9.2}' action='set' />
<assign value='"A08"' property='target.{EVN:EventTypeCode}' action='set' />
</true>
<false>
<assign value='source.{EVN:EventTypeCode}' property='target.{MSH:9.2}' action='set' />
</false>
</if>
</false>
</if>
</false>
</if>
</true>
</if>
</false>
</if>

<code>
<![CDATA[ 
	// Cerner for Sunquest changing to A23 to A11 - change EVN to A11 for Epic Beaker 8/30/2018
]]]]><![CDATA[></code>
<if condition='(source.{MSH:9.2}="A11")' >
<true>
<assign value='"A11"' property='target.{EVN:EventTypeCode}' action='set' />
</true>
</if>

    
<foreach property='target.{ZKI()}' key='k1' >
<assign value='' property='target.{ZKI(k1)}' action='remove' />
</foreach>

<foreach property='target.{AL1grp()}' key='k1' >
<assign value='' property='target.{AL1grp(k1).ZAL}' action='remove' />
</foreach>

<foreach property='target.{ZQA()}' key='k1' >
<assign value='' property='target.{ZQA(k1)}' action='remove' />
</foreach>

<code>
<![CDATA[
    // <assign value='target.{IN1grp(k1).IN2:25(1).1}' property='holdpayerid' action='set' />
    // <assign value='"G"_holdpayerid' property='holdpayerid1' action='set' />
    // <assign value='holdpayerid1' property='target.{IN1grp(k1).IN2:25}' action='set' />
    // <assign value='holdpayerid1' property='target.{IN1grp(k1).IN1:49}' action='set' />
 ]]]]><![CDATA[></code>

<foreach property='target.{IN1grp()}' key='k1' >
<assign value='' property='target.{IN1grp(k1).ZNI}' action='remove' />
<assign value='' property='target.{IN1grp(k1).ZN2}' action='remove' />
<foreach property='target.{IN1grp(k1).IN3grp()}' key='k2' >
<assign value='' property='target.{IN1grp(k1).IN3grp(k2).ZN3}' action='remove' />
</foreach>
</foreach>

<code>
<![CDATA[ 
	// *******************   IP vs OP Location Logic ***********************************************
	// If hosp service code is 0IP or 0ss or current unit is 0NU,0AU,0RU,0OSU,0OSE,0OSW,00IC,0ND or 07W
	// set PV1_2 to A and PV1_18 to N for inpatient other wise - pass thru 12/12/2018
	// set PV1_2 to O PV1_18 to S PV1_3 to GILL for outpatient - pass thru 12/12/2018
	//  PV1-3.1 or PV1-6.1 GCSH - send GOR  02/15/2017
	//  PV1-3.1 or PV1-6.1 GCSH Main OR - send GOR  02/17/2017
	//  PV1-3.1 or PV1-6.1 PACU - send GOR  02/17/2017
	//  PV1-3.1 or PV1-6.1 GCSH Periop - send GOR  02/17/2017
	//   <assign value='"N"' property='target.{PV1:PatientType}' action='set' />
]]]]><![CDATA[></code>
<if condition='..In(source.{PV1:18},"Observation,PreObservation,Overnight Outpatient,PreOvernight Outpatient")' >
<true>
<assign value='"I"' property='target.{PV1:PatientClass}' action='set' />
</true>
<false>
<if condition='..In(source.{PV1:18},"Inpatient,PreInpatient,Sleep Study,PreSleepStudy") || ..In(source.{PV1:3.1},"0NU,0AU,0RU,0OSU,0OSE,0OSW,0IC,0ND,G7W")' >
<true>
<assign value='"I"' property='target.{PV1:PatientClass}' action='set' />
</true>
<false>
<if condition='..In(source.{PV1:3.1},"GCSH,GCSH Main OR,PACU,GCSH Periop")' >
<true>
<assign value='"I"' property='target.{PV1:PatientClass}' action='set' />
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='clear' />
<assign value='"GOR"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
<assign value='"GOR99"' property='target.{PV1:AssignedPatientLocation.room}' action='set' />
<assign value='"GCH"' property='target.{PV1:AssignedPatientLocation.facilityHD}' action='set' />
</true>
<false>
<assign value='"O"' property='target.{PV1:PatientClass}' action='set' />
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='clear' />
<assign value='"GILL"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
<assign value='"GCH"' property='target.{PV1:AssignedPatientLocation.facilityHD}' action='set' />
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
</false>
</if>
</false>
</if>
</false>
</if>
<if condition='..In(source.{PV1:3.1},"GCSH,GCSH Main OR,PACU,GCSH Periop")' >
<true>
<assign value='"I"' property='target.{PV1:PatientClass}' action='set' />
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='clear' />
<assign value='"GOR"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
<assign value='"GOR99"' property='target.{PV1:AssignedPatientLocation.room}' action='set' />
<assign value='"GCH"' property='target.{PV1:AssignedPatientLocation.facilityHD}' action='set' />
</true>
</if>
<if condition='..In(source.{PV1:6.1},"GCSH,GCSH Main OR,PACU,GCSH Periop")' >
<true>
<assign value='"I"' property='target.{PV1:PatientClass}' action='set' />
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='clear' />
<assign value='"GOR"' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
<assign value='"GOR99"' property='target.{PV1:PriorPatientLocation.room}' action='set' />
<assign value='"GCH"' property='target.{PV1:PriorPatientLocation.facilityHD}' action='set' />
</true>
</if>
<if condition='source.{PV1:8(1).1}="11845887"' >
<true>
<assign value='""' property='target.{PV1:8(1)}' action='set' />
</true>
</if>

<assign value='source.{PV1:7.1}' property='tempdocid' action='set' />
<assign value='$Translate(tempdocid,"E","")' property='tempdocid2' action='set' />
<assign value='tempdocid2' property='target.{PV1:7.1}' action='set' />
<assign value='source.{PV1:8.1}' property='tempdocid' action='set' />
<assign value='$Translate(tempdocid,"E","")' property='tempdocid2' action='set' />
<assign value='tempdocid2' property='target.{PV1:8.1}' action='set' />
<assign value='source.{PV1:17.1}' property='tempdocid' action='set' />
<assign value='$Translate(tempdocid,"E","")' property='tempdocid2' action='set' />
<assign value='tempdocid2' property='target.{PV1:17.1}' action='set' />

<code>
<![CDATA[ 
	// *******************   Other Location Logic ***********************************
	// Prefix Room with 0
	// Translate both Assigned and Previous Patient Location
	// 0AIM to GAIM; 0WR to GSDS; 07W to G7W; and 0PAN,0PAC,0OR,REG,REGS all to GOR
	// 
]]]]><![CDATA[></code>
<if condition='..Contains(source.{PV1:AssignedPatientLocation.pointofcare},"0AIM")' >
<true>
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='set' />
<assign value='"GAIM"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</true>
</if>
<if condition='..Contains(source.{PV1:AssignedPatientLocation.pointofcare},"0WR") || ..In(source.{PV1:18},"Day Surgery,PreDaySurgery")' >
<true>
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='set' />
<assign value='"GSDS"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
<assign value='"GCH"' property='target.{PV1:AssignedPatientLocation.facilityHD}' action='set' />
</true>
</if>
<if condition='(source.{PV1:AssignedPatientLocation.pointofcare} = "07W")' >
<true>
<assign value='"G7W"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</true>
</if>
<if condition='..In(source.{PV1:AssignedPatientLocation.pointofcare},"0PAN,0PAC,0OR,REG,REGS")' >
<true>
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='set' />
<assign value='"GOR"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
<assign value='"GCH"' property='target.{PV1:AssignedPatientLocation.facilityHD}' action='set' />
</true>
</if>
<code>
<![CDATA[ 
	// *******************   Prior Location Logic **********************************************************
]]]]><![CDATA[></code>
<if condition='..Contains(source.{PV1:PriorPatientLocation.pointofcare},"0AIM")' >
<true>
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
<assign value='"GAIM"' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
</true>
</if>
<if condition='..Contains(source.{PV1:PriorPatientLocation.pointofcare},"0WR")' >
<true>
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
<assign value='"GSDS"' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
<assign value='"GCH"' property='target.{PV1:PriorPatientLocation.facilityHD}' action='set' />
</true>
</if>
<if condition='(source.{PV1:PriorPatientLocation.pointofcare} = "07W")' >
<true>
<assign value='"G7W"' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
</true>
</if>
<if condition='..In(source.{PV1:PriorPatientLocation.pointofcare},"0PAN,0PAC,0OR,REG,REGS")' >
<true>
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
<assign value='"GOR"' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
<assign value='"GCH"' property='target.{PV1:PriorPatientLocation.facilityHD}' action='set' />
</true>
</if>
<code>
<![CDATA[ 
	// *******************   Hosptial Service Logic *******************************
	// If 4OP then set Assigned Patient Location to GLSH
	//   01/20/17 Lifetime use GLSH, Phalen 2nd floor use GLSH
	// If 0SDS then set Assigned Patient Location to GSDS
	// If XEH then set PID:18 to C828 and move PID:18 to PID:3.2
]]]]><![CDATA[></code>
<if condition='..In(source.{PV1:AssignedPatientLocation.facilityHD},"LTC")' >
<true>
<if condition='..In(source.{PV1:18},"Recurring,PreRecurring")' >
<false>
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='clear' />
<assign value='"GLSH"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
</false>
</if>
</true>
</if>
<if condition='..In(source.{PV1:AssignedPatientLocation.facilityHD},"PGC")' >
<true>
<if condition='..In(source.{PV1:18},"Recurring,PreRecurring")' >
<false>
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='clear' />
<assign value='"GPSH"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
</false>
</if>
</true>
</if>
<if condition='..Contains(source.{PV1:HospitalService},"XEH")' >
<true>
<assign value='source.{PID:PatientAccountNumber}' property='target.{PID:PatientIdentifierList(1).checkdigit}' action='set' />
<assign value='"C828"' property='target.{PID:PatientAccountNumber}' action='set' />
</true>
</if>
<if condition='..Contains(source.{PV1:HospitalService},"0SDS") || ..In(source.{PV1:18},"Day Surgery,PreDaySurgery")' >
<true>
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='set' />
<assign value='"GSDS"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
<assign value='"GCH"' property='target.{PV1:AssignedPatientLocation.facilityHD}' action='set' />
</true>
</if>
<code>
<![CDATA[ 
	// **********  Special Coding to send patient location for GPHS Gillette Pediatric Home service *********
	// If PV1:14 is 10 than set PV1:3 to GPHS
]]]]><![CDATA[></code>
<if condition='source.{PV1:AdmitSource} = 10' >
<true>
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='clear' />
<assign value='"GPHS"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
<assign value='"GCH"' property='target.{PV1:AssignedPatientLocation.facilityHD}' action='set' />
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
</true>
</if>
<code>
<![CDATA[ 
	// ********** Coding to send Company Account as account for XCOM Hosp Service Codes **********
	// If PV1:10 is XCOM and Guarantor Name contains :  move PID:18 to PID:3.2
	// Take data after : in GT1:3 and move to PID:18
]]]]><![CDATA[></code>
<if condition='(..Contains(source.{PV1:HospitalService},"XCOM")) &amp; (..Contains(source.{GT1(1):3},":"))' >
<true>
<assign value='source.{PID:PatientAccountNumber}' property='target.{PID:PatientIDInternalID(1).Checkdigit}' action='set' />
<assign value='$P(source.{GT1(1):3},":",2)' property='target.{PID:PatientAccountNumber}' action='set' />
</true>
</if>

<code>
<![CDATA[ 
    //  08/20/2018 - prefix guarantor (person id) with 'G'
	]]]]><![CDATA[></code>	
<if condition='target.{GT1(1):GuarantorNumber(1).ID}=""' >
<false>
<assign value='target.{GT1(1):GuarantorNumber(1).ID}' property='holdpersonid' action='set' />
<assign value='"G"_holdpersonid' property='holdpersonid1' action='set' />
<assign value='holdpersonid1' property='target.{GT1(1):GuarantorNumber(1).ID}' action='set' />
</false>
</if>

<code>
<![CDATA[ 
	// ********** convert all PID chars to CAPS
]]]]><![CDATA[></code>
<assign value='$ZCONVERT(target.{PID},"U" )' property='target.{PID}' action='set' />
<assign value='' property='target.{PV1:HospitalService}' action='remove' />
<assign value='' property='target.{PV1:52}' action='remove' />

<code>
<![CDATA[ 
    //  09/25/2018 - check location for swingbed
    //
	//  Read table T_Swingbed_Lab - unit^room^bed is key to table
	//  If found, replace unit number
	//  Check PV1-3 location and PV1-6 prior location
	]]]]><![CDATA[></code>

<assign value='""' property='wTableKey' action='set' />
<assign value='""' property='temproom' action='set' />
<assign value='""' property='tempbed' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.pointofcare}' property='tempunit' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.room}' property='temproom' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.bed}' property='tempbed' action='set' />
<assign value='tempunit_"^"_temproom_"^"_tempbed' property='wTableKey' action='set' />

<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_Swingbed_Lab",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<false>
<assign value='wtableresult' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</false>
</if>

<assign value='""' property='wTableKey' action='set' />
<assign value='""' property='temproom' action='set' />
<assign value='""' property='tempbed' action='set' />
<assign value='source.{PV1:PriorPatientLocation.pointofcare}' property='tempunit' action='set' />
<assign value='source.{PV1:PriorPatientLocation.room}' property='temproom' action='set' />
<assign value='source.{PV1:PriorPatientLocation.bed}' property='tempbed' action='set' />
<assign value='tempunit_"^"_temproom_"^"_tempbed' property='wTableKey' action='set' />

<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_Swingbed_Lab",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<false>
<assign value='wtableresult' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
</false>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2RegLabORMChgLocOnly">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64336,46986.331208</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORM_O01' targetDocType='22.RegLab:ORM_O01' create='new' language='objectscript' >
<subtransform class='GC.Cerner2RegLabORMsub' targetObj='target' sourceObj='source' />
<code>
<![CDATA[ 
	//  Last Updated 02/22/2017
	//  Last Updated in Prod: 02/22/2017 Al Johnson
	//  Create: 02/22/2017  Al Johnson 
	//  Description:  
	//	Uses subtransform CernerRegLabORMSub  for Regions Locations
	//  Version of Lab Orders for Microbiology - original source GCH.QCPR2RegLabORM
	//   Cerner gen lab tested without dtl, so only call subtransform
	// ***************************** START ORDER LOGIC ********************************

]]]]><![CDATA[></code>
<assign value='"Cerner2RegLabORM"' property='target.{MSH:8}' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2RegLabORMProcRMTST">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64337,39257.790021</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORM_O01' targetDocType='22.RegLab:ORM_O01' create='new' language='objectscript' >
<subtransform class='GC.Cerner2RegLabORMsub' targetObj='target' sourceObj='source' />
<code>
<![CDATA[ 
	//  Last Updated 02/22/2017
	//  Last Updated in Prod: 02/22/2017 Al Johnson
	//  Create: 02/22/2017  Al Johnson 
	//  Description:  
	//	Uses subtransform CernerRegLabORMSub  for Regions Locations
	//  Version of Lab Orders for Microbiology - original source GCH.QCPR2RegLabORM
	//   Cerner gen lab tested without dtl, so only call subtransform
	// ***************************** START ORDER LOGIC ********************************

]]]]><![CDATA[></code>
<assign value='"Cerner2RegLabORM"' property='target.{MSH:8}' action='set' />

<foreach property='target.{OBX()}' key='k1' >
<if condition='target.{OBX(k1):3.1}="TLPHN"' >
<true>
<assign value='""' property='target.{OBX(k1)}' action='remove' />
</true>
</if>
</foreach>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2RegLabORMblood">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64271,53316.081746</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORM_O01' targetDocType='22.RegLab:ORM_O01' create='new' language='objectscript' >
<subtransform class='GC.Cerner2RegLabORMsub' targetObj='target' sourceObj='source' />
<code>
<![CDATA[
 	//  Last Updated 11/23/2016
	//  Last Updated in Prod: 01/23/2016 Al Johnson
	//  Create: 11/23/2016  Al Johnson 
	//  Description:  
	//	Uses subtransform Qcpr2RegLabORMSub  also for ORC and OBR
	//  Version of Lab Orders for Blood Bank - original source GCH.QCPR2RegLabORM
	// ***************************** START ORDER LOGIC ********************************
    // for new orders
    // -- et calcium ionized labels to print in PICU put L in OBR 11 specimen Action Code
    // change discontinued (DC) orders to Cancel orders (CA)
    // Change ASAP Priority to DD for Discharage Dependant
    // -- Clear Specimen Source
    // Config Custom Questions for BB SDES CSFT and BFT
    // Dont send blank OBX
    // only send first 20 characters of NTE comment
    // source uses schema 231.Cerner - target 22.RegLab - be careful of OBX qualifiers

]]]]><![CDATA[></code>
<assign value='"Cerner2RegLabORMblood"' property='target.{MSH:8}' action='set' />
<code>
<![CDATA[ 
	// ***************************** START ORDER LOGIC ********************************
    // for new orders
    // get calcium ionized labels to print in PICU put L in OBR 11 specimen Action Code
    // change discontinued (DC) orders to Cancel orders (CA)
    // moves alternate id to OBR4 second position
    // Change ASAP Priority to DD for Discharage Dependant
    // Clear Specimen Source
    // <if condition='(..Contains(source.{ORCgrp(1).OBRgrp.OBR:UniversalServiceID.identifier},"CAWB")) &amp; (..Contains(source.{PV1:AssignedPatientLocation.nurseunitStation},"0IC")) ' >
    // <true>
    // <assign value='"L"' property='target.{OBR:SpecimenActionCode}' action='set' />
    //
    // <assign value='""' property='target.{OBR:SpecimenSource}' action='clear' />
    
]]]]><![CDATA[></code>

<if condition='..Contains(source.{ORCgrp(1).ORC:OrderControl},"DC")' >
<true>
<assign value='"CA"' property='target.{ORC:OrderControl}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBR:Quantitytiming(1).priority},"ASAP")' >
<true>
<assign value='"DD"' property='target.{OBR:Quantitytiming(1).priority}' action='set' />
</true>
</if>

<code>
<![CDATA[  	// *****************************  OBX LOGIC ********************************
]]]]><![CDATA[></code>

<code>
<![CDATA[ 
	// remove obx segments from target - subtransform copied all
	// will rebuild for blood bank orders
]]]]><![CDATA[></code>

<foreach property='target.{OBX()}' key='k1' >
<assign value='' property='target.{OBX(k1)}' action='remove' />
</foreach>

<code>
<![CDATA[ 
	// find comment and site description in obx segments
]]]]><![CDATA[></code>
<assign value='""' property='holdcomment' action='set' />
<assign value='""' property='holdcommentdesc' action='set' />
<assign value='""' property='holdsdes' action='set' />
<assign value='""' property='holdsite' action='set' />
<assign value='""' property='holdmodifier' action='set' />
<assign value='""' property='holdmodifierdesc' action='set' />
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="COMT"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdcomment' action='set' />
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.2}' property='holdcommentdesc' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="SDES"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdsdes' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="SITE"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdsite' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="MODIFIER"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdmodifier' action='set' />
</true>
</if>
</foreach>

<assign value='0' property='oc' action='set' />
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<assign value='oc + 1' property='oc' action='set' />
<code>
<![CDATA[     // *************************** Config Custom Questions  for BB
]]]]><![CDATA[></code>
<if condition='$Extract(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1},1,2) = "BB" ' >
<true>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1} = "BB%UO" ' >
<true>
<assign value='"1"' property='target.{OBX(1):1}' action='set' />
<assign value='"ST"' property='target.{OBX(1):2}' action='set' />
<assign value='"%UO"' property='target.{OBX(1):3}' action='set' />
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5(1)}' property='target.{OBX(1):5(1)}' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1} = "BB%PI11" ' >
<true>
<if condition='source.{ORCgrp(1).OBRgrp.OBR:4.1} = "TRBC" ' >
<true>
<assign value='"5"' property='target.{OBX(5):1}' action='set' />
<assign value='"ST"' property='target.{OBX(5):2}' action='set' />
<assign value='"%PI"' property='target.{OBX(5):3}' action='set' />
<assign value='"REQ: "_source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5(1)}' property='target.{OBX(5):5(1)}' action='set' />
</true>
<false>
<assign value='"2"' property='target.{OBX(2):1}' action='set' />
<assign value='"ST"' property='target.{OBX(2):2}' action='set' />
<assign value='"%PI"' property='target.{OBX(2):3}' action='set' />
<assign value='"REQ: "_source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5(1)}' property='target.{OBX(2):5(1)}' action='set' />
</false>
</if>
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1} = "BBC11" ' >
<true>
<assign value='"2"' property='target.{OBX(2):1}' action='set' />
<assign value='"ST"' property='target.{OBX(2):2}' action='set' />
<assign value='"%PI"' property='target.{OBX(2):3}' action='set' />
<assign value='"CONSENT: "_source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5(1)}' property='target.{OBX(2):5(1)}' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:ObservationIdentifier.identifier} = "BBC12" ' >
<true>
<assign value='"3"' property='target.{OBX(3):1}' action='set' />
<assign value='"ST"' property='target.{OBX(3):2}' action='set' />
<assign value='"%PI"' property='target.{OBX(3):3}' action='set' />
<assign value='"INDCT: "_source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5(1)}' property='target.{OBX(3):5(1)}' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:ObservationIdentifier.identifier} = "BBC13" ' >
<true>
<assign value='"4"' property='target.{OBX(4):1}' action='set' />
<assign value='"ST"' property='target.{OBX(4):2}' action='set' />
<assign value='"%PI"' property='target.{OBX(4):3}' action='set' />
<assign value='"RATE: "_source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5(1)}' property='target.{OBX(4):5(1)}' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:ObservationIdentifier.identifier} = "BB%PI1A" ' >
<true>
<assign value='"5"' property='target.{OBX(5):1}' action='set' />
<assign value='"ST"' property='target.{OBX(5):2}' action='set' />
<assign value='"%PI"' property='target.{OBX(5):3}' action='set' />
<assign value='"IRR: "_source.{OBX(k1):5(1)}' property='target.{OBX(5):5(1)}' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:ObservationIdentifier.identifier} = "BBNUO" ' >
<true>
<assign value='"1"' property='target.{OBX(1):1}' action='set' />
<assign value='"ST"' property='target.{OBX(1):2}' action='set' />
<assign value='"%PI"' property='target.{OBX(1):3}' action='set' />
<assign value='"ML "_source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5(1)}' property='target.{OBX(1):5(1)}' action='set' />
</true>
</if>
<if condition='(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:ObservationIdentifier.identifier} = "BBNU") &amp; (..DoesNotContain(source.{OBX(k1):5(1)},"CC")) ' >
<true>
<assign value='"1"' property='target.{OBX(1):1}' action='set' />
<assign value='"ST"' property='target.{OBX(1):2}' action='set' />
<assign value='"%UO"' property='target.{OBX(1):3}' action='set' />
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5(1)}' property='target.{OBX(1):5(1)}' action='set' />
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5(1).2}' property='target.{OBX(1):5(1).2}' action='set' />
</true>
</if>
<if condition='(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:ObservationIdentifier.identifier} = "BBP113") &amp; (source.{OBX(k1):5(1)} &gt; "0") ' >
<true>
<assign value='"1"' property='target.{OBX(1):1}' action='set' />
<assign value='"ST"' property='target.{OBX(1):2}' action='set' />
<assign value='"%PI"' property='target.{OBX(1):3}' action='set' />
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5(1)}_" ML PEDS UNITS"' property='target.{OBX(1):5(1)}' action='set' />
</true>
</if>
</true>
<false>
<code>
<![CDATA[     // *************************** Config Custom Questions for SDES
]]]]><![CDATA[></code>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:ObservationIdentifier.identifier},"SDES")' >
<true>
<if condition='($LENGTH(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:ObservationIdentifier.text}) &lt; 1)' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX}' property='target.{OBX(1)}' action='set' />
<assign value='"1"' property='target.{OBX(1):SetIDOBX}' action='set' />
<assign value='"MAS1"' property='target.{OBX(1):ProducersID}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:ObservationIdentifier.text},"SITE")' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX}' property='target.{OBX(2)}' action='set' />
<assign value='"2"' property='target.{OBX(2):SetIDOBX}' action='set' />
<assign value='"MAS2"' property='target.{OBX(2):ProducersID}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:ObservationIdentifier.text},"MODIFIER")' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX}' property='target.{OBX(3)}' action='set' />
<assign value='"3"' property='target.{OBX(3):SetIDOBX}' action='set' />
<assign value='"MAS3"' property='target.{OBX(3):ProducersID}' action='set' />
</true>
</if>
</true>
<false>
<assign property='tempOBX' value='""' />
<assign property='tempOBX3type' value='""' />
<assign  property='tempOBX3type' value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}' action='set' /> 
<if condition='(tempOBX3type = "Requested Start Date/Time") || (tempOBX3type = "COMT")' >
<false>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX}' property='target.{OBX(k1)}' action='set' />
</false>
</if>
</false>
</if>
</false>
</if>
<code>
<![CDATA[     // *************************** Config Specimen Source  for CSFT and BFT
]]]]><![CDATA[></code>
<if condition='..In(source.{ORCgrp(1).OBRgrp.OBR:4.2},"CSFT,BFT") ' >
<true>
<assign value='(target.{OBX(*)}+1)' property='OBXnum' action='set' />
<assign value='OBXnum' property='target.{OBX(OBXnum):1}' action='set' />
<assign value='"ST"' property='target.{OBX(OBXnum):2}' action='set' />
<assign value='"SOURC"' property='target.{OBX(OBXnum):3}' action='set' />
<assign value='source.{ORCgrp(1).OBRgrp.OBR:15.2}' property='target.{OBX(OBXnum):5(1)}' action='set' />
</true>
</if>
<code>
<![CDATA[     // *************************** Remove blank OBX
]]]]><![CDATA[></code>
<if condition='target.{OBX(k1):ObservationValue} = ""' >
<true>
<assign value='' property='target.{OBX(k1)}' action='remove' />
</true>
</if>
</foreach>

<code>
<![CDATA[     // *************************** Remove blank NTE
   // only send first 20 characters of NTE comment per Todd 9/8/20
]]]]><![CDATA[></code>
<if condition='($LENGTH(holdcomment) &lt; 1)' >
<true>
<assign value='""' property='target.{NTEi2(1)}' action='remove' />
</true>
<false>
<assign value='holdcommentdesc' property='target.{NTEi2(1):1}' action='set' />
<assign value='$Extract(holdcomment,1,20)' property='target.{NTEi2(1):3(1)}' action='set' />
</false>
</if>

<assign value='$ZCONVERT(target.{PID},"U" )' property='target.{PID}' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2RegLabORMgenlab">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64271,47842.906111</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORM_O01' targetDocType='22.RegLab:ORM_O01' create='new' language='objectscript' >
<subtransform class='GC.Cerner2RegLabORMsub' targetObj='target' sourceObj='source' />
<code>
<![CDATA[ 
	//  Last Updated 11/23/2016
	//  Last Updated in Prod: 01/23/2016 Al Johnson
	//  Create: 11/23/2016  Al Johnson 
	//  Description:  
	//	Uses subtransform Qcpr2RegLabORMSub  also for ORC and OBR
	//  Version of Lab Orders for Microbiology - original source GCH.QCPR2RegLabORM
	//   Cerner gen lab tested without dtl, so only call subtransform
	// ***************************** START ORDER LOGIC ********************************

]]]]><![CDATA[></code>
<assign value='"Cerner2RegLabORMgen"' property='target.{MSH:8}' action='set' />

<code>
<![CDATA[ 
	// find comment and site description in obx segments
]]]]><![CDATA[></code>
<assign value='""' property='holdcomment' action='set' />
<assign value='""' property='holdcommentdesc' action='set' />
<assign value='""' property='holdsdes' action='set' />
<assign value='""' property='holdsite' action='set' />
<assign value='""' property='holdmodifier' action='set' />
<assign value='""' property='holdmodifierdesc' action='set' />
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="COMT"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdcomment' action='set' />
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.2}' property='holdcommentdesc' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="SDES"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdsdes' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="SITE"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdsite' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="MODIFIER"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdmodifier' action='set' />
</true>
</if>
</foreach>

<code>
<![CDATA[     // *************************** Remove OBX from output OBX
]]]]><![CDATA[></code>
<foreach property='target.{OBX()}' key='k1' >
<assign value='' property='target.{OBX(k1)}' action='remove' />
</foreach>

<code>
<![CDATA[     // *************************** Config Custom Questions for SDES
    // only create SDES when value for gen lab
]]]]><![CDATA[></code>


<if condition='($LENGTH(holdsite) &lt; 1)' >
<false>
<assign value='"1"' property='target.{OBX(1):SetIDOBX}' action='set' />
<assign value='"ST"' property='target.{OBX(1):2}' action='set' />
<assign value='"SDES"' property='target.{OBX(1):3}' action='set' />
<assign value='holdsdes' property='target.{OBX(1):5}' action='set' />
<assign value='""' property='target.{OBX(1):ProducersID}' action='set' />
</false>
</if>

<if condition='($LENGTH(holdsite) &lt; 1)' >
<false>
<assign value='"2"' property='target.{OBX(2):SetIDOBX}' action='set' />
<assign value='"ST"' property='target.{OBX(2):2}' action='set' />
<assign value='"SDES"' property='target.{OBX(2):3.1}' action='set' />
<assign value='"SITE"' property='target.{OBX(2):3.2}' action='set' />
<assign value='holdsite' property='target.{OBX(2):5}' action='set' />
<assign value='""' property='target.{OBX(2):ProducersID}' action='set' />
</false>
</if>

<if condition='($LENGTH(holdmodifier) &lt; 1)' >
<false>
<assign value='"3"' property='target.{OBX(3):SetIDOBX}' action='set' />
<assign value='"ST"' property='target.{OBX(3):2}' action='set' />
<assign value='"SDES"' property='target.{OBX(3):3.1}' action='set' />
<assign value='"MODIFIER"' property='target.{OBX(3):3.2}' action='set' />
<assign value='holdmodifier' property='target.{OBX(3):5}' action='set' />
<assign value='""' property='target.{OBX(3):ProducersID}' action='set' />
</false>
</if>

<code>
<![CDATA[     // *************************** Config Specimen Source  for CSFT and BFT
    //
    //  check on this code 
    //  <if condition='..In(source.{ORCgrp(1).OBRgrp.OBR:4.2},"CSFT,BFT") ' >
    //  <true>
    //  <assign value='(target.{OBX(*)}+1)' property='OBXnum' action='set' />
    //  <assign value='OBXnum' property='target.{OBX(OBXnum):1}' action='set' />
    //  <assign value='"ST"' property='target.{OBX(OBXnum):2}' action='set' />
    //  <assign value='"SOURC"' property='target.{OBX(OBXnum):3}' action='set' />
    //  <assign value='source.{ORCgrp(1).OBRgrp.OBR:15.2}' property='target.{OBX(OBXnum):5(1)}' action='set' />
    //  </true>
    //  </if>
]]]]><![CDATA[></code>

<code>
<![CDATA[     // *************************** Remove blank NTE
   // only send first 20 characters of NTE comment per Todd 9/8/20
]]]]><![CDATA[></code>
<if condition='($LENGTH(holdcomment) &lt; 1)' >
<true>
<assign value='""' property='target.{NTEi2(1)}' action='remove' />
</true>
<false>
<assign value='holdcommentdesc' property='target.{NTEi2(1):1}' action='set' />
<assign value='$Extract(holdcomment,1,20)' property='target.{NTEi2(1):3(1)}' action='set' />
</false>
</if>

<assign value='$ZCONVERT(target.{PID},"U" )' property='target.{PID}' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2RegLabORMmicro">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64271,48212.036037</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORM_O01' targetDocType='22.RegLab:ORM_O01' create='new' language='objectscript' >
<subtransform class='GC.Cerner2RegLabORMsub' targetObj='target' sourceObj='source' />
<code>
<![CDATA[ 
	//  Last Updated 11/23/2016
	//  Last Updated in Prod: 01/23/2016 Al Johnson
	//  Create: 11/23/2016  Al Johnson 
	//  Description:  
	//	Uses subtransform Qcpr2RegLabORMSub  also for ORC and OBR
	//  Version of Lab Orders for Microbiology - original source GCH.QCPR2RegLabORM
	// ***************************** START ORDER LOGIC ********************************
    // for new orders
    // -- ? get calcium ionized labels to print in PICU put L in OBR 11 specimen Action Code
    // change discontinued (DC) orders to Cancel orders (CA)
    // moves alternate id to OBR4 second position
    // Change ASAP Priority to DD for Discharage Dependant
    // Clear Specimen Source
    // Config Custom Questions for BB SDES CSFT and BFT
    // Dont send blank OBX
    // only send first 20 characters of NTE comment

]]]]><![CDATA[></code>
<assign value='"Qcpr2RegLabORM2"' property='target.{MSH:8}' action='set' />
<code>
<![CDATA[ 
	// ***************************** START ORDER LOGIC ********************************
    // for new orders
    // get calcium ionized labels to print in PICU put L in OBR 11 specimen Action Code
    // change discontinued (DC) orders to Cancel orders (CA)
    // moves alternate id to OBR4 second position
    // Change ASAP Priority to DD for Discharage Dependant
    // Clear Specimen Source
    //
    // <if condition='(..Contains(source.{ORCgrp(1).OBRgrp.OBR:UniversalServiceID.identifier},"CAWB")) &amp; (..Contains(source.{PV1:AssignedPatientLocation.nurseunitStation},"0IC")) ' >
    //  <true>
    //  <assign value='"L"' property='target.{OBR:SpecimenActionCode}' action='set' />
    //
    //   <assign value='""' property='target.{OBR:SpecimenSource}' action='clear' /> 
]]]]><![CDATA[></code>

<if condition='..Contains(source.{ORCgrp(1).ORC:OrderControl},"DC")' >
<true>
<assign value='"CA"' property='target.{ORC:OrderControl}' action='set' />
</true>
</if>

<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBR:Quantitytiming(1).priority},"ASAP")' >
<true>
<assign value='"DD"' property='target.{OBR:Quantitytiming(1).priority}' action='set' />
</true>
</if>

<code>
<![CDATA[  	// *****************************  OBX LOGIC ********************************
]]]]><![CDATA[></code>

<code>
<![CDATA[ 
	// find comment and site description in obx segments
]]]]><![CDATA[></code>
<assign value='""' property='holdcomment' action='set' />
<assign value='""' property='holdcommentdesc' action='set' />
<assign value='""' property='holdsdes' action='set' />
<assign value='""' property='holdsite' action='set' />
<assign value='""' property='holdmodifier' action='set' />
<assign value='""' property='holdmodifierdesc' action='set' />
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="COMT"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdcomment' action='set' />
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.2}' property='holdcommentdesc' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="SDES"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdsdes' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="SITE"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdsite' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="MODIFIER"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdmodifier' action='set' />
</true>
</if>
</foreach>

<code>
<![CDATA[     // *************************** Remove OBX from output OBX
]]]]><![CDATA[></code>
<foreach property='target.{OBX()}' key='k1' >
<assign value='' property='target.{OBX(k1)}' action='remove' />
</foreach>

<code>
<![CDATA[     // *************************** Config Custom Questions for SDES
    // create SDES whether blank or not - others only if values
]]]]><![CDATA[></code>

<assign value='"1"' property='target.{OBX(1):SetIDOBX}' action='set' />
<assign value='"ST"' property='target.{OBX(1):2}' action='set' />
<assign value='"SDES"' property='target.{OBX(1):3}' action='set' />
<assign value='holdsdes' property='target.{OBX(1):5}' action='set' />
<assign value='""' property='target.{OBX(1):ProducersID}' action='set' />


<if condition='($LENGTH(holdsite) &lt; 1)' >
<false>
<assign value='"2"' property='target.{OBX(2):SetIDOBX}' action='set' />
<assign value='"ST"' property='target.{OBX(2):2}' action='set' />
<assign value='"SDES"' property='target.{OBX(2):3.1}' action='set' />
<assign value='"SITE"' property='target.{OBX(2):3.2}' action='set' />
<assign value='holdsite' property='target.{OBX(2):5}' action='set' />
<assign value='""' property='target.{OBX(2):ProducersID}' action='set' />
</false>
</if>

<if condition='($LENGTH(holdmodifier) &lt; 1)' >
<false>
<assign value='"3"' property='target.{OBX(3):SetIDOBX}' action='set' />
<assign value='"ST"' property='target.{OBX(3):2}' action='set' />
<assign value='"SDES"' property='target.{OBX(3):3.1}' action='set' />
<assign value='"MODIFIER"' property='target.{OBX(3):3.2}' action='set' />
<assign value='holdmodifier' property='target.{OBX(3):5}' action='set' />
<assign value='""' property='target.{OBX(3):ProducersID}' action='set' />
</false>
</if>

<code>
<![CDATA[     // *************************** Config Specimen Source  for CSFT and BFT
    //
    //  check on this code 
    //  <if condition='..In(source.{ORCgrp(1).OBRgrp.OBR:4.2},"CSFT,BFT") ' >
    //  <true>
    //  <assign value='(target.{OBX(*)}+1)' property='OBXnum' action='set' />
    //  <assign value='OBXnum' property='target.{OBX(OBXnum):1}' action='set' />
    //  <assign value='"ST"' property='target.{OBX(OBXnum):2}' action='set' />
    //  <assign value='"SOURC"' property='target.{OBX(OBXnum):3}' action='set' />
    //  <assign value='source.{ORCgrp(1).OBRgrp.OBR:15.2}' property='target.{OBX(OBXnum):5(1)}' action='set' />
    //  </true>
    //  </if>
]]]]><![CDATA[></code>

<code>
<![CDATA[     // *************************** Remove blank NTE
   // only send first 20 characters of NTE comment per Todd 9/8/20
]]]]><![CDATA[></code>
<if condition='($LENGTH(holdcomment) &lt; 1)' >
<true>
<assign value='""' property='target.{NTEi2(1)}' action='remove' />
</true>
<false>
<assign value='holdcommentdesc' property='target.{NTEi2(1):1}' action='set' />
<assign value='$Extract(holdcomment,1,20)' property='target.{NTEi2(1):3(1)}' action='set' />
</false>
</if>

<assign value='$ZCONVERT(target.{PID},"U" )' property='target.{PID}' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2RegLabORMpath">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64337,43220.758644</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORM_O01' targetDocType='22.RegLab:ORM_O01' create='new' language='objectscript' >
<subtransform class='GC.Cerner2RegLabORMsub' targetObj='target' sourceObj='source' />
<code>
<![CDATA[
    // Created 11/10/2016  Al Johnson 
	// Last Updated 02/22/2017  Al Johnson
	//  Last moved to Prod 02/23/2017
	// Create: 11/10/2016 Copied and converted from Qcpr2RegLabORMpath 
	// Formats Orders for Path Procedures as required by Regions
	// Path orders send procedure code in OBR:4.1 (Cerner sending in OBR:4.2)
	// Send OBR:31 into new last NTE segment = Reason For Lab
	// unless there are order notes then those are last
	//  Cerner comments coming in OBX OBX|2|ST|COMT^Lab Order Instructions||Test Lab Order Instructions
	// For EP9911 (A-E)MOD,(A-E)SITE,(A-E)SITEMOD,(A-E)INFO changed to MOD,SITE,SITEMOD,INF
	// For 3682 3683 create NTE-2 Specimen Source with value from OBX with Specimen souce designated
]]]]><![CDATA[></code>
<assign value='"Qcpr2RelLabORMpath"' property='target.{MSH:8}' action='set' />
<code>
<![CDATA[ 
	// ***************************** BASIC ORDER LOGIC ********************************
    // change discontinued (DC) orders to Cancel orders (CA)
    // moves alternate id to OBR4 second position
    // Change ASAP Priority to DD for Discharage Dependant
    // Copy OBR:4.2 to OBR:4.1
]]]]><![CDATA[></code>
<if condition='..Contains(source.{ORCgrp(1).ORC:OrderControl},"DC")' >
<true>
<assign value='"CA"' property='target.{ORC:OrderControl}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBR:Quantitytiming(1).priority},"ASAP")' >
<true>
<assign value='"DD"' property='target.{OBR:Quantitytiming(1).priority}' action='set' />
</true>
</if>
<assign value='""' property='target.{OBR:SpecimenSource}' action='clear' />
<code>
<![CDATA[ 
	// ***************************** PATHOLOGY ORDER LOGIC ********************************
]]]]><![CDATA[></code>
<assign value='' property='target.{OBR:SpecimenReceivedDateTime}' action='clear' />
<assign value='""' property='target.{NTEi2(1)}' action='remove' />

<code>
<![CDATA[ 
	// find comment - notes in obx to create last nte segment
]]]]><![CDATA[></code>
<assign value='""' property='holdcomment' action='set' />
<assign value='""' property='holdcommentdesc' action='set' />
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="COMT"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.2}' property='holdcommentdesc' action='set' />
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdcomment' action='set' />
</true>
</if>
</foreach>

<code>
<![CDATA[ 
	// ***************************** PATHOLOGY ORDER LOGIC Proc 3682 3683 ********************************
]]]]><![CDATA[></code>
<if condition='..In(source.{ORCgrp(1).OBRgrp.OBR:4.2},"3682,3683")' >
<true>
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"LMPD")' >
<true>
<assign value='"1"' property='target.{NTEi2(1):1}' action='set' />
<assign value='"LMP:"_target.{OBX(k1):5}' property='target.{NTEi2(1):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"Specimen source")' >
<true>
<assign value='"2"' property='target.{NTEi2(2):1}' action='set' />
<assign value='"Specimen source-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(2):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"PAPHX")' >
<true>
<assign value='"3"' property='target.{NTEi2(3):1}' action='set' />
<assign value='"History of Abnormal PAP/HPV-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(3):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"MENSTRUAL")' >
<true>
<assign value='"4"' property='target.{NTEi2(4):1}' action='set' />
<assign value='"Menstrual status-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(4):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"HORMONE")' >
<true>
<assign value='"5"' property='target.{NTEi2(5):1}' action='set' />
<assign value='"Hormones/Contraceptives-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(5):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"TREATHX")' >
<true>
<assign value='"6"' property='target.{NTEi2(6):1}' action='set' />
<assign value='"Treatment History-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(6):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"REFLEX")' >
<true>
<assign value='"7"' property='target.{NTEi2(7):1}' action='set' />
<assign value='"Reflex HPV Testing-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(7):3(1)}' action='set' />
</true>
</if>
<assign value='""' property='target.{OBX(k1)}' action='remove' />
</foreach>
</true>
</if>
<code>
<![CDATA[ 
	// ***************************** PATHOLOGY ORDER LOGIC Proc 09922 ********************************
]]]]><![CDATA[></code>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBR:4.2},"09922")' >
<true>
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"PATHCLINHX")' >
<true>
<assign value='"1"' property='target.{NTEi2(1):1}' action='set' />
<assign value='"Pertinent Clinical History/Evaluate for?-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(1):3(1)}' action='set' />
</true>
</if>
<assign value='""' property='target.{OBX(k1)}' action='remove' />
</foreach>
</true>
</if>
<code>
<![CDATA[ 
	// ***************************** PATHOLOGY ORDER LOGIC Proc RH9019 ********************************
]]]]><![CDATA[></code>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBR:4.2},"RH9019")' >
<true>
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"PATHSUSPECT")' >
<true>
<assign value='"1"' property='target.{NTEi2(1):1}' action='set' />
<assign value='"Suspicious Of?-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(1):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"PATHCLINHX")' >
<true>
<assign value='"2"' property='target.{NTEi2(2):1}' action='set' />
<assign value='"Pertinent Clinical History/Evaluate for?-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(2):3(1)}' action='set' />
</true>
</if>
<assign value='""' property='target.{OBX(k1)}' action='remove' />
</foreach>
</true>
</if>

<code>
<![CDATA[ 
	// ***************************** PATHOLOGY ORDER LOGIC Proc 0471 ********************************
]]]]><![CDATA[></code>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBR:4.2},"0471")' >
<true>
<assign value='"2"' property='target.{NTEi2(2):1}' action='set' />
<assign value='"Cytology specimen source-&gt;"_source.{ORCgrp(1).OBRgrp.OBR:15.2}' property='target.{NTEi2(2):3(1)}' action='set' />
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"PATHCLINHX")' >
<true>
<assign value='"1"' property='target.{NTEi2(1):1}' action='set' />
<assign value='"Pertinent Clinical History/Evaluate for?-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(1):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"CYTOSPECMOD")' >
<true>
<assign value='"2"' property='target.{NTEi2(3):1}' action='set' />
<assign value='"For Bronchoscopy specimens only, evaluate for:-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(3):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"CYTOSPECADD")' >
<true>
<assign value='"3"' property='target.{NTEi2(4):1}' action='set' />
<assign value='"For Bronchoscopy specimens only, evaluate for:-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(4):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"CYTOBRONCH")' >
<true>
<assign value='"4"' property='target.{NTEi2(5):1}' action='set' />
<assign value='"For Bronchoscopy specimens only, evaluate for:-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(5):3(1)}' action='set' />
</true>
</if>
<assign value='""' property='target.{OBX(k1)}' action='remove' />
</foreach>
</true>
</if>
<code>
<![CDATA[ 
	// ***************************** PATHOLOGY ORDER LOGIC Proc EP9907 ********************************
]]]]><![CDATA[></code>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBR:4.2},"EP9907")' >
<true>
<assign value='"2"' property='target.{NTEi2(2):1}' action='set' />
<assign value='"Cytology FNA specimen source-&gt;"_source.{ORCgrp(1).OBRgrp.OBR:15.2}' property='target.{NTEi2(2):3(1)}' action='set' />
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp(k1)}' key='k1' >
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"PATHCLINHX")' >
<true>
<assign value='"1"' property='target.{NTEi2(1):1}' action='set' />
<assign value='"Pertinent Clinical History/Evaluate for?-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(1):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"CYTOSPECMOD")' >
<true>
<assign value='"3"' property='target.{NTEi2(3):1}' action='set' />
<assign value='"Specimen Modifier-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(3):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"CYTOSPECADD")' >
<true>
<assign value='"4"' property='target.{NTEi2(4):1}' action='set' />
<assign value='"Specimen Addtl Info-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(4):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"CYTOAIR")' >
<true>
<assign value='"5"' property='target.{NTEi2(5):1}' action='set' />
<assign value='"Number of air-dried slides-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(5):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"CYTOFIXED")' >
<true>
<assign value='"6"' property='target.{NTEi2(6):1}' action='set' />
<assign value='"Number of fixed slides-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(6):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"CYTOFLUID")' >
<true>
<assign value='"7"' property='target.{NTEi2(7):1}' action='set' />
<assign value='"Fluid collected?-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(7):3(1)}' action='set' />
</true>
</if>
<assign value='""' property='target.{OBX(k1)}' action='remove' />
</foreach>
</true>
</if>
<code>
<![CDATA[ 
	// ***************************** PATHOLOGY ORDER LOGIC Proc 0438 ********************************
]]]]><![CDATA[></code>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBR:4.2},"0438")' >
<true>
<assign value='"2"' property='target.{NTEi2(2):1}' action='set' />
<assign value='"Flow Cytometry specimen source-&gt;"_source.{ORCgrp(1).OBRgrp.OBR:15.2}' property='target.{NTEi2(2):3(1)}' action='set' />
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp(k1)}' key='k1' >
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"PATHCLINHX")' >
<true>
<assign value='"1"' property='target.{NTEi2(1):1}' action='set' />
<assign value='"Pertinent Clinical History/Evaluate for?-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(1):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"BONEMOLE")' >
<true>
<assign value='"2"' property='target.{NTEi2(2):1}' action='set' />
<assign value='"Flow cytometry studies:-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(2):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"BONECYTO")' >
<true>
<assign value='"3"' property='target.{NTEi2(3):1}' action='set' />
<assign value='"Cytogenetics-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(3):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"BONECULT")' >
<true>
<assign value='"4"' property='target.{NTEi2(4):1}' action='set' />
<assign value='"Cultures:-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(4):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"BONESTAIN")' >
<true>
<assign value='"5"' property='target.{NTEi2(5):1}' action='set' />
<assign value='"Stain:-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(5):3(1)}' action='set' />
</true>
</if>
<assign value='""' property='target.{OBX(k1)}' action='remove' />
</foreach>
</true>
</if>
<code>
<![CDATA[ 
	// ***************************** PATHOLOGY ORDER LOGIC Proc RH0357 ********************************
]]]]><![CDATA[></code>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBR:4.2},"RH0357")' >
<true>
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"CODE1")' >
<true>
<assign value='"1"' property='target.{NTEi2(1):1}' action='set' />
<assign value='"Pertinent Clinical History/Evaluate for?-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(1):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"FLOWSTUDIES")' >
<true>
<assign value='"2"' property='target.{NTEi2(2):1}' action='set' />
<assign value='"Flow cytometry studies:-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(2):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"CODE3")' >
<true>
<assign value='"3"' property='target.{NTEi2(3):1}' action='set' />
<assign value='"Cytogenetics-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(3):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"CODE4")' >
<true>
<assign value='"4"' property='target.{NTEi2(4):1}' action='set' />
<assign value='"Cultures:-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(4):3(1)}' action='set' />
</true>
</if>
<assign value='""' property='target.{OBX(k1)}' action='remove' />
<code>
<![CDATA[ 
	// ***************************** PATHOLOGY ORDER LOGIC Proc EP9911 ********************************
]]]]><![CDATA[></code>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBR:4.2},"EP9911")' >
<true>
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"PATHCLINHX")' >
<true>
<assign value='"1"' property='target.{NTEi2(1):1}' action='set' />
<assign value='"Pertinent Clinical History/Evaluate for?-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(1):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"CODE2")' >
<true>
<assign value='"2"' property='target.{NTEi2(2):1}' action='set' />
<assign value='"Container A Specimen Site (Tissue)-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(2):3(1)}' action='set' />
</true>
</if>
<assign value='""' property='target.{OBX(k1)}' action='remove' />
</foreach>
</true>
</if>
</foreach>
</true>
</if>
<code>
<![CDATA[ 
	// ***************************** PATHOLOGY ORDER LOGIC Proc EP9911 ********************************
]]]]><![CDATA[></code>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBR:4.2},"EP9911")' >
<true>
<assign value='"2"' property='target.{NTEi2(2):1}' action='set' />
<assign value='"Surgical Path specimen source-&gt;"_source.{ORCgrp(1).OBRgrp.OBR:15.3}' property='target.{NTEi2(2):3(1)}' action='set' />
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"CLINHX")' >
<true>
<assign value='"1"' property='target.{NTEi2(1):1}' action='set' />
<assign value='"Pertinent Clinical History/Evaluate for?-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(1):3(1)}' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1} = "MOD"' >
<true>
<assign value='"3"' property='target.{NTEi2(3):1}' action='set' />
<assign value='"Container A Specimen Site(Info)-&gt;"_source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='target.{NTEi2(3):3(1)}' action='set' />
<assign value='""' property='target.{OBX(k1)}' action='remove' />
</true>
</if>
<if condition='(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1} = "SITE") &amp; ($LENGTH(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}) &gt; 0)' >
<true>
<assign value='" - "_source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='target.{NTEi2(3):3(1)}' action='append' />
<assign value='""' property='target.{OBX(k1)}' action='remove' />
</true>
</if>
<if condition='(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1} = "SITEMOD") &amp; ($LENGTH(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}) &gt; 0)' >
<true>
<assign value='" - "_source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='target.{NTEi2(3):3(1)}' action='append' />
<assign value='""' property='target.{OBX(k1)}' action='remove' />
</true>
</if>
<if condition='(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1} = "INFO") &amp; ($LENGTH(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}) &gt; 0)' >
<true>
<assign value='" - "_source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='target.{NTEi2(3):3(1)}' action='append' />
<assign value='""' property='target.{OBX(k1)}' action='remove' />
</true>
</if>
<assign value='""' property='target.{OBX(k1)}' action='remove' />
</foreach>
</true>
</if>
<code>
<![CDATA[     // ************ Remove blank NTE
  ]]]]><![CDATA[></code>
<if condition='($LENGTH(target.{NTEi2(1):1}) &lt; 1)' >
<true>
<assign value='""' property='target.{NTEi2(1)}' action='remove' />
</true>
</if>
<code>
<![CDATA[     // ***************************  Add NTE at end for OBR:31 Information
     //  add NTE for OBX comment line extracted into holdcomment
     //  original $Extract(source.{ORCgrp(1).OBRgrp.OBXgrp(1).NTE:3(1)},1,20)
     //
     //   <assign value='$Extract(holdcomment,1,20)' property='target.{NTEi2(NTECOUNT):3(1)}' action='set' />
holdcomment
  ]]]]><![CDATA[></code>
<assign value='"1"' property='NTECOUNT' action='set' />
<foreach property='target.{NTEi2()}' key='k4' >
<assign value='NTECOUNT+1' property='NTECOUNT' action='set' />
</foreach>

<if condition='($LENGTH(holdcomment) &lt; 1)' >
<false>
<assign value='holdcommentdesc_"-&gt;"_holdcomment' property='target.{NTEi2(NTECOUNT):3}' action='set' />
<assign value='NTECOUNT' property='target.{NTEi2(NTECOUNT):1}' action='set' />
<assign value='NTECOUNT+1' property='NTECOUNT' action='set' />
</false>
</if>

<assign value='NTECOUNT' property='target.{NTEi2(NTECOUNT):1}' action='set' />
<assign value='"Reason For Lab-&gt;"_source.{ORCgrp(1).OBRgrp.OBR:31(1).1}' property='target.{NTEi2(NTECOUNT):3}' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2RegLabORMpathSos">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>66332,33978.786524</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORM_O01' targetDocType='22.RegLab:ORM_O01' create='new' language='objectscript' >
<subtransform class='GC.Cerner2RegLabORMsub' targetObj='target' sourceObj='source' />
<code>
<![CDATA[
    // Created 11/10/2016  Al Johnson 
	// Last Updated 02/22/2017  Al Johnson
	//  Last moved to Prod 02/23/2017
	// Create: 11/10/2016 Copied and converted from Qcpr2RegLabORMpath 
	// Formats Orders for Path Procedures as required by Regions
	// Path orders send procedure code in OBR:4.1 (Cerner sending in OBR:4.2)
	// Send OBR:31 into new last NTE segment = Reason For Lab
	// unless there are order notes then those are last
	//  Cerner comments coming in OBX OBX|2|ST|COMT^Lab Order Instructions||Test Lab Order Instructions
	// For EP9911 (A-E)MOD,(A-E)SITE,(A-E)SITEMOD,(A-E)INFO changed to MOD,SITE,SITEMOD,INF
	// For 3682 3683 create NTE-2 Specimen Source with value from OBX with Specimen souce designated
]]]]><![CDATA[></code>
<assign value='"Qcpr2RelLabORMpath"' property='target.{MSH:8}' action='set' />
<code>
<![CDATA[ 
	// ***************************** BASIC ORDER LOGIC ********************************
    // change discontinued (DC) orders to Cancel orders (CA)
    // moves alternate id to OBR4 second position
    // Change ASAP Priority to DD for Discharage Dependant
    // Copy OBR:4.2 to OBR:4.1
]]]]><![CDATA[></code>
<if condition='..Contains(source.{ORCgrp(1).ORC:OrderControl},"DC")' >
<true>
<assign value='"CA"' property='target.{ORC:OrderControl}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBR:Quantitytiming(1).priority},"ASAP")' >
<true>
<assign value='"DD"' property='target.{OBR:Quantitytiming(1).priority}' action='set' />
</true>
</if>
<assign value='""' property='target.{OBR:SpecimenSource}' action='clear' />
<code>
<![CDATA[ 
	// ***************************** PATHOLOGY ORDER LOGIC ********************************
]]]]><![CDATA[></code>
<assign value='' property='target.{OBR:SpecimenReceivedDateTime}' action='clear' />
<assign value='""' property='target.{NTEi2(1)}' action='remove' />

<code>
<![CDATA[ 
	// find comment - notes in obx to create last nte segment
]]]]><![CDATA[></code>
<assign value='""' property='holdcomment' action='set' />
<assign value='""' property='holdcommentdesc' action='set' />
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1}="COMT"' >
<true>
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.2}' property='holdcommentdesc' action='set' />
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='holdcomment' action='set' />
</true>
</if>
</foreach>

<code>
<![CDATA[ 
	// ***************************** PATHOLOGY ORDER LOGIC Proc 3682 3683 ********************************
]]]]><![CDATA[></code>
<if condition='..In(source.{ORCgrp(1).OBRgrp.OBR:4.2},"3682,3683")' >
<true>
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"LMPD")' >
<true>
<assign value='"1"' property='target.{NTEi2(1):1}' action='set' />
<assign value='"LMP:"_target.{OBX(k1):5}' property='target.{NTEi2(1):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"Specimen source")' >
<true>
<assign value='"2"' property='target.{NTEi2(2):1}' action='set' />
<assign value='"Specimen source-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(2):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"PAPHX")' >
<true>
<assign value='"3"' property='target.{NTEi2(3):1}' action='set' />
<assign value='"History of Abnormal PAP/HPV-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(3):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"MENSTRUAL")' >
<true>
<assign value='"4"' property='target.{NTEi2(4):1}' action='set' />
<assign value='"Menstrual status-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(4):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"HORMONE")' >
<true>
<assign value='"5"' property='target.{NTEi2(5):1}' action='set' />
<assign value='"Hormones/Contraceptives-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(5):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"TREATHX")' >
<true>
<assign value='"6"' property='target.{NTEi2(6):1}' action='set' />
<assign value='"Treatment History-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(6):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"REFLEX")' >
<true>
<assign value='"7"' property='target.{NTEi2(7):1}' action='set' />
<assign value='"Reflex HPV Testing-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(7):3(1)}' action='set' />
</true>
</if>
<assign value='""' property='target.{OBX(k1)}' action='remove' />
</foreach>
</true>
</if>
<code>
<![CDATA[ 
	// ***************************** PATHOLOGY ORDER LOGIC Proc 09922 ********************************
]]]]><![CDATA[></code>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBR:4.2},"09922")' >
<true>
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"PATHCLINHX")' >
<true>
<assign value='"1"' property='target.{NTEi2(1):1}' action='set' />
<assign value='"Pertinent Clinical History/Evaluate for?-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(1):3(1)}' action='set' />
</true>
</if>
<assign value='""' property='target.{OBX(k1)}' action='remove' />
</foreach>
</true>
</if>
<code>
<![CDATA[ 
	// ***************************** PATHOLOGY ORDER LOGIC Proc RH9019 ********************************
]]]]><![CDATA[></code>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBR:4.2},"RH9019")' >
<true>
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"PATHSUSPECT")' >
<true>
<assign value='"1"' property='target.{NTEi2(1):1}' action='set' />
<assign value='"Suspicious Of?-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(1):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"PATHCLINHX")' >
<true>
<assign value='"2"' property='target.{NTEi2(2):1}' action='set' />
<assign value='"Pertinent Clinical History/Evaluate for?-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(2):3(1)}' action='set' />
</true>
</if>
<assign value='""' property='target.{OBX(k1)}' action='remove' />
</foreach>
</true>
</if>

<code>
<![CDATA[ 
	// ***************************** PATHOLOGY ORDER LOGIC Proc 0471 ********************************
]]]]><![CDATA[></code>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBR:4.2},"0471")' >
<true>
<assign value='"2"' property='target.{NTEi2(2):1}' action='set' />
<assign value='"Cytology specimen source-&gt;"_source.{ORCgrp(1).OBRgrp.OBR:15.2}' property='target.{NTEi2(2):3(1)}' action='set' />
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"PATHCLINHX")' >
<true>
<assign value='"1"' property='target.{NTEi2(1):1}' action='set' />
<assign value='"Pertinent Clinical History/Evaluate for?-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(1):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"CYTOSPECMOD")' >
<true>
<assign value='"2"' property='target.{NTEi2(3):1}' action='set' />
<assign value='"For Bronchoscopy specimens only, evaluate for:-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(3):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"CYTOSPECADD")' >
<true>
<assign value='"3"' property='target.{NTEi2(4):1}' action='set' />
<assign value='"For Bronchoscopy specimens only, evaluate for:-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(4):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"CYTOBRONCH")' >
<true>
<assign value='"4"' property='target.{NTEi2(5):1}' action='set' />
<assign value='"For Bronchoscopy specimens only, evaluate for:-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(5):3(1)}' action='set' />
</true>
</if>
<assign value='""' property='target.{OBX(k1)}' action='remove' />
</foreach>
</true>
</if>
<code>
<![CDATA[ 
	// ***************************** PATHOLOGY ORDER LOGIC Proc EP9907 ********************************
]]]]><![CDATA[></code>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBR:4.2},"EP9907")' >
<true>
<assign value='"2"' property='target.{NTEi2(2):1}' action='set' />
<assign value='"Cytology FNA specimen source-&gt;"_source.{ORCgrp(1).OBRgrp.OBR:15.2}' property='target.{NTEi2(2):3(1)}' action='set' />
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp(k1)}' key='k1' >
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"PATHCLINHX")' >
<true>
<assign value='"1"' property='target.{NTEi2(1):1}' action='set' />
<assign value='"Pertinent Clinical History/Evaluate for?-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(1):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"CYTOSPECMOD")' >
<true>
<assign value='"3"' property='target.{NTEi2(3):1}' action='set' />
<assign value='"Specimen Modifier-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(3):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"CYTOSPECADD")' >
<true>
<assign value='"4"' property='target.{NTEi2(4):1}' action='set' />
<assign value='"Specimen Addtl Info-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(4):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"CYTOAIR")' >
<true>
<assign value='"5"' property='target.{NTEi2(5):1}' action='set' />
<assign value='"Number of air-dried slides-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(5):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"CYTOFIXED")' >
<true>
<assign value='"6"' property='target.{NTEi2(6):1}' action='set' />
<assign value='"Number of fixed slides-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(6):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"CYTOFLUID")' >
<true>
<assign value='"7"' property='target.{NTEi2(7):1}' action='set' />
<assign value='"Fluid collected?-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(7):3(1)}' action='set' />
</true>
</if>
<assign value='""' property='target.{OBX(k1)}' action='remove' />
</foreach>
</true>
</if>
<code>
<![CDATA[ 
	// ***************************** PATHOLOGY ORDER LOGIC Proc 0438 ********************************
]]]]><![CDATA[></code>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBR:4.2},"0438")' >
<true>
<assign value='"2"' property='target.{NTEi2(2):1}' action='set' />
<assign value='"Flow Cytometry specimen source-&gt;"_source.{ORCgrp(1).OBRgrp.OBR:15.2}' property='target.{NTEi2(2):3(1)}' action='set' />
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp(k1)}' key='k1' >
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"PATHCLINHX")' >
<true>
<assign value='"1"' property='target.{NTEi2(1):1}' action='set' />
<assign value='"Pertinent Clinical History/Evaluate for?-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(1):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"BONEMOLE")' >
<true>
<assign value='"2"' property='target.{NTEi2(2):1}' action='set' />
<assign value='"Flow cytometry studies:-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(2):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"BONECYTO")' >
<true>
<assign value='"3"' property='target.{NTEi2(3):1}' action='set' />
<assign value='"Cytogenetics-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(3):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"BONECULT")' >
<true>
<assign value='"4"' property='target.{NTEi2(4):1}' action='set' />
<assign value='"Cultures:-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(4):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"BONESTAIN")' >
<true>
<assign value='"5"' property='target.{NTEi2(5):1}' action='set' />
<assign value='"Stain:-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(5):3(1)}' action='set' />
</true>
</if>
<assign value='""' property='target.{OBX(k1)}' action='remove' />
</foreach>
</true>
</if>
<code>
<![CDATA[ 
	// ***************************** PATHOLOGY ORDER LOGIC Proc RH0357 ********************************
]]]]><![CDATA[></code>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBR:4.2},"RH0357")' >
<true>
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"CODE1")' >
<true>
<assign value='"1"' property='target.{NTEi2(1):1}' action='set' />
<assign value='"Pertinent Clinical History/Evaluate for?-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(1):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"FLOWSTUDIES")' >
<true>
<assign value='"2"' property='target.{NTEi2(2):1}' action='set' />
<assign value='"Flow cytometry studies:-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(2):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"CODE3")' >
<true>
<assign value='"3"' property='target.{NTEi2(3):1}' action='set' />
<assign value='"Cytogenetics-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(3):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"CODE4")' >
<true>
<assign value='"4"' property='target.{NTEi2(4):1}' action='set' />
<assign value='"Cultures:-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(4):3(1)}' action='set' />
</true>
</if>
<assign value='""' property='target.{OBX(k1)}' action='remove' />
<code>
<![CDATA[ 
	// ***************************** PATHOLOGY ORDER LOGIC Proc EP9911 ********************************
]]]]><![CDATA[></code>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBR:4.2},"EP9911")' >
<true>
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"PATHCLINHX")' >
<true>
<assign value='"1"' property='target.{NTEi2(1):1}' action='set' />
<assign value='"Pertinent Clinical History/Evaluate for?-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(1):3(1)}' action='set' />
</true>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"CODE2")' >
<true>
<assign value='"2"' property='target.{NTEi2(2):1}' action='set' />
<assign value='"Container A Specimen Site (Tissue)-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(2):3(1)}' action='set' />
</true>
</if>
<assign value='""' property='target.{OBX(k1)}' action='remove' />
</foreach>
</true>
</if>
</foreach>
</true>
</if>
<code>
<![CDATA[ 
	// ***************************** PATHOLOGY ORDER LOGIC Proc EP9911 ********************************
]]]]><![CDATA[></code>
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBR:4.2},"EP9911")' >
<true>
<assign value='"2"' property='target.{NTEi2(2):1}' action='set' />
<assign value='"Surgical Path specimen source-&gt;"_source.{ORCgrp(1).OBRgrp.OBR:15.3}' property='target.{NTEi2(2):3(1)}' action='set' />
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<if condition='..Contains(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3},"CLINHX")' >
<true>
<assign value='"1"' property='target.{NTEi2(1):1}' action='set' />
<assign value='"Pertinent Clinical History/Evaluate for?-&gt;"_target.{OBX(k1):5}' property='target.{NTEi2(1):3(1)}' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1} = "MOD"' >
<true>
<assign value='"3"' property='target.{NTEi2(3):1}' action='set' />
<assign value='"Container A Specimen Site(Info)-&gt;"_source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='target.{NTEi2(3):3(1)}' action='set' />
<assign value='""' property='target.{OBX(k1)}' action='remove' />
</true>
</if>
<if condition='(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1} = "SITE") &amp; ($LENGTH(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}) &gt; 0)' >
<true>
<assign value='" - "_source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='target.{NTEi2(3):3(1)}' action='append' />
<assign value='""' property='target.{OBX(k1)}' action='remove' />
</true>
</if>
<if condition='(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1} = "SITEMOD") &amp; ($LENGTH(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}) &gt; 0)' >
<true>
<assign value='" - "_source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='target.{NTEi2(3):3(1)}' action='append' />
<assign value='""' property='target.{OBX(k1)}' action='remove' />
</true>
</if>
<if condition='(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:3.1} = "INFO") &amp; ($LENGTH(source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}) &gt; 0)' >
<true>
<assign value='" - "_source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX:5}' property='target.{NTEi2(3):3(1)}' action='append' />
<assign value='""' property='target.{OBX(k1)}' action='remove' />
</true>
</if>
<assign value='""' property='target.{OBX(k1)}' action='remove' />
</foreach>
</true>
</if>
<code>
<![CDATA[     // ************ Remove blank NTE
  ]]]]><![CDATA[></code>
<if condition='($LENGTH(target.{NTEi2(1):1}) &lt; 1)' >
<true>
<assign value='""' property='target.{NTEi2(1)}' action='remove' />
</true>
</if>
<code>
<![CDATA[     // ***************************  Add NTE at end for OBR:31 Information
     //  add NTE for OBX comment line extracted into holdcomment
     //  original $Extract(source.{ORCgrp(1).OBRgrp.OBXgrp(1).NTE:3(1)},1,20)
     //
     //   <assign value='$Extract(holdcomment,1,20)' property='target.{NTEi2(NTECOUNT):3(1)}' action='set' />
holdcomment
  ]]]]><![CDATA[></code>
<assign value='"1"' property='NTECOUNT' action='set' />
<foreach property='target.{NTEi2()}' key='k4' >
<assign value='NTECOUNT+1' property='NTECOUNT' action='set' />
</foreach>

<if condition='($LENGTH(holdcomment) &lt; 1)' >
<false>
<assign value='holdcommentdesc_"-&gt;"_holdcomment' property='target.{NTEi2(NTECOUNT):3}' action='set' />
<assign value='NTECOUNT' property='target.{NTEi2(NTECOUNT):1}' action='set' />
<assign value='NTECOUNT+1' property='NTECOUNT' action='set' />
</false>
</if>

<assign value='NTECOUNT' property='target.{NTEi2(NTECOUNT):1}' action='set' />
<assign value='"Reason For Lab-&gt;"_source.{ORCgrp(1).OBRgrp.OBR:31(1).1}' property='target.{NTEi2(NTECOUNT):3}' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2RegLabORMsub">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65034,53330.658175</TimeChanged>
<TimeCreated>61585,36930.746895</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORM_O01' targetDocType='22.RegLab:ORM_O01' create='new' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Updated: 01/21/2019 Al Johnson
	//  Last Updated in Prod: 01/21/2019 Al Johnson
	//  Create: 11/02/16  Al Johnson
	//  Copied from GCH.Qcpr2RegLabORMsub 
	//  Description:  Copy all code from Qcpr2RegLabSub
	//  (orignal - ) logic either Cerner alias or Cerner modobject
	//
	// convert all PID chars to CAPS
	//
	// original - set PID:2.1 to C and prefix MRN with G  (set in Cerner ModObject)
	// original - set PID:3.2 and 3.3 to 1 - set PID:3.4 to 2 (set in Cerner ModObject)
	// original - clear PID:4 PID:9 and PV1_10 (set in Cerner ModObject)
	// original - remove PV1:10 Hosp Serv Code (set in Cerner ModObject)
    // original - Inpatient if hosp service code is 0IP or 0ss or current unit is 0NU,0AU,0RU,0OSU,0OSE,0OSW,00IC,0ND or 07W
	// original - set PV1_2 to A and PV1_18 to N for inpatient other wise (set in Cerner ModObject)
	// original - set PV1_2 to O PV1_18 to S PV1_3 to GILL for outpatient (set in Cerner ModObject) 
	// original - Rooms Add Prefix of C if starts with 4, Prefix of G if starts with 7 (set in Cerner Aliasing)
	// original - Prefix Room with 0 (set in Cerner Aliasing)
	// 
	// Translate both Assigned and Previous Patient Location (set in Cerner ModObject) (set in Cerner ModObject)
	// 0AIM to GAIM; 0WR to GSDS; 07W to G7W; and 0PAN,0PAC,0OR,REG,REGS all to GOR
	// If 4OP then set Assigned Patient Location to GLSH
	//   01/20/17 send GLSH for Lifetime and GPSH for Phalen second floor
	// If 0SDS then set Assigned Patient Location to GSDS
	//
	// Coding to send Regions Company account as account number for XCOM
    //           if PV1:14 = 10 send GPHS in PV1:3
	// If PV1:10 is XCOM and Guarantor Name contains :  move PID:18 to PID:3.2
	// Take data after : in GT1:3 and move to PID:18
	// If XEH then set PID:18 to C828 and move PID:18 to PID:3.2
	//
	// Send patient location for GPHS Gillette Pediatric Home service *********
	// If PV1:14 is 10 than set PV1:3 to GPHS
	//
	//  PV1-2 must be IP, OP, ER, or OS per Todd Sommer - Regions 11/21/2016
	//  PV1-3.1 or PV1-6.1 GCSH - send GOR  02/15/2017
	//  PV1-3.1 or PV1-6.1 GCSH Main OR - send GOR  02/17/2017
	//  PV1-3.1 or PV1-6.1 PACU - send GOR  02/17/2017
	//  PV1-3.1 or PV1-6.1 GCSH Periop - send GOR  02/17/2017
	//  PV1-8 Referring Doc 11845887^Conversion^BlankProvider - remove 02/17/2017
	//
	//  Remove value from ORC-13 Point of Care - receiving LTC Cline and PGC Clinic 03/07/2017
	//  Add E to PV1-8 referring doctor - PV1-8 was not sent out of QCPR  03/07/2017
	//   GOR unit needs GOR99 for room GOR^GOR99 - 03/27/2017
	//
	//  OBR-27.6 = 'RO' Timing Priority = Routine and not cancel or discontinue
	//    If OBR-11 = "L"   set OBR-7 = ORC-9
	//    If OBR-11 Not = "L" set OBR-7 = ORC-15
	//
	//  Regions consolidating lab orders under one accession when within a certain time period
	//    not sure the time period, but thought 5 - 30 minutes (Sunquest Labs)
	//  Table ordering provider out of Cerner ORC-12, OBR-16, key is Cerner order number
	//  Read ORU from Regions and update to Cerner values
	//
	//  Send Observation as Inpatient  9/18/2018
	//
	//    Check for swing bed - change unit - table T_Swingbed_Lab 9/25/2018
	//
	//  Send Outpatient in a Bed as Inpatient  12/19/2018
	//
	//   Ensure Regions receives HNA in MSH-4 - 1/21/2019
]]]]><![CDATA[></code>
<code>
<![CDATA[ 
	// *********************** Copy all code from Qcpr2RegLabSub ********************************
]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='"HNA"' property='target.{MSH:4}' action='set' />
<assign value='"2.2"' property='target.{MSH:VersionID}' action='set' />
<assign value='source.{PID}' property='target.{PID}' action='set' />
<assign value='source.{ORCgrp(1).ORC}' property='target.{ORC}' action='set' />
<assign value='source.{PV1}' property='target.{PV1}' action='set' />
<assign value='"SQ"' property='target.{MSH:5}' action='set' />
<assign value='"RLAB"' property='target.{MSH:6}' action='set' />
<assign value='"Cerner2RegORMsub"' property='target.{MSH:16}' action='set' />
<assign value='' property='target.{PID:9}' action='clear' />

<assign value='""' property='target.{PID:10}' action='set' />
<assign value='source.{PID:10(1)}' property='target.{PID:10}' action='set' />

<assign value='$ZCONVERT(target.{PID},"U" )' property='target.{PID}' action='set' />

<assign value='' property='target.{PV1:HospitalService}' action='remove' />

<code>
<![CDATA[ 
	// *******************   IP vs OP Location Logic ***********************************************
]]]]><![CDATA[></code>
<if condition='..In(source.{PV1:18},"Observation,PreObservation,Outpatient in a Bed,PreOutpatient in a Bed")' >
<true>
<assign value='"IP"' property='target.{PV1:PatientClass}' action='set' />
<assign value='"N"' property='target.{PV1:PatientType}' action='set' />
</true>
<false>
<if condition='..In(source.{PV1:18},"Inpatient,PreInpatient,Sleep Study,PreSleepStudy") || ..In(source.{PV1:3.1},"0NU,0AU,0RU,0OSU,0OSE,0OSW,0IC,0ND,G7W")' >
<true>
<assign value='"IP"' property='target.{PV1:PatientClass}' action='set' />
<assign value='"N"' property='target.{PV1:PatientType}' action='set' />
</true>
<false>
<if condition='..In(source.{PV1:3.1},"GCSH,GCSH Main OR,PACU,GCSH Periop")' >
<true>
<assign value='"IP"' property='target.{PV1:PatientClass}' action='set' />
<assign value='"N"' property='target.{PV1:PatientType}' action='set' />
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='clear' />
<assign value='"GOR"' property='target.{PV1:AssignedPatientLocation.pointofcareID}' action='set' />
<assign value='"GOR99"' property='target.{PV1:AssignedPatientLocation.room}' action='set' />
</true>
<false>
<assign value='"OP"' property='target.{PV1:PatientClass}' action='set' />
<assign value='"S"' property='target.{PV1:PatientType}' action='set' />
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='clear' />
<assign value='"GILL"' property='target.{PV1:AssignedPatientLocation}' action='set' />
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
</false>
</if>
</false>
</if>
</false>
</if>

<if condition='..In(source.{PV1:3.1},"GCSH,GCSH Main OR,PACU,GCSH Periop")' >
<true>
<assign value='"IP"' property='target.{PV1:PatientClass}' action='set' />
<assign value='"N"' property='target.{PV1:PatientType}' action='set' />
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='clear' />
<assign value='"GOR"' property='target.{PV1:AssignedPatientLocation.pointofcareID}' action='set' />
<assign value='"GOR99"' property='target.{PV1:AssignedPatientLocation.room}' action='set' />
</true>
</if>

<if condition='..In(source.{PV1:6.1},"GCSH,GCSH Main OR,PACU,GCSH Periop")' >
<true>
<assign value='"IP"' property='target.{PV1:PatientClass}' action='set' />
<assign value='"N"' property='target.{PV1:PatientType}' action='set' />
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='clear' />
<assign value='"GOR"' property='target.{PV1:PriorPatientLocation.pointofcareID}' action='set' />
<assign value='"GOR99"' property='target.{PV1:PriorPatientLocation.room}' action='set' />
</true>
</if>

<assign value='""' property='target.{ORC:13}' action='set' />

<if condition='source.{PV1:8(1).1}="11845887"' >
<true>
<assign value='""' property='target.{PV1:8(1)}' action='set' />
</true>
</if>

<if condition='target.{PV1:8(1).1}=""' >
<false>
<if condition='$EXTRACT(target.{PV1:8(1).1},1,1)="E"' >
<false>
<assign value='target.{PV1:8(1)}' property='tmprefdoc' action='set' />
<assign value='"E"_tmprefdoc' property='target.{PV1:8(1)}' action='set' />
</false>
</if>
</false>
</if>

<code>
<![CDATA[ 
	// *******************   Other Location Logic **********************************************************
]]]]><![CDATA[></code>
<if condition='..Contains(source.{PV1:AssignedPatientLocation.pointofcare},"0AIM")' >
<true>
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='set' />
<assign value='"GAIM"' property='target.{PV1:AssignedPatientLocation.pointofcareID}' action='set' />
</true>
</if>
<if condition='..Contains(source.{PV1:AssignedPatientLocation.pointofcare},"0WR") || ..In(source.{PV1:18},"Day Surgery,PreDaySurgery")' >
<true>
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='set' />
<assign value='"GSDS"' property='target.{PV1:AssignedPatientLocation.pointofcareID}' action='set' />
</true>
</if>
<if condition='(source.{PV1:AssignedPatientLocation.pointofcare} = "07W")' >
<true>
<assign value='"G7W"' property='target.{PV1:AssignedPatientLocation.pointofcareID}' action='set' />
</true>
</if>
<if condition='..In(source.{PV1:AssignedPatientLocation.pointofcare},"0PAN,0PAC,0OR,REG,REGS")' >
<true>
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='set' />
<assign value='"GOR"' property='target.{PV1:AssignedPatientLocation.pointofcareID}' action='set' />
</true>
</if>

<code>
<![CDATA[ 
	// *******************   Prior Location Logic **********************************************************
]]]]><![CDATA[></code>
<if condition='..Contains(source.{PV1:PriorPatientLocation.pointofcare},"0AIM")' >
<true>
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
<assign value='"GAIM"' property='target.{PV1:PriorPatientLocation.pointofcareID}' action='set' />
</true>
</if>
<if condition='..Contains(source.{PV1:PriorPatientLocation.pointofcare},"0WR") || ..In(source.{PV1:18},"Day Surgery,PreDaySurgery")' >
<true>
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
<assign value='"GSDS"' property='target.{PV1:PriorPatientLocation.pointofcareID}' action='set' />
</true>
</if>
<if condition='(source.{PV1:PriorPatientLocation.pointofcare} = "07W")' >
<true>
<assign value='"G7W"' property='target.{PV1:PriorPatientLocation.pointofcareID}' action='set' />
</true>
</if>
<if condition='..In(source.{PV1:PriorPatientLocation.pointofcare},"0PAN,0PAC,0OR,REG,REGS")' >
<true>
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
<assign value='"GOR"' property='target.{PV1:PriorPatientLocation.pointofcareID}' action='set' />
</true>
</if>

<code>
<![CDATA[ 
	// *******************   Hosptial Service Logic ************************************
]]]]><![CDATA[></code>
<if condition='..In(source.{PV1:AssignedPatientLocation.facilityHD},"LTC")' >
<true>
<if condition='..In(source.{PV1:18},"Recurring,PreRecurring")' >
<false>
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='clear' />
<assign value='"GLSH"' property='target.{PV1:AssignedPatientLocation.pointofcareID}' action='set' />
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
</false>
</if>
</true>
</if>
<if condition='..In(source.{PV1:AssignedPatientLocation.facilityHD},"PGC")' >
<true>
<if condition='..In(source.{PV1:18},"Recurring,PreRecurring")' >
<false>
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='clear' />
<assign value='"GPSH"' property='target.{PV1:AssignedPatientLocation.pointofcareID}' action='set' />
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
</false>
</if>
</true>
</if>

<if condition='..Contains(source.{PV1:HospitalService},"XEH")' >
<true>
<assign value='source.{PID:PatientAccountNumber}' property='target.{PID:PatientIDInternalID(1).Checkdigit}' action='set' />
<assign value='"C828"' property='target.{PID:PatientAccountNumber}' action='set' />
</true>
</if>
<if condition='..Contains(source.{PV1:HospitalService},"0SDS")' >
<true>
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='set' />
<assign value='"GSDS"' property='target.{PV1:AssignedPatientLocation.pointofcareID}' action='set' />
</true>
</if>

<code>
<![CDATA[ 
	// **********  Special Coding to send patient location for GPHS Gillette Pediatric Home service ***************
]]]]><![CDATA[></code>
<if condition='source.{PV1:AdmitSource} = 10' >
<true>
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='clear' />
<assign value='"GPHS"' property='target.{PV1:AssignedPatientLocation.pointofcareID}' action='set' />
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
</true>
</if>

<code>
<![CDATA[ 
	// **********  Coding to send Region Company Code as account for XCOM Hosp Service Codes***************
	// **********  If value not found in global then send account number ********* 
]]]]><![CDATA[></code>
<if condition='..Contains(source.{PV1:HospitalService},"XCOM") ' >
<true>
<assign value='""' property='RegCC' action='set' />
<assign value='source.{PID:PatientAccountNumber}' property='target.{PID:PatientIDInternalID(1).Checkdigit}' action='set' />
<code>
<![CDATA[ 
  //		s RegCC = ##class(GCH.RegLab.ADTtbl).GetRegLabCAccount(source.GetValueAt("PID:18.1"))
]]]]><![CDATA[></code>
<assign value='RegCC' property='target.{PID:PatientAccountNumber}' action='set' />
</true>
</if>

<code>
<![CDATA[ 
	// **********  Coding to send Region Company Code for LIO orders ***************
	]]]]><![CDATA[></code>
<if condition='..Contains(source.{PID:3(1).2},"C") ' >
<true>
<assign value='source.{PID:PatientAccountNumber}' property='target.{PID:PatientIDInternalID(1).Checkdigit}' action='set' />
<assign value='source.{PID:3(1).2}' property='target.{PID:18.1}' action='set' />
</true>
</if>

<assign value='source.{ORCgrp(1).OBRgrp.OBR}' property='target.{OBR}' action='set' />
<foreach property='source.{ORCgrp(1).OBRgrp.NTE()}' key='k4' >
<assign value='source.{ORCgrp(1).OBRgrp.NTE(k4)}' property='target.{NTEi2(k4)}' action='set' />
</foreach>

<code>
<![CDATA[ 
	//  OBR-27.6 = 'RO' Timing Priority = Routine and not cancel or discontinue
	//    If OBR-11 = "L"   set OBR-7 = ORC-9
	//    If OBR-11 Not = "L" set OBR-7 = ORC-15
	]]]]><![CDATA[></code>
	
<if condition='target.{OBR:27.6}="RO"' >
<true>
<if condition='(target.{ORC:1}="CA") || (target.{ORC:1}="DC")' >
<false>
<if condition='(target.{OBR:11}="L")' >
<true>
<assign value='target.{ORC:9.1}' property='target.{OBR:7}' />
</true>
<false>
<assign value='target.{ORC:15.1}' property='target.{OBR:7}' />
</false>
</if>
</false>
</if>
</true>
</if>

<assign property="tempOBX" value='""' action='set' />
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k1' >
<assign property='tempOBX' value='tempOBX+1' />
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k1).OBX}' property='target.{OBX(tempOBX)}' action='set' />
</foreach>

<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp()}' key='k2' >
<foreach property='source.{ORCgrp(1).OBRgrp.OBXgrp(k2).NTE()}' key='k3' >
<assign value='source.{ORCgrp(1).OBRgrp.OBXgrp(k2).NTE(k3)}' property='target.{NTEi3(k3)}' action='set' />
</foreach>
</foreach>

<code>
<![CDATA[ 
    //  11/22/2017 - table ordering provider
    //
	//  Read table T_RegionsLab_OrderingProvider - Cerner OrderNbr is key to table
	//  to delete specific entry - do ##class(Ens.Util.LookupTable).%RemoveValue(wTableName,wTableKey)
	//  add / update - do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,wTableKey,wTableData)
	//
	//  table entire field - id and name for result messages
	//   extract just id to check for change
	]]]]><![CDATA[></code>
	
<assign property='tempCernerOrder' value='source.{ORCgrp(1).ORC:2.1}' action='set' />
<assign property='tempORC12' value='source.{ORCgrp(1).ORC:12}' action='set' />
<assign property='tempOBR16' value='source.{ORCgrp(1).OBRgrp.OBR:16(1)}' action='set' />

<assign property='tempInORC12id' value='source.{ORCgrp(1).ORC:12.1}' action='set' />
<assign property='tempInOBR16id' value='source.{ORCgrp(1).OBRgrp.OBR:16(1).1}' action='set' />

<assign property='tempDateAdd' value='$ZDATE($NOW(),8)' action='set' />
<assign property='tempDateResult' value='""' action='set' />
<assign property='tempDateCancel' value='""' action='set' />
<if condition='(source.{ORCgrp(1).ORC:1}="CA")||(source.{ORCgrp(1).ORC:1}="DC")' >
<true>
<assign property='tempDateCancel' value='$ZDATE($NOW(),8)' action='set' />
</true>
</if>

<assign value='tempCernerOrder' property='wTableKey' action='set' />
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_RegionsLab_OrderingProvider",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<code>
<![CDATA[
    // no entry found - so add new entry
        set wTableData=(tempORC12_"|"_tempOBR16_"|"_tempDateAdd_"|"_tempDateResult_"|"_tempDateCancel_"|") 
        set wTableName="T_RegionsLab_OrderingProvider"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,wTableKey,wTableData)
	]]]]><![CDATA[></code>
</true>
<false>
<assign value='$PIECE(wtableresult,"|",1)' property='temptblORC12' action='set' />
<assign value='$PIECE(temptblORC12,"^",1)' property='temptblORC12id' action='set' />
<assign value='$PIECE(wtableresult,"|",2)' property='temptblOBR16' action='set' />
<assign value='$PIECE(temptblOBR16,"^",1)' property='temptblOBR16id' action='set' />
<assign value='$PIECE(wtableresult,"|",3)' property='temptblDateAdd' action='set' />
<assign value='$PIECE(wtableresult,"|",4)' property='temptblDateResult' action='set' />
<assign value='$PIECE(wtableresult,"|",5)' property='temptblDateCancel' action='set' />

<if condition='(source.{ORCgrp(1).ORC:1}="CA")||(source.{ORCgrp(1).ORC:1}="DC")' >
<true>
<code>
<![CDATA[
    // cancel or discontinue - update table with cancel date
        set wTableData=(tempORC12_"|"_tempOBR16_"|"_temptblDateAdd_"|"_temptblDateResult_"|"_tempDateCancel_"|") 
        set wTableName="T_RegionsLab_OrderingProvider"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,wTableKey,wTableData)	
	]]]]><![CDATA[></code>
</true>
<false>
<if condition='(tempInORC12id = temptblORC12id)&amp;(tempInOBR16id = temptblOBR16id)' >
<false>
<code>
<![CDATA[
    // ordering doc on table differs from order - update table with orm data - update date add
        set wTableData=(tempORC12_"|"_tempOBR16_"|"_tempDateAdd_"|"_temptblDateResult_"|"_temptblDateCancel_"|") 
        set wTableName="T_RegionsLab_OrderingProvider"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,wTableKey,wTableData)	
	]]]]><![CDATA[></code>
</false>
</if>
</false>
</if>
</false>
</if>

<code>
<![CDATA[ 
    //  09/25/2018 - check location for swingbed
    //
	//  Read table T_Swingbed_Lab - unit^room^bed is key to table
	//  If found, replace unit number
	//  Check PV1-3 location and PV1-6 prior location
	]]]]><![CDATA[></code>

<assign value='""' property='wTableKey' action='set' />
<assign value='""' property='temproom' action='set' />
<assign value='""' property='tempbed' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.pointofcare}' property='tempunit' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.room}' property='temproom' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.bed}' property='tempbed' action='set' />
<assign value='tempunit_"^"_temproom_"^"_tempbed' property='wTableKey' action='set' />

<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_Swingbed_Lab",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<false>
<assign value='wtableresult' property='target.{PV1:AssignedPatientLocation.pointofcareID}' action='set' />
</false>
</if>

<code>
<![CDATA[ 
     // $$$TRACE("pv1-3 read= "_wTableKey) 
     // $$$TRACE("pv1-3 return= "_wtableresult)   
     // $$$TRACE("pv1-3 target= "_holdtarg)  
]]]]><![CDATA[></code>

<assign value='""' property='wTableKey' action='set' />
<assign value='""' property='temproom' action='set' />
<assign value='""' property='tempbed' action='set' />
<assign value='source.{PV1:PriorPatientLocation.pointofcare}' property='tempunit' action='set' />
<assign value='source.{PV1:PriorPatientLocation.room}' property='temproom' action='set' />
<assign value='source.{PV1:PriorPatientLocation.bed}' property='tempbed' action='set' />
<assign value='tempunit_"^"_temproom_"^"_tempbed' property='wTableKey' action='set' />

<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_Swingbed_Lab",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<false>
<assign value='wtableresult' property='target.{PV1:PriorPatientLocation.pointofcareID}' action='set' />
</false>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2RegLabSub">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65034,53832.719068</TimeChanged>
<TimeCreated>61585,36930.746895</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A01' targetDocType='231.Cerner:ADT_A01' create='new' language='objectscript' >
<code>
<![CDATA[ 
    //    Last Updated 01/21/2019 Al Johnson
    //    Moved to Prod 01/21/2019 Al Johnson
	// Created:  Started with copy of QCPR2RegLabSub  
	//  Description
	//    05/29/14 Only send 1st race code in PID-10  - ALJ
	// convert all PID chars to CAPS set PID:2.1 to C and prefix MRN with G
	// set PID:3.2 and 3.3 to 1 - set PID:3.4 to 2
	// clear PID:4 PID:9 and PV1_10
	// remove PV1:10 Hosp Serv Code
    // Inpatient if hosp service code is 0IP or 0ss or current unit is 0NU,0AU,0RU,0OSU,0OSE,0OSW,00IC,0ND or 07W
	// set PV1_2 to A and PV1_18 to N for inpatient other wise
	// set PV1_2 to O PV1_18 to S PV1_3 to GILL for outpatient 
	// Rooms Add Prefix of C if starts with 4, Prefix of G if starts with 7
	// Prefix Room with 0
	// Translate both Assigned and Previous Patient Location
	// 0AIM to GAIM; 0WR to GSDS; 07W to G7W; and 0PAN,0PAC,0OR,REG,REGS all to GOR
	// If 4OP then set Assigned Patient Location to GLSH
	//   01/20/17 Lifetime use GLSH, Phalen 2nd floor use GLSH
	// If 0SDS then set Assigned Patient Location to GSDS
	// Coding to send Regions Company account as account number for XCOM
    //           if PV1:14 = 10 send GPHS in PV1:3
	// If PV1:10 is XCOM and Guarantor Name contains :  move PID:18 to PID:3.2
	// Take data after : in GT1:3 and move to PID:18
	// If XEH then set PID:18 to C828 and move PID:18 to PID:3.2
	// Send patient location for GPHS Gillette Pediatric Home service *********
	// If PV1:14 is 10 than set PV1:3 to GPHS
	//
	//  PV1-2 must be IP, OP, ER, or OS per Todd Sommer - Regions 11/21/2016
	//  PV1-3.1 or PV1-6.1 GCSH - send GOR  02/15/2017
	//  PV1-3.1 or PV1-6.1 GCSH Main OR - send GOR  02/17/2017
	//  PV1-3.1 or PV1-6.1 PACU - send GOR  02/17/2017
	//  PV1-3.1 or PV1-6.1 GCSH Periop - send GOR  02/17/2017
	//  PV1-8 Referring Doc 11845887^Conversion^BlankProvider - remove 02/17/2017
	//  PV1-8 Add leading E to referring doctor number - 03/08/2017
	//   GOR unit needs GOR99 for room GOR^GOR99 - 03/27/2017
	//
	//  Send Observation as Inpatient  9/18/2018
	//
	//    Check for swing bed - change unit - table T_Swingbed_Lab 9/25/2018
	//
	//  Send Outpatient in a Bed as Inpatient  12/19/2018
	//
    //   Ensure Regions receives HNA500 for ADT in MSH-4 - 1/21/2019
]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='"2.2"' property='target.{MSH:VersionID}' action='set' />
<assign value='"HNA500"' property='target.{MSH:4}' action='set' />
<assign value='"SQ"' property='target.{MSH:5}' action='set' />
<assign value='"RLAB"' property='target.{MSH:6}' action='set' />
<assign value='"Cerner2RegLabSub"' property='target.{MSH:16}' action='set' />

<assign value='' property='target.{EVN}' action='remove' />
<assign value='source.{EVN:1}' property='target.{EVN:1}' action='set' />
<assign value='source.{EVN:2}' property='target.{EVN:2}' action='set' />
<assign value='source.{EVN:3}' property='target.{EVN:3}' action='set' />
<assign value='source.{EVN:4}' property='target.{EVN:4}' action='set' />
<assign value='source.{EVN:5(1).1}' property='target.{EVN:5(1).1}' action='set' />
<assign value='source.{EVN:5(1).2}' property='target.{EVN:5(1).2}' action='set' />
<assign value='source.{EVN:5(1).3}' property='target.{EVN:5(1).3}' action='set' />
<assign value='source.{EVN:6}' property='target.{EVN:6}' action='set' />

<assign value='source.{PID}' property='target.{PID}' action='set' />
<assign value='source.{PV1}' property='target.{PV1}' action='set' />
<assign value='' property='target.{PID:9}' action='remove' />
<assign value='""' property='target.{PID:10}' action='set' />
<assign value='source.{PID:10(1)}' property='target.{PID:10}' action='set' />

<assign value='' property='target.{PV1:HospitalService}' action='remove' />

<code>
<![CDATA[ 
	// *******************   IP vs OP Location Logic ***********************************************
	// If hosp service code is 0IP or 0ss or current unit is 0NU,0AU,0RU,0OSU,0OSE,0OSW,00IC,0ND or 07W
	// set PV1_2 to A and PV1_18 to N for inpatient other wise
	// set PV1_2 to O PV1_18 to S PV1_3 to GILL for outpatient 
	//  PV1-3.1 or PV1-6.1 GCSH - send GOR  02/15/2017
	//  PV1-3.1 or PV1-6.1 GCSH Main OR - send GOR  02/17/2017
	//  PV1-3.1 or PV1-6.1 PACU - send GOR  02/17/2017
	//  PV1-3.1 or PV1-6.1 GCSH Periop - send GOR  02/17/2017
]]]]><![CDATA[></code>
<if condition='..In(source.{PV1:18},"Observation,PreObservation,Outpatient in a Bed,PreOutpatient in a Bed")' >
<true>
<assign value='"IP"' property='target.{PV1:PatientClass}' action='set' />
<assign value='"N"' property='target.{PV1:PatientType}' action='set' />
</true>
<false>
<if condition='..In(source.{PV1:18},"Inpatient,PreInpatient,Sleep Study,PreSleepStudy") || ..In(source.{PV1:3.1},"0NU,0AU,0RU,0OSU,0OSE,0OSW,0IC,0ND,G7W")' >
<true>
<assign value='"IP"' property='target.{PV1:PatientClass}' action='set' />
<assign value='"N"' property='target.{PV1:PatientType}' action='set' />
</true>
<false>
<if condition='..In(source.{PV1:3.1},"GCSH,GCSH Main OR,PACU,GCSH Periop")' >
<true>
<assign value='"IP"' property='target.{PV1:PatientClass}' action='set' />
<assign value='"N"' property='target.{PV1:PatientType}' action='set' />
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='clear' />
<assign value='"GOR"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
<assign value='"GOR99"' property='target.{PV1:AssignedPatientLocation.room}' action='set' />
</true>
<false>
<assign value='"OP"' property='target.{PV1:PatientClass}' action='set' />
<assign value='"S"' property='target.{PV1:PatientType}' action='set' />
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='clear' />
<assign value='"GILL"' property='target.{PV1:AssignedPatientLocation}' action='set' />
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
</false>
</if>
</false>
</if>
</false>
</if>

<if condition='..In(source.{PV1:3.1},"GCSH,GCSH Main OR,PACU,GCSH Periop")' >
<true>
<assign value='"IP"' property='target.{PV1:PatientClass}' action='set' />
<assign value='"N"' property='target.{PV1:PatientType}' action='set' />
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='clear' />
<assign value='"GOR"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
<assign value='"GOR99"' property='target.{PV1:AssignedPatientLocation.room}' action='set' />
</true>
</if>

<if condition='..In(source.{PV1:6.1},"GCSH,GCSH Main OR,PACU,GCSH Periop")' >
<true>
<assign value='"IP"' property='target.{PV1:PatientClass}' action='set' />
<assign value='"N"' property='target.{PV1:PatientType}' action='set' />
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='clear' />
<assign value='"GOR"' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
<assign value='"GOR99"' property='target.{PV1:PriorPatientLocation.room}' action='set' />
</true>
</if>

<if condition='source.{PV1:8(1).1}="11845887"' >
<true>
<assign value='""' property='target.{PV1:8(1)}' action='set' />
</true>
</if>

<if condition='target.{PV1:8(1).1}=""' >
<false>
<if condition='$EXTRACT(target.{PV1:8(1).1},1,1)="E"' >
<false>
<assign value='target.{PV1:8(1)}' property='tmprefdoc' action='set' />
<assign value='"E"_tmprefdoc' property='target.{PV1:8(1)}' action='set' />
</false>
</if>
</false>
</if>

<code>
<![CDATA[ 
	// *******************   Other Location Logic ***********************************
	// Prefix Room with 0
	// Translate both Assigned and Previous Patient Location
	// 0AIM to GAIM; 0WR to GSDS; 07W to G7W; and 0PAN,0PAC,0OR,REG,REGS all to GOR
	// 
]]]]><![CDATA[></code>
<if condition='..Contains(source.{PV1:AssignedPatientLocation.pointofcare},"0AIM")' >
<true>
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='set' />
<assign value='"GAIM"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</true>
</if>
<if condition='..Contains(source.{PV1:AssignedPatientLocation.pointofcare},"0WR") || ..In(source.{PV1:18},"Day Surgery,PreDaySurgery")' >
<true>
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='set' />
<assign value='"GSDS"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</true>
</if>
<if condition='(source.{PV1:AssignedPatientLocation.pointofcare} = "07W")' >
<true>
<assign value='"G7W"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</true>
</if>
<if condition='..In(source.{PV1:AssignedPatientLocation.pointofcare},"0PAN,0PAC,0OR,REG,REGS")' >
<true>
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='set' />
<assign value='"GOR"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</true>
</if>
<code>
<![CDATA[ 
	// *******************   Prior Location Logic **********************************************************
]]]]><![CDATA[></code>
<if condition='..Contains(source.{PV1:PriorPatientLocation.pointofcare},"0AIM")' >
<true>
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
<assign value='"GAIM"' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
</true>
</if>
<if condition='..Contains(source.{PV1:PriorPatientLocation.pointofcare},"0WR")' >
<true>
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
<assign value='"GSDS"' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
</true>
</if>
<if condition='(source.{PV1:PriorPatientLocation.pointofcare} = "07W")' >
<true>
<assign value='"G7W"' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
</true>
</if>
<if condition='..In(source.{PV1:PriorPatientLocation.pointofcare},"0PAN,0PAC,0OR,REG,REGS")' >
<true>
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
<assign value='"GOR"' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
</true>
</if>
<code>
<![CDATA[ 
	// *******************   Hosptial Service Logic *******************************
	// If 4OP then set Assigned Patient Location to GLSH
	//   01/20/17 Lifetime use GLSH, Phalen 2nd floor use GLSH
	// If 0SDS then set Assigned Patient Location to GSDS
	// If XEH then set PID:18 to C828 and move PID:18 to PID:3.2
]]]]><![CDATA[></code>
<if condition='..In(source.{PV1:AssignedPatientLocation.facilityHD},"LTC")' >
<true>
<if condition='..In(source.{PV1:18},"Recurring,PreRecurring")' >
<false>
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='clear' />
<assign value='"GLSH"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
</false>
</if>
</true>
</if>
<if condition='..In(source.{PV1:AssignedPatientLocation.facilityHD},"PGC")' >
<true>
<if condition='..In(source.{PV1:18},"Recurring,PreRecurring")' >
<false>
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='clear' />
<assign value='"GPSH"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
</false>
</if>
</true>
</if>
<if condition='..Contains(source.{PV1:HospitalService},"XEH")' >
<true>
<assign value='source.{PID:PatientAccountNumber}' property='target.{PID:PatientIdentifierList(1).checkdigit}' action='set' />
<assign value='"C828"' property='target.{PID:PatientAccountNumber}' action='set' />
</true>
</if>
<if condition='..Contains(source.{PV1:HospitalService},"0SDS") || ..In(source.{PV1:18},"Day Surgery,PreDaySurgery")' >
<true>
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='set' />
<assign value='"GSDS"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</true>
</if>
<code>
<![CDATA[ 
	// **********  Special Coding to send patient location for GPHS Gillette Pediatric Home service *********
	// If PV1:14 is 10 than set PV1:3 to GPHS
]]]]><![CDATA[></code>
<if condition='source.{PV1:AdmitSource} = 10' >
<true>
<assign value='""' property='target.{PV1:AssignedPatientLocation}' action='clear' />
<assign value='"GPHS"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
</true>
</if>
<code>
<![CDATA[ 
	// ********** Coding to send Company Account as account for XCOM Hosp Service Codes **********
	// If PV1:10 is XCOM and Guarantor Name contains :  move PID:18 to PID:3.2
	// Take data after : in GT1:3 and move to PID:18
]]]]><![CDATA[></code>
<if condition='(..Contains(source.{PV1:HospitalService},"XCOM")) &amp; (..Contains(source.{GT1(1):3},":"))' >
<true>
<assign value='source.{PID:PatientAccountNumber}' property='target.{PID:PatientIDInternalID(1).Checkdigit}' action='set' />
<assign value='$P(source.{GT1(1):3},":",2)' property='target.{PID:PatientAccountNumber}' action='set' />
</true>
</if>
<code>
<![CDATA[ 
	// ********** convert all PID chars to CAPS
]]]]><![CDATA[></code>
<assign value='$ZCONVERT(target.{PID},"U" )' property='target.{PID}' action='set' />
<assign value='' property='target.{PV1:HospitalService}' action='remove' />

<assign value='' property='target.{PV1:52}' action='remove' />

<code>
<![CDATA[ 
    //  09/25/2018 - check location for swingbed
    //
	//  Read table T_Swingbed_Lab - unit^room^bed is key to table
	//  If found, replace unit number
	//  Check PV1-3 location and PV1-6 prior location
	]]]]><![CDATA[></code>

<assign value='""' property='wTableKey' action='set' />
<assign value='""' property='temproom' action='set' />
<assign value='""' property='tempbed' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.pointofcare}' property='tempunit' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.room}' property='temproom' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.bed}' property='tempbed' action='set' />
<assign value='tempunit_"^"_temproom_"^"_tempbed' property='wTableKey' action='set' />

<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_Swingbed_Lab",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<false>
<assign value='wtableresult' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</false>
</if>

<assign value='""' property='wTableKey' action='set' />
<assign value='""' property='temproom' action='set' />
<assign value='""' property='tempbed' action='set' />
<assign value='source.{PV1:PriorPatientLocation.pointofcare}' property='tempunit' action='set' />
<assign value='source.{PV1:PriorPatientLocation.room}' property='temproom' action='set' />
<assign value='source.{PV1:PriorPatientLocation.bed}' property='tempbed' action='set' />
<assign value='tempunit_"^"_temproom_"^"_tempbed' property='wTableKey' action='set' />

<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_Swingbed_Lab",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<false>
<assign value='wtableresult' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
</false>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2RegionsLabADT">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64232,58786.60123</TimeChanged>
<TimeCreated>63949,42579.646118</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A01' targetDocType='231.Cerner:ADT_A01' create='new' language='objectscript' >
<subtransform class='GC.Cerner2RegLabSub' targetObj='target' sourceObj='source' />
<code>
<![CDATA[ 
  //    Last Updated 10/28/2016 Al Johnson
  //    Moved to Prod 10/28/2016 Al Johnson
  // Create: 10/28/2016 Al Johnson
  // Description:
  //    10/28/16 Eliminate repetitions of EVN-5 name field
  //  original dtl below
  // if A03 PV1:3 is blank; 
  // if A08 is for inpatient account send as A28
  // chg A06 into A01 and A07 into A04
  // chg A22 and A21 into A02 and use location GILD^GILD^99
  // Update Attending & Admitting to prefix E if starts with non-alpha; blank out admitting
]]]]><![CDATA[></code>
<assign value='' property='target.{EVN}' action='remove' />
<assign value='source.{EVN:1}' property='target.{EVN:1}' action='set' />
<assign value='source.{EVN:2}' property='target.{EVN:2}' action='set' />
<assign value='source.{EVN:3}' property='target.{EVN:3}' action='set' />
<assign value='source.{EVN:4}' property='target.{EVN:4}' action='set' />
<assign value='source.{EVN:5(1).1}' property='target.{EVN:5(1).1}' action='set' />
<assign value='source.{EVN:5(1).2}' property='target.{EVN:5(1).2}' action='set' />
<assign value='source.{EVN:5(1).3}' property='target.{EVN:5(1).3}' action='set' />
<assign value='source.{EVN:6}' property='target.{EVN:6}' action='set' />

<if condition='..Contains(source.{MSH:9.2},"A03")'>
<true>
<assign property='target.{PV1:AssignedPatientLocation}' value='""' action='remove'/>
<assign value='""' property='target.{PV1:PriorPatientLocation}' action='set' />
</true>
</if>
<if condition='source.{MSH:9.2} = "A08" &amp;  ..Contains(source.{PV1:2},"I")'>
<true>
<assign property='target.{PV1:AssignedPatientLocation}' value='""' action='remove'/>
<assign property='target.{EVN:EventTypeCode}' value='"A28"' action='set'/>
<assign property='target.{MSH:9.2}' value='"A28"' action='set'/>
</true>
</if>
<if condition='..Contains(source.{MSH:9.2},"A06")'>
<true>
<assign property='target.{EVN}' value='source.{EVN}' action='set'/>
<assign property='target.{EVN:EventTypeCode}' value='"A01"' action='set'/>
<assign property='target.{MSH:9.2}' value='"A01"' action='set'/>
</true>
</if>
<if condition='..Contains(source.{MSH:9.2},"A07")'>
<true>
<assign property='target.{EVN}' value='source.{EVN}' action='set'/>
<assign property='target.{EVN:EventTypeCode}' value='"A04"' action='set'/>
<assign property='target.{MSH:9.2}' value='"A04"' action='set'/>
</true>
</if>
<if condition='..Contains(source.{MSH:9.2},"A22")'>
<true>
<assign property='target.{MSH:9.2}' value='"A02"' action='set'/>
<assign property='target.{EVN}' value='source.{EVN}' action='set'/>
<assign property='target.{EVN:1}' value='"A02"' action='set'/>
<assign property='target.{PV1:PriorPatientLocation}' value='""' action='set'/>
<assign property='target.{PV1:PriorPatientLocation.pointofcare}' value='"GILD^GILD^99"' action='set'/>
</true>
</if>
<if condition='..Contains(source.{MSH:9.2},"A21")'>
<true>
<assign property='target.{MSH:9.2}' value='"A02"' action='set'/>
<assign property='target.{EVN}' value='source.{EVN}' action='set'/>
<assign property='target.{EVN:1}' value='"A02"' action='set'/>
<assign property='target.{PV1:3}' value='""' action='set'/>
<assign property='target.{PV1:3}' value='"GILD^GILD^99"' action='set'/>
</true>
</if>

<code>
<![CDATA[ 
	// *********************** Add Logic For adding Suffix of E on Attending Doctor and clear other doctors ********************************
	//  <assign value='""' property='target.{PV1:9}' action='clear' />
    //  <assign value='"E"_source.{PV1:7.1}' property='target.{PV1:7.1}' action='set' />
    //  <assign value='"E"_source.{PV1:17.1}' property='target.{PV1:17.1}' action='set' />
]]]]><![CDATA[></code>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2UhsADT">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65996,35722.003079</TimeChanged>
<TimeCreated>63949,42579.646118</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A01' targetDocType='231.Cerner:ADT_A01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
  // Last Updated 09/09/2021 Al Johnson
  // Moved to Prod 09/09/2021 Al Johnson
  // Create: 09/26/2018 Al Johnson
  // Description:
  //
  //    Check for swing bed - change unit - table T_Swingbed_All
  //
  //  9/9/2021 - GCSH Periop change to Periop SD-96525
]]]]><![CDATA[></code>

<code>
<![CDATA[ 
    //  09/25/2018 - check location for swingbed
    //
	//  Read table T_Swingbed_All - unit^room^bed is key to table
	//  If found, replace unit number
	//  Check PV1-3 location and PV1-6 prior location
	]]]]><![CDATA[></code>

<assign value='""' property='wTableKey' action='set' />
<assign value='""' property='temproom' action='set' />
<assign value='""' property='tempbed' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.pointofcare}' property='tempunit' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.room}' property='temproom' action='set' />
<assign value='source.{PV1:AssignedPatientLocation.bed}' property='tempbed' action='set' />
<assign value='tempunit_"^"_temproom_"^"_tempbed' property='wTableKey' action='set' />

<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_Swingbed_All",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<false>
<assign value='wtableresult' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</false>
</if>

<assign value='""' property='wTableKey' action='set' />
<assign value='""' property='temproom' action='set' />
<assign value='""' property='tempbed' action='set' />
<assign value='source.{PV1:PriorPatientLocation.pointofcare}' property='tempunit' action='set' />
<assign value='source.{PV1:PriorPatientLocation.room}' property='temproom' action='set' />
<assign value='source.{PV1:PriorPatientLocation.bed}' property='tempbed' action='set' />
<assign value='tempunit_"^"_temproom_"^"_tempbed' property='wTableKey' action='set' />

<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_Swingbed_All",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<false>
<assign value='wtableresult' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
</false>
</if>

<if condition='target.{PV1:AssignedPatientLocation.pointofcare} = "GCSH Periop"' >
<true>
<assign value='"Periop"' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</true>
</if>

<if condition='target.{PV1:PriorPatientLocation.pointofcare} = "GCSH Periop"' >
<true>
<assign value='"Periop"' property='target.{PV1:PriorPatientLocation.pointofcare}' action='set' />
</true>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2XltekORM">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64072,58250.357061</TimeChanged>
<TimeCreated>62107,39777.392774</TimeCreated>
<DependsOn>EnsLib.HL7.Message,GC.Xltek.ORMXML</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='GC.Xltek.ORMXML' sourceDocType='231.Cerner:ORM_O01' create='new' language='objectscript' >
<code>
<![CDATA[ 
    // Desc: Sleep Orders sent to XLTEK Transformed to XML
    
                // Created: 12/01/09 Mary Schopfer Last Updated 12/11/2012
                // GC.Xltek.ORMXML inherits from 23.Cernerbase override ORM
                // ORC:2 = CA send out as ADT A03
                // Change code to word for SEX
                // send QES appt ID as order number if QES_1 is blank
                // send PID:18_#_SCH:1 in VisitNumberField 
                // send PID:18_QES#_SCH:2 if SCH:1 is blank
]]]]><![CDATA[></code>
<code>
<![CDATA[ 
    // cancel send out as ADT A03 otherwise send as ORM O01
]]]]><![CDATA[></code>
<if condition='(source.{ORCgrp(1).ORC:OrderControl} = "CA" )|| (source.{ORCgrp(1).ORC:OrderControl} = "DC" )' >
<true>
<assign value='"ADT"' property='target.HL7Message.MSH.MessageTypeID' action='set' />
<assign value='"A03"' property='target.HL7Message.MSH.TriggerEventID' action='set' />
</true>
<false>
<assign value='"ORM"' property='target.HL7Message.MSH.MessageTypeID' action='set' />
<assign value='"O01"' property='target.HL7Message.MSH.TriggerEventID' action='set' />
</false>
</if>

<assign value='source.{PID:PatientIdentifierList().ID}' property='target.HL7Message.PID.PatientIDInternal' action='set' />
<assign value='source.{PID:PatientName().familylastname}' property='target.HL7Message.PID.PatientLastName' action='set' />
<assign value='source.{PID:PatientName().givenname}' property='target.HL7Message.PID.PatientFirstName' action='set' />
<assign value='source.{PID:DateTimeOfBirth.timeofanevent}' property='target.HL7Message.PID.PatientDateTimeofBirth' action='set' />
<if condition='source.{PID:Sex} = "F"' >
<true>
<assign value='"Female"' property='target.HL7Message.PID.PatientSex' action='set' />
</true>
</if>
<if condition='source.{PID:Sex} = "M"' >
<true>
<assign value='"Male"' property='target.HL7Message.PID.PatientSex' action='set' />
</true>
</if>
<if condition='source.{PID:Sex} = "U"' >
<true>
<assign value='""' property='target.HL7Message.PID.PatientSex' action='set' />
</true>
</if>
<assign value='source.{PID:PatientAddress().streetaddress}' property='target.HL7Message.PID.PatientStreetAddress' action='set' />
<assign value='source.{PID:PatientAddress().city}' property='target.HL7Message.PID.PatientCity' action='set' />
<assign value='source.{PID:PatientAddress().stateorprovince}' property='target.HL7Message.PID.PatientStateorProvince' action='set' />
<assign value='source.{PID:PatientAddress().ziporpostalcode}' property='target.HL7Message.PID.PatientZiporPostalCode' action='set' />
<assign value='source.{PID:PatientAddress().country}' property='target.HL7Message.PID.PatientCountry' action='set' />
<assign value='source.{ORCgrp(1).OBRgrp.OBR:UniversalServiceID.text}' property='target.HL7Message.PID.ChartNo' action='set' />
<assign value='source.{PV1:ReferringDoctor.givenname}' property='target.HL7Message.PV1.ReferringPhysicianFirstName' action='set' />
<assign value='source.{PV1:ReferringDoctor.familylastname}' property='target.HL7Message.PV1.ReferringPhysicianLastName' action='set' />
<assign value='source.{PID:PatientAccountNumber.ID}_"#"_source.{ORCgrp(1).ORC:PlacerOrderNumber().entityidentifier}' property='target.HL7Message.PV1.VisitNumber' action='set' />
<assign value='source.{PID:13.1}' property='target.HL7Message.PID.PatientHomePhone' action='set' />
<assign value='source.{ORCgrp(1).OBRgrp.OBR:OrderingProvider(1).familylastname}_","_source.{ORCgrp(1).OBRgrp.OBR:OrderingProvider(1).givenname}_" #"_source.{ORCgrp(1).OBRgrp.OBR:OrderingProvider(1).IDnumberST}' property='target.HL7Message.PID.BillingID' action='set' />
<assign value='""' property='target.HL7Message.OBX.ObservationValue' action='set' />
<foreach property='source.{PID:PhoneNumberHome()}' key='k1' >
<if condition='source.{PID:PhoneNumberHome(k1).3} = "PH" ' >
<true>
<assign value='source.{PID:PhoneNumberHome(k1).1}' property='target.HL7Message.PID.PatientHomePhone' action='set' />
</true>
</if>
</foreach>
<assign value='source.{ORCgrp(1).ORC:PlacerOrderNumber}' property='target.HL7Message.ORC' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2eDOCSRadTag">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64296,60860.43682</TimeChanged>
<TimeCreated>61607,43175.348783</TimeCreated>
<DependsOn>EnsLib.HL7.Message,GC.eDOCS.RadTagDelimitedFile</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='GC.eDOCS.RadTagDelimitedFile' sourceDocType='231.Cerner:ORU_R01' create='new' language='objectscript' >
<code>
<![CDATA[ 
	// Created 2016-12-08
	// For Cerner Radiology Results
	// Modified  :  
	// Moved to Prod: xx/xx/xxxx
	//  Source is readable multiple OBX's
	//  Map results to customer fields which will be used to create Tag and Doc files for OpenText eDOCS
	//  use lookup table T_eDOCS_IMGtype  to set DocumentWorktypeInit or default to first char of procedure code
	//  use lookup table T_CS_PatServCodes to set zPatientHospSrvCode
	//  Removed for Cerner: Trans.ID send XSPRT if blank otherwise use Lookup Table T_eDOCS_TnscrptCode to send Intials
	//  Send status of result into DocumentVersionComment and zAmmendedLabel by OBR_25 
	//      also if Addend is found in any OBX
	//  transcriptionist date obr 20 - FillerField1
	//  Send in results found in OBX as Findings
	// 	Send only 1 blank OBX if more than one found in a row
	//  Remove OBX if equals "[ " or "]"
	//  Format Observation datetime as "DATE OF SERVICE:  OCTOBER 07, 2009 0702"
	//  PID_18 Clear field if does not start with 6 or 5 (prod and dev account numbers)
	//  updated Addend logic to add Admend
	//  Check OBX_5 for for starting with "Electronically Signed" and use for DocumentDictator info
	//    note this logic needs to be tested with both PROD and DEV data as the templates may be different


]]]]><![CDATA[></code>
<assign value='""' property='NLchar' action='set' />
<assign value='$char(13,10)' property='NLchar' action='set' />
<assign value='"CernerDocumentID="_NLchar' property='target.CernerDocumentID' action='set' />
<assign value='"PatientMRN="_source.{PID:PatientIdentifierList().ID}_NLchar' property='target.PatientMRN' action='set' />
<assign value='"PatientFirstName="_source.{PID:PatientName().givenname}_NLchar' property='target.PatientFirstName' action='set' />
<assign value='"PatientLastName="_source.{PID:PatientName().familylastname.familyname}_NLchar' property='target.PatientLastName' action='set' />
<assign value='"PatientMiddleInitial="_source.{PID:PatientName().middleinitialorname}_NLchar' property='target.PatientMiddleInitial' action='set' />
<if condition='source.{PID:DateTimeOfBirth.timeofanevent} = "" ' >
<true>
<assign value='"PatientDOB="_NLchar' property='target.PatientDOB' action='set' />
<assign value='""' property='target.zPatientDob' action='set' />
</true>
<false>
<assign value='source.{PID:DateofTimeBirth}' property='datein' action='set' />
<assign value='..SubString(source.{PID:DateTimeOfBirth.timeofanevent},5,6)_"/"_..SubString(source.{PID:DateTimeOfBirth.timeofanevent},7,8)_"/"_..SubString(source.{PID:DateTimeOfBirth.timeofanevent},1,4)' property='dob' action='set' />
<assign value='"PatientDOB="_dob_NLchar' property='target.PatientDOB' action='set' />
<assign value='dob' property='target.zPatientDob' action='set' />
</false>
</if>
<if condition='..StartsWith(source.{PID:18},"6") || ..StartsWith(source.{PID:18},"5" )|| ..StartsWith(source.{PID:18},"2" )' >
<true>
<assign value=' "EncounterID="_source.{PID:18}_NLchar ' property='target.EncounterID' action='set' />
</true>
<false>
<assign value=' "EncounterID="_NLchar ' property='target.EncounterID' action='set' />
</false>
</if>
<assign value=' "CernerDocumentID = "_NLchar ' property='target.CernerDocumentID ' action='set' />
<assign value='..SubString(source.{ORCgrp(1).OBR:7},5,6)_"/"_..SubString(source.{ORCgrp(1).OBR:7},7,8)_"/"_..SubString(source.{ORCgrp(1).OBR:7},1,4)' property='dos' action='set' />
<assign value=' "DateOfService="_dos_NLchar ' property='target.DateOfService' action='set' />
<assign value=' "ExtSourceDocumentID="_NLchar ' property='target.ExtSourceDocumentID' action='set' />
<assign value=' "SourceSystem=CernerPowerscribe"_NLchar ' property='target.SourceSystem' action='set' />
<assign value=' "RevisionCount= "_NLchar ' property='target.RevisionCount' action='set' />
<assign value=' "LastModifiedTime="_NLchar ' property='target.LastModifiedTime' action='set' />
<code>
<![CDATA[ 
  //  Check OBX_5 for for starting with "Electronically Signed" and use for DocumentDictator info
]]]]><![CDATA[></code>
<assign value='""' property='tmpDictID' action='set' />
<assign value='""' property='tmpDictLast' action='set' />
<assign value='""' property='tmpDictFirst' action='set' />
<assign value=' "AuthorID= "_NLchar' property='target.AuthorID' action='set' />
<assign value=' "TranscriptionistID"_NLchar ' property='target.TranscriptionistID ' action='set' />
<assign value=' "TranscriptionistLastName "_NLchar ' property='target.TranscriptionistLastName ' action='set' />
<assign value=' "TranscriptionistFirstName="_NLchar ' property='target.TranscriptionistFirstName' action='set' />
<code>
<![CDATA[ 
  //  Loop thru the obx segments pick up Electronically Signed by info
  //  if the name of the signed by  is all the the name in the OBX:16 then use OBX 16 for the tag file
  //  if it doesn not match pull it from obx5.1
  //  Also concatinate the results 
]]]]><![CDATA[></code>
<foreach property='source.{ORCgrp()}' key='k2' >
<foreach property='source.{ORCgrp(k2).OBXgrp()}' key='k1' >
<if condition='..Contains(source.{ORCgrp(k2).OBXgrp(k1).OBX:5(1).1(1)},"Signed by")' >
<true>
<code>
<![CDATA[ 
  //  ****************************************************
  //   True says Electronically  Sign by:  
  //  *****************************************************
]]]]><![CDATA[></code>
<if condition='(..Contains(source.{ORCgrp(k2).OBXgrp(k1).OBX:5(1).1(1)},source.{ORCgrp(k2).OBXgrp(k1).OBX:16.2})&amp;&amp; ($LENGTH(source.{ORCgrp(k2).OBXgrp(k1).OBX:16.2})  &gt; 0 ) )' >
<true>
<code>
<![CDATA[ 
  //  ****************************************************
  //   OBX:16.2 is not blank 
  //  *****************************************************
]]]]><![CDATA[></code>

<assign value=' "AuthorLastName="_source.{ORCgrp(k2).OBXgrp(k1).OBX:16.2}_NLchar ' property='target.AuthorLastName' action='set' />
<assign value=' "AuthorFirstName="_source.{ORCgrp(k2).OBXgrp(k1).OBX:16.3}_NLchar ' property='target.AuthorFirstName' action='set' />
</true>
<false><code>
<![CDATA[
 //  **************************************************************
  //   OBX:16.2 is   blank or OBX16.2 does not match name in signed
  //  *************************************************************
  ]]]]><![CDATA[></code>
<code>
<![CDATA[
    //  does not match then pull name from Signed by text 
	//  Replace characters from OBX 5 Electronically Signed by: Jennifer Valiant 12/13/2016 14:49
	//  test2
	//  !-#$*:_?,/\;()with space also '"
	//  &and $C(38) %percent <less than >greater than =equal +plus @at
]]]]><![CDATA[></code>
<assign value='""' property='Test' action='set' />
<assign value='$P(source.{ORCgrp(k2).OBXgrp(k1).OBX:5(1).1(1)},":",2)' property='Test' action='set' />
<assign value='$Translate(Test,"!-#$*:_?,/\;()"," ")' property='Test2' action='set' />
<assign value='..Strip(Test2,"=W")' property='Test2' action='set' />
<code>
<![CDATA[ 
  //  ****************************************************
  //    says Signed by: and garbage char are gone
  //  *****************************************************
]]]]><![CDATA[></code>

<assign value='..Strip($P(Test2," ",2),"*WN")' property='tmpDictLast' action='set' />
<assign value='..Strip($P(Test2," ",1),"*WN")' property='tmpDictFirst' action='set' />
<code>
<![CDATA[ 
  //  ************************************************************
  //  if tmpDictFirst has no data Piece 1
  //  maybe there was a inexpected space try with piece 2 and 3
  //  ************************************************************
]]]]><![CDATA[></code>
<if condition='$L(tmpDictFirst)&lt; 2 ' >
<true>
<assign value='..Strip($P(Test2," ",3),"*WN")' property='tmpDictLast' action='set' />
<assign value='..Strip($P(Test2," ",2),"*WN")' property='tmpDictFirst' action='set' />
</true>
</if>
  
 

<assign value=' "AuthorLastName="_tmpDictLast_NLchar ' property='target.AuthorLastName' action='set' />
<assign value=' "AuthorFirstName="_tmpDictLast_NLchar ' property='target.AuthorFirstName' action='set' />

</false> 

</if>
</true>
<false>
<code>
<![CDATA[ 
  //  ****************************************************
  //    default pick up OBX:16.2
  //  *****************************************************
]]]]><![CDATA[></code>
<assign value=' "AuthorLastName="_source.{ORCgrp(k2).OBXgrp(k1).OBX:16.2}_NLchar ' property='target.AuthorLastName' action='set' />
<assign value=' "AuthorFirstName="_source.{ORCgrp(k2).OBXgrp(k1).OBX:16.3}_NLchar ' property='target.AuthorFirstName' action='set' />

</false>
</if>
</foreach>
</foreach>
<code>
<![CDATA[ 
	// Send status of result into  VersionComment and zAmmendedLabel by OBR_25 
	//  also if Addend is found in any OBX
	// code to cover various situations not sure if this will happen in PAC Cerner but will leave in. Ellen 04/18/2016
]]]]><![CDATA[></code>
<assign value=' "" ' property='VersionComment' action='set' />
<assign value='" "' property='target.zAmmendedLabel' action='set' />
<if condition='source.{ORCgrp(1).OBR:25} = "P" ' >
<true>
<assign value='"PRELIMINARY REPORT"' property='VersionComment' action='set' />
</true>
</if>
<if condition='source.{ORCgrp(1).OBR:25} = "P" ' >
<true>
<assign value='"PRELIMINARY REPORT"' property='VersionComment' action='set' />
</true>
<false>
<assign value='"FINAL RESULT"' property='VersionComment' action='set' />
</false>
</if>
<if condition='..Contains(source.{ORCgrp(1).OBR:25},"C") ' >
<true>
<assign value='"AMENDED REPORT!"' property='target.zAmmendedLabel' action='set' />
<assign value='"AMENDED REPORT"' property='VersionComment' action='set' />
<assign value=' "RevisionCount= "_NLchar ' property='target.RevisionCount' action='set' />
</true>
</if>
<foreach property='source.{ORCgrp()}' key='k2' >
<foreach property='source.{ORCgrp(k2).OBXgrp()}' key='k1' >
<if condition='..Contains(source.{OBXgrp(k2):5(1)},"Addend") || ..Contains(source.{OBXi2(k2):5(1)},"Amend") || ..Contains(source.{OBXi2(k2):5(1)},"AMEND") ' >
<true>
<assign value='"AMENDED REPORT!"' property='target.zAmmendedLabel' action='set' />
<assign value='"AMENDED REPORT"' property='VersionComment' action='set' />
<assign value=' "RevisionCount= "_NLchar ' property='target.RevisionCount' action='set' />
</true>
</if>
</foreach>
</foreach>
<assign value=' "VersionComment="_VersionComment_NLchar ' property='target.VersionComment' action='set' />
<code>
<![CDATA[ 
    // <assign value=' ""_NLchar ' property='target.TransID' action='set' />
    //  Trans.ID send XSPRT if blank otherwise use Lookup Table T_eDOCS_TnscrptCode to send Intials

	//  <assign value='""' property='tmpTransID' action='set' />
	//  <assign value='..Lookup("T_eDOCS_TnscrptCode",source.{ORCgrp(1).OBR:35(1).1.1},source.{ORCgrp(1).OBR:35(1).1.1})' property='tmpTransID' action='set' />
	//  <if condition='$LENGTH(tmpTransID) &lt; 1  ' >
	//  <true>
	//  <assign value='"Trans.ID=XSPRT"_NLchar' property='target.TransID' action='set' />
	//  </true>
	//  <false>
	//  <assign value='"Trans.ID="_tmpTransID_NLchar' property='target.TransID' action='set' />
	//  </false>
	//  </if>
]]]]><![CDATA[></code>
<assign value='"ExtSourceDocumentID="_..SubString(source.{ORCgrp(1).OBR:FillerOrderNumber.entityidentifier},1,20)_NLchar' property='target.ExtSourceDocumentID' action='set' />
<code>
<![CDATA[ 
	// transcriptionist date obr 20 - FillerField1
]]]]><![CDATA[></code>
<if condition='source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent} = "" ' >
<true>
<assign value='"LastModifiedTime="_NLchar' property='target.LastModifiedTime' action='set' />
</true>
<false>
<assign value='"LastModifiedTime="_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},5,6)_"/"_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},7,8)_"/"_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},1,4)_" "_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},9,10)_":"_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},11,12)_":"_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},13,14)_NLchar' property='target.LastModifiedTime' action='set' />
</false>
</if>
<code>
<![CDATA[ 
	// Send in worktype as first character of procedure code sent
	//  Use lookup table T_eDOCS_IMGtype for exceptions to rule
]]]]><![CDATA[></code>
<assign value='""' property='WorkType' action='set' />
<assign value='""' property='Type' action='set' />

<assign value='..SubString(source.{ORCgrp(1).OBR:4.1},1,1)' property='Type' action='set' />

<if condition='..SubString(source.{ORCgrp(1).OBR:4.1},1,6) = "OS MRI" ' >
<true>
<assign value='"M"' property='Type' action='set' />
</true>
</if>
<if condition='..SubString(source.{ORCgrp(1).OBR:4.1},1,5) = "OS XR" ' >
<true>
<assign value='"X"' property='Type' action='set' />
</true>
</if>
<if condition='..SubString(source.{ORCgrp(1).OBR:4.1},1,5) = "OS US" ' >
<true>
<assign value='"U"' property='Type' action='set' />
</true>
</if>
<if condition='..SubString(source.{ORCgrp(1).OBR:4.1},1,5) = "OS CT" ' >
<true>
<assign value='"C"' property='Type' action='set' />
</true>
</if>

<assign value='..Lookup("T_eDOCS_IMGtype",source.{ORCgrp(1).OBR:4.1},Type)' property='WorkType' action='set' />
<if condition='$LENGTH(WorkType) &lt; 2  ' >
<true>
<assign value='..Lookup("T_eDOCS_IMGtype",Type)' property='WorkType' action='set' />
</true>
</if>
<assign value='"DocumentType="_WorkType_NLchar' property='target.DocumentType' action='set' />
<assign value='"0"' property='OBXFindings' action='set' />
<code>
<![CDATA[ 
	// Send in results found in OBX as Findings
	// Send only 1 blank OBX if more than one found in a row
	//  Remove OBX if equals "[ " or "]"
]]]]><![CDATA[></code>
<foreach property='source.{ORCgrp()}' key='k2' >
<foreach property='source.{ORCgrp(k2).OBXgrp()}' key='k1' >
<if condition='OBXFindings = k1' >
<false>
<if condition='source.{ORCgrp(k2).OBXgrp(k1).OBX:5(1)} = source.{ORCgrp(k2).OBXgrp(k1-1).OBX:5(1)}' >
<false>
<if condition='..In(source.{ORCgrp(k2).OBXgrp(k1).OBX:5(1)},"] ,[ ")' >
<false>
<assign value='target.zFindings_source.{ORCgrp(k2).OBXgrp(k1).OBX:5(1)}_"{\par}"' property='target.zFindings' action='set' />
<assign value='OBXFindings+1' property='OBXFindings' action='set' />
</false>
</if>
</false>
</if>
</false>
</if>
</foreach>
</foreach>
<code>
<![CDATA[ 
	// test <assign value='source.{ORCgrp(1).OBR:FillerOrderNumber.entityidentifier}' property='target.zFindings' action='set' />
]]]]><![CDATA[></code>
<assign value='source.{ORCgrp(1).OBR:OrderingProvider().familylastname}_", "_source.{ORCgrp(1).OBR:OrderingProvider(1).givenname}_" "_source.{ORCgrp(1).OBR:OrderingProvider(1).middleinitialorname}' property='target.zOrderingDoctorName' action='set' />
<assign value='source.{PID:PatientName().givenname}' property='target.zPatientNameFirst' action='set' />
<assign value='source.{PID:PatientName().middleinitialorname}' property='target.zPatientNameMI' action='set' />
<assign value='source.{PID:PatientName().familylastname.familyname}' property='target.zPatientNameLast' action='set' />
<assign value='source.{PID:PatientIdentifierList().ID}' property='target.zPatientMrn' action='set' />
<assign value='..Lookup("T_CS_PatLocationCodes",source.{PV1:AssignedPatientLocation.facilityHD},source.{PV1:AssignedPatientLocation.facilityHD})' property='target.zPatientHospSrvCode' action='set' />
<code>
<![CDATA[ 
	// Format Observation datetime as "DATE OF SERVICE:  OCTOBER 07, 2009 0702"
	//<assign value='$REPLACE(tmpOBX51,"}ZZZZ","")' property='target.zOBX51' action='set' />
]]]]><![CDATA[></code>
<if condition='source.{ORCgrp(1).OBR:ObservationEndDateTime.timeofanevent}= "" ' >
<true>
<assign value='""' property='target.zObservationEndDate' action='set' />
</true>
<false>
<assign value='..SubString(source.{ORCgrp(1).OBR:ObservationEndDateTime.timeofanevent},1,4)_"-"_..SubString(source.{ORCgrp(1).OBR:ObservationEndDateTime.timeofanevent},5,6)_"-"_..SubString(source.{ORCgrp(1).OBR:ObservationEndDateTime.timeofanevent},7,8)' property='tmpMonth' action='set' />
<assign value='$SYSTEM.SQL.MONTHNAME(tmpMonth)_" "_..SubString(source.{ORCgrp(1).OBR:ObservationEndDateTime.timeofanevent},7,8)_", "_..SubString(source.{ORCgrp(1).OBR:ObservationEndDateTime.timeofanevent},1,4)_" "_..SubString(source.{ORCgrp(1).OBR:ObservationEndDateTime.timeofanevent},9,12)' property='target.zObservationEndDate' action='set' />
</false>
</if>
<code>
<![CDATA[ 
  /*  took this out 
	<assign value='""' property='tmpNote' action='set' />
	<assign value='""' property='combineNote' action='set' />
	<assign value='""' property='target.zNTESign' action='set' />
	<foreach property='source.{ORCgrp(1).OBXgrp(1).NTE()}' key='k3' >
	<if condition='source.{ORCgrp(1).OBXgrp(1).NTE(k3):SourceOfComment(1)}= "SIGN LINE"' >
	<true>
	<assign value='source.{ORCgrp(1).OBXgrp(1).NTE(k3):Comment(1)}' property='tmpNote' action='set' />
	<assign value='$REPLACE(tmpNote,"\.br\","\par ")' property='tmpNote' action='set' />
	<assign value='combineNote_tmpNote' property='combineNote' action='set' />
	</true>
	</if>
	</foreach>
 */		 
  ]]]]><![CDATA[></code>
<assign value='source.{ORCgrp(1).OBXgrp(1).OBX:ObservationValue(1)}' property='target.zOBX51' action='set' />
<code>
<![CDATA[ 
   /*  // took this out 
	<if condition='target.zNTESign =  "" ' >
	<true>
	<assign value='source.{ORCgrp(1).OBXgrp(1).OBX:ObservationValue(1)}' property='target.zOBX51' action='set' />
	</true>
	<false>
	<assign value='source.{ORCgrp(1).OBXgrp(1).OBX:ObservationValue(1)}_"ZZZZ"_combineNote_"}"' property='tmpOBX51' action='set' />
	<assign value='$REPLACE(tmpOBX51,"}ZZZZ","")' property='target.zOBX51' action='set' />
	</false>
	</if>
	*/
  //Save the report to the ResultData property of the target object
  /* Try { 
         set sourceStream = ##class(%Stream.GlobalCharacter).%New()
         do sourceStream.%Save()
         set tSC2 = source.GetFieldStreamRaw(.sourceStream, "ORCgrp(1).OBXgrp(1).OBX:5")
         set streamSize = sourceStream.SizeGet()
         if (streamSize >= 1 ) {
             set target.zOBX51 = ##class(%Stream.GlobalCharacter).%New()
             do target.zOBX51.%Save()
             set tSC = target.zOBX51.CopyFrom(sourceStream)
             do target.zOBX51.%Save()
         }else {
             set tSC = target.zOBX51.Write(" ")
                }
} Catch errobj { 
             Set target.zOBX51= " " 
                                }  */		 
  ]]]]><![CDATA[></code>
<assign value='source.{MSH:DateTimeOfMessage.timeofanevent}' property='tmpDateTime' action='set' />
<assign value='($REPLACE(source.{MSH:MessageControlID},".","_"))' property='tmpMSGCNTRL' action='set' />
<assign value='tmpMSGCNTRL_"_"_tmpDateTime' property='target.zTagfilename' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2eDocsSqlADT">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64330,46305.849928</TimeChanged>
<TimeCreated>61597,59720.639499</TimeCreated>
<DependsOn>EnsLib.HL7.Message,GC.eDOCSsql.ADTParameters</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='GC.eDOCSsql.ADTParameters' sourceDocType='231.Cerner:ADT_A01' create='new' language='objectscript' >
<code>
<![CDATA[ 
 	//  Author: Ellen
 	//  Create date: 09/03/2014 
 	//  In PROD:03/23/2015
 	//  Description:	Currently Charge data from Ensemble
 	//  Modified: 02/07/2015 EJL. Check for Discharge date length < 4 or blank. Sometimes sending in double quotes.
 	//  Modified: 02/16/2017 EJL. Check for Blank PV1 44 and use PV2 8.1 if blank
 	//  Description: Send ADT patient and visit data to eDOC.
 	//  A01,A03,A04,A08,A11,A13,A28,A31 not all use A01 base but the fields I need work. 
 	//  A13 clear Discharge date
 	//  Properites :Length must match exactly with SQL Proc or will not work.
]]]]><![CDATA[></code>
<assign value='source.{EVN:EventTypeCode}' property='target.EVNf1transactionType' action='set' />
<assign value='source.{MSH:MessageControlID}' property='target.MSHf10msgControlID' action='set' />
<assign value='source.{PID:PatientIdentifierList().ID}' property='target.MRGf1mrNumber' action='set' />
<assign value='source.{PID:PatientIdentifierList().ID}' property='target.PIDf3mergeToMRNumber' action='set' />
<if condition='source.{PID:PatientName().middleinitialorname} = "" ' >
<true>
<assign value='""' property='tmpComma' action='set' />
</true>
<false>
<assign value='","' property='tmpComma' action='set' />
</false>
</if>
<assign value='source.{PID:PatientName.familylastname}_","_source.{PID:PatientName.givenname}_tmpComma_source.{PID:PatientName.middleinitialorname}' property='target.Pidf5s1patientName' action='set' />
<if condition='source.{PID:DateTimeofBirth.timeofanevent} = "" ' >
<false>
<assign value='..SubString(source.{PID:DateTimeofBirth.timeofanevent},5,6)_"/"_..SubString(source.{PID:DateTimeofBirth.timeofanevent},7,8)_"/"_..SubString(source.{PID:DateTimeofBirth.timeofanevent},1,4)' property='target.PIDf7DOB' action='set' />
</false>
</if>
<assign value='source.{PID:Sex}' property='target.PIDf8sex' action='set' />
<assign value='source.{PID:PatientAccountNumber.ID}' property='target.PIDf18visitID' action='set' />
<assign value='source.{PV1:PatientClass}' property='target.PV1f2visitType' action='set' />
<if condition='source.{PV1:AdmitDateTime} = "" ' >
<false>
<assign value='..SubString(source.{PV1:AdmitDateTime},5,6)_"/"_..SubString(source.{PV1:AdmitDateTime},7,8)_"/"_..SubString(source.{PV1:AdmitDateTime},1,4)' property='target.PV1f44admitDate' action='set' />
</false>
<true>
<if condition='source.{PV2:ExpectedAdmitDateTime} = "" ' >
<false>
<assign value='..SubString(source.{PV2:ExpectedAdmitDateTime},5,6)_"/"_..SubString(source.{PV2:ExpectedAdmitDateTime},7,8)_"/"_..SubString(source.{PV2:ExpectedAdmitDateTime},1,4)' property='target.PV1f44admitDate' action='set' />
</false>
</if>
</true>
</if>
<if condition='($LENGTH(source.{PV1:DischargeDateTime}) &lt; 4 ) || (source.{PV1:DischargeDateTime} = "")' >
<false>
<assign value='..SubString(source.{PV1:DischargeDateTime},5,6)_"/"_..SubString(source.{PV1:DischargeDateTime},7,8)_"/"_..SubString(source.{PV1:DischargeDateTime},1,4)' property='target.PV1F45dischargeDate' action='set' />
</false>
</if>
<if condition='source.{MSH:MessageType.triggerevent} = "A13"' >
<true>
<assign value='""' property='target.PV1F45dischargeDate' action='set' />
</true>
</if>
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Cerner2eDocsSqlADT40">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64042,40521.192171</TimeChanged>
<TimeCreated>61597,59720.639499</TimeCreated>
<DependsOn>EnsLib.HL7.Message,GC.eDOCSsql.ADTParameters</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='GC.eDOCSsql.ADTParameters' sourceDocType='231.Cerner:ADT_A35' create='new' language='objectscript' >
<code>
<![CDATA[ 
 	//  Author: Ellen
 	//  Create date: 09/03/20143
 	//  In PROD: not yet
 	//  Description:	Currently Charge data from Ensemble
 	//  Modified: na
 	//  Description: Send ADT patient and visit data to eDOC.
 	//  A40 uses A39 base . 
 	//  mrNumber: The number that’s being discontinued.
 	//  mergeToMRNumbee: The number that will be used in the future.
 	//  Properites :Length must match exactly with SQL Proc or will not work.
]]]]><![CDATA[></code>
<assign value='"A40"' property='target.EVNf1transactionType' action='set' />
<assign value='source.{MSH:MessageControlID}' property='target.MSHf10msgControlID' action='set' />
<assign value='source.{MRG:PriorPatientIdentifierList().ID}' property='target.MRGf1mrNumber' action='set' />
<assign value='source.{PID:PatientIdentifierList().ID}' property='target.PIDf3mergeToMRNumber' action='set' />
<if condition='source.{PID:PatientName.middleinitialorname} = "" ' >
<true>
<assign value='""' property='tmpComma' action='set' />
</true>
<false>
<assign value='","' property='tmpComma' action='set' />
</false>
</if>
<assign value='source.{PID:PatientName.familylastname}_","_source.{PID:PatientName.givenname}_tmpComma_source.{PID:PatientName.middleinitialorname}' property='target.Pidf5s1patientName' action='set' />
<if condition='source.{PID:DateTimeofBirth.timeofanevent} = "" ' >
<false>
<assign value='..SubString(source.{PID:DateTimeofBirth.timeofanevent},5,6)_"/"_..SubString(source.{PID:DateTimeofBirth.timeofanevent},7,8)_"/"_..SubString(source.{PID:DateTimeofBirth.timeofanevent},1,4)' property='target.PIDf7DOB' action='set' />
</false>
</if>
<assign value='source.{PID:Sex}' property='target.PIDf8sex' action='set' />
<assign value='source.{PID:PatientAccountNumber.ID}' property='target.PIDf18visitID' action='set' />
<assign value='source.{PV1:PatientClass}' property='target.PV1f2visitType' action='set' />
<if condition='source.{PV1:AdmitDateTime} = "" ' >
<false>
<assign value='..SubString(source.{PV1:AdmitDateTime},5,6)_"/"_..SubString(source.{PV1:AdmitDateTime},7,8)_"/"_..SubString(source.{PV1:AdmitDateTime},1,4)' property='target.PV1f44admitDate' action='set' />
</false>
</if>
<if condition='($LENGTH(source.{PV1:DischargeDateTime}) &lt; 4 ) || (source.{PV1:DischargeDateTime} = "")' >
<false>
<assign value='..SubString(source.{PV1:DischargeDateTime},5,6)_"/"_..SubString(source.{PV1:DischargeDateTime},7,8)_"/"_..SubString(source.{PV1:DischargeDateTime},1,4)' property='target.PV1F45dischargeDate' action='set' />
</false>
</if>


</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.CernerADT2QuantimADT">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64027,55630.741886</TimeChanged>
<TimeCreated>63993,59397.54959</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A01' targetDocType='231.Cerner:ADT_A01' create='new' language='objectscript' >
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='"REG"' property='target.{MSH:SendingApplication.namespaceID}' action='set' />
<assign value='"GCS"' property='target.{MSH:SendingFacility.namespaceID}' action='set' />
<assign value='""' property='target.{MSH:ReceivingApplication.namespaceID}' action='set' />
<assign value='"GCS"' property='target.{MSH:ReceivingFacility.namespaceID}' action='set' />
<assign value='source.{EVN}' property='target.{EVN}' action='set' />
<assign value='source.{PID}' property='target.{PID}' action='set' />
<assign value='..Lookup("T_CrQuantimCountryCodes",source.{PID:PatientAddress().country})' property='target.{PID:PatientAddress().country}' action='set' />
<assign value='source.{NK1(1)}' property='target.{NK1(1)}' action='set' />
<assign value='source.{PV1}' property='target.{PV1}' action='set' />
<assign value='source.{PV2}' property='target.{PV2}' action='set' />
<assign value='source.{IN1grp().IN1}' property='target.{IN1grp().IN1}' action='set' />
<assign value='source.{IN1grp().IN2}' property='target.{IN1grp().IN2}' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.CernerADTMrg2QuantimADTMrg">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>63993,60576.109692</TimeChanged>
<TimeCreated>63993,59949.21722</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A34' targetDocType='231.Cerner:ADT_A34' create='new' language='objectscript' >
<code>
<![CDATA[ 
  //Create new transform mmw
  //convert A34 to A18]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='"A18"' property='target.{MSH:MessageType.triggerevent}' action='set' />
<assign value='source.{EVN}' property='target.{EVN}' action='set' />
<assign value='source.{PID}' property='target.{PID}' action='set' />
<assign value='source.{MRG}' property='target.{MRG}' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.CernerAdt2AcuityAdt">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65535,48143.833079</TimeChanged>
<TimeCreated>64064,55124.431422</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A01' targetDocType='231.Cerner:ADT_A01' create='new' language='objectscript' >
<code>
<![CDATA[ 
  // Last Updated 05/28/2020 Al Johnson
  // Moved to Prod 06/05/2020 Al Johnson
  // Description:
  //    Translation was reading table and updating the unit
  //    If no record, wrote blank unit
  //    Changed to check inpatient and pass unit thru if no table entry
  //    Mulitple overflow units created for COVID19 - 5/28/2020 CNR-20406
]]]]><![CDATA[></code>

<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='source.{EVN}' property='target.{EVN}' action='set' />
<assign value='source.{PID}' property='target.{PID}' action='set' />
<assign value='source.{PV1}' property='target.{PV1}' action='set' />

<assign value='""' property='wtableunitresult' action='set' />
<assign value='..Lookup("T_Cr2Acuity_Unit",source.{PV1:AssignedPatientLocation.pointofcare})' property='wtableunitresult' action='set' />

<if condition='wtableunitresult=""' >
<false>
<assign value='wtableunitresult' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</false>
<true>
<if condition='source.{PV1:PatientClass}="I"' >
<true>
<assign value='source.{PV1:AssignedPatientLocation.pointofcare}' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</true>
<false>
<assign value='""' property='target.{PV1:AssignedPatientLocation.pointofcare}' action='set' />
</false>
</if>
</true>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.CernerBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65409,57828.972685</TimeChanged>
<TimeCreated>63844,26825.658005</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34,ADT_A35"></constraint>
<when condition="DoesNotContain(HL7.{MRG})">
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="HL7.{PV1:PatientType}=&quot;Outpatient Message&quot;">
<return></return>
</when>
</rule>
<rule name="no MRN person add / update" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A28,ADT_A31"></constraint>
<when condition="(HL7.{PID:PatientIdentifierList(1).ID}=&quot;&quot;)">
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A08"></constraint>
<when condition="(HL7.{PID:PatientAccountNumber.ID}=&quot;&quot;)">
<return></return>
</when>
</rule>
<rule name="Archive" disabled="false">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="Block Test Patients - ADT" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A02,ADT_A03,ADT_A04,ADT_A05,ADT_A06,ADT_A07,ADT_A08,ADT_A09,ADT_A10,ADT_A11,ADT_A12,ADT_A13,ADT_A14,ADT_A15,ADT_A16,ADT_A17,ADT_A21,ADT_A22,ADT_A23,ADT_A24,ADT_A25,ADT_A26,ADT_A28,ADT_A29,ADT_A31,ADT_A34,ADT_A35,ADT_A38,ADT_A44,ADT_ADSC"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="Block Test Patients - SIU" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="SIU_S12,SIU_S13,SIU_S14,SIU_S15,SIU_S17,SIU_S26"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PIDgrp(1).PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="ADT" disabled="false">
<constraint name="source" value="HL7.S.CrMultiAdt"></constraint>
<when condition="1">
<send transform="" target="eDocs.P.bo"></send>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.CernerGetData">
<IncludeCode>%occInclude,Ensemble</IncludeCode>
<Super>%Persistent</Super>
<TimeChanged>64357,44756.050651</TimeChanged>
<TimeCreated>64083,56807.707503</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// http://172.25.68.31:57772/csp/docbook/DocBook.UI.Page.cls?KEY=BGOD_gateway#BGOD_gateway_program_odbc

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// http://172.25.68.31:57772/csp/documatic/%25CSP.Documatic.cls?APP=1&CLASSNAME=%25Library.ResultSet&LIBRARY=%25SYS

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// encntr_ID ,MED_SERVICE,PERSON_ID

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// , NAME_LAST, NAME_FIRST , NAME_FULL_FORMATTED

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// , FIN , MRN

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// , convert (varchar,REG_DT_TM ,101) as AdmitDate

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// , convert (varchar,BIRTH_DT_TM ,101) as DOB

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Ensemble needs permission in EDW_IS on each table in the stored Proc

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Stored proc are in ODS_POC

]]></Content>
</UDLText>

<Method name="QESGetPatientInfoByFin">
<ClassMethod>1</ClassMethod>
<FormalSpec>Fin:%String(MAXLEN=50)</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//Ensemble must be set as db reader in edw_is
	//  Used in MPILoad
	set tMRN = ""
	set tClinic = ""
	Set conn=##class(%SQLGatewayConnection).%New()
	//set sc = conn.GetConnection("EDWCerner",360)
    Set sc=conn.Connect("Ensemble2TestEdwODS_PocCertSQL64","Ensemble","gtwy2010")
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set res=##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
	Set parmFin = Fin
	set tproc = "HL7.QESGetPatientInfoByFin "_parmFin 
	Set sc=res.Prepare(tproc,,conn)
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set sc=res.Execute()
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    
    While res.Next() 
    { // Write !," Facility = ",res.GetData(1),",DOS= ",res.GetData(2) ,",Account= ",res.GetData(3) 
     Set tClinic = res.GetData(1)
    } 
    Set sc=conn.Disconnect()
    Quit tClinic
]]></Implementation>
</Method>

<Method name="QESGetPatientContactMethodByMRN">
<ClassMethod>1</ClassMethod>
<FormalSpec>MRN:%String(MAXLEN=50)</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//Ensemble must be set as db reader in edw_is
	//  Used for MPILoad
	Set tContactMethod = ""
	Set conn=##class(%SQLGatewayConnection).%New()
	//set sc = conn.GetConnection("EDWCerner",360)
    Set sc=conn.Connect("Ensemble2TestEdwODS_PocCertSQL64","Ensemble","gtwy2010")
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set res=##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
	Set parmMRN = MRN
	set tproc = "HL7.QESGetPatientContactMethodByMRN "_parmMRN
	Set sc=res.Prepare(tproc,,conn)
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set sc=res.Execute()
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    
    While res.Next() 
    {  
     Set tContactMethod = res.GetData(1)
    } 
    Set sc=conn.Disconnect()
    Quit tContactMethod
]]></Implementation>
</Method>

<Method name="CernerGetPatientInfoByFin">
<ClassMethod>1</ClassMethod>
<FormalSpec>Fin:%String(MAXLEN=50)</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tMRN = ""
	Set conn=##class(%SQLGatewayConnection).%New()
    //set sc = conn.GetConnection("EDWCerner",360)
    // Set sc=conn.Connect("OdsCernerIncr","Ensemble","gtwy2010")
    // Set sc=conn.Connect("OdsCernerIncr","Ensemble","Ensemble","gtwy2010")
    Set sc=conn.Connect("OdsCernerIncr","Ensemble","gtwy2010")
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set res=##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
	Set parmFin = Fin
	//Set parmFin = "20000430"
	set tproc = "HL7.CernerGetPatientInfoByFin "_parmFin 
    Set sc=res.Prepare(tproc,,conn)
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set sc=res.Execute()
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    While res.Next() 
    { // Write !," MRN= ",res.GetData(1),",FIN= ",res.GetData(2) ,",DOB= ",res.GetData(3) ,",HSC= ",res.GetData(4),", Name=",res.GetData(5)  ,", Admit=",res.GetData(5) 
     Set tMRN = res.GetData(1)
     //Set tDOB = res.GetData(3)
     //Set tFIN = res.GetData(2)
    } 
    Set sc=conn.Disconnect()
    Quit tMRN
]]></Implementation>
</Method>

<Method name="CernerGetPatientInfoByName">
<ClassMethod>1</ClassMethod>
<FormalSpec>LastName:%String(MAXLEN=100),FirstName:%String(MAXLEN=100),MiddleName:%String(MAXLEN=100)</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//DOS should come in as  YYYYMMDD
	Set tComma = ","
	Set tQuote = "'"
	set tMRN = ""
    Set conn=##class(%SQLGatewayConnection).%New()
    // set sc = conn.GetConnection("EDWCerner",180)
    Set sc=conn.Connect("OdsCernerIncr","Ensemble","gtwy2010")
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set res=##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
    Set parmLastName = LastName
    Set parmFirstName = FirstName
    Set parmMiddleName = MiddleName
    if parmMiddleName ="" {Set parmMiddleName = " " }
    set tprocName = "HL7.CernerGetPatientInfoByName "
	SET tproc = tprocName_tQuote_parmLastName_tQuote_tComma_tQuote_parmFirstName_tQuote_tComma_tQuote_parmMiddleName_tQuote
    Set sc=res.Prepare(tproc,,conn)
    //Write !,"tproc="_ tproc
    //$$$TRACE("PROC="_tproc)
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set sc=res.Execute()
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    While res.Next() 
    {  
      // Write !," MRN= ",res.GetData(1),",FIN= ",res.GetData(2) ,",DOB= ",res.GetData(3) ,",HSC= ",res.GetData(4) ,", Admit=",res.GetData(5) 
      //$$$TRACE("WhileLoop")
     Set tMRN = res.GetData(1)
     //Set tDOB = res.GetData(3)
     //Set tFIN = res.GetData(2)
    }
    //$$$TRACE("MRNData="_tMRN)
    Set sc=conn.Disconnect() 
    Quit tMRN
]]></Implementation>
</Method>

<Method name="CernerCheckOPMsgEncounter">
<ClassMethod>1</ClassMethod>
<FormalSpec>MRN:%String(MAXLEN=50)</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//Ensemble must be set as db reader in edw_is
	// Used for Check for existing encounter
	Set tTotalCnt = ""
	Set conn=##class(%SQLGatewayConnection).%New()
    Set sc=conn.Connect("OdsCernerIncr","Ensemble","gtwy2010")
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set res=##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
	Set parmMRN = MRN
	set tproc = "HL7.CernerCheckOPMsgEncounter "_parmMRN
	Set sc=res.Prepare(tproc,,conn)
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set sc=res.Execute()
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    
    While res.Next() 
    {  
     Set tTotalCnt = res.GetData(1)
    } 
    Set sc=conn.Disconnect()
    Quit tTotalCnt
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^GC.CernerGetDataD</DataLocation>
<DefaultData>CernerGetDataDefaultData</DefaultData>
<IdLocation>^GC.CernerGetDataD</IdLocation>
<IndexLocation>^GC.CernerGetDataI</IndexLocation>
<StreamLocation>^GC.CernerGetDataS</StreamLocation>
<Data name="CernerGetDataDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="GC.CernerGetData2019">
<IncludeCode>%occInclude,Ensemble</IncludeCode>
<Super>%Persistent</Super>
<TimeChanged>65192,38159.059381</TimeChanged>
<TimeCreated>64083,56807.707503</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// http://172.25.68.31:57772/csp/docbook/DocBook.UI.Page.cls?KEY=BGOD_gateway#BGOD_gateway_program_odbc

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// http://172.25.68.31:57772/csp/documatic/%25CSP.Documatic.cls?APP=1&CLASSNAME=%25Library.ResultSet&LIBRARY=%25SYS

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// encntr_ID ,MED_SERVICE,PERSON_ID

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// , NAME_LAST, NAME_FIRST , NAME_FULL_FORMATTED

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// , FIN , MRN

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// , convert (varchar,REG_DT_TM ,101) as AdmitDate

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// , convert (varchar,BIRTH_DT_TM ,101) as DOB

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Ensemble needs permission in EDW_IS on each table in the stored Proc

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Stored proc are in ODS_POC

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// 06-10-2019 add search of fin by mrn and dos  lgc.sp_HL7_Get_FIN_By_MRN_DOS

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//            Parameter 1: MRN  Parameter 2: DOS

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// 06-10-2019 search for insurance using fin    lgc.sp_HL7_Get_Insurance_By_FIN_And_Rank

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//            Parameter 1: FIN  Parameter 2: Rank

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// 06-10-2019 SQLDBDEV16\DEV16 and SQLDBTEST16\DBTEST16 database EDW_IS both contain Prod data - current to previous day

]]></Content>
</UDLText>

<Method name="CernerGetPatientInfoByFin">
<ClassMethod>1</ClassMethod>
<FormalSpec>Fin:%String(MAXLEN=50)</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tableMRNbyFin = ""
	Set conn=##class(%SQLGatewayConnection).%New()
    //set sc = conn.GetConnection("EDWCerner",360)
    Set sc=conn.Connect("OdsCernerIncr","Ensemble","gtwy2010")
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set res=##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
	Set parmFin = Fin
	//Set parmFin = "20000430"
	set tproc = "HL7.CernerGetPatientInfoByFin "_parmFin 
    Set sc=res.Prepare(tproc,,conn)
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set sc=res.Execute()
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    While res.Next() 
    { // Write !," MRN= ",res.GetData(1),",FIN= ",res.GetData(2) ,",DOB= ",res.GetData(3) ,",HSC= ",res.GetData(4),", Name=",res.GetData(5)  ,", Admit=",res.GetData(5) 
     Set tableMRNbyFin = res.GetData(1)
     //Set tDOB = res.GetData(3)
     //Set tFIN = res.GetData(2)
    } 
    Set sc=conn.Disconnect()
    Quit tableMRNbyFin
]]></Implementation>
</Method>

<Method name="CernerGetPatientInfoByName">
<ClassMethod>1</ClassMethod>
<FormalSpec>LastName:%String(MAXLEN=100),FirstName:%String(MAXLEN=100),MiddleName:%String(MAXLEN=100)</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//DOS should come in as  YYYYMMDD
	Set tComma = ","
	Set tQuote = "'"
	set tableMRNbyName = ""
    Set conn=##class(%SQLGatewayConnection).%New()
    Set sc=conn.Connect("OdsCernerIncr","Ensemble","gtwy2010")
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set res=##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
    Set parmLastName = LastName
    Set parmFirstName = FirstName
    Set parmMiddleName = MiddleName
    if parmMiddleName ="" {Set parmMiddleName = " " }
    set tprocName = "HL7.CernerGetPatientInfoByName "
	SET tproc = tprocName_tQuote_parmLastName_tQuote_tComma_tQuote_parmFirstName_tQuote_tComma_tQuote_parmMiddleName_tQuote
    Set sc=res.Prepare(tproc,,conn)
    // Write !,"tproc="_ tproc
    // $$$TRACE("PROC="_tproc)
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set sc=res.Execute()
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    While res.Next() 
    {  
      // Write !," MRN= ",res.GetData(1),",FIN= ",res.GetData(2) ,",DOB= ",res.GetData(3) ,",HSC= ",res.GetData(4) ,", Admit=",res.GetData(5) 
     Set tableMRNbyName = res.GetData(1)
     //Set tDOB = res.GetData(3)
     //Set tFIN = res.GetData(2)
    }
    // $$$TRACE("MRNData="_tableMRNbyName)
    Set sc=conn.Disconnect() 
    Quit tableMRNbyName
]]></Implementation>
</Method>

<Method name="CernerCheckOPMsgEncounter">
<ClassMethod>1</ClassMethod>
<FormalSpec>MRN:%String(MAXLEN=50)</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//Ensemble must be set as db reader in edw_is
	// Used for Check for existing encounter
	Set tTotalCnt = ""
	Set conn=##class(%SQLGatewayConnection).%New()
	//set sc = conn.GetConnection("EDWCerner",360)
    //Set sc=conn.Connect("Ensemble2TestEdwODS_PocCertSQL64","Ensemble","gtwy2010")
    Set sc=conn.Connect("OdsCernerIncr","Ensemble","gtwy2010")
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set res=##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
	Set parmMRN = MRN
	set tproc = "HL7.CernerCheckOPMsgEncounter "_parmMRN
	Set sc=res.Prepare(tproc,,conn)
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set sc=res.Execute()
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    
    While res.Next() 
    {  
     Set tTotalCnt = res.GetData(1)
    } 
    Set sc=conn.Disconnect()
    Quit tTotalCnt
]]></Implementation>
</Method>

<Method name="CernerGetFinByMRNDos">
<ClassMethod>1</ClassMethod>
<FormalSpec>MRN:%String(MAXLEN=50),DOS:%String(MAXLEN=8)</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//DOS should come in as  YYYYMMDD
	Set tComma = ","
	Set tQuote = "'"
	set tFINbyMRNDos = ""
    Set conn=##class(%SQLGatewayConnection).%New()
    // Set sc=conn.Connect("EnsembleEdwCernerDev_EDW_IS","Ensemble","gtwy2010")
    //  read Prod DB
    Set sc=conn.Connect("EnsembleEdwCernerProd_EDW_IS","Ensemble","gtwy2010")
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set res=##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
    Set parmMRN = MRN
    Set parmDOS = DOS

    set tprocName = "lgc.sp_HL7_Get_FIN_By_MRN_DOS "
	SET tproc = tprocName_tQuote_parmMRN_tQuote_tComma_tQuote_parmDOS_tQuote
	
    Set sc=res.Prepare(tproc,,conn)
    // Write !,"tproc="_ tproc
    // $$$TRACE("PROC="_tproc)
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set sc=res.Execute()
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set tComma = ""
    Set tFINCount=0
    While res.Next() 
    {  
      // Write !," tFINbyMRNDos= ",res.GetData(1),"-",res.GetData(2),"-",res.GetData(3)
      // Write !," tFINbyMRNDos= ",res.GetData(1),"-",res.GetData(2)
     // Set tFINbyMRNDos = res.GetData(1)_"-"_res.GetData(2)_"-"_res.GetData(3)
     //Set tFINbyMRNDos = res.GetData(1)_"-"_res.GetData(2)
     //Set tFINbyMRNDos = tComma_tFINbyMRNDos_res.GetData(1)
     Set tFINbyMRNDos = tFINbyMRNDos_tComma_res.GetData(1)
     Set tFINCount=tFINCount+1
     Set tComma = ","

    }
      // $$$TRACE("getdata-tFINbyMRNDos="_tFINbyMRNDos)
    Set sc=conn.Disconnect() 
    Quit tFINbyMRNDos_"Count="_tFINCount
]]></Implementation>
</Method>

<Method name="CernerGetFinInsurance">
<ClassMethod>1</ClassMethod>
<FormalSpec>Fin:%String(MAXLEN=50),InsuranceRank:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//DOS should come in as  YYYYMMDD
	Set tComma = ","
	Set tQuote = "'"
	set tInsName = ""
    Set conn=##class(%SQLGatewayConnection).%New()
    // Set sc=conn.Connect("EnsembleEdwCernerDev_EDW_IS","Ensemble","gtwy2010")
    //   read Prod DB
    Set sc=conn.Connect("EnsembleEdwCernerProd_EDW_IS","Ensemble","gtwy2010")
    
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set res=##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
    Set parmFIN = Fin
    Set parmRank = InsuranceRank

    // $$$TRACE("getdata-b4-fin-rank="_parmFIN_" "_parmRank)

    set tprocName = "lgc.sp_HL7_Get_Insurance_By_FIN_And_Rank "
	SET tproc = tprocName_tQuote_parmFIN_tQuote_tComma_parmRank
	
    Set sc=res.Prepare(tproc,,conn)
      // Write !,"tproc="_ tproc
      // $$$TRACE("PROC="_tproc)
      // $$$TRACE("ISERR="_$$$ISERR(sc))
      
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set sc=res.Execute()
       // $$$TRACE("ISERR-resexecute="_$$$ISERR(sc))
       
       
    // if error condition set insurance name = *NO Insurance Found*
    Set tNoInsurance="*NO Insurance Found*"
    If $$$ISERR(sc) quit tNoInsurance
    // If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    
    While res.Next() 
    {  
     // Write !," tInsName= ",res.GetData(1)
     Set tInsName = res.GetData(1)

    }
    // $$$TRACE("getdata-tInsName="_tInsName)
    Set sc=conn.Disconnect() 
    Quit tInsName
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^GC.CernerGetData2019D</DataLocation>
<DefaultData>CernerGetData2019DefaultData</DefaultData>
<IdLocation>^GC.CernerGetData2019D</IdLocation>
<IndexLocation>^GC.CernerGetData2019I</IndexLocation>
<StreamLocation>^GC.CernerGetData2019S</StreamLocation>
<Data name="CernerGetData2019DefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="GC.CernerGetData2019ALJ">
<IncludeCode>%occInclude,Ensemble</IncludeCode>
<Super>%Persistent</Super>
<TimeChanged>66206,50935.412109</TimeChanged>
<TimeCreated>64083,56807.707503</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// http://172.25.68.31:57772/csp/docbook/DocBook.UI.Page.cls?KEY=BGOD_gateway#BGOD_gateway_program_odbc

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// http://172.25.68.31:57772/csp/documatic/%25CSP.Documatic.cls?APP=1&CLASSNAME=%25Library.ResultSet&LIBRARY=%25SYS

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// encntr_ID ,MED_SERVICE,PERSON_ID

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// , NAME_LAST, NAME_FIRST , NAME_FULL_FORMATTED

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// , FIN , MRN

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// , convert (varchar,REG_DT_TM ,101) as AdmitDate

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// , convert (varchar,BIRTH_DT_TM ,101) as DOB

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Ensemble needs permission in EDW_IS on each table in the stored Proc

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Stored proc are in ODS_POC

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// 06-10-2019 add search of fin by mrn and dos  lgc.sp_HL7_Get_FIN_By_MRN_DOS

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//            Parameter 1: MRN  Parameter 2: DOS

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// 06-10-2019 search for insurance using fin    lgc.sp_HL7_Get_Insurance_By_FIN_And_Rank

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//            Parameter 1: FIN  Parameter 2: Rank

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// 06-10-2019 SQLDBDEV16\DEV16 and SQLDBTEST16\DBTEST16 database EDW_IS both contain Prod data - current to previous day

]]></Content>
</UDLText>

<Method name="CernerGetPatientInfoByFin">
<ClassMethod>1</ClassMethod>
<FormalSpec>Fin:%String(MAXLEN=50)</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tableMRNbyFin = ""
	Set conn=##class(%SQLGatewayConnection).%New()
    //set sc = conn.GetConnection("EDWCerner",360)
    Set sc=conn.Connect("OdsCernerIncr","Ensemble","gtwy2010")
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set res=##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
	Set parmFin = Fin
	//Set parmFin = "20000430"
	set tproc = "HL7.CernerGetPatientInfoByFin "_parmFin 
    Set sc=res.Prepare(tproc,,conn)
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set sc=res.Execute()
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    While res.Next() 
    { Write !," MRN= ",res.GetData(1),",FIN= ",res.GetData(2) ,",DOB= ",res.GetData(3) ,",HSC= ",res.GetData(4),", Name=",res.GetData(5)  ,", Admit=",res.GetData(5) 
     Set tableMRNbyFin = res.GetData(1)
     //Set tDOB = res.GetData(3)
     //Set tFIN = res.GetData(2)
    } 
    Set sc=conn.Disconnect()
    // $$$TRACE("MRNData="_tableMRNbyFin)
    Quit tableMRNbyFin
]]></Implementation>
</Method>

<Method name="CernerGetPatientInfoByName">
<ClassMethod>1</ClassMethod>
<FormalSpec>LastName:%String(MAXLEN=100),FirstName:%String(MAXLEN=100),MiddleName:%String(MAXLEN=100)</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//DOS should come in as  YYYYMMDD
	Set tComma = ","
	Set tQuote = "'"
	set tableMRNbyName = ""
    Set conn=##class(%SQLGatewayConnection).%New()
    Set sc=conn.Connect("OdsCernerIncr","Ensemble","gtwy2010")
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set res=##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
    Set parmLastName = LastName
    Set parmFirstName = FirstName
    Set parmMiddleName = MiddleName
    if parmMiddleName ="" {Set parmMiddleName = " " }
    set tprocName = "HL7.CernerGetPatientInfoByName "
	SET tproc = tprocName_tQuote_parmLastName_tQuote_tComma_tQuote_parmFirstName_tQuote_tComma_tQuote_parmMiddleName_tQuote
    Set sc=res.Prepare(tproc,,conn)
    // Write !,"tproc="_ tproc
    // $$$TRACE("PROC="_tproc)
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set sc=res.Execute()
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    While res.Next() 
    {  
      // Write !," MRN= ",res.GetData(1),",FIN= ",res.GetData(2) ,",DOB= ",res.GetData(3) ,",HSC= ",res.GetData(4) ,", Admit=",res.GetData(5) 
     Set tableMRNbyName = res.GetData(1)
     //Set tDOB = res.GetData(3)
     //Set tFIN = res.GetData(2)
    }
    // $$$TRACE("MRNData="_tableMRNbyName)
    Set sc=conn.Disconnect() 
    Quit tableMRNbyName
]]></Implementation>
</Method>

<Method name="CernerCheckOPMsgEncounter">
<ClassMethod>1</ClassMethod>
<FormalSpec>MRN:%String(MAXLEN=50)</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//Ensemble must be set as db reader in edw_is
	// Used for Check for existing encounter
	Set tTotalCnt = ""
	Set conn=##class(%SQLGatewayConnection).%New()
	//set sc = conn.GetConnection("EDWCerner",360)
    //Set sc=conn.Connect("Ensemble2TestEdwODS_PocCertSQL64","Ensemble","gtwy2010")
    Set sc=conn.Connect("OdsCernerIncr","Ensemble","gtwy2010")
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set res=##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
	Set parmMRN = MRN
	set tproc = "HL7.CernerCheckOPMsgEncounter "_parmMRN
	Set sc=res.Prepare(tproc,,conn)
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set sc=res.Execute()
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    
    While res.Next() 
    {  
     Set tTotalCnt = res.GetData(1)
    } 
    Set sc=conn.Disconnect()
    Quit tTotalCnt
]]></Implementation>
</Method>

<Method name="CernerGetFinByMRNDos">
<ClassMethod>1</ClassMethod>
<FormalSpec>MRN:%String(MAXLEN=50),DOS:%String(MAXLEN=8)</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//DOS should come in as  YYYYMMDD
	Set tComma = ","
	Set tQuote = "'"
	set tFINbyMRNDos = ""
    Set conn=##class(%SQLGatewayConnection).%New()
    // Set sc=conn.Connect("EnsembleEdwCernerDev_EDW_IS","Ensemble","gtwy2010")
    //  read Prod DB
    Set sc=conn.Connect("EnsembleEdwCernerProd_EDW_IS","Ensemble","gtwy2010")
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set res=##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
    Set parmMRN = MRN
    Set parmDOS = DOS

    set tprocName = "lgc.sp_HL7_Get_FIN_By_MRN_DOS "
	SET tproc = tprocName_tQuote_parmMRN_tQuote_tComma_tQuote_parmDOS_tQuote
	
    Set sc=res.Prepare(tproc,,conn)
    // Write !,"tproc="_ tproc
    // $$$TRACE("PROC="_tproc)
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set sc=res.Execute()
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set tComma = ""
    Set tFINCount=0
    While res.Next() 
    {  
      // Write !," tFINbyMRNDos= ",res.GetData(1),"-",res.GetData(2),"-",res.GetData(3)
      // Write !," tFINbyMRNDos= ",res.GetData(1),"-",res.GetData(2)
     // Set tFINbyMRNDos = res.GetData(1)_"-"_res.GetData(2)_"-"_res.GetData(3)
     //Set tFINbyMRNDos = res.GetData(1)_"-"_res.GetData(2)
     //Set tFINbyMRNDos = tComma_tFINbyMRNDos_res.GetData(1)
     Set tFINbyMRNDos = tFINbyMRNDos_tComma_res.GetData(1)
     Set tFINCount=tFINCount+1
     Set tComma = ","

    }
      // $$$TRACE("getdata-tFINbyMRNDos="_tFINbyMRNDos)
    Set sc=conn.Disconnect() 
    Quit tFINbyMRNDos_"Count="_tFINCount
]]></Implementation>
</Method>

<Method name="CernerGetFinInsurance">
<ClassMethod>1</ClassMethod>
<FormalSpec>Fin:%String(MAXLEN=50),InsuranceRank:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//DOS should come in as  YYYYMMDD
	Set tComma = ","
	Set tQuote = "'"
	set tInsName = ""
    Set conn=##class(%SQLGatewayConnection).%New()
    // Set sc=conn.Connect("EnsembleEdwCernerDev_EDW_IS","Ensemble","gtwy2010")
    //   read Prod DB
    Set sc=conn.Connect("EnsembleEdwCernerProd_EDW_IS","Ensemble","gtwy2010")
    
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set res=##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
    Set parmFIN = Fin
    Set parmRank = InsuranceRank

    // $$$TRACE("getdata-b4-fin-rank="_parmFIN_" "_parmRank)

    set tprocName = "lgc.sp_HL7_Get_Insurance_By_FIN_And_Rank "
	SET tproc = tprocName_tQuote_parmFIN_tQuote_tComma_parmRank
	
    Set sc=res.Prepare(tproc,,conn)
      // Write !,"tproc="_ tproc
      // $$$TRACE("PROC="_tproc)
      // $$$TRACE("ISERR="_$$$ISERR(sc))
      
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set sc=res.Execute()
       // $$$TRACE("ISERR-resexecute="_$$$ISERR(sc))
       
       
    // if error condition set insurance name = *NO Insurance Found*
    Set tNoInsurance="*NO Insurance Found*"
    If $$$ISERR(sc) quit tNoInsurance
    // If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    
    While res.Next() 
    {  
     // Write !," tInsName= ",res.GetData(1)
     Set tInsName = res.GetData(1)

    }
    // $$$TRACE("getdata-tInsName="_tInsName)
    Set sc=conn.Disconnect() 
    Quit tInsName
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^GC.CernerGetData2019ALJD</DataLocation>
<DefaultData>CernerGetData2019ALJDefaultData</DefaultData>
<IdLocation>^GC.CernerGetData2019ALJD</IdLocation>
<IndexLocation>^GC.CernerGetData2019ALJI</IndexLocation>
<StreamLocation>^GC.CernerGetData2019ALJS</StreamLocation>
<Data name="CernerGetData2019ALJDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="GC.CernerGetData2022">
<IncludeCode>%occInclude,Ensemble</IncludeCode>
<Super>%Persistent</Super>
<TimeChanged>66263,31618.512218</TimeChanged>
<TimeCreated>64083,56807.707503</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// http://172.25.68.31:57772/csp/docbook/DocBook.UI.Page.cls?KEY=BGOD_gateway#BGOD_gateway_program_odbc

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// http://172.25.68.31:57772/csp/documatic/%25CSP.Documatic.cls?APP=1&CLASSNAME=%25Library.ResultSet&LIBRARY=%25SYS

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// encntr_ID ,MED_SERVICE,PERSON_ID

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// , NAME_LAST, NAME_FIRST , NAME_FULL_FORMATTED

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// , FIN , MRN

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// , convert (varchar,REG_DT_TM ,101) as AdmitDate

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// , convert (varchar,BIRTH_DT_TM ,101) as DOB

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Ensemble needs permission in EDW_IS on each table in the stored Proc

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Stored proc are in ODS_POC

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// 06-10-2019 add search of fin by mrn and dos  lgc.sp_HL7_Get_FIN_By_MRN_DOS

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//            Parameter 1: MRN  Parameter 2: DOS

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// 06-10-2019 search for insurance using fin    lgc.sp_HL7_Get_Insurance_By_FIN_And_Rank

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//            Parameter 1: FIN  Parameter 2: Rank

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// 06-10-2019 SQLDBDEV16\DEV16 and SQLDBTEST16\DBTEST16 database EDW_IS both contain Prod data - current to previous day

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// 06-03-2022 Changing connections to AZURE 

]]></Content>
</UDLText>

<Method name="CernerGetPatientInfoByFin">
<ClassMethod>1</ClassMethod>
<FormalSpec>Fin:%String(MAXLEN=50)</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tableMRNbyFin = ""
	Set conn=##class(%SQLGatewayConnection).%New()
    //set sc = conn.GetConnection("EDWCerner",360)
    //Set sc=conn.Connect("OdsCernerIncr","Ensemble","gtwy2010")
    Set sc=conn.Connect("OdsCernerIncr_AZURE","Ensemble","Gtwy2022!")
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set res=##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
	Set parmFin = Fin
	//Set parmFin = "20000430"
	set tproc = "HL7.CernerGetPatientInfoByFin "_parmFin 
    Set sc=res.Prepare(tproc,,conn)
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set sc=res.Execute()
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    While res.Next() 
    { // Write !," MRN= ",res.GetData(1),",FIN= ",res.GetData(2) ,",DOB= ",res.GetData(3) ,",HSC= ",res.GetData(4),", Name=",res.GetData(5)  ,", Admit=",res.GetData(5) 
     Set tableMRNbyFin = res.GetData(1)
     //Set tDOB = res.GetData(3)
     //Set tFIN = res.GetData(2)
    } 
    Set sc=conn.Disconnect()
    Quit tableMRNbyFin
]]></Implementation>
</Method>

<Method name="CernerGetPatientInfoByName">
<ClassMethod>1</ClassMethod>
<FormalSpec>LastName:%String(MAXLEN=100),FirstName:%String(MAXLEN=100),MiddleName:%String(MAXLEN=100)</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//DOS should come in as  YYYYMMDD
	Set tComma = ","
	Set tQuote = "'"
	set tableMRNbyName = ""
    Set conn=##class(%SQLGatewayConnection).%New()
    //Set sc=conn.Connect("OdsCernerIncr","Ensemble","gtwy2010")
    Set sc=conn.Connect("OdsCernerIncr_AZURE","Ensemble","Gtwy2022!")
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set res=##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
    Set parmLastName = LastName
    Set parmFirstName = FirstName
    Set parmMiddleName = MiddleName
    if parmMiddleName ="" {Set parmMiddleName = " " }
    set tprocName = "HL7.CernerGetPatientInfoByName "
	SET tproc = tprocName_tQuote_parmLastName_tQuote_tComma_tQuote_parmFirstName_tQuote_tComma_tQuote_parmMiddleName_tQuote
    Set sc=res.Prepare(tproc,,conn)
    // Write !,"tproc="_ tproc
    // $$$TRACE("PROC="_tproc)
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set sc=res.Execute()
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    While res.Next() 
    {  
      // Write !," MRN= ",res.GetData(1),",FIN= ",res.GetData(2) ,",DOB= ",res.GetData(3) ,",HSC= ",res.GetData(4) ,", Admit=",res.GetData(5) 
     Set tableMRNbyName = res.GetData(1)
     //Set tDOB = res.GetData(3)
     //Set tFIN = res.GetData(2)
    }
    // $$$TRACE("MRNData="_tableMRNbyName)
    Set sc=conn.Disconnect() 
    Quit tableMRNbyName
]]></Implementation>
</Method>

<Method name="CernerCheckOPMsgEncounter">
<ClassMethod>1</ClassMethod>
<FormalSpec>MRN:%String(MAXLEN=50)</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//Ensemble must be set as db reader in edw_is
	// Used for Check for existing encounter
	Set tTotalCnt = ""
	Set conn=##class(%SQLGatewayConnection).%New()
	//set sc = conn.GetConnection("EDWCerner",360)
    //Set sc=conn.Connect("Ensemble2TestEdwODS_PocCertSQL64","Ensemble","gtwy2010")
    //Set sc=conn.Connect("OdsCernerIncr","Ensemble","gtwy2010")
    Set sc=conn.Connect("OdsCernerIncr_AZURE","Ensemble","Gtwy2022!")
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set res=##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
	Set parmMRN = MRN
	set tproc = "HL7.CernerCheckOPMsgEncounter "_parmMRN
	Set sc=res.Prepare(tproc,,conn)
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set sc=res.Execute()
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    
    While res.Next() 
    {  
     Set tTotalCnt = res.GetData(1)
    } 
    Set sc=conn.Disconnect()
    Quit tTotalCnt
]]></Implementation>
</Method>

<Method name="CernerGetFinByMRNDos">
<ClassMethod>1</ClassMethod>
<FormalSpec>MRN:%String(MAXLEN=50),DOS:%String(MAXLEN=8)</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//DOS should come in as  YYYYMMDD
	Set tComma = ","
	Set tQuote = "'"
	set tFINbyMRNDos = ""
    Set conn=##class(%SQLGatewayConnection).%New()
    // Set sc=conn.Connect("EnsembleEdwCernerDev_EDW_IS","Ensemble","gtwy2010")
    //  read Prod DB
    //Set sc=conn.Connect("EnsembleEdwCernerProd_EDW_IS","Ensemble","gtwy2010")
    Set sc=conn.Connect("EnsembleEdwCernerProd_AZURE","Ensemble","Gtwy2022!")
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set res=##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
    Set parmMRN = MRN
    Set parmDOS = DOS

    set tprocName = "lgc.sp_HL7_Get_FIN_By_MRN_DOS "
	SET tproc = tprocName_tQuote_parmMRN_tQuote_tComma_tQuote_parmDOS_tQuote
	
    Set sc=res.Prepare(tproc,,conn)
    // Write !,"tproc="_ tproc
    // $$$TRACE("PROC="_tproc)
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set sc=res.Execute()
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set tComma = ""
    Set tFINCount=0
    While res.Next() 
    {  
      // Write !," tFINbyMRNDos= ",res.GetData(1),"-",res.GetData(2),"-",res.GetData(3)
      // Write !," tFINbyMRNDos= ",res.GetData(1),"-",res.GetData(2)
     // Set tFINbyMRNDos = res.GetData(1)_"-"_res.GetData(2)_"-"_res.GetData(3)
     //Set tFINbyMRNDos = res.GetData(1)_"-"_res.GetData(2)
     //Set tFINbyMRNDos = tComma_tFINbyMRNDos_res.GetData(1)
     Set tFINbyMRNDos = tFINbyMRNDos_tComma_res.GetData(1)
     Set tFINCount=tFINCount+1
     Set tComma = ","

    }
      // $$$TRACE("getdata-tFINbyMRNDos="_tFINbyMRNDos)
    Set sc=conn.Disconnect() 
    Quit tFINbyMRNDos_"Count="_tFINCount
]]></Implementation>
</Method>

<Method name="CernerGetFinInsurance">
<ClassMethod>1</ClassMethod>
<FormalSpec>Fin:%String(MAXLEN=50),InsuranceRank:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//DOS should come in as  YYYYMMDD
	Set tComma = ","
	Set tQuote = "'"
	set tInsName = ""
    Set conn=##class(%SQLGatewayConnection).%New()
    // Set sc=conn.Connect("EnsembleEdwCernerDev_EDW_IS","Ensemble","gtwy2010")
    //   read Prod DB
    //Set sc=conn.Connect("EnsembleEdwCernerProd_EDW_IS","Ensemble","gtwy2010")
    Set sc=conn.Connect("EnsembleEdwCernerProd_AZURE","Ensemble","Gtwy2022!")
    
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set res=##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
    Set parmFIN = Fin
    Set parmRank = InsuranceRank

    // $$$TRACE("getdata-b4-fin-rank="_parmFIN_" "_parmRank)

    set tprocName = "lgc.sp_HL7_Get_Insurance_By_FIN_And_Rank "
	SET tproc = tprocName_tQuote_parmFIN_tQuote_tComma_parmRank
	
    Set sc=res.Prepare(tproc,,conn)
      // Write !,"tproc="_ tproc
      // $$$TRACE("PROC="_tproc)
      // $$$TRACE("ISERR="_$$$ISERR(sc))
      
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set sc=res.Execute()
       // $$$TRACE("ISERR-resexecute="_$$$ISERR(sc))
       
       
    // if error condition set insurance name = *NO Insurance Found*
    Set tNoInsurance="*NO Insurance Found*"
    If $$$ISERR(sc) quit tNoInsurance
    // If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    
    While res.Next() 
    {  
     // Write !," tInsName= ",res.GetData(1)
     Set tInsName = res.GetData(1)

    }
    // $$$TRACE("getdata-tInsName="_tInsName)
    Set sc=conn.Disconnect() 
    Quit tInsName
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^GC.CernerGetData2022D</DataLocation>
<DefaultData>CernerGetData2022DefaultData</DefaultData>
<IdLocation>^GC.CernerGetData2022D</IdLocation>
<IndexLocation>^GC.CernerGetData2022I</IndexLocation>
<StreamLocation>^GC.CernerGetData2022S</StreamLocation>
<Data name="CernerGetData2022DefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="GC.CernerGetDataTESTODBC">
<IncludeCode>%occInclude,Ensemble</IncludeCode>
<Super>%Persistent</Super>
<TimeChanged>64748,32093.384748</TimeChanged>
<TimeCreated>64083,56807.707503</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// http://172.25.68.31:57772/csp/docbook/DocBook.UI.Page.cls?KEY=BGOD_gateway#BGOD_gateway_program_odbc

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// http://172.25.68.31:57772/csp/documatic/%25CSP.Documatic.cls?APP=1&CLASSNAME=%25Library.ResultSet&LIBRARY=%25SYS

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// encntr_ID ,MED_SERVICE,PERSON_ID

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// , NAME_LAST, NAME_FIRST , NAME_FULL_FORMATTED

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// , FIN , MRN

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// , convert (varchar,REG_DT_TM ,101) as AdmitDate

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// , convert (varchar,BIRTH_DT_TM ,101) as DOB

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Ensemble needs permission in EDW_IS on each table in the stored Proc

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Stored proc are in ODS_POC

]]></Content>
</UDLText>

<Method name="QESGetPatientInfoByFin">
<ClassMethod>1</ClassMethod>
<FormalSpec>Fin:%String(MAXLEN=50)</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//Ensemble must be set as db reader in edw_is
	//  Used in MPILoad
	set tMRN = ""
	set tClinic = ""
	Set conn=##class(%SQLGatewayConnection).%New()
	//set sc = conn.GetConnection("EDWCerner",360)
    Set sc=conn.Connect("Ensemble2TestEdwODS_PocCertSQL64","Ensemble","gtwy2010")
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set res=##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
	Set parmFin = Fin
	set tproc = "HL7.QESGetPatientInfoByFin "_parmFin 
	Set sc=res.Prepare(tproc,,conn)
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set sc=res.Execute()
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    
    While res.Next() 
    { // Write !," Facility = ",res.GetData(1),",DOS= ",res.GetData(2) ,",Account= ",res.GetData(3) 
     Set tClinic = res.GetData(1)
    } 
    Set sc=conn.Disconnect()
    Quit tClinic
]]></Implementation>
</Method>

<Method name="QESGetPatientContactMethodByMRN">
<ClassMethod>1</ClassMethod>
<FormalSpec>MRN:%String(MAXLEN=50)</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//Ensemble must be set as db reader in edw_is
	//  Used for MPILoad
	Set tContactMethod = ""
	Set conn=##class(%SQLGatewayConnection).%New()
	//set sc = conn.GetConnection("EDWCerner",360)
    Set sc=conn.Connect("Ensemble2TestEdwODS_PocCertSQL64","Ensemble","gtwy2010")
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set res=##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
	Set parmMRN = MRN
	set tproc = "HL7.QESGetPatientContactMethodByMRN "_parmMRN
	Set sc=res.Prepare(tproc,,conn)
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set sc=res.Execute()
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    
    While res.Next() 
    {  
     Set tContactMethod = res.GetData(1)
    } 
    Set sc=conn.Disconnect()
    Quit tContactMethod
]]></Implementation>
</Method>

<Method name="CernerGetPatientInfoByFin">
<ClassMethod>1</ClassMethod>
<FormalSpec>Fin:%String(MAXLEN=50)</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tMRN = ""
	Set conn=##class(%SQLGatewayConnection).%New()
    //set sc = conn.GetConnection("EDWCerner",360)
    // Set sc=conn.Connect("OdsCernerIncrTEST","Ensemble","gtwy2010")
    // Set sc=conn.Connect("OdsCernerIncrTEST","Ensemble","Ensemble","gtwy2010")
    Set sc=conn.Connect("OdsCernerIncrTEST","Ensemble","gtwy2010")
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set res=##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
	Set parmFin = Fin
	//Set parmFin = "20000430"
	set tproc = "HL7.CernerGetPatientInfoByFin "_parmFin 
    Set sc=res.Prepare(tproc,,conn)
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set sc=res.Execute()
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    While res.Next() 
    { // Write !," MRN= ",res.GetData(1),",FIN= ",res.GetData(2) ,",DOB= ",res.GetData(3) ,",HSC= ",res.GetData(4),", Name=",res.GetData(5)  ,", Admit=",res.GetData(5) 
     Set tMRN = res.GetData(1)
     //Set tDOB = res.GetData(3)
     //Set tFIN = res.GetData(2)
    } 
    Set sc=conn.Disconnect()
    Quit tMRN
]]></Implementation>
</Method>

<Method name="CernerGetPatientInfoByName">
<ClassMethod>1</ClassMethod>
<FormalSpec>LastName:%String(MAXLEN=100),FirstName:%String(MAXLEN=100),MiddleName:%String(MAXLEN=100)</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//DOS should come in as  YYYYMMDD
	Set tComma = ","
	Set tQuote = "'"
	set tMRN = ""
    Set conn=##class(%SQLGatewayConnection).%New()
    // set sc = conn.GetConnection("EDWCerner",180)
    Set sc=conn.Connect("OdsCernerIncrTEST","Ensemble","gtwy2010")
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set res=##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
    Set parmLastName = LastName
    Set parmFirstName = FirstName
    Set parmMiddleName = MiddleName
    if parmMiddleName ="" {Set parmMiddleName = " " }
    set tprocName = "HL7.CernerGetPatientInfoByName "
	SET tproc = tprocName_tQuote_parmLastName_tQuote_tComma_tQuote_parmFirstName_tQuote_tComma_tQuote_parmMiddleName_tQuote
    Set sc=res.Prepare(tproc,,conn)
    //Write !,"tproc="_ tproc
    //$$$TRACE("PROC="_tproc)
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set sc=res.Execute()
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    While res.Next() 
    {  
      // Write !," MRN= ",res.GetData(1),",FIN= ",res.GetData(2) ,",DOB= ",res.GetData(3) ,",HSC= ",res.GetData(4) ,", Admit=",res.GetData(5) 
      //$$$TRACE("WhileLoop")
     Set tMRN = res.GetData(1)
     //Set tDOB = res.GetData(3)
     //Set tFIN = res.GetData(2)
    }
    //$$$TRACE("MRNData="_tMRN)
    Set sc=conn.Disconnect() 
    Quit tMRN
]]></Implementation>
</Method>

<Method name="CernerCheckOPMsgEncounter">
<ClassMethod>1</ClassMethod>
<FormalSpec>MRN:%String(MAXLEN=50)</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//Ensemble must be set as db reader in edw_is
	// Used for Check for existing encounter
	Set tTotalCnt = ""
	Set conn=##class(%SQLGatewayConnection).%New()
    Set sc=conn.Connect("OdsCernerIncrTEST","Ensemble","gtwy2010")
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set res=##class(%ResultSet).%New("%DynamicQueryGW:SQLGW")
	Set parmMRN = MRN
	set tproc = "HL7.CernerCheckOPMsgEncounter "_parmMRN
	Set sc=res.Prepare(tproc,,conn)
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    Set sc=res.Execute()
    If $$$ISERR(sc) do $System.Status.DisplayError(sc) quit
    
    While res.Next() 
    {  
     Set tTotalCnt = res.GetData(1)
    } 
    Set sc=conn.Disconnect()
    Quit tTotalCnt
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^GC.CernerGetDataTESTODBCD</DataLocation>
<DefaultData>CernerGetDataTESTODBCDefaultData</DefaultData>
<IdLocation>^GC.CernerGetDataTESTODBCD</IdLocation>
<IndexLocation>^GC.CernerGetDataTESTODBCI</IndexLocation>
<StreamLocation>^GC.CernerGetDataTESTODBCS</StreamLocation>
<Data name="CernerGetDataTESTODBCDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="GC.ClevelandClinic2CernerBase64">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65506,52884.109477</TimeChanged>
<TimeCreated>61607,43175.348783</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.ClevelandClinic:ORU_R01' targetDocType='231.Cerner:ORU_R01' create='new' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Updated 04/28/2020
	//  Last Updated in Prod: 05/07/2020 Al Johnson
	//  Create: 04/28/2020  Al Johnson 
	//  Description:  
	//	ORU from Cleveland Clinic base64 report
	//  Cleveland Clinic is monitoring inpatient sleep studies
    //
    //  no Gillette order OBR-2 placer order
    //
    //  started with logic from vyaire-carefusion pft
    //   Result on order without the PFT appended will go to the message center  07/09/2018
    //  Copy OBR:7 if populated, else MSH:7 to OBR:22 resultstatuschangedate.  07/09/2018
    //  Copy OBR:7 if populated, else MSH:7 to OBR:27.4 quatitytimingstartdate.  07/09/2018
]]]]><![CDATA[></code>

<code>
<![CDATA[ 
    //  format MSH, remove GC from mrn
]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='"CLEVELANDCLINIC"' property='target.{MSH:3}' action='set' />
<assign value='"MMF"' property='target.{MSH:5}' action='set' />

<assign value='source.{PID}' property='target.{PID}' action='set' />
<assign value='""' property='target.{PID:3}' action='set' />
<assign value='source.{PID:3(1).1}' property='target.{PID:3}' action='set' />
<assign value='$REPLACE(target.{PID:3},"GC","")' property='target.{PID:3}' action='set' />

<code>
<![CDATA[ 
    //  format file name for obx
]]]]><![CDATA[></code>
<assign value='source.{ORCgrp(1).OBR}' property='target.{ORCgrp(1).OBR}' action='set' />
<assign value='source.{ORCgrp(1).OBR:3.1}' property='tmpfillerorder' action='set' />
<assign value='source.{ORCgrp(1).OBR:4.1}' property='tmpobr4' action='set' />
<assign value='"MDOC"' property='target.{ORCgrp(1).OBR:24}' action='set' />
<assign value='tmpfillerorder_".pdf"' property='tmpfilename' action='set' />

<code>
<![CDATA[ 
    //  Get Cleveland Clinic Gillette doctor number off table
    //   read table using doctor last name
    //   Remove OBR-16 ordering doc
]]]]><![CDATA[></code>

<assign value='""' property='target.{ORCgrp(1).OBR:16}' action='set' />
    
<assign value='source.{ORCgrp(1).OBR:32.2}' property='wTableKey' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_ClevelandClinic_Docs",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<code>
<![CDATA[ 
    // no entry found - so send to Cerner as received
]]]]><![CDATA[></code>
</true>
<false>
<code>
<![CDATA[ 
    // table entry found - change doc id in message
]]]]><![CDATA[></code>
    <assign value='wtableresult' property='target.{ORCgrp(1).OBR:32}' action='set' />
    </false>
    </if>

<code>
<![CDATA[ 
    //  Populate OBR:22 and OBR:27.4
    //  There is no Gillette OrderID
    //  Create ORC if not sent
]]]]><![CDATA[></code>
<if condition='source.{ORCgrp(1).ORC}=""' >
<true>
<assign value='source.{ORCgrp(1).OBR:3.1}' property='target.{ORCgrp(1).ORC:3}' action='set' />
</true>
<false>
<assign value='source.{ORCgrp(1).ORC:3.1}' property='target.{ORCgrp(1).ORC:3}' action='set' />
</false>
</if>
<assign value='"RE"' property='target.{ORCgrp(1).ORC:1}' action='set' />

<assign value='"1"' property='target.{ORCgrp(1).OBR:1}' action='set' />
<assign value='source.{ORCgrp(1).OBR:3.1}' property='target.{ORCgrp(1).OBR:3}' action='set' />
<assign value='""' property='tholdresultdate' action='set' />
<if condition='(source.{ORCgrp(1).OBR:7.1}="")' >
<true>
<assign value='source.{MSH:7.1}' property='tholdresultdate' action='set' />
</true>
<false>
<assign value='source.{ORCgrp(1).OBR:7.1}' property='tholdresultdate' action='set' />
</false>
</if>
<if condition='(source.{ORCgrp(1).OBR:22.1}="")' >
<true>
<assign value='tholdresultdate' property='target.{ORCgrp(1).OBR:22}' action='set' />
</true>
</if>
<if condition='(source.{ORCgrp(1).OBR:27.4}="")' >
<true>
<assign value='tholdresultdate' property='target.{ORCgrp(1).OBR:27.4}' action='set' />
</true>
</if>

<code>
<![CDATA[ 
    // Cleveland Clinic sends a number of OBX segments - only send the base64 report
    //  The type is ED encapsulated data
    // NTE segment following OBR if NTE-3 = PMC, change OBR-4.1 = PMC1
    //  PMC = Patient Management Conference
    //  All other values pass thru
    //  EEGPMU1 = Non Invasive PMU Evaluation
    //  EEGPMU2 = Invasive PMU Evaluation
    //  VEEG1 = Non Invasive Video - EEG Monitoring Report
    //  VEEG2 = Invasive Video - EEG Monitoring Report
]]]]><![CDATA[></code>

<foreach property='source.{ORCgrp(1).NTE()}' key='k2' >
<if condition='source.{ORCgrp(1).NTE(k2):3(1)}="PMC"' >
<true>
<assign value='"PMC1"' property='tmpobr4' action='set' />
<assign value='"PMC1"' property='target.{ORCgrp(1).OBR:4.1}' action='set' />
<assign value='tmpfillerorder_"-PMC1.pdf"' property='tmpfilename' action='set' />
</true>
</if>
</foreach>

<code>
<![CDATA[ 
    // Cleveland Clinic sends a number of OBX segments - only send the base64 report
    //  The type is ED encapsulated data
]]]]><![CDATA[></code>

<assign value='"0"' property='tmpobxseq' action='set' />
<foreach property='source.{ORCgrp(1).OBXgrp()}' key='k1' >
<if condition='source.{ORCgrp(1).OBXgrp(k1).OBX:2}="ED"' >
<true>
<assign value='tmpobxseq + 1' property='tmpobxseq' action='set' />
<assign value='source.{ORCgrp(1).OBXgrp(k1).OBX}' property='target.{ORCgrp(1).OBXgrp(tmpobxseq).OBX}' action='set' />
<assign value='tmpobxseq' property='target.{ORCgrp(1).OBXgrp(tmpobxseq).OBX:1}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBXgrp(tmpobxseq).OBX:3}' action='set' />
<assign value='tmpobr4' property='target.{ORCgrp(1).OBXgrp(tmpobxseq).OBX:3.1}' action='set' />
<assign value='tmpobr4' property='target.{ORCgrp(1).OBXgrp(tmpobxseq).OBX:3.2}' action='set' />
<assign value='tmpfilename' property='target.{ORCgrp(1).OBXgrp(tmpobxseq).OBX:3.5}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBXgrp(tmpobxseq).OBX:5.1}' action='set' />
<assign value='"APPLICATION"' property='target.{ORCgrp(1).OBXgrp(tmpobxseq).OBX:5.2}' action='set' />
<assign value='"PDF"' property='target.{ORCgrp(1).OBXgrp(tmpobxseq).OBX:5.3}' action='set' />
<assign value='"BASE64"' property='target.{ORCgrp(1).OBXgrp(tmpobxseq).OBX:5.4}' action='set' />
<assign value='"1"' property='target.{ORCgrp(1).OBXgrp(tmpobxseq).OBX:4}' action='set' />
</true>
</if>
</foreach>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.ClevelandClinicBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>66262,39805.925944</TimeChanged>
<TimeCreated>63901,50866.591032</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="report only" disabled="false">
<constraint name="docCategory" value="231.ClevelandClinic"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="1">
<send transform="GC.ClevelandClinic2CernerBase64" target="HL7.O.CrClevelandClinicOru"></send>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.ClevelandClinicBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>66262,39785.925998</TimeChanged>
<TimeCreated>63901,50866.591032</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Archive" disabled="false">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="Block Test Patients" disabled="true">
<constraint name="docCategory" value="231.ClevelandClinic"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,Substring(HL7.{PID:PatientIdentifierList(1).ID},3,8))">
<send transform="" target="File.O.ArchiveStopped"></send>
<return></return>
</when>
</rule>
<rule name="Cert MRN Range" disabled="false">
<constraint name="docCategory" value="231.ClevelandClinic"></constraint>
<when condition="1">
<send transform="" target="ClevelandClinic.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.CureSMAHttpBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65077,33547.885036</TimeChanged>
<TimeCreated>63938,41431.298872</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="CureSMA ccd docs" effectiveBegin="" effectiveEnd="">
<rule name="" disabled="false">
<constraint name="source" value="HTTP.S.CrCureSMAccd"></constraint>
<when condition="1">
<send transform="" target="File.O.ArchiveFileTransfers"></send>
<send transform="" target="HTTP.O.CureSMAccd"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.EdocsNuanceBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>66148,41063.846822</TimeChanged>
<TimeCreated>63901,50070.329867</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Block Mass Mailing" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="(Document.{ORCgrp(1).OBR:4(1).1}=&quot;21&quot;)&amp;&amp;((Document.{ORCgrp(1).OBR:4(1).5}=&quot;Health Maintenance Reminder&quot;)||(Document.{ORCgrp(1).OBR:4(1).5}=&quot;Provider Letter-Referral Receipt New&quot;)||(Document.{ORCgrp(1).OBR:4(1).5}=&quot;Provider Letter-Referral Appointment Confirmation&quot;)||(Document.{ORCgrp(1).OBR:4(1).5}=&quot;Provider Letter-Unsuccessful Referral&quot;)||(Document.{ORCgrp(1).OBR:4(1).5}=&quot;Provider Letter-Missed Appointment&quot;)||(Document.{ORCgrp(1).OBR:4(1).5}=&quot;Provider Letter-Referral Receipt Establish&quot;))">
<return></return>
</when>
</rule>
<rule name="stopped 5/19/2020 - msgs ok" disabled="true">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="Exists(&quot;T_eDOCS_ClinicalDocs&quot;,Document.{ORCgrp(1).OBR:4(1).1})&amp;&amp;(Document.{ORCgrp(1).OBXgrp(1).OBX:5(1).3}=&quot;RTF&quot;)&amp;&amp;(Document.{ORCgrp(1).OBXgrp(2).OBX:1}=&quot;2&quot;)">
<send transform="GC.Nuance2eDOCSemail" target="Email.O.AlertEmaileDocs"></send>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="Exists(&quot;T_eDOCS_ClinicalDocs&quot;,Document.{ORCgrp(1).OBR:4(1).1})&amp;&amp;(Document.{ORCgrp(1).OBXgrp(1).OBX:5(1).3}=&quot;RTF&quot;)">
<send transform="GC.Nuance2eDOCSTagRevC" target="File.O.eDOCSNuance"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.EdocsNuanceBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65440,49541.997747</TimeChanged>
<TimeCreated>63901,50070.329867</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="Block Test Patients - ORU" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="eDocsNuance.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.EdocsNuanceBsoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64581,34097.859286</TimeChanged>
<TimeCreated>63901,50070.329867</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="TestPatients" disabled="false">
<constraint name="source" value="HL7.S.CrEdocsNuanceOru"></constraint>
<when condition="(HL7.{PID:PatientIdentifierList(1).ID} In &quot;507424,515173,600000,600001&quot;)">
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="source" value="HL7.S.CrEdocsNuanceOru"></constraint>
<when condition="Exists(&quot;T_eDOCS_ClinicalDocs&quot;,Document.{ORCgrp(1).OBR:4(1).1})&amp;&amp;(Document.{ORCgrp(1).OBXgrp(1).OBX:5(1).3}=&quot;RTF&quot;)">
<send transform="GC.Nuance2eDOCSTagRevC" target="File.O.eDOCSNuance"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="source" value="zResend.S.AljOrueDOCS"></constraint>
<when condition="Exists(&quot;T_eDOCS_ClinicalDocs&quot;,Document.{ORCgrp(1).OBR:4(1).1})&amp;&amp;(Document.{ORCgrp(1).OBXgrp(1).OBX:5(1).3}=&quot;RTF&quot;)">
<send transform="GC.Nuance2eDOCSTagRevC" target="File.O.eDOCSNuance"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.EdwBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64849,43429.473157</TimeChanged>
<TimeCreated>63903,32957.242364</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Remove Test Patients" disabled="false">
<when condition="(HL7.{PID:PatientIdentifierList(1).ID} In &quot;507424,515173,600000,600001,613174&quot;)">
<return></return>
</when>
</rule>
<rule name="ADT for DimPerson" disabled="false">
<constraint name="docName" value="ADT_A01,ADT_A03,ADT_A04,ADT_A05,ADT_A08,ADT_A13,ADT_A28,ADT_A38"></constraint>
<when condition="1">
<send transform="EDW.dtl.Cerner2EdwADT" target="SQL.O.EdwAdt"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.EdwBsoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64341,46933.37749</TimeChanged>
<TimeCreated>63903,32957.242364</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="" disabled="true">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34"></constraint>
<when condition="DoesNotContain(HL7.{MRG})">
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<when condition="(HL7.{PID:PatientIdentifierList(1).ID} In &quot;507424,515173,600000,600001&quot;)">
<return></return>
</when>
</rule>
<rule name="Archive" disabled="false">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="ADT for DimPerson" disabled="false">
<constraint name="docName" value="ADT_A01,ADT_A03,ADT_A04,ADT_A05,ADT_A08,ADT_A13,ADT_A28,ADT_A38"></constraint>
<when condition="1">
<send transform="EDW.dtl.Cerner2EdwADT" target="SQL.O.EdwAdt"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.EdwCernerAdtVisitAL1BsoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64051,58351.686995</TimeChanged>
<TimeCreated>63903,44005.757635</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="CERT.CERT">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A08"></constraint>
<when condition="(HL7.{MSH:ContinuationPointer}&gt;0)&amp;&amp; ((HL7.{MSH:19} Contains &quot;ResFiling for: Allergy Assessment&quot;) || 1 )">
<send transform="EDW.dtl.Cerner2EdwADTVisitAL1Loop" target="Bso.P.EdwCernerAdtVisitAL1"></send>
<send transform="EDW.dtl.Cerner2EdwADTVisitAL1" target="SQL.O.EdwVisitAL1"></send>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.EdwCernerAdtVisitBsoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64043,36395.59563</TimeChanged>
<TimeCreated>63903,43970.933764</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="CERT.CERT">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="">
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A03,ADT_A04,ADT_A05,ADT_A08,ADT_A13,ADT_A28,ADT_A31"></constraint>
<when condition="1">
<send transform="EDW.dtl.Cerner2EdwADTVisit" target="SQL.O.EdwADTVisit"></send>
<send transform="EDW.dtl.Cerner2EdwADTVisitLoopSet" target="Bso.P.EdwCernerAdtVisitAL1,Bso.P.EdwCernerAdtVisitObx"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.EdwCernerAdtVisitObxBsoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64043,36445.842445</TimeChanged>
<TimeCreated>63903,44053.764929</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="CERT.CERT">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="" disabled="true">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A03,ADT_A04,ADT_A05,ADT_A08,ADT_A13,ADT_A28,ADT_A31"></constraint>
<when condition="(Document.{MSH:SequenceNumber}&gt;0 )  ">
<send transform="EDW.dtl.Cerner2EdwADTVisitOBXLoop" target="Bso.P.EdwCernerAdtVisitObx"></send>
<send transform="EDW.dtl.Cerner2EdwADTVisitOBX" target="SQL.O.EdwVisitOBX"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.GreatPlainsBsoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64055,43952.102669</TimeChanged>
<TimeCreated>63880,43857.449499</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="CERT.CERT">
<ruleSet name="CernerMedDftForGreatPlain" effectiveBegin="" effectiveEnd="">
<rule name="">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="(HL7.{PID:PatientIdentifierList(1).ID}&gt;399999)&amp;&amp;(HL7.{PID:PatientIdentifierList(1).ID}&lt;600000)">
<send transform="" target="File.O.ArchiveStopped"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<when condition="1">
<send transform="GC.Cerner2GreatPlainsDFT,GC.Cerner2GreatPlainsSqlDFT" target="SQL.O.GreatPlainsDFT"></send>
<return></return>
</when>
</rule>
<rule name="OLD" disabled="true">
<constraint name="docCategory" value="23.QCPR"></constraint>
<when condition="HL7.{ZFT}!=&quot;&quot;">
<send transform="GCH.Qcpr2GreatPlainsDFT,GCH.Qcpr2GreatPlainsSqlDFT" target="GreatPlains.O.QCPR"></send>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.ImageStreamBoRule">
<Description>
Route ADT to ImageStream from Affinity
updated June 2 - stop all messages as there is not a test enviroment. </Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64769,47747.004572</TimeChanged>
<TimeCreated>62706,62587.26044</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="HL7.O.ImageStreamAdt"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.ImageStreamBsRule">
<Description>
Route ADT to ImageStream from Affinity
updated June 2 - stop all messages as there is not a test enviroment. </Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65440,49587.356902</TimeChanged>
<TimeCreated>62706,62587.26044</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Block Test Patients - ADT" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="A34,35,44 Missing MRG Segment" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34,ADT_A35,ADT_A44"></constraint>
<when condition="DoesNotContain(HL7.{MRG})">
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="ImageStream.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.KobleMNBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65365,33038.419558</TimeChanged>
<TimeCreated>64112,34341.843212</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="NO=does not opt out" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A03,ADT_A04,ADT_A08"></constraint>
<when condition="(Document.{MSH:14}=&quot;NO&quot;)">
<send transform="GC.Cerner2KobleMnADT" target="HL7.O.KobleMNAdt"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.KobleMNBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65440,49615.167223</TimeChanged>
<TimeCreated>64112,34341.843212</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="A34, A35,A44 Missing MRG Segment" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34,ADT_A35,ADT_A44"></constraint>
<when condition="DoesNotContain(HL7.{MRG})">
<return></return>
</when>
</rule>
<rule name="no MRN person add / update" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A28,ADT_A31"></constraint>
<when condition="(HL7.{PID:PatientIdentifierList(1).ID}=&quot;&quot;)">
<return></return>
</when>
</rule>
<rule name="Archive - RETURN" disabled="false">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
<return></return>
</when>
</rule>
<rule name="Block Test Patients - ADT" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="check medicaid table" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="KobleMN.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.MiicBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64727,35673.094712</TimeChanged>
<TimeCreated>63889,49234.755406</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="CERT.CERT">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
<return></return>
</when>
</rule>
<rule name="Block PROD Patients" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="((HL7.{PID:PatientidentifierList(1).ID}&lt;200000)||((HL7.{PID:PatientidentifierList(1).ID}&gt;299999)&amp;&amp;(HL7.{PID:PatientidentifierList(1).ID}&lt;900000)))">
<send transform="" target="File.O.ArchiveStopped"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.MneasBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65520,39171.590247</TimeChanged>
<TimeCreated>64112,34341.843212</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Block PreReg" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="(Document.{PV1:18} StartsWith &quot;Pre&quot;)||((Document.{PV1:2}=&quot;O&quot;)&amp;&amp;(Document.{PV1:18}!=&quot;Observation&quot;))">
<return></return>
</when>
</rule>
<rule name="NO=does not opt out" disabled="true">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A03,ADT_A04,ADT_A08"></constraint>
<when condition="(Document.{MSH:14}=&quot;NO&quot;)">
<send transform="GC.Cerner2MneasADT" target="HL7.O.MneasAdt"></send>
<return></return>
</when>
</rule>
<rule name="Covid19 - send ALL" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A03,ADT_A04,ADT_A08"></constraint>
<when condition="1">
<send transform="GC.Cerner2MneasADT" target="HL7.O.MneasAdt"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.MneasBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>66092,58158.442404</TimeChanged>
<TimeCreated>64112,34341.843212</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Block Test Patients - ADT" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="A34, A35,A44 Missing MRG Segment" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34,ADT_A35,ADT_A44"></constraint>
<when condition="DoesNotContain(HL7.{MRG})">
<return></return>
</when>
</rule>
<rule name="no MRN person add / update" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A28,ADT_A31"></constraint>
<when condition="(HL7.{PID:PatientIdentifierList(1).ID}=&quot;&quot;)">
<return></return>
</when>
</rule>
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="check medicaid table" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="Mneas.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.Muse2CernerORU">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64839,48414.504083</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='24.GE:ORU_R01' targetDocType='24.GE:ORU_R01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Update: 07/10/2018 Al Johnson
	//  Last Moved to Prod:  07/10/2018
    //  Created 05/10/2017 Al Johnson
    //   Muse results for Cerner are being received against old QCPR orders and orderables
    //   Change orderable OBR-4.1 to "EKG" if seven digit QCPR order - OBR-2.1
    //
    //  Copy the Cerner order id from OBR-2 to OBR-3.  07/10/2018
    //  Copy OBR:7 if populated, else MSH:9 to OBR:22 resultstatuschangedate.  07/10/2018
    //  Copy OBR:7 if populated, else MSH:9 to OBR:27.4 quatitytimingstartdate.  07/10/2018
    //  Remove OBR:32 princialresultinterpretor, OBR:33 assistantresultintpretor, OBR:34 technician and OBR:35 transcriptionist
    //    all 3 fields only have a name and not formatted to spec
]]]]><![CDATA[></code>
<code>
<![CDATA[ 
    //  7 digit order number is from QCPR
]]]]><![CDATA[></code>
<if condition='($LENGTH(target.{OBR(1):2(1).1})=7)' >
<true>
<assign value='"EKG"' property='target.{OBR(1):4.1}' action='set' />
</true>
</if>

<code>
<![CDATA[ 
    //  Copy OBR:2 PlacerOrderID to OBR:3 FillerOrderID
    //  Populate OBR:22 and OBR:27.4
    //  Remove OBR:32 princialresultinterpretor, OBR:33 assistantresultintpretor, OBR:34 technician and OBR:35 transcriptionist
    //    all 4 fields only have a name and not formatted to spec
    //  Populate OBR:22 and OBR:27.4
]]]]><![CDATA[></code>
<assign value='source.{OBR(1):2.1}' property='target.{OBR(1):3.1}' action='set' />

<assign value='""' property='target.{OBR(1):32}' action='set' />
<assign value='""' property='target.{OBR(1):33}' action='set' />
<assign value='""' property='target.{OBR(1):34}' action='set' />
<assign value='""' property='target.{OBR(1):35}' action='set' />

<assign value='""' property='tholdresultdate' action='set' />
<if condition='(source.{OBR(1):7.1}="")' >
<true>
<assign value='source.{MSH:7.1}' property='tholdresultdate' action='set' />
</true>
<false>
<assign value='source.{OBR(1):7.1}' property='tholdresultdate' action='set' />
</false>
</if>

<if condition='(source.{OBR(1):22.1}="")' >
<true>
<assign value='tholdresultdate' property='target.{OBR(1):22}' action='set' />
</true>
</if>

<if condition='(source.{OBR(1):27.4}="")' >
<true>
<assign value='tholdresultdate' property='target.{OBR(1):27.4}' action='set' />
</true>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.MuseBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64839,49030.943305</TimeChanged>
<TimeCreated>63881,34623.7595</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Adt and Orm" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="HL7.O.MuseAdtOrm"></send>
<return></return>
</when>
</rule>
<rule name="Oru" disabled="false">
<constraint name="docCategory" value="24.GE"></constraint>
<when condition="1">
<send transform="GC.Muse2CernerORU" target="HL7.O.CrMuseOru"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.MuseBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65440,49706.534601</TimeChanged>
<TimeCreated>63881,34623.7595</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Filter out A34 wo mrg segment" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34,ADT_A35,ADT_A44"></constraint>
<when condition="DoesNotContain(HL7.{MRG})">
<return></return>
</when>
</rule>
<rule name="Block Test Patients - ADT and ORM" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="Block Test Patients - ORU" disabled="false">
<constraint name="docCategory" value="24.GE"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIDInternalID(1).ID})">
<return></return>
</when>
</rule>
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="Adt and Orm" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="Muse.P.bo"></send>
<return></return>
</when>
</rule>
<rule name="ORU" disabled="false">
<constraint name="docCategory" value="24.GE"></constraint>
<when condition="1">
<send transform="" target="Muse.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.MuseBsoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64565,50460.733028</TimeChanged>
<TimeCreated>63881,34623.7595</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Filter out A34 wo mrg segment" disabled="false">
<constraint name="source" value="Bs.P.Muse"></constraint>
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34"></constraint>
<when condition="DoesNotContain(HL7.{MRG})">
<return></return>
</when>
</rule>
<rule name="blocking test patient msgs" disabled="false">
<constraint name="source" value="Bs.P.Muse"></constraint>
<when condition="(HL7.{PID:PatientIdentifierList(1).ID} In &quot;507424,515173,600000,600001&quot;)">
<return></return>
</when>
</rule>
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="Adt and Orm" disabled="false">
<constraint name="source" value="Bs.P.Muse"></constraint>
<when condition="1">
<send transform="" target="HL7.O.MuseAdtOrm"></send>
<return></return>
</when>
</rule>
<rule name="ORU on Old Qcpr Orders" disabled="false">
<constraint name="source" value="HL7.S.MuseOru"></constraint>
<when condition="LENGTH(HL7.{OBR(1):2(1).1})=7">
<send transform="GC.Muse2CernerORU" target="HL7.O.CrMuseOru"></send>
<return></return>
</when>
</rule>
<rule name="ORU on Cerner Orders" disabled="false">
<constraint name="source" value="HL7.S.MuseOru"></constraint>
<when condition="1">
<send transform="" target="HL7.O.CrMuseOru"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.Natus2CernerBase64">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65945,40549.268442</TimeChanged>
<TimeCreated>61607,43175.348783</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORU_R01' targetDocType='231.Cerner:ORU_R01' create='new' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Updated 07/20/2021
	//  Last Updated in Prod: 07/20/2021 Al Johnson
	//  Create: 02/12/2021  Al Johnson 
	//  Description:  
	//	ORU from Natus SleepWorks base64 report
	//  Set specific values necessary to create / update report in Cerner
    //
    //  Copy the Cerner order id from ORC-2 to ORC-3 and OBR-2 to OBR-3.
    //
    //  Looks like a combination of filler and placer order change will create a new line in powerchart
    //  Doesnot appear to be a limit on size of pdf name, but needs to be unique
    //
    //  Powerchart left under SleepStudyOrder OBR-8.1 Oberservation End DateTime
    //  Powerchart right result date SleepStudyOrder OBR-8.1 Oberservation End DateTime
    //  Powerchart right left of pdf name OBR-7.1 Observation DateTime
    //  Powerchart new line on left side - change in filler ordernbr OBR-3.1
    //
    //  Crosswalk OBX-3.1 to Cerner value, update OBR-4.2 with crosswalk
    //  Create pdf using crosswalk value, cerner order and .pdf
    //  If no filler order number, copy Gillette placer order to filler order
    //  Leave OBR-4.1 as ordered - EEG orders have some differences for OBR-4.1
    //  Add second field on table parsed out by |, if no value use OBX-3.1 for OBR-4.1
    //
    //  Two reports will be sent multiple times and need to create new entries
    //  MD Consecutive Day and VEEG Daily Tech Summary will be generated each day of study
    //  OBR-7 start date appears to carry original order start
    //  OBR-8 end date appears to carry report date (2nd, 3rd etc)
    //  Shawn Hepler from Natus is backdating OBR-7 on the reports to reflect actual date of report
    //  Take OBR-7, update OBR-8, append filler order ORC-3 and OBR-3, append pdf name OBX-3.5
    //  Move OBR-7 to OBR-8 on all reports 5/7/2021
    //
    //  Add table T_Natus_Techs_Doctors for field OBR-32 7/7/2021
    //
    //  Add cEEG DAILY Tech Summary to reports sent multiple times - make unique 7/20/2021
]]]]><![CDATA[></code>

<code>
<![CDATA[ 
    //  target is new so copy segments
]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='source.{PID}' property='target.{PID}' action='set' />
<assign value='source.{PV1}' property='target.{PV1}' action='set' />
<assign value='source.{ORCgrp(1).ORC}' property='target.{ORCgrp(1).ORC}' action='set' />
<assign value='source.{ORCgrp(1).OBR}' property='target.{ORCgrp(1).OBR}' action='set' />

<assign value='""' property='holdresult' action='set' />
<foreach property='source.{ORCgrp(1).OBXgrp()}' key='k1' >
<if condition='source.{ORCgrp(1).OBXgrp(k1).OBX:2}="ED"' >
<true>
<assign value='source.{ORCgrp(1).OBXgrp(k1)}' property='target.{ORCgrp(1).OBXgrp(1)}' action='set' />
<assign value='source.{ORCgrp(1).OBXgrp(k1).OBX:3.1}' property='holdresult' action='set' />
</true>
</if>
</foreach>

<code>
<![CDATA[ 
    //  MSH set contributer source NATUS set MSH-5 MMF
    //  Copy placer order (Gillette) to filler order  (-2 to -3)
    //  Set OBR-24 = MDOC
    //  OBR-25 result status
    //  Set OBX-3.1 ReportN, OBX-3.5 pdf attachment, OBX-4 = 1
    //      OBX-5.1 null, 5.2 APPLICATION, 5.3 PDF, 5.4 BASE64
    //  Change OBR-4.1 = to report from OBX-3.1
    //  Crosswalk OBX-3.1 received, update OBR-4.2 with crosswalk value
    //  Use crosswalk on psf name
    //  Leave OBX-3.1 as received
    //
    //  Reports MD Consecutive Day and VEEG Daily Tech Summary
    //  5/7/2021 copy obr-7 to obr-8 on all
    //  Append ORC-3, OBR-3 and OBX-3.5 pdf name only only on the two reports
    //
]]]]><![CDATA[></code>
<assign value='"NATUS"' property='target.{MSH:3}' action='set' />
<assign value='"NATUS"' property='target.{MSH:4}' action='set' />
<assign value='"MMF"' property='target.{MSH:5}' action='set' />

<assign value='""' property='hldobr7' action='set' />
<assign value='source.{ORCgrp(1).OBR:7}' property='target.{ORCgrp(1).OBR:8}' action='set' />
<if condition='(holdresult="MD Consecutive Day")||(holdresult="VEEG Daily Tech Summary")||(holdresult="cEEG DAILY Tech Summary")' >
<true>
<assign value='source.{ORCgrp(1).OBR:7}' property='hldobr7' action='set' />
</true>
</if>

<assign value='source.{ORCgrp(1).ORC:2.1}' property='target.{ORCgrp(1).ORC:2}' action='set' />
<assign value='source.{ORCgrp(1).ORC:2.1}_hldobr7' property='target.{ORCgrp(1).ORC:3}' action='set' />
<assign value='source.{ORCgrp(1).OBR:2.1}' property='target.{ORCgrp(1).OBR:2}' action='set' />
<assign value='source.{ORCgrp(1).OBR:2.1}_hldobr7' property='target.{ORCgrp(1).OBR:3}' action='set' />

<assign value='""' property='holdorder' action='set' />
<assign value='source.{ORCgrp(1).OBR:2.1}' property='holdorder' action='set' />

<assign value='"MDOC"' property='target.{ORCgrp(1).OBR:24}' action='set' />

<assign value='holdresult' property='wTableKey' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_Natus_Documents",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<code>
<![CDATA[ 
    // no entry found - so send to Cerner as received
]]]]><![CDATA[></code>
<assign value='holdresult' property='wtableresult' action='set' />
</true>
<false>
<code>
<![CDATA[ 
    // table entry found - change orderable description in message
]]]]><![CDATA[></code>
    </false>
    </if>
 
<assign value='""' property='wtableresult1' action='set' />
<assign value='""' property='wtableresult2' action='set' />
<assign value='$PIECE(wtableresult,"|",1)' property='wtableresult1' action='set' />
<assign value='$PIECE(wtableresult,"|",2)' property='wtableresult2' action='set' />
<code>
<![CDATA[ 
    // 2nd parse is obr-4.1 if no table entry use obx-3.1 (holdresult)
]]]]><![CDATA[></code>
<if condition='wtableresult2=""' >
<true>
<assign value='holdresult' property='target.{ORCgrp(1).OBR:4.1}' action='set' />
</true>
<false>
<assign value='wtableresult2' property='target.{ORCgrp(1).OBR:4.1}' action='set' />
</false>
</if>

<code>
<![CDATA[ 
    //  Read table using name in OBR-32, update id with Gillette Organization Doctor
    //  Note Cerner schema definition for OBR-32 does not match data (i.e. name)
    //
    //  <assign value='source.{ORCgrp(1).OBR:32.2}' property='templastname' action='set' />
    //  <assign value='source.{ORCgrp(1).OBR:32.3}' property='tempfirstname' action='set' />
    //  <assign value='templastname_"|"_tempfirstname' property='wTableKeyName' action='set' />
]]]]><![CDATA[></code>
<assign value='source.{ORCgrp(1).OBR:32.1}' property='wTableKeyName' action='set' />
<assign value='""' property='wtableresultTname' action='set' />
<assign value='..Lookup("T_Natus_Techs_Doctors",wTableKeyName)' property='wtableresultTname' action='set' />
<if condition='wtableresultTname=""' >
<true>
<code>
<![CDATA[ 
    // no entry found - so send to Cerner as received
]]]]><![CDATA[></code>
<assign value='""' property='target.{ORCgrp(1).OBR:32.1}' action='set' />
</true>
<false>
<code>
<![CDATA[ 
    // table entry found - change obr-32.1 id in message
]]]]><![CDATA[></code>
<assign value='wtableresultTname' property='target.{ORCgrp(1).OBR:32.1}' action='set' />
</false>
</if>

<assign value='wtableresult1_"_"_holdorder_hldobr7_".pdf"' property='target.{ORCgrp(1).OBXgrp(1).OBX:3.5}' action='set' />
<assign value='wtableresult1' property='target.{ORCgrp(1).OBR:4.2}' action='set' />

<assign value='"1"' property='target.{ORCgrp(1).OBXgrp(1).OBX:4}' action='set' />

<assign value='""' property='target.{ORCgrp(1).OBXgrp(1).OBX:5.1}' action='set' />
<assign value='"APPLICATION"' property='target.{ORCgrp(1).OBXgrp(1).OBX:5.2}' action='set' />
<assign value='"PDF"' property='target.{ORCgrp(1).OBXgrp(1).OBX:5.3}' action='set' />
<assign value='"BASE64"' property='target.{ORCgrp(1).OBXgrp(1).OBX:5.4}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBXgrp(1).OBX:11}' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.NatusBoRule">
<Description>
</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>66049,28338.72655</TimeChanged>
<TimeCreated>62706,62587.26044</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="HL7.{ORCgrp(1).ORC:1}=&quot;CM&quot;">
<return></return>
</when>
</rule>
<rule name="block discontinues - allow if discharged or SLEEP" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="(HL7.{ORCgrp(1).ORC:1}=&quot;DC&quot;)&amp;&amp;(HL7.{PV1:45} = &quot;&quot;)&amp;&amp;(HL7.{ORCgrp(1).OBRgrp.OBR:4.1} != &quot;SLEEP&quot;)">
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<send transform="GC.Natus2CernerBase64" target="HL7.O.CrNatusOru"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="1">
<send transform="" target="HL7.O.NatusOrm"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="true">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="(HL7.{ORCgrp(1).OBR:4.1} = &quot;VEEG&quot;)&amp;&amp;(HL7.{PV1:2} = &quot;O&quot;)">
<send transform="GC.Natus2CernerBase64" target="HL7.O.CrNatusOru"></send>
<return></return>
</when>
</rule>
<rule name="Block Specific Reports" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="(HL7.{ORCgrp(1).OBXgrp(1).OBX:3.1} = &quot;MD Consecutive Day&quot;)||(HL7.{ORCgrp(1).OBXgrp(1).OBX:3.1} = &quot;MD Day 1 w Baseline&quot;)||(HL7.{ORCgrp(1).OBXgrp(1).OBX:3.1} = &quot;MD Final Day&quot;)||(HL7.{ORCgrp(1).OBXgrp(1).OBX:3.1} = &quot;MD NL EEG Report&quot;)">
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="(HL7.{ORCgrp(1).OBR:4.1} = &quot;EEG&quot;)||(HL7.{ORCgrp(1).OBR:4.1} = &quot;EEGWS&quot;)||(HL7.{ORCgrp(1).OBR:4.1} = &quot;NUCEEG&quot;)||(HL7.{ORCgrp(1).OBR:4.1} = &quot;SLEEP&quot;)||(HL7.{ORCgrp(1).OBR:4.1} = &quot;VEEG&quot;)">
<send transform="GC.Natus2CernerBase64" target="HL7.O.CrNatusOru"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.NatusBsRule">
<Description>
</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65875,58242.091717</TimeChanged>
<TimeCreated>62706,62587.26044</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Archive All" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="Block No OBX Result" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="DoesNotContain(HL7.{ORCgrp(1).OBXgrp(1).OBX})">
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="Natus.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.NowPowBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65365,33254.152829</TimeChanged>
<TimeCreated>64112,34341.843212</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="send all adt" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A03,ADT_A04,ADT_A08,ADT_A02,ADT_A05,ADT_A06,ADT_A07,ADT_A13,ADT_A28,ADT_A31"></constraint>
<when condition="1">
<send transform="GC.Cerner2NowPowADT" target="HL7.O.NowPowAdt"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34"></constraint>
<when condition="1">
<send transform="GC.Cerner2NowPowMRG" target="HL7.O.NowPowAdt"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.NowPowBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65440,49732.473742</TimeChanged>
<TimeCreated>64112,34341.843212</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="A34, A35,A44 Missing MRG Segment" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34,ADT_A35,ADT_A44"></constraint>
<when condition="DoesNotContain(HL7.{MRG})">
<return></return>
</when>
</rule>
<rule name="no MRN person add / update" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A28,ADT_A31"></constraint>
<when condition="(HL7.{PID:PatientIdentifierList(1).ID}=&quot;&quot;)">
<return></return>
</when>
</rule>
<rule name="Block Test Patients - ADT" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="CERT Patients" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="NowPow.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.Nuance2CernerMDM">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64615,41210.060204</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='22.Dictaphone:MDM_T02' targetDocType='22.Dictaphone:MDM_T02' create='copy' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Updated 11/28/2017 Al Johnson
	//  Last Updated in Prod: 11/29/2017 Al Johnson
	//  Create: 03/16/2017  Al Johnson 
	//  Description:
	//  Check PV1-18 patient type for OPMSG (phone encounter) or PV1-18 starting with PRE (preoutpatient etc)
	//  These encounters should not have transcriptions.
	//  Force these to error inbound to Cerner by appending the PV1-18 to the fin
	//  Remove the PV1 on all the MDM messages  
	//	Uses subtransform Qcpr2RegLabORMSub  also for ORC and OBR
	//
	//  Add PV1-18 value Prior Auth to list   9/18/2017
	//
	//  Jira 8354 Allow OPMSG (phone encounter fin) on document ids 21,22, 24 and 25
	//       telephone conversation note, letters, chartchecks and labchecks 9/28/2017
	//
	//  Jira 8354 Only allow document types 21,22,24 and 25 on OPMSG per Janet Rude 10/06/2017
	//  Jira 8354 If no fin - force error by inserting 'NOFIN' per Janet Rude 10/06/2017
	//  Jira 8354 Include type 12 confidential note with 21,22,24 and 25 per Janet 10/06/2017
	//  Jira 8354  type 12 may come in against other fins but allow against OPMSG
	//  Jira CNR-9229 Documents that have future dates - are incorrectly filing in Cerner Power Chart.  11/28/2017
	//     We are requesting to Block and error - the Nuance Inscribe documents that have a future date on them.
	//    Change fin to 'FUTURE' same as nofin logic 11/28/2017
]]]]><![CDATA[></code>

<code>
<![CDATA[
    //  10/06/2017 force all transcriptions to have a fin or error in Cerner
]]]]><![CDATA[></code>
<assign value='"NOFIN"' property='tmpfinnbr' action='set' />
<if condition='(target.{PID:PatientAccountNumber}="")'>
<true>
<assign value='tmpfinnbr' property='target.{PID:PatientAccountNumber}' action='set' />
</true>
</if>

<code>
<![CDATA[
    //  03/16/2017 error if against PREadmits PREOutpatient etc
]]]]><![CDATA[></code>
<if condition='($EXTRACT(target.{PV1:PatientType},1,3)="PRE")' >
<true>
<assign value='target.{PID:PatientAccountNumber}' property='tmpaccount' action='set' />
<assign value='target.{PV1:PatientType}' property='tmppattype' action='set' />
<assign value='tmpaccount_"-"_tmppattype' property='target.{PID:PatientAccountNumber}' action='set' />
</true>
</if>

<code>
<![CDATA[
    //  09/28/2017 allow 12,21,22,24 and 25 against OPMSG, error all others
]]]]><![CDATA[></code>
<if condition='(target.{PV1:PatientType}="OPMSG")' >
<true>
<if condition='..In(source.{TXA:2.1},"12,21,22,24,25")' >
<false>
<assign value='target.{PID:PatientAccountNumber}' property='tmpaccount' action='set' />
<assign value='target.{PV1:PatientType}' property='tmppattype' action='set' />
<assign value='tmpaccount_"-"_tmppattype' property='target.{PID:PatientAccountNumber}' action='set' />
</false>
</if>
</true>
</if>

<code>
<![CDATA[
    //  10/06/2017 only allow 21,22,24 and 25 against OPMSG
    //   type 12 may come against other fins
]]]]><![CDATA[></code>
<if condition='..In(source.{TXA:2.1},"21,22,24,25")' >
<true>
<if condition='(target.{PV1:PatientType}="OPMSG")' >
<false>
<assign value='target.{PID:PatientAccountNumber}' property='tmpaccount' action='set' />
<assign value='target.{PV1:PatientType}' property='tmppattype' action='set' />
<assign value='tmpaccount_"-"_tmppattype' property='target.{PID:PatientAccountNumber}' action='set' />
</false>
</if>
</true>
</if>

<code>
<![CDATA[
    //  09/18/2017 error if against Prior Auth
]]]]><![CDATA[></code>
<if condition='($EXTRACT(target.{PV1:PatientType},1,10)="Prior Auth")' >
<true>
<assign value='target.{PID:PatientAccountNumber}' property='tmpaccount' action='set' />
<assign value='"PriorAuth"' property='tmppattype' action='set' />
<assign value='tmpaccount_"-"_tmppattype' property='target.{PID:PatientAccountNumber}' action='set' />
</true>
</if>

<code>
<![CDATA[
    //  11/28/2017 force ESI error if future date - compare TXA-4 against today
]]]]><![CDATA[></code>
<assign value='"FUTURE"' property='tmpfinnbr' action='set' />
<assign value='..SubString(source.{TXA:4.1},1,8)' property='holdTXA4' action='set' />
<assign value='..SubString(source.{MSH:7.1},1,8)' property='holdMSH7' action='set' />
<if condition='(holdTXA4)&gt;(holdMSH7)'>
<true>
<assign value='tmpfinnbr' property='target.{PID:PatientAccountNumber}' action='set' />
</true>
</if>

<assign value='""' property='target.{PV1}' action='remove' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Nuance2eDOCSTagRevA">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64324,58789.212571</TimeChanged>
<TimeCreated>61607,43175.348783</TimeCreated>
<DependsOn>EnsLib.HL7.Message,GC.eDOCS.TAGDelimitedFileNuance</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='GC.eDOCS.TAGDelimitedFileNuance' sourceDocType='231.Cerner:ORU_R01' create='new' language='objectscript' >
<code>
<![CDATA[ 
	// Last Updated: 02/03/2017 Al Johnson
	// Moved to Prod: 02/10/2017
	//    Description: 
	//  Map results to customer fields which will be used to create Tag and Doc files for OpenText eDOCS
	//    Cerner upgrade - Nuance sends documents to Cerner, they are signed in Cerner then sent to eDOCS
	//                     Nuance sends MDM, Cerner sends ORU with rtf in OBX(1)-5.5
	//                     Additional documents originate in Cerner and are sent to eDOCS
	//               Imaging Documents are handled by GC.Carestream2eDOCSTag.dtl
	//
	//     Requested Tag fields PatientMRN, PatientLastName, PatientFirstName, PatientDOB, EncounterID, DateOfService, CernerDocumentID,
	//                          SourceSystem, AuthorID, DocumentType
	//                    Questioned - AttendingProvider, AdditionalProvider, EventDate, AdmitDate
	//                    NiceToHave - TranscriptionistID, TranscriptionistLastName, TranscriptionistFirtName
	//                                 ExtSourceDocumentID, RevisionCount, VersionComment, LastModifiedTime, AuthorLastName, AuthorFirstName
	//
	//  Trans.ID send XSPRT if blank otherwise use Lookup Table T_eDOCS_TnscrptCode to send Intials
	//  Send status of result into DocumentVersionComment and zAmmendedLabel by OBR_25 
	//      also if Addend is found in any OBX
	//  transcriptionist date obr 20 - FillerField1
	//  Send in results found in OBX as Findings
	//  updated Addend logic to add Admend
	//
	//  Signature will come in on NTE segment
	//
	//  Take author name from OBR-32 do not populate authorid
]]]]><![CDATA[></code>
<assign value='""' property='NLchar' action='set' />
<assign value='$char(13,10)' property='NLchar' action='set' />
<assign value='"PatientMRN="_source.{PID:PatientIdentifierList().ID}_NLchar' property='target.PatientMRN' action='set' />
<assign value='"PatientLastName="_source.{PID:PatientName().familylastname.familyname}_NLchar' property='target.PatientLastName' action='set' />
<assign value='"PatientFirstName="_source.{PID:PatientName().givenname}_NLchar' property='target.PatientFirstName' action='set' />
<assign value='"PatientMiddleInitial="_source.{PID:PatientName().middleinitialorname}_NLchar' property='target.PatientMiddleInitial' action='set' />
<if condition='source.{PID:DateTimeOfBirth.timeofanevent} = "" ' >
<true>
<assign value='"PatientDOB="_NLchar' property='target.PatientDOB' action='set' />
</true>
<false>
<assign value='source.{PID:DateofTimeBirth}' property='datein' action='set' />
<assign value='..SubString(source.{PID:DateTimeOfBirth.timeofanevent},5,6)_"/"_..SubString(source.{PID:DateTimeOfBirth.timeofanevent},7,8)_"/"_..SubString(source.{PID:DateTimeOfBirth.timeofanevent},1,4)' property='dob' action='set' />
<assign value='"PatientDOB="_dob_NLchar' property='target.PatientDOB' action='set' />
</false>
</if>

<assign value=' "EncounterID="_source.{PID:18}_NLchar ' property='target.EncounterID' action='set' />

<assign value='..SubString(source.{ORCgrp(1).OBR:7},5,6)_"/"_..SubString(source.{ORCgrp(1).OBR:7},7,8)_"/"_..SubString(source.{ORCgrp(1).OBR:7},1,4)' property='dos' action='set' />
<assign value=' "DateOfService="_dos_NLchar ' property='target.DateOfService' action='set' />

<assign value=' "SourceSystem=CERNER"_NLchar ' property='target.SourceSystem' action='set' />

<assign value=' "DocumentType="_source.{ORCgrp(1).OBR:4.1}_NLchar ' property='target.DocumentType' action='set' />

<assign property='OBXcount' value='source.{ORCgrp(1).OBXgrp(*)}' action='set'/>
<assign value=' "RevisionCount="_OBXcount_NLchar ' property='target.RevisionCount' action='set' />
<assign value=' "VersionComment="_NLchar ' property='target.VersionComment' action='set' />

<assign value='""' property='tmpCernerMSHkeys' action='set' />
<assign value='(source.{MSH:DateTimeOfMessage.timeofanevent})_(source.{MSH:MessageControlID})' property='tmpCernerMSHkeys' action='set' />
<assign value='""' property='tmpCernerID' action='set' />
<assign value='""' property='tmpNuanceTID' action='set' />
<foreach property='source.{ORCgrp(1).ORC:3()}' key='k1' >
<if condition='source.{ORCgrp(1).ORC:FillerOrderNumber(k1).namespaceID} = "HNAM_CEREF"' >
<true>
<assign value='source.{ORCgrp(1).ORC:FillerOrderNumber(k1).entityidentifier}' property='tmpNuanceTID' action='set' />
</true>
<false>
<if condition='source.{ORCgrp(1).ORC:FillerOrderNumber(k1).namespaceID} = "HNAM_EVENTID"' >
<true>
<assign value='source.{ORCgrp(1).ORC:FillerOrderNumber(k1).entityidentifier}' property='tmpCernerID' action='set' />
</true>
</if>
</false>
</if>
</foreach>
<assign value=' "ExtSourceDocumentID="_tmpNuanceTID_NLchar ' property='target.ExtSourceDocumentID' action='set' />
<assign value=' "CernerDocumentID="_tmpCernerID_NLchar ' property='target.CernerDocumentID' action='set' />

<code>
<![CDATA[
    // set zTagfilename to unique Cerner id - use to name doc and tag file
    // set zMSH10andMSH7 to MSH-10 and MSH-7.1 to make unique name for doc and tag
]]]]><![CDATA[></code>
<assign value='tmpCernerID' property='target.zTagfilename' action='set' />
<assign value='tmpCernerMSHkeys' property='target.zMSH10andMSH7' action='set' />

<code>
<![CDATA[ 
	// Send status of result into DocumentVersionComment and zAmmendedLabel by OBR_25 
	//  also if Addend is found in any OBX
	// <assign value='source.{ORCgrp(1).OBR:25}' property='VersionComment' action='set' />
    // <assign value=' "Document.VersionComment="_VersionComment_NLchar ' property='target.DocumentVersionComment' action='set' />
    //
    //  take author form zds perform, if blank take obr-34 Technician
    //   obr-34 principal result interpreter - joel is populating signed by - if he has it
    //  removed author from zds perform - take from obr-32
    //  <foreach property='source.{ORCgrp(1).ZDS(k2):ClinicalStaff()}' key='k4' >
    //  <if condition='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).assigningauthority} = "Doctor Nbr"' >
    //  <true>
    //  <assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).IDNumberST}' property='tmpAuthorID' action='set' />
    //  <assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).familyname}' property='tmpAuthorLastNM' action='set' />
    //  <assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).givenname}' property='tmpAuthorFirstNM' action='set' />
    //  </true>
    //  </if>
    //  </foreach>
]]]]><![CDATA[></code>

<assign value='""' property='tmpAuthorID' action='set' />
<assign value='""' property='tmpAuthorLastNM' action='set' />
<assign value='""' property='tmpAuthorFirstNM' action='set' />
<assign value='""' property='tmpTransID' action='set' />
<assign value='""' property='tmpTransLastNM' action='set' />
<assign value='""' property='tmpTransFirstNM' action='set' />
<assign value='""' property='tmpSignID' action='set' />
<assign value='""' property='tmpSignLastNM' action='set' />
<assign value='""' property='tmpSignFirstNM' action='set' />



<foreach property='source.{ORCgrp(1).ZDS()}' key='k2' >
<if condition='source.{ORCgrp(1).ZDS(k2):ActionCode} = "Perform"' >
<true>
<foreach property='source.{ORCgrp(1).ZDS(k2):ClinicalStaff()}' key='k4' >
<if condition='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).assigningauthority} = "Doctor Nbr"' >
<true>
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).IDNumberST}' property='tmpAuthorID' action='set' />
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).familyname}' property='tmpAuthorLastNM' action='set' />
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).givenname}' property='tmpAuthorFirstNM' action='set' />
</true>
</if>
</foreach>
</true>
<false>
<if condition='source.{ORCgrp(1).ZDS(k2):ActionCode} = "Transcribe"' >
<true>
<foreach property='source.{ORCgrp(1).ZDS(k2):ClinicalStaff()}' key='k5' >
<if condition='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k5).assigningauthority} = "Doctor Nbr"' >
<true>
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k5).IDNumberST}' property='tmpTransID' action='set' />
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k5).familyname}' property='tmpTransLastNM' action='set' />
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k5).givenname}' property='tmpTransFirstNM' action='set' />
</true>
</if>
</foreach>
</true>
<false>
<if condition='source.{ORCgrp(1).ZDS(k2):ActionCode} = "Sign"' >
<true>
<foreach property='source.{ORCgrp(1).ZDS(k2):ClinicalStaff()}' key='k6' >
<if condition='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k6).assigningauthority} = "Doctor Nbr"' >
<true>
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k6).IDNumberST}' property='tmpSignID' action='set' />
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k6).familyname}' property='tmpSignLastNM' action='set' />
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k6).givenname}' property='tmpSignFirstNM' action='set' />
</true>
</if>
</foreach>
</true>
</if>
</false>
</if>
</false>
</if>
</foreach>

<if condition='tmpAuthorLastNM=""' >
<true>
<assign value='source.{ORCgrp(1).OBR:Technician(1).name.familyname}' property='tmpAuthorLastNM' action='set' />
<assign value='source.{ORCgrp(1).OBR:Technician(1).name.givenname}' property='tmpAuthorFirstNM' action='set' />
</true>
</if>

<if condition='tmpAuthorLastNM=""' >
<true>
<assign value='source.{ORCgrp(1).OBR:PrincipalResultInterpreter.name.familyname}' property='tmpAuthorLastNM' action='set' />
<assign value='source.{ORCgrp(1).OBR:PrincipalResultInterpreter.name.givenname}' property='tmpAuthorFirstNM' action='set' />
</true>
</if>

<assign value=' "AuthorID="_tmpAuthorID_NLchar ' property='target.AuthorID' action='set' />
<assign value=' "AuthorLastName="_tmpAuthorLastNM_NLchar ' property='target.AuthorLastName' action='set' />
<assign value=' "AuthorFirstName="_tmpAuthorFirstNM_NLchar ' property='target.AuthorFirstName' action='set' />

<assign value=' "TranscriptionistID="_tmpTransID_NLchar ' property='target.TranscriptionistID' action='set' />
<assign value=' "TranscriptionistLastName="_tmpTransLastNM_NLchar ' property='target.TranscriptionistLastName' action='set' />
<assign value=' "TranscriptionistFirstName="_tmpTransFirstNM_NLchar ' property='target.TranscriptionistFirstName' action='set' />

<code>
<![CDATA[ 
  $$$TRACE("Sign="_tmpSignID_" "_tmpTransID_" "_tmpAuthorID)
  //  Trans.ID send XSPRT if blank otherwise use Lookup Table T_eDOCS_TnscrptCode to send Intials
  //   -- ? Nuance Data
]]]]><![CDATA[></code>
<code>
<![CDATA[ 
  // <assign value='""' property='tmpTransID' action='set' />
  // <assign value='..Lookup("T_eDOCS_TnscrptCode",source.{ORCgrp(1).OBR:35(1).1},source.{ORCgrp(1).OBR:35(1).1})' property='tmpTransID' action='set' />
  // <if condition='$LENGTH(tmpTransID) &lt; 1  ' >
  // <true>
  // <assign value='"Trans.ID=XSPRT"_NLchar' property='target.TransID' action='set' />
  // </true>
  // <false>
  // <assign value='"Trans.ID="_tmpTransID_NLchar' property='target.TransID' action='set' />
  // </false>
  // </if>
]]]]><![CDATA[></code>

<if condition='source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent} = "" ' >
<true>
<assign value='"LastModifiedTime="_NLchar' property='target.LastModifiedTime' action='set' />
</true>
<false>
<assign value='"LastModifiedTime="_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},5,6)_"/"_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},7,8)_"/"_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},1,4)_" "_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},9,10)_":"_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},11,12)_":"_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},13,14)_NLchar' property='target.LastModifiedTime' action='set' />
</false>
</if>

<code>
<![CDATA[ 
	// Send in results found in OBX as Findings
	// Find signature line in NTE segment
	// rtf in OBX(1)-5.5 ends in }; insert signature line
	// rtf has ~ - removed by GC.TildeReplace
	//  if problems parsing out 5.5 check orig data for ~,^ that would cause truncation
	// <assign value='source.{ORCgrp(1).OBXgrp(1).OBX:5()}' property='target.zFindings' action='set' />
	
	//  extract each obx in its entirety, remove beginning { and ending }
	//  append signature line
	//  repeat for each obx/nte group
	//  add beginning { and ending } when done
	
	//   HIM,REGISTRATION\line MRN: 201504 \line DOB/Age/Sex: 06/06/2006   10 years   Female\line\line FIN:  20001721\line\line}
]]]]><![CDATA[></code>

<assign value='"{\par Gillette Childrens Specialty Hospital\line\line Patient: "' property='holdhdg1a' action='set' />
<assign value='"\line MRN: "' property='holdhdg1b' action='set' />
<assign value='" \line DOB: "' property='holdhdg1c' action='set' />
<assign value='"\line\line FIN: "' property='holdhdg1d' action='set' />

<assign value='""' property='holdhdg1derr' action='set' />
<if condition='source.{ORCgrp(1).OBR:ResultStatus}="INERROR"' >
<true>
<assign value='"\line\line ** IN ERROR ** "' property='holdhdg1derr' action='set' />
</true>
</if>

<assign value='source.{PID:PatientIdentifierList().ID}' property='hdg1MRN' action='set' />
<assign value='source.{PID:PatientName().familylastname.familyname}' property='hdg1LastNM' action='set' />
<assign value='source.{PID:PatientName().givenname}' property='hdg1FirstNM' action='set' />

<if condition='source.{PID:DateTimeOfBirth.timeofanevent} = "" ' >
<true>
<assign value='"  /  /    "' property='hdg1DOB' action='set' />
</true>
<false>
<assign value='..SubString(source.{PID:DateTimeOfBirth.timeofanevent},5,6)_"/"_..SubString(source.{PID:DateTimeOfBirth.timeofanevent},7,8)_"/"_..SubString(source.{PID:DateTimeOfBirth.timeofanevent},1,4)' property='hdg1DOB' action='set' />
</false>
</if>

<assign value='source.{PID:18}' property='hdg1FIN' action='set' />

<assign value='holdhdg1a_hdg1LastNM_","_hdg1FirstNM_holdhdg1b_hdg1MRN_holdhdg1c_hdg1DOB_"  "_holdhdg1d_hdg1FIN_holdhdg1derr_"\line\par}"' property='tmphdg' action='set' />

<assign value='""' property='target.zNTESign' action='set' />
<assign value='""' property='target.zFindings' action='set' />
<assign value='""' property='target.zFindingsComb' action='set' />

<assign value='""' property='tmprtfdoc' action='set' />
<foreach property='source.{ORCgrp(1).OBXgrp().OBX}' key='k3' >
<assign value='""' property='tmprtflength' action='set' />
<assign value='""' property='tmprtfdoc1' action='set' />
<assign value='$LENGTH(source.{ORCgrp(1).OBXgrp(k3).OBX:5(1).5})' property='tmprtflength' action='set' />
<assign value='$EXTRACT(source.{ORCgrp(1).OBXgrp(k3).OBX:5(1).5},2,tmprtflength-1)' property='tmprtfdoc1' action='set' />
<assign value='tmprtfdoc_tmprtfdoc1' property='tmprtfdoc' action='set' />
<assign value='""' property='tmpNote' action='set' />
<foreach property='source.{ORCgrp(1).OBXgrp(k3).NTE()}' key='k7' >
<if condition='source.{ORCgrp(1).OBXgrp(k3).NTE(k7):SourceOfComment(1)} = "SIGN LINE"' >
<true>
<assign value='source.{ORCgrp(1).OBXgrp(k3).NTE(k7):Comment(1)}' property='tmpNote' action='set' />
<assign value='tmpNote_"\line\line"' property='tmpNote' action='set' />
<assign value='$REPLACE(tmpNote,"\.br\","\par ")' property='tmpNote' action='set' />
<assign value='tmpNote' property='target.zNTESign' action='set' />
<assign value='tmprtfdoc_tmpNote' property='tmprtfdoc' action='set' />
</true>
</if>
</foreach>
</foreach>

<code>
<![CDATA[ 
	// $FIND returns next character posistion following returned column
	// inserting hdg after 1st {\*\generator TX_RTF32 18.0.541.501;}
	//  <assign value='"{"_tmprtfdoc_"}"' property='target.zFindingsComb' action='set' />
]]]]><![CDATA[></code>
<assign value='$LENGTH(tmprtfdoc)' property='tmprtftotallength' action='set' />
<assign value='$FIND(tmprtfdoc,"\generator")' property='tmpgeneratorpos' action='set' />
<assign value='$FIND(tmprtfdoc,"}",tmpgeneratorpos)' property='tmpgeneratorposbrk' action='set' />

<assign value='$EXTRACT(tmprtfdoc,1,tmpgeneratorposbrk-1)' property='tmprtfpart1' action='set' />
<assign value='$EXTRACT(tmprtfdoc,tmpgeneratorposbrk,tmprtftotallength)' property='tmprtfpart2' action='set' />
<assign value='"{"_tmprtfpart1_tmphdg_tmprtfpart2_"}"' property='target.zFindingsComb' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Nuance2eDOCSTagRevB">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64335,46558.729935</TimeChanged>
<TimeCreated>61607,43175.348783</TimeCreated>
<DependsOn>EnsLib.HL7.Message,GC.eDOCS.TAGDelimitedFileNuance</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='GC.eDOCS.TAGDelimitedFileNuance' sourceDocType='231.Cerner:ORU_R01' create='new' language='objectscript' >
<code>
<![CDATA[ 
	// Last Updated: 02/21/2017 Al Johnson
	// Moved to Prod: 02/21/2017
	// Create: 
	//    Description: 
	//  Map results to customer fields which will be used to create Tag and Doc files for OpenText eDOCS
	//    Cerner upgrade - Nuance sends documents to Cerner, they are signed in Cerner then sent to eDOCS
	//                     Nuance sends MDM, Cerner sends ORU with rtf in OBX(1)-5.5
	//                     Additional documents originate in Cerner and are sent to eDOCS
	//               Imaging Documents are handled by GC.Carestream2eDOCSTag.dtl
	//
	//     Requested Tag fields PatientMRN, PatientLastName, PatientFirstName, PatientDOB, EncounterID, DateOfService, CernerDocumentID,
	//                          SourceSystem, AuthorID, DocumentType
	//                    Questioned - AttendingProvider, AdditionalProvider, EventDate, AdmitDate
	//                    NiceToHave - TranscriptionistID, TranscriptionistLastName, TranscriptionistFirtName
	//                                 ExtSourceDocumentID, RevisionCount, VersionComment, LastModifiedTime, AuthorLastName, AuthorFirstName
	//
	//  Trans.ID send XSPRT if blank otherwise use Lookup Table T_eDOCS_TnscrptCode to send Intials
	//  Send status of result into DocumentVersionComment and zAmmendedLabel by OBR_25 
	//      also if Addend is found in any OBX
	//  transcriptionist date obr 20 - FillerField1
	//  Send in results found in OBX as Findings
	//  updated Addend logic to add Admend
	//
	//  Signature will come in on NTE segment
	//
	//  Take author name from OBR-32 do not populate authorid
	//
	//  Addendums out of Cerner are using a different font table than the original document out of Nuance Escription
	//   Original goes into symbol font and appears to be foreign language
	//   Out of Nuance - fcharset2\E\fprq2{\E\*\E\panose 05050102010706020507}Symbol;}
	//   Out of Cerner - {\f2\froman\fcharset2\fprq2 Symbol;}
	//    Change \f2\froman\fcharset2\fprq2 Symbol; TO \f2\froman\fcharset0\fprq2 Times New Roman;
]]]]><![CDATA[></code>
<assign value='""' property='NLchar' action='set' />
<assign value='$char(13,10)' property='NLchar' action='set' />
<assign value='"PatientMRN="_source.{PID:PatientIdentifierList().ID}_NLchar' property='target.PatientMRN' action='set' />
<assign value='"PatientLastName="_source.{PID:PatientName().familylastname.familyname}_NLchar' property='target.PatientLastName' action='set' />
<assign value='"PatientFirstName="_source.{PID:PatientName().givenname}_NLchar' property='target.PatientFirstName' action='set' />
<assign value='"PatientMiddleInitial="_source.{PID:PatientName().middleinitialorname}_NLchar' property='target.PatientMiddleInitial' action='set' />
<if condition='source.{PID:DateTimeOfBirth.timeofanevent} = "" ' >
<true>
<assign value='"PatientDOB="_NLchar' property='target.PatientDOB' action='set' />
</true>
<false>
<assign value='source.{PID:DateofTimeBirth}' property='datein' action='set' />
<assign value='..SubString(source.{PID:DateTimeOfBirth.timeofanevent},5,6)_"/"_..SubString(source.{PID:DateTimeOfBirth.timeofanevent},7,8)_"/"_..SubString(source.{PID:DateTimeOfBirth.timeofanevent},1,4)' property='dob' action='set' />
<assign value='"PatientDOB="_dob_NLchar' property='target.PatientDOB' action='set' />
</false>
</if>

<assign value=' "EncounterID="_source.{PID:18}_NLchar ' property='target.EncounterID' action='set' />

<assign value='..SubString(source.{ORCgrp(1).OBR:7},5,6)_"/"_..SubString(source.{ORCgrp(1).OBR:7},7,8)_"/"_..SubString(source.{ORCgrp(1).OBR:7},1,4)' property='dos' action='set' />
<assign value=' "DateOfService="_dos_NLchar ' property='target.DateOfService' action='set' />

<assign value=' "SourceSystem=CERNER"_NLchar ' property='target.SourceSystem' action='set' />

<assign value=' "DocumentType="_source.{ORCgrp(1).OBR:4.1}_NLchar ' property='target.DocumentType' action='set' />

<assign property='OBXcount' value='source.{ORCgrp(1).OBXgrp(*)}' action='set'/>
<assign value=' "RevisionCount="_OBXcount_NLchar ' property='target.RevisionCount' action='set' />
<assign value=' "VersionComment="_NLchar ' property='target.VersionComment' action='set' />

<assign value='""' property='tmpCernerMSHkeys' action='set' />
<assign value='(source.{MSH:DateTimeOfMessage.timeofanevent})_(source.{MSH:MessageControlID})' property='tmpCernerMSHkeys' action='set' />
<assign value='""' property='tmpCernerID' action='set' />
<assign value='""' property='tmpNuanceTID' action='set' />
<foreach property='source.{ORCgrp(1).ORC:3()}' key='k1' >
<if condition='source.{ORCgrp(1).ORC:FillerOrderNumber(k1).namespaceID} = "HNAM_CEREF"' >
<true>
<assign value='source.{ORCgrp(1).ORC:FillerOrderNumber(k1).entityidentifier}' property='tmpNuanceTID' action='set' />
</true>
<false>
<if condition='source.{ORCgrp(1).ORC:FillerOrderNumber(k1).namespaceID} = "HNAM_EVENTID"' >
<true>
<assign value='source.{ORCgrp(1).ORC:FillerOrderNumber(k1).entityidentifier}' property='tmpCernerID' action='set' />
</true>
</if>
</false>
</if>
</foreach>
<assign value=' "ExtSourceDocumentID="_tmpNuanceTID_NLchar ' property='target.ExtSourceDocumentID' action='set' />
<assign value=' "CernerDocumentID="_tmpCernerID_NLchar ' property='target.CernerDocumentID' action='set' />

<code>
<![CDATA[
    // set zTagfilename to unique Cerner id - use to name doc and tag file
    // set zMSH10andMSH7 to MSH-10 and MSH-7.1 to make unique name for doc and tag
]]]]><![CDATA[></code>
<assign value='tmpCernerID' property='target.zTagfilename' action='set' />
<assign value='tmpCernerMSHkeys' property='target.zMSH10andMSH7' action='set' />

<code>
<![CDATA[ 
	// Send status of result into DocumentVersionComment and zAmmendedLabel by OBR_25 
	//  also if Addend is found in any OBX
	// <assign value='source.{ORCgrp(1).OBR:25}' property='VersionComment' action='set' />
    // <assign value=' "Document.VersionComment="_VersionComment_NLchar ' property='target.DocumentVersionComment' action='set' />
    //
    //  take author form zds perform, if blank take obr-34 Technician
    //   obr-34 principal result interpreter - joel is populating signed by - if he has it
    //  removed author from zds perform - take from obr-32
    //  <foreach property='source.{ORCgrp(1).ZDS(k2):ClinicalStaff()}' key='k4' >
    //  <if condition='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).assigningauthority} = "Doctor Nbr"' >
    //  <true>
    //  <assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).IDNumberST}' property='tmpAuthorID' action='set' />
    //  <assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).familyname}' property='tmpAuthorLastNM' action='set' />
    //  <assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).givenname}' property='tmpAuthorFirstNM' action='set' />
    //  </true>
    //  </if>
    //  </foreach>
]]]]><![CDATA[></code>

<assign value='""' property='tmpAuthorID' action='set' />
<assign value='""' property='tmpAuthorLastNM' action='set' />
<assign value='""' property='tmpAuthorFirstNM' action='set' />
<assign value='""' property='tmpTransID' action='set' />
<assign value='""' property='tmpTransLastNM' action='set' />
<assign value='""' property='tmpTransFirstNM' action='set' />
<assign value='""' property='tmpSignID' action='set' />
<assign value='""' property='tmpSignLastNM' action='set' />
<assign value='""' property='tmpSignFirstNM' action='set' />



<foreach property='source.{ORCgrp(1).ZDS()}' key='k2' >
<if condition='source.{ORCgrp(1).ZDS(k2):ActionCode} = "Perform"' >
<true>
<foreach property='source.{ORCgrp(1).ZDS(k2):ClinicalStaff()}' key='k4' >
<if condition='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).assigningauthority} = "Doctor Nbr"' >
<true>
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).IDNumberST}' property='tmpAuthorID' action='set' />
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).familyname}' property='tmpAuthorLastNM' action='set' />
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).givenname}' property='tmpAuthorFirstNM' action='set' />
</true>
</if>
</foreach>
</true>
<false>
<if condition='source.{ORCgrp(1).ZDS(k2):ActionCode} = "Transcribe"' >
<true>
<foreach property='source.{ORCgrp(1).ZDS(k2):ClinicalStaff()}' key='k5' >
<if condition='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k5).assigningauthority} = "Doctor Nbr"' >
<true>
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k5).IDNumberST}' property='tmpTransID' action='set' />
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k5).familyname}' property='tmpTransLastNM' action='set' />
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k5).givenname}' property='tmpTransFirstNM' action='set' />
</true>
</if>
</foreach>
</true>
<false>
<if condition='source.{ORCgrp(1).ZDS(k2):ActionCode} = "Sign"' >
<true>
<foreach property='source.{ORCgrp(1).ZDS(k2):ClinicalStaff()}' key='k6' >
<if condition='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k6).assigningauthority} = "Doctor Nbr"' >
<true>
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k6).IDNumberST}' property='tmpSignID' action='set' />
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k6).familyname}' property='tmpSignLastNM' action='set' />
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k6).givenname}' property='tmpSignFirstNM' action='set' />
</true>
</if>
</foreach>
</true>
</if>
</false>
</if>
</false>
</if>
</foreach>

<if condition='tmpAuthorLastNM=""' >
<true>
<assign value='source.{ORCgrp(1).OBR:Technician(1).name.familyname}' property='tmpAuthorLastNM' action='set' />
<assign value='source.{ORCgrp(1).OBR:Technician(1).name.givenname}' property='tmpAuthorFirstNM' action='set' />
</true>
</if>

<if condition='tmpAuthorLastNM=""' >
<true>
<assign value='source.{ORCgrp(1).OBR:PrincipalResultInterpreter.name.familyname}' property='tmpAuthorLastNM' action='set' />
<assign value='source.{ORCgrp(1).OBR:PrincipalResultInterpreter.name.givenname}' property='tmpAuthorFirstNM' action='set' />
</true>
</if>

<assign value=' "AuthorID="_tmpAuthorID_NLchar ' property='target.AuthorID' action='set' />
<assign value=' "AuthorLastName="_tmpAuthorLastNM_NLchar ' property='target.AuthorLastName' action='set' />
<assign value=' "AuthorFirstName="_tmpAuthorFirstNM_NLchar ' property='target.AuthorFirstName' action='set' />

<assign value=' "TranscriptionistID="_tmpTransID_NLchar ' property='target.TranscriptionistID' action='set' />
<assign value=' "TranscriptionistLastName="_tmpTransLastNM_NLchar ' property='target.TranscriptionistLastName' action='set' />
<assign value=' "TranscriptionistFirstName="_tmpTransFirstNM_NLchar ' property='target.TranscriptionistFirstName' action='set' />

<code>
<![CDATA[ 
  $$$TRACE("Sign="_tmpSignID_" "_tmpTransID_" "_tmpAuthorID)
  //  Trans.ID send XSPRT if blank otherwise use Lookup Table T_eDOCS_TnscrptCode to send Intials
  //   -- ? Nuance Data
]]]]><![CDATA[></code>
<code>
<![CDATA[ 
  // <assign value='""' property='tmpTransID' action='set' />
  // <assign value='..Lookup("T_eDOCS_TnscrptCode",source.{ORCgrp(1).OBR:35(1).1},source.{ORCgrp(1).OBR:35(1).1})' property='tmpTransID' action='set' />
  // <if condition='$LENGTH(tmpTransID) &lt; 1  ' >
  // <true>
  // <assign value='"Trans.ID=XSPRT"_NLchar' property='target.TransID' action='set' />
  // </true>
  // <false>
  // <assign value='"Trans.ID="_tmpTransID_NLchar' property='target.TransID' action='set' />
  // </false>
  // </if>
]]]]><![CDATA[></code>

<if condition='source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent} = "" ' >
<true>
<assign value='"LastModifiedTime="_NLchar' property='target.LastModifiedTime' action='set' />
</true>
<false>
<assign value='"LastModifiedTime="_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},5,6)_"/"_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},7,8)_"/"_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},1,4)_" "_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},9,10)_":"_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},11,12)_":"_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},13,14)_NLchar' property='target.LastModifiedTime' action='set' />
</false>
</if>

<code>
<![CDATA[ 
	// Send in results found in OBX as Findings
	// Find signature line in NTE segment
	// rtf in OBX(1)-5.5 ends in }; insert signature line
	// rtf has ~ - removed by GC.TildeReplace
	//  if problems parsing out 5.5 check orig data for ~,^ that would cause truncation
	// <assign value='source.{ORCgrp(1).OBXgrp(1).OBX:5()}' property='target.zFindings' action='set' />
	
	//  extract each obx in its entirety, remove beginning { and ending }
	//  append signature line
	//  repeat for each obx/nte group
	//  add beginning { and ending } when done
	
	//   HIM,REGISTRATION\line MRN: 201504 \line DOB/Age/Sex: 06/06/2006   10 years   Female\line\line FIN:  20001721\line\line}
]]]]><![CDATA[></code>

<assign value='"{\par Gillette Childrens Specialty Hospital\line\line Patient: "' property='holdhdg1a' action='set' />
<assign value='"\line MRN: "' property='holdhdg1b' action='set' />
<assign value='" \line DOB: "' property='holdhdg1c' action='set' />
<assign value='"\line\line FIN: "' property='holdhdg1d' action='set' />

<assign value='""' property='holdhdg1derr' action='set' />
<if condition='source.{ORCgrp(1).OBR:ResultStatus}="INERROR"' >
<true>
<assign value='"\line\line ** IN ERROR ** "' property='holdhdg1derr' action='set' />
</true>
</if>

<assign value='source.{PID:PatientIdentifierList().ID}' property='hdg1MRN' action='set' />
<assign value='source.{PID:PatientName().familylastname.familyname}' property='hdg1LastNM' action='set' />
<assign value='source.{PID:PatientName().givenname}' property='hdg1FirstNM' action='set' />

<if condition='source.{PID:DateTimeOfBirth.timeofanevent} = "" ' >
<true>
<assign value='"  /  /    "' property='hdg1DOB' action='set' />
</true>
<false>
<assign value='..SubString(source.{PID:DateTimeOfBirth.timeofanevent},5,6)_"/"_..SubString(source.{PID:DateTimeOfBirth.timeofanevent},7,8)_"/"_..SubString(source.{PID:DateTimeOfBirth.timeofanevent},1,4)' property='hdg1DOB' action='set' />
</false>
</if>

<assign value='source.{PID:18}' property='hdg1FIN' action='set' />

<assign value='holdhdg1a_hdg1LastNM_","_hdg1FirstNM_holdhdg1b_hdg1MRN_holdhdg1c_hdg1DOB_"  "_holdhdg1d_hdg1FIN_holdhdg1derr_"\line\par}"' property='tmphdg' action='set' />

<assign value='""' property='target.zNTESign' action='set' />
<assign value='""' property='target.zFindings' action='set' />
<assign value='""' property='target.zFindingsComb' action='set' />

<assign value='""' property='tmprtfdoc' action='set' />
<foreach property='source.{ORCgrp(1).OBXgrp().OBX}' key='k3' >
<assign value='""' property='tmprtflength' action='set' />
<assign value='""' property='tmprtfdoc1' action='set' />
<assign value='$LENGTH(source.{ORCgrp(1).OBXgrp(k3).OBX:5(1).5})' property='tmprtflength' action='set' />
<assign value='$EXTRACT(source.{ORCgrp(1).OBXgrp(k3).OBX:5(1).5},2,tmprtflength-1)' property='tmprtfdoc1' action='set' />
<assign value='tmprtfdoc_tmprtfdoc1' property='tmprtfdoc' action='set' />
<assign value='""' property='tmpNote' action='set' />
<foreach property='source.{ORCgrp(1).OBXgrp(k3).NTE()}' key='k7' >
<if condition='source.{ORCgrp(1).OBXgrp(k3).NTE(k7):SourceOfComment(1)} = "SIGN LINE"' >
<true>
<assign value='source.{ORCgrp(1).OBXgrp(k3).NTE(k7):Comment(1)}' property='tmpNote' action='set' />
<assign value='tmpNote_"\line\line"' property='tmpNote' action='set' />
<assign value='$REPLACE(tmpNote,"\.br\","\par ")' property='tmpNote' action='set' />
<assign value='tmpNote' property='target.zNTESign' action='set' />
<assign value='tmprtfdoc_tmpNote' property='tmprtfdoc' action='set' />
</true>
</if>
</foreach>
</foreach>

<code>
<![CDATA[ 
	// $FIND returns next character posistion following returned column
	// inserting hdg after 1st {\*\generator TX_RTF32 18.0.541.501;}
	//  <assign value='"{"_tmprtfdoc_"}"' property='target.zFindingsComb' action='set' />
	//
	//  Addendums out of Cerner are using a different font table than the original document out of Nuance Escription
	//   Original goes into symbol font and appears to be foreign language
	//   Out of Nuance - fcharset2\E\fprq2{\E\*\E\panose 05050102010706020507}Symbol;}
	//   Out of Cerner - {\f2\froman\fcharset2\fprq2 Symbol;}
	//    Change \f2\froman\fcharset2\fprq2 Symbol; TO \f2\froman\fcharset0\fprq2 Times New Roman;
]]]]><![CDATA[></code>
<assign value='$LENGTH(tmprtfdoc)' property='tmprtftotallength' action='set' />
<assign value='$FIND(tmprtfdoc,"\generator")' property='tmpgeneratorpos' action='set' />
<assign value='$FIND(tmprtfdoc,"}",tmpgeneratorpos)' property='tmpgeneratorposbrk' action='set' />

<assign value='$EXTRACT(tmprtfdoc,1,tmpgeneratorposbrk-1)' property='tmprtfpart1' action='set' />
<assign value='$EXTRACT(tmprtfdoc,tmpgeneratorposbrk,tmprtftotallength)' property='tmprtfpart2' action='set' />
<assign value='"{"_tmprtfpart1_tmphdg_tmprtfpart2_"}"' property='target.zFindingsComb' action='set' />

<assign value='$REPLACE(target.zFindingsComb,"\f2\froman\fcharset2\fprq2 Symbol;","\f2\froman\fcharset0\fprq2 Times New Roman;")' property='target.zFindingsComb' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Nuance2eDOCSTagRevBFix">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64345,48899.884632</TimeChanged>
<TimeCreated>61607,43175.348783</TimeCreated>
<DependsOn>EnsLib.HL7.Message,GC.eDOCS.TAGDelimitedFileNuance</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='GC.eDOCS.TAGDelimitedFileNuance' sourceDocType='231.Cerner:ORU_R01' create='new' language='objectscript' >
<code>
<![CDATA[ 
	// Last Updated: 02/21/2017 Al Johnson
	// Moved to Prod: 02/21/2017
	// Create: 
	//    Description: 
	//  Map results to customer fields which will be used to create Tag and Doc files for OpenText eDOCS
	//    Cerner upgrade - Nuance sends documents to Cerner, they are signed in Cerner then sent to eDOCS
	//                     Nuance sends MDM, Cerner sends ORU with rtf in OBX(1)-5.5
	//                     Additional documents originate in Cerner and are sent to eDOCS
	//               Imaging Documents are handled by GC.Carestream2eDOCSTag.dtl
	//
	//     Requested Tag fields PatientMRN, PatientLastName, PatientFirstName, PatientDOB, EncounterID, DateOfService, CernerDocumentID,
	//                          SourceSystem, AuthorID, DocumentType
	//                    Questioned - AttendingProvider, AdditionalProvider, EventDate, AdmitDate
	//                    NiceToHave - TranscriptionistID, TranscriptionistLastName, TranscriptionistFirtName
	//                                 ExtSourceDocumentID, RevisionCount, VersionComment, LastModifiedTime, AuthorLastName, AuthorFirstName
	//
	//  Trans.ID send XSPRT if blank otherwise use Lookup Table T_eDOCS_TnscrptCode to send Intials
	//  Send status of result into DocumentVersionComment and zAmmendedLabel by OBR_25 
	//      also if Addend is found in any OBX
	//  transcriptionist date obr 20 - FillerField1
	//  Send in results found in OBX as Findings
	//  updated Addend logic to add Admend
	//
	//  Signature will come in on NTE segment
	//
	//  Take author name from OBR-32 do not populate authorid
	//
	//  Addendums out of Cerner are using a different font table than the original document out of Nuance Escription
	//   Original goes into symbol font and appears to be foreign language
	//   Out of Nuance - fcharset2\E\fprq2{\E\*\E\panose 05050102010706020507}Symbol;}
	//   Out of Cerner - {\f2\froman\fcharset2\fprq2 Symbol;}
	//    Change \f2\froman\fcharset2\fprq2 Symbol; TO \f2\froman\fcharset0\fprq2 Times New Roman;
	// <assign value='"20170303133000"' property='tmpCernerFixTime' action='set' />  set date time so will update old ones and new ones
	//   or addendums will update
]]]]><![CDATA[></code>
<assign value='""' property='NLchar' action='set' />
<assign value='$char(13,10)' property='NLchar' action='set' />
<assign value='"PatientMRN="_source.{PID:PatientIdentifierList().ID}_NLchar' property='target.PatientMRN' action='set' />
<assign value='"PatientLastName="_source.{PID:PatientName().familylastname.familyname}_NLchar' property='target.PatientLastName' action='set' />
<assign value='"PatientFirstName="_source.{PID:PatientName().givenname}_NLchar' property='target.PatientFirstName' action='set' />
<assign value='"PatientMiddleInitial="_source.{PID:PatientName().middleinitialorname}_NLchar' property='target.PatientMiddleInitial' action='set' />
<if condition='source.{PID:DateTimeOfBirth.timeofanevent} = "" ' >
<true>
<assign value='"PatientDOB="_NLchar' property='target.PatientDOB' action='set' />
</true>
<false>
<assign value='source.{PID:DateofTimeBirth}' property='datein' action='set' />
<assign value='..SubString(source.{PID:DateTimeOfBirth.timeofanevent},5,6)_"/"_..SubString(source.{PID:DateTimeOfBirth.timeofanevent},7,8)_"/"_..SubString(source.{PID:DateTimeOfBirth.timeofanevent},1,4)' property='dob' action='set' />
<assign value='"PatientDOB="_dob_NLchar' property='target.PatientDOB' action='set' />
</false>
</if>

<assign value=' "EncounterID="_source.{PID:18}_NLchar ' property='target.EncounterID' action='set' />

<assign value='..SubString(source.{ORCgrp(1).OBR:7},5,6)_"/"_..SubString(source.{ORCgrp(1).OBR:7},7,8)_"/"_..SubString(source.{ORCgrp(1).OBR:7},1,4)' property='dos' action='set' />
<assign value=' "DateOfService="_dos_NLchar ' property='target.DateOfService' action='set' />

<assign value=' "SourceSystem=CERNER"_NLchar ' property='target.SourceSystem' action='set' />

<assign value=' "DocumentType="_source.{ORCgrp(1).OBR:4.1}_NLchar ' property='target.DocumentType' action='set' />

<assign property='OBXcount' value='source.{ORCgrp(1).OBXgrp(*)}' action='set'/>
<assign value=' "RevisionCount="_OBXcount_NLchar ' property='target.RevisionCount' action='set' />
<assign value=' "VersionComment="_NLchar ' property='target.VersionComment' action='set' />

<assign value='""' property='tmpCernerMSHkeys' action='set' />
<assign value='"20170303133000"' property='tmpCernerFixTime' action='set' />
<assign value='tmpCernerFixTime_(source.{MSH:MessageControlID})' property='tmpCernerMSHkeys' action='set' />
<assign value='""' property='tmpCernerID' action='set' />
<assign value='""' property='tmpNuanceTID' action='set' />
<foreach property='source.{ORCgrp(1).ORC:3()}' key='k1' >
<if condition='source.{ORCgrp(1).ORC:FillerOrderNumber(k1).namespaceID} = "HNAM_CEREF"' >
<true>
<assign value='source.{ORCgrp(1).ORC:FillerOrderNumber(k1).entityidentifier}' property='tmpNuanceTID' action='set' />
</true>
<false>
<if condition='source.{ORCgrp(1).ORC:FillerOrderNumber(k1).namespaceID} = "HNAM_EVENTID"' >
<true>
<assign value='source.{ORCgrp(1).ORC:FillerOrderNumber(k1).entityidentifier}' property='tmpCernerID' action='set' />
</true>
</if>
</false>
</if>
</foreach>
<assign value=' "ExtSourceDocumentID="_tmpNuanceTID_NLchar ' property='target.ExtSourceDocumentID' action='set' />
<assign value=' "CernerDocumentID="_tmpCernerID_NLchar ' property='target.CernerDocumentID' action='set' />

<code>
<![CDATA[
    // set zTagfilename to unique Cerner id - use to name doc and tag file
    // set zMSH10andMSH7 to MSH-10 and MSH-7.1 to make unique name for doc and tag
]]]]><![CDATA[></code>
<assign value='tmpCernerID' property='target.zTagfilename' action='set' />
<assign value='tmpCernerMSHkeys' property='target.zMSH10andMSH7' action='set' />

<code>
<![CDATA[ 
	// Send status of result into DocumentVersionComment and zAmmendedLabel by OBR_25 
	//  also if Addend is found in any OBX
	// <assign value='source.{ORCgrp(1).OBR:25}' property='VersionComment' action='set' />
    // <assign value=' "Document.VersionComment="_VersionComment_NLchar ' property='target.DocumentVersionComment' action='set' />
    //
    //  take author form zds perform, if blank take obr-34 Technician
    //   obr-34 principal result interpreter - joel is populating signed by - if he has it
    //  removed author from zds perform - take from obr-32
    //  <foreach property='source.{ORCgrp(1).ZDS(k2):ClinicalStaff()}' key='k4' >
    //  <if condition='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).assigningauthority} = "Doctor Nbr"' >
    //  <true>
    //  <assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).IDNumberST}' property='tmpAuthorID' action='set' />
    //  <assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).familyname}' property='tmpAuthorLastNM' action='set' />
    //  <assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).givenname}' property='tmpAuthorFirstNM' action='set' />
    //  </true>
    //  </if>
    //  </foreach>
]]]]><![CDATA[></code>

<assign value='""' property='tmpAuthorID' action='set' />
<assign value='""' property='tmpAuthorLastNM' action='set' />
<assign value='""' property='tmpAuthorFirstNM' action='set' />
<assign value='""' property='tmpTransID' action='set' />
<assign value='""' property='tmpTransLastNM' action='set' />
<assign value='""' property='tmpTransFirstNM' action='set' />
<assign value='""' property='tmpSignID' action='set' />
<assign value='""' property='tmpSignLastNM' action='set' />
<assign value='""' property='tmpSignFirstNM' action='set' />



<foreach property='source.{ORCgrp(1).ZDS()}' key='k2' >
<if condition='source.{ORCgrp(1).ZDS(k2):ActionCode} = "Perform"' >
<true>
<foreach property='source.{ORCgrp(1).ZDS(k2):ClinicalStaff()}' key='k4' >
<if condition='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).assigningauthority} = "Doctor Nbr"' >
<true>
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).IDNumberST}' property='tmpAuthorID' action='set' />
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).familyname}' property='tmpAuthorLastNM' action='set' />
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).givenname}' property='tmpAuthorFirstNM' action='set' />
</true>
</if>
</foreach>
</true>
<false>
<if condition='source.{ORCgrp(1).ZDS(k2):ActionCode} = "Transcribe"' >
<true>
<foreach property='source.{ORCgrp(1).ZDS(k2):ClinicalStaff()}' key='k5' >
<if condition='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k5).assigningauthority} = "Doctor Nbr"' >
<true>
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k5).IDNumberST}' property='tmpTransID' action='set' />
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k5).familyname}' property='tmpTransLastNM' action='set' />
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k5).givenname}' property='tmpTransFirstNM' action='set' />
</true>
</if>
</foreach>
</true>
<false>
<if condition='source.{ORCgrp(1).ZDS(k2):ActionCode} = "Sign"' >
<true>
<foreach property='source.{ORCgrp(1).ZDS(k2):ClinicalStaff()}' key='k6' >
<if condition='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k6).assigningauthority} = "Doctor Nbr"' >
<true>
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k6).IDNumberST}' property='tmpSignID' action='set' />
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k6).familyname}' property='tmpSignLastNM' action='set' />
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k6).givenname}' property='tmpSignFirstNM' action='set' />
</true>
</if>
</foreach>
</true>
</if>
</false>
</if>
</false>
</if>
</foreach>

<if condition='tmpAuthorLastNM=""' >
<true>
<assign value='source.{ORCgrp(1).OBR:Technician(1).name.familyname}' property='tmpAuthorLastNM' action='set' />
<assign value='source.{ORCgrp(1).OBR:Technician(1).name.givenname}' property='tmpAuthorFirstNM' action='set' />
</true>
</if>

<if condition='tmpAuthorLastNM=""' >
<true>
<assign value='source.{ORCgrp(1).OBR:PrincipalResultInterpreter.name.familyname}' property='tmpAuthorLastNM' action='set' />
<assign value='source.{ORCgrp(1).OBR:PrincipalResultInterpreter.name.givenname}' property='tmpAuthorFirstNM' action='set' />
</true>
</if>

<assign value=' "AuthorID="_tmpAuthorID_NLchar ' property='target.AuthorID' action='set' />
<assign value=' "AuthorLastName="_tmpAuthorLastNM_NLchar ' property='target.AuthorLastName' action='set' />
<assign value=' "AuthorFirstName="_tmpAuthorFirstNM_NLchar ' property='target.AuthorFirstName' action='set' />

<assign value=' "TranscriptionistID="_tmpTransID_NLchar ' property='target.TranscriptionistID' action='set' />
<assign value=' "TranscriptionistLastName="_tmpTransLastNM_NLchar ' property='target.TranscriptionistLastName' action='set' />
<assign value=' "TranscriptionistFirstName="_tmpTransFirstNM_NLchar ' property='target.TranscriptionistFirstName' action='set' />

<code>
<![CDATA[ 
  $$$TRACE("Sign="_tmpSignID_" "_tmpTransID_" "_tmpAuthorID)
  //  Trans.ID send XSPRT if blank otherwise use Lookup Table T_eDOCS_TnscrptCode to send Intials
  //   -- ? Nuance Data
]]]]><![CDATA[></code>
<code>
<![CDATA[ 
  // <assign value='""' property='tmpTransID' action='set' />
  // <assign value='..Lookup("T_eDOCS_TnscrptCode",source.{ORCgrp(1).OBR:35(1).1},source.{ORCgrp(1).OBR:35(1).1})' property='tmpTransID' action='set' />
  // <if condition='$LENGTH(tmpTransID) &lt; 1  ' >
  // <true>
  // <assign value='"Trans.ID=XSPRT"_NLchar' property='target.TransID' action='set' />
  // </true>
  // <false>
  // <assign value='"Trans.ID="_tmpTransID_NLchar' property='target.TransID' action='set' />
  // </false>
  // </if>
]]]]><![CDATA[></code>

<if condition='source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent} = "" ' >
<true>
<assign value='"LastModifiedTime="_NLchar' property='target.LastModifiedTime' action='set' />
</true>
<false>
<assign value='"LastModifiedTime="_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},5,6)_"/"_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},7,8)_"/"_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},1,4)_" "_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},9,10)_":"_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},11,12)_":"_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},13,14)_NLchar' property='target.LastModifiedTime' action='set' />
</false>
</if>

<code>
<![CDATA[ 
	// Send in results found in OBX as Findings
	// Find signature line in NTE segment
	// rtf in OBX(1)-5.5 ends in }; insert signature line
	// rtf has ~ - removed by GC.TildeReplace
	//  if problems parsing out 5.5 check orig data for ~,^ that would cause truncation
	// <assign value='source.{ORCgrp(1).OBXgrp(1).OBX:5()}' property='target.zFindings' action='set' />
	
	//  extract each obx in its entirety, remove beginning { and ending }
	//  append signature line
	//  repeat for each obx/nte group
	//  add beginning { and ending } when done
	
	//   HIM,REGISTRATION\line MRN: 201504 \line DOB/Age/Sex: 06/06/2006   10 years   Female\line\line FIN:  20001721\line\line}
]]]]><![CDATA[></code>

<assign value='"{\par Gillette Childrens Specialty Hospital\line\line Patient: "' property='holdhdg1a' action='set' />
<assign value='"\line MRN: "' property='holdhdg1b' action='set' />
<assign value='" \line DOB: "' property='holdhdg1c' action='set' />
<assign value='"\line\line FIN: "' property='holdhdg1d' action='set' />

<assign value='""' property='holdhdg1derr' action='set' />
<if condition='source.{ORCgrp(1).OBR:ResultStatus}="INERROR"' >
<true>
<assign value='"\line\line ** IN ERROR ** "' property='holdhdg1derr' action='set' />
</true>
</if>

<assign value='source.{PID:PatientIdentifierList().ID}' property='hdg1MRN' action='set' />
<assign value='source.{PID:PatientName().familylastname.familyname}' property='hdg1LastNM' action='set' />
<assign value='source.{PID:PatientName().givenname}' property='hdg1FirstNM' action='set' />

<if condition='source.{PID:DateTimeOfBirth.timeofanevent} = "" ' >
<true>
<assign value='"  /  /    "' property='hdg1DOB' action='set' />
</true>
<false>
<assign value='..SubString(source.{PID:DateTimeOfBirth.timeofanevent},5,6)_"/"_..SubString(source.{PID:DateTimeOfBirth.timeofanevent},7,8)_"/"_..SubString(source.{PID:DateTimeOfBirth.timeofanevent},1,4)' property='hdg1DOB' action='set' />
</false>
</if>

<assign value='source.{PID:18}' property='hdg1FIN' action='set' />

<assign value='holdhdg1a_hdg1LastNM_","_hdg1FirstNM_holdhdg1b_hdg1MRN_holdhdg1c_hdg1DOB_"  "_holdhdg1d_hdg1FIN_holdhdg1derr_"\line\par}"' property='tmphdg' action='set' />

<assign value='""' property='target.zNTESign' action='set' />
<assign value='""' property='target.zFindings' action='set' />
<assign value='""' property='target.zFindingsComb' action='set' />

<assign value='""' property='tmprtfdoc' action='set' />
<foreach property='source.{ORCgrp(1).OBXgrp().OBX}' key='k3' >
<assign value='""' property='tmprtflength' action='set' />
<assign value='""' property='tmprtfdoc1' action='set' />
<assign value='$LENGTH(source.{ORCgrp(1).OBXgrp(k3).OBX:5(1).5})' property='tmprtflength' action='set' />
<assign value='$EXTRACT(source.{ORCgrp(1).OBXgrp(k3).OBX:5(1).5},2,tmprtflength-1)' property='tmprtfdoc1' action='set' />
<assign value='tmprtfdoc_tmprtfdoc1' property='tmprtfdoc' action='set' />
<assign value='""' property='tmpNote' action='set' />
<foreach property='source.{ORCgrp(1).OBXgrp(k3).NTE()}' key='k7' >
<if condition='source.{ORCgrp(1).OBXgrp(k3).NTE(k7):SourceOfComment(1)} = "SIGN LINE"' >
<true>
<assign value='source.{ORCgrp(1).OBXgrp(k3).NTE(k7):Comment(1)}' property='tmpNote' action='set' />
<assign value='tmpNote_"\line\line"' property='tmpNote' action='set' />
<assign value='$REPLACE(tmpNote,"\.br\","\par ")' property='tmpNote' action='set' />
<assign value='tmpNote' property='target.zNTESign' action='set' />
<assign value='tmprtfdoc_tmpNote' property='tmprtfdoc' action='set' />
</true>
</if>
</foreach>
</foreach>

<code>
<![CDATA[ 
	// $FIND returns next character posistion following returned column
	// inserting hdg after 1st {\*\generator TX_RTF32 18.0.541.501;}
	//  <assign value='"{"_tmprtfdoc_"}"' property='target.zFindingsComb' action='set' />
	//
	//  Addendums out of Cerner are using a different font table than the original document out of Nuance Escription
	//   Original goes into symbol font and appears to be foreign language
	//   Out of Nuance - fcharset2\E\fprq2{\E\*\E\panose 05050102010706020507}Symbol;}
	//   Out of Cerner - {\f2\froman\fcharset2\fprq2 Symbol;}
	//    Change \f2\froman\fcharset2\fprq2 Symbol; TO \f2\froman\fcharset0\fprq2 Times New Roman;
]]]]><![CDATA[></code>
<assign value='$LENGTH(tmprtfdoc)' property='tmprtftotallength' action='set' />
<assign value='$FIND(tmprtfdoc,"\generator")' property='tmpgeneratorpos' action='set' />
<assign value='$FIND(tmprtfdoc,"}",tmpgeneratorpos)' property='tmpgeneratorposbrk' action='set' />

<assign value='$EXTRACT(tmprtfdoc,1,tmpgeneratorposbrk-1)' property='tmprtfpart1' action='set' />
<assign value='$EXTRACT(tmprtfdoc,tmpgeneratorposbrk,tmprtftotallength)' property='tmprtfpart2' action='set' />
<assign value='"{"_tmprtfpart1_tmphdg_tmprtfpart2_"}"' property='target.zFindingsComb' action='set' />

<assign value='$REPLACE(target.zFindingsComb,"\f2\froman\fcharset2\fprq2 Symbol;","\f2\froman\fcharset0\fprq2 Times New Roman;")' property='target.zFindingsComb' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Nuance2eDOCSTagRevC">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65497,41658.681454</TimeChanged>
<TimeCreated>61607,43175.348783</TimeCreated>
<DependsOn>EnsLib.HL7.Message,GC.eDOCS.TAGDelimitedFileNuance</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='GC.eDOCS.TAGDelimitedFileNuance' sourceDocType='231.Cerner:ORU_R01' create='new' language='objectscript' >
<code>
<![CDATA[ 
	// Last Updated: 04/27/2020 Al Johnson
	// Moved to Prod: 04/28/2020
	// Create: 
	//    Description: 
	//  Map results to customer fields which will be used to create Tag and Doc files for OpenText eDOCS
	//    Cerner upgrade - Nuance sends documents to Cerner, they are signed in Cerner then sent to eDOCS
	//                     Nuance sends MDM, Cerner sends ORU with rtf in OBX(1)-5.5
	//                     Additional documents originate in Cerner and are sent to eDOCS
	//               Imaging Documents are handled by GC.Carestream2eDOCSTag.dtl
	//
	//     Requested Tag fields PatientMRN, PatientLastName, PatientFirstName, PatientDOB, EncounterID, DateOfService, CernerDocumentID,
	//                          SourceSystem, AuthorID, DocumentType
	//                    Questioned - AttendingProvider, AdditionalProvider, EventDate, AdmitDate
	//                    NiceToHave - TranscriptionistID, TranscriptionistLastName, TranscriptionistFirtName
	//                                 ExtSourceDocumentID, RevisionCount, VersionComment, LastModifiedTime, AuthorLastName, AuthorFirstName
	//
	//  Trans.ID send XSPRT if blank otherwise use Lookup Table T_eDOCS_TnscrptCode to send Intials
	//  Send status of result into DocumentVersionComment and zAmmendedLabel by OBR_25 
	//      also if Addend is found in any OBX
	//  transcriptionist date obr 20 - FillerField1
	//  Send in results found in OBX as Findings
	//  updated Addend logic to add Admend
	//
	//  Signature will come in on NTE segment
	//
	//  Take author name from OBR-32 do not populate authorid
	//
	//  Addendums out of Cerner are using a different font table than the original document out of Nuance Escription
	//   Original goes into symbol font and appears to be foreign language
	//   Out of Nuance - fcharset2\E\fprq2{\E\*\E\panose 05050102010706020507}Symbol;}
	//   Out of Cerner - {\f2\froman\fcharset2\fprq2 Symbol;}
	//    Change \f2\froman\fcharset2\fprq2 Symbol; TO \f2\froman\fcharset0\fprq2 Times New Roman;
	//
	//  Processing of OBX RTF data - do not use GC.eDOCS.TildeReplace3     03/06/2017
	//    extract the obx into 3 pieces delimited by '{\rtf1\' and '}|'
    //     perform actions on middle
    //      replace "~^^RTF^^","")   remove altogether
    //      replace "/.br/","/ "     Joel removing out of Cerner, but leaving here
    //     add back delimiters when recreating obx segment
    //
    //    Capture INERROR comments from NTE segment and add under IN ERROR in hdg  03/06/2017
    //
    //   Symbol is occuring on fonts other than f2 03/21/2017
	//   Change \froman\fcharset2\fprq2 Symbol; TO \froman\fcharset0\fprq2 Times New Roman;  03/21/2017
	//   Add date of service to heading.  Add after date of birth   08/10/2017
	//
	//   Jira 8046 remove fin pid-18 on document ids 21,22 and 25 chart checks and lab checks  09/25/2017
	//
	//   CNR-17821 add apostrophe to Children's in heading line 04/17/2019
	//   CNR-17821 change name from Gillette Childrens Specialty Hospital to Gillette Children's Specialty Healthcare
	//
	//   SD-36389 Symbol font now being sent in other font families causing cryptic foreign language output 3/4/2020
	//      change all occurencs of symbol to times new roman
	//   SD-36602 Headings not showing in edocs - found that some documents since Cerner conversion do not have
	//       verbiage "\generator" so headings are being placed in wrong position in rtf
	//       Change so heading is placed before first occurence of \sectd
	//       Check number of OBX segments - Cerner is sending addendums out of sequence - email if multiple addendums to manually check
	//           or possibly resequence addendums if obxgrp(3) exists
	//           Cerner is sending the addendums out of sequence.  If only one addendum, inconsistent whether addendum is sent first or last
	//           Address this as a seperate story to resequence OBXgrp using the NTE signed date
	//       Add \par after signature line and data, before \line, this will force left justifcation on signature line
	//
	//   Errors on Addendums after SD-36602
	//   RFC SD-41501
	//   If Addendum - more than 1 OBX - change occurences in fonttbl of fcharset2 to fcharset0 04/27/2020
	//
]]]]><![CDATA[></code>

<assign value='""' property='NLchar' action='set' />
<assign value='$char(13,10)' property='NLchar' action='set' />
<assign value='"PatientMRN="_source.{PID:PatientIdentifierList().ID}_NLchar' property='target.PatientMRN' action='set' />
<assign value='"PatientLastName="_source.{PID:PatientName().familylastname.familyname}_NLchar' property='target.PatientLastName' action='set' />
<assign value='"PatientFirstName="_source.{PID:PatientName().givenname}_NLchar' property='target.PatientFirstName' action='set' />
<assign value='"PatientMiddleInitial="_source.{PID:PatientName().middleinitialorname}_NLchar' property='target.PatientMiddleInitial' action='set' />
<if condition='source.{PID:DateTimeOfBirth.timeofanevent} = "" ' >
<true>
<assign value='"PatientDOB="_NLchar' property='target.PatientDOB' action='set' />
</true>
<false>
<assign value='source.{PID:DateofTimeBirth}' property='datein' action='set' />
<assign value='..SubString(source.{PID:DateTimeOfBirth.timeofanevent},5,6)_"/"_..SubString(source.{PID:DateTimeOfBirth.timeofanevent},7,8)_"/"_..SubString(source.{PID:DateTimeOfBirth.timeofanevent},1,4)' property='dob' action='set' />
<assign value='"PatientDOB="_dob_NLchar' property='target.PatientDOB' action='set' />
</false>
</if>

<assign value=' "EncounterID="_source.{PID:18}_NLchar ' property='target.EncounterID' action='set' />

<assign value='..SubString(source.{ORCgrp(1).OBR:7},5,6)_"/"_..SubString(source.{ORCgrp(1).OBR:7},7,8)_"/"_..SubString(source.{ORCgrp(1).OBR:7},1,4)' property='dos' action='set' />
<assign value=' "DateOfService="_dos_NLchar ' property='target.DateOfService' action='set' />

<assign value=' "SourceSystem=CERNER"_NLchar ' property='target.SourceSystem' action='set' />

<assign value=' "DocumentType="_source.{ORCgrp(1).OBR:4.1}_NLchar ' property='target.DocumentType' action='set' />

<code>
<![CDATA[
    //  09/25/2017 Jira 8046 remove fin on document type 21, 22 and 25
    //  chart checks and lab checks which are being entered against outpatient message
]]]]><![CDATA[></code>
<if condition='..In(source.{ORCgrp(1).OBR:4.1},"21,22,25")' >
<true>
<assign value=' "EncounterID="_NLchar ' property='target.EncounterID' action='set' />
</true>
</if>

<assign property='OBXcount' value='source.{ORCgrp(1).OBXgrp(*)}' action='set'/>
<assign value=' "RevisionCount="_OBXcount_NLchar ' property='target.RevisionCount' action='set' />

<assign value='""' property='target.zTroubleShooting' action='set'/>
<assign value='OBXcount' property='target.zTroubleShooting' action='set' />

<assign value=' "VersionComment="_NLchar ' property='target.VersionComment' action='set' />

<assign value='""' property='tmpCernerMSHkeys' action='set' />
<assign value='(source.{MSH:DateTimeOfMessage.timeofanevent})_(source.{MSH:MessageControlID})' property='tmpCernerMSHkeys' action='set' />
<assign value='""' property='tmpCernerID' action='set' />
<assign value='""' property='tmpNuanceTID' action='set' />
<foreach property='source.{ORCgrp(1).ORC:3()}' key='k1' >
<if condition='source.{ORCgrp(1).ORC:FillerOrderNumber(k1).namespaceID} = "HNAM_CEREF"' >
<true>
<assign value='source.{ORCgrp(1).ORC:FillerOrderNumber(k1).entityidentifier}' property='tmpNuanceTID' action='set' />
</true>
<false>
<if condition='source.{ORCgrp(1).ORC:FillerOrderNumber(k1).namespaceID} = "HNAM_EVENTID"' >
<true>
<assign value='source.{ORCgrp(1).ORC:FillerOrderNumber(k1).entityidentifier}' property='tmpCernerID' action='set' />
</true>
</if>
</false>
</if>
</foreach>
<assign value=' "ExtSourceDocumentID="_tmpNuanceTID_NLchar ' property='target.ExtSourceDocumentID' action='set' />
<assign value=' "CernerDocumentID="_tmpCernerID_NLchar ' property='target.CernerDocumentID' action='set' />

<code>
<![CDATA[
    // set zTagfilename to unique Cerner id - use to name doc and tag file
    // set zMSH10andMSH7 to MSH-10 and MSH-7.1 to make unique name for doc and tag
]]]]><![CDATA[></code>
<assign value='tmpCernerID' property='target.zTagfilename' action='set' />
<assign value='tmpCernerMSHkeys' property='target.zMSH10andMSH7' action='set' />

<code>
<![CDATA[ 
	// Send status of result into DocumentVersionComment and zAmmendedLabel by OBR_25 
	//  also if Addend is found in any OBX
	// <assign value='source.{ORCgrp(1).OBR:25}' property='VersionComment' action='set' />
    // <assign value=' "Document.VersionComment="_VersionComment_NLchar ' property='target.DocumentVersionComment' action='set' />
    //
    //  take author form zds perform, if blank take obr-34 Technician
    //   obr-34 principal result interpreter - joel is populating signed by - if he has it
    //  removed author from zds perform - take from obr-32
    //  <foreach property='source.{ORCgrp(1).ZDS(k2):ClinicalStaff()}' key='k4' >
    //  <if condition='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).assigningauthority} = "Doctor Nbr"' >
    //  <true>
    //  <assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).IDNumberST}' property='tmpAuthorID' action='set' />
    //  <assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).familyname}' property='tmpAuthorLastNM' action='set' />
    //  <assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).givenname}' property='tmpAuthorFirstNM' action='set' />
    //  </true>
    //  </if>
    //  </foreach>
]]]]><![CDATA[></code>

<assign value='""' property='tmpAuthorID' action='set' />
<assign value='""' property='tmpAuthorLastNM' action='set' />
<assign value='""' property='tmpAuthorFirstNM' action='set' />
<assign value='""' property='tmpTransID' action='set' />
<assign value='""' property='tmpTransLastNM' action='set' />
<assign value='""' property='tmpTransFirstNM' action='set' />
<assign value='""' property='tmpSignID' action='set' />
<assign value='""' property='tmpSignLastNM' action='set' />
<assign value='""' property='tmpSignFirstNM' action='set' />

<foreach property='source.{ORCgrp(1).ZDS()}' key='k2' >
<if condition='source.{ORCgrp(1).ZDS(k2):ActionCode} = "Perform"' >
<true>
<foreach property='source.{ORCgrp(1).ZDS(k2):ClinicalStaff()}' key='k4' >
<if condition='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).assigningauthority} = "Doctor Nbr"' >
<true>
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).IDNumberST}' property='tmpAuthorID' action='set' />
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).familyname}' property='tmpAuthorLastNM' action='set' />
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k4).givenname}' property='tmpAuthorFirstNM' action='set' />
</true>
</if>
</foreach>
</true>
<false>
<if condition='source.{ORCgrp(1).ZDS(k2):ActionCode} = "Transcribe"' >
<true>
<foreach property='source.{ORCgrp(1).ZDS(k2):ClinicalStaff()}' key='k5' >
<if condition='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k5).assigningauthority} = "Doctor Nbr"' >
<true>
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k5).IDNumberST}' property='tmpTransID' action='set' />
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k5).familyname}' property='tmpTransLastNM' action='set' />
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k5).givenname}' property='tmpTransFirstNM' action='set' />
</true>
</if>
</foreach>
</true>
<false>
<if condition='source.{ORCgrp(1).ZDS(k2):ActionCode} = "Sign"' >
<true>
<foreach property='source.{ORCgrp(1).ZDS(k2):ClinicalStaff()}' key='k6' >
<if condition='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k6).assigningauthority} = "Doctor Nbr"' >
<true>
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k6).IDNumberST}' property='tmpSignID' action='set' />
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k6).familyname}' property='tmpSignLastNM' action='set' />
<assign value='source.{ORCgrp(1).ZDS(k2):ClinicalStaff(k6).givenname}' property='tmpSignFirstNM' action='set' />
</true>
</if>
</foreach>
</true>
</if>
</false>
</if>
</false>
</if>
</foreach>

<if condition='tmpAuthorLastNM=""' >
<true>
<assign value='source.{ORCgrp(1).OBR:Technician(1).name.familyname}' property='tmpAuthorLastNM' action='set' />
<assign value='source.{ORCgrp(1).OBR:Technician(1).name.givenname}' property='tmpAuthorFirstNM' action='set' />
</true>
</if>

<if condition='tmpAuthorLastNM=""' >
<true>
<assign value='source.{ORCgrp(1).OBR:PrincipalResultInterpreter.name.familyname}' property='tmpAuthorLastNM' action='set' />
<assign value='source.{ORCgrp(1).OBR:PrincipalResultInterpreter.name.givenname}' property='tmpAuthorFirstNM' action='set' />
</true>
</if>

<assign value=' "AuthorID="_tmpAuthorID_NLchar ' property='target.AuthorID' action='set' />
<assign value=' "AuthorLastName="_tmpAuthorLastNM_NLchar ' property='target.AuthorLastName' action='set' />
<assign value=' "AuthorFirstName="_tmpAuthorFirstNM_NLchar ' property='target.AuthorFirstName' action='set' />

<assign value=' "TranscriptionistID="_tmpTransID_NLchar ' property='target.TranscriptionistID' action='set' />
<assign value=' "TranscriptionistLastName="_tmpTransLastNM_NLchar ' property='target.TranscriptionistLastName' action='set' />
<assign value=' "TranscriptionistFirstName="_tmpTransFirstNM_NLchar ' property='target.TranscriptionistFirstName' action='set' />

<code>
<![CDATA[ 
  // $$$TRACE("Sign="_tmpSignID_" "_tmpTransID_" "_tmpAuthorID)
  //  Trans.ID send XSPRT if blank otherwise use Lookup Table T_eDOCS_TnscrptCode to send Intials
  //   -- ? Nuance Data
]]]]><![CDATA[></code>
<code>
<![CDATA[ 
  // <assign value='""' property='tmpTransID' action='set' />
  // <assign value='..Lookup("T_eDOCS_TnscrptCode",source.{ORCgrp(1).OBR:35(1).1},source.{ORCgrp(1).OBR:35(1).1})' property='tmpTransID' action='set' />
  // <if condition='$LENGTH(tmpTransID) &lt; 1  ' >
  // <true>
  // <assign value='"Trans.ID=XSPRT"_NLchar' property='target.TransID' action='set' />
  // </true>
  // <false>
  // <assign value='"Trans.ID="_tmpTransID_NLchar' property='target.TransID' action='set' />
  // </false>
  // </if>
]]]]><![CDATA[></code>

<if condition='source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent} = "" ' >
<true>
<assign value='"LastModifiedTime="_NLchar' property='target.LastModifiedTime' action='set' />
</true>
<false>
<assign value='"LastModifiedTime="_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},5,6)_"/"_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},7,8)_"/"_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},1,4)_" "_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},9,10)_":"_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},11,12)_":"_..SubString(source.{ORCgrp(1).OBR:ResultsRptStatusChngDateTime.timeofanevent},13,14)_NLchar' property='target.LastModifiedTime' action='set' />
</false>
</if>

<code>
<![CDATA[ 
	// Send in results found in OBX as Findings
	// Find signature line in NTE segment
	// rtf in OBX(1)-5.5 ends in }; insert signature line
	// rtf has ~ - removed by GC.TildeReplace
	//  if problems parsing out 5.5 check orig data for ~,^ that would cause truncation
	// <assign value='source.{ORCgrp(1).OBXgrp(1).OBX:5()}' property='target.zFindings' action='set' />
	
	//  extract each obx in its entirety, remove beginning { and ending }
	//  append signature line
	//  repeat for each obx/nte group
	//  add beginning { and ending } when done
	
	//   HIM,REGISTRATION\line MRN: 201504 \line DOB/Age/Sex: 06/06/2006   10 years   Female\line\line FIN:  20001721\line\line}
	//
	//  <assign value='"{\par Gillette Childrens Specialty Hospital\line\line Patient: "' property='holdhdg1a' action='set' />
]]]]><![CDATA[></code>

<assign value='"{\par Gillette Children"_"&apos;"_"s Specialty Healthcare\line\line Patient: "' property='holdhdg1a' action='set' />

<assign value='"\line MRN: "' property='holdhdg1b' action='set' />
<assign value='" \line DOB: "' property='holdhdg1c' action='set' />
<assign value='" \line Date of Service: "' property='holdhdg1e' action='set' />
<assign value='"\line\line FIN: "' property='holdhdg1d' action='set' />

<assign value='""' property='holderrorreason' action='set' />

<assign value='""' property='holdhdg1derr' action='set' />
<if condition='source.{ORCgrp(1).OBR:ResultStatus}="INERROR"' >
<true>
<assign value='"\line\line ** IN ERROR ** "' property='holdhdg1derr' action='set' />
<foreach property='source.{ORCgrp(1).NTE()}' key='k8' >
<if condition='source.{ORCgrp(1).NTE(k8):SourceofComment} = "RES COMMENT"' >
<true>
<if condition='holderrorreason=""' >
<true>
<assign value='"\line "_(source.{ORCgrp(1).NTE(k8):Comment})' property='holderrorreason' action='set' />
</true>
<false>
<assign value='holderrorreason_"\line "_(source.{ORCgrp(1).NTE(k8):Comment})' property='holderrorreason' action='set' />
</false>
</if>
</true>
</if>
</foreach>
<foreach property='source.{ORCgrp(1).NTEi2()}' key='k9' >
<if condition='source.{ORCgrp(1).NTEi2(k9):SourceofComment} = "RES COMMENT"' >
<true>
<if condition='holderrorreason=""' >
<true>
<assign value='"\line "_(source.{ORCgrp(1).NTEi2(k9):Comment})' property='holderrorreason' action='set' />
</true>
<false>
<assign value='holderrorreason_"\line "_(source.{ORCgrp(1).NTEi2(k9):Comment})' property='holderrorreason' action='set' />
</false>
</if>
</true>
</if>
</foreach>
</true>
</if>

<assign value='holdhdg1derr_holderrorreason' property='holdhdg1derr' action='set' />

<assign value='source.{PID:PatientIdentifierList().ID}' property='hdg1MRN' action='set' />
<assign value='source.{PID:PatientName().familylastname.familyname}' property='hdg1LastNM' action='set' />
<assign value='source.{PID:PatientName().givenname}' property='hdg1FirstNM' action='set' />

<if condition='source.{PID:DateTimeOfBirth.timeofanevent} = "" ' >
<true>
<assign value='"  /  /    "' property='hdg1DOB' action='set' />
</true>
<false>
<assign value='..SubString(source.{PID:DateTimeOfBirth.timeofanevent},5,6)_"/"_..SubString(source.{PID:DateTimeOfBirth.timeofanevent},7,8)_"/"_..SubString(source.{PID:DateTimeOfBirth.timeofanevent},1,4)' property='hdg1DOB' action='set' />
</false>
</if>

<assign value='source.{PID:18}' property='hdg1FIN' action='set' />

<assign value='holdhdg1a_hdg1LastNM_","_hdg1FirstNM_holdhdg1b_hdg1MRN_holdhdg1c_hdg1DOB_holdhdg1e_dos_"  "_holdhdg1d_hdg1FIN_holdhdg1derr_"\line\par}"' property='tmphdg' action='set' />

<assign value='""' property='target.zNTESign' action='set' />
<assign value='""' property='target.zFindings' action='set' />
<assign value='""' property='target.zFindingsComb' action='set' />

<assign value='""' property='tmprtfdoc' action='set' />
<foreach property='source.{ORCgrp(1).OBXgrp().OBX}' key='k3' >
<code>
<![CDATA[
     // extract the obx into 3 pieces delimited by '{\rtf1\' and '}|'
     //  perform actions on middle - remove ~^^RTF^^
     //  leave off last } when reconstructing obx-5.5
     //  add back delimiters when recreating obx segment
     //
     //  <assign value='$LENGTH(source.{ORCgrp(1).OBXgrp(k3).OBX:5(1).5})' property='tmprtflength' action='set' />
     //  <assign value='$EXTRACT(source.{ORCgrp(1).OBXgrp(k3).OBX:5(1).5},2,tmprtflength-1)' property='tmprtfdoc1' action='set' />
     //
     ]]]]><![CDATA[></code>
     
<assign value='""' property='holdobxseg' action='set' />
<assign value='source.{ORCgrp(1).OBXgrp(k3).OBX}' property='holdobxseg' action='set' />
<assign value='""' property='holdobxseg1' action='set' />
<assign value='""' property='holdobxseg1a' action='set' />
<assign value='""' property='holdobxseg2' action='set' />
<assign value='""' property='holdobxseg2a' action='set' />
<assign value='""' property='holdobxseg3' action='set' />

<assign value='$PIECE(holdobxseg,"{\rtf1\",1)' property='holdobxseg1' action='set' />
<assign value='$PIECE(holdobxseg,"{\rtf1\",2)' property='holdobxseg1a' action='set' />

<assign value='$PIECE(holdobxseg1a,"}|",1)' property='holdobxseg2' action='set' />
<assign value='$PIECE(holdobxseg1a,"}|",2)' property='holdobxseg3' action='set' />

<assign value='$REPLACE(holdobxseg2,"~^^RTF^^","")' property='holdobxseg2' action='set' />
<assign value='$REPLACE(holdobxseg2,"/.br/","/ ")' property='holdobxseg2' action='set' />
<assign value='("{\rtf1\"_holdobxseg2_"}")' property='holdobxseg2a' action='set' />
     
<assign value='""' property='tmprtflength' action='set' />
<assign value='""' property='tmprtfdoc1' action='set' />
<assign value='$LENGTH(holdobxseg2a)' property='tmprtflength' action='set' />
<assign value='$EXTRACT(holdobxseg2a,2,tmprtflength-1)' property='tmprtfdoc1' action='set' />

<assign value='tmprtfdoc_tmprtfdoc1' property='tmprtfdoc' action='set' />

<assign value='""' property='tmpNote' action='set' />

<code>
<![CDATA[
     // add \par in front of \line\line for left justification - 3/31/2020
     ]]]]><![CDATA[></code>
<foreach property='source.{ORCgrp(1).OBXgrp(k3).NTE()}' key='k7' >
<if condition='source.{ORCgrp(1).OBXgrp(k3).NTE(k7):SourceOfComment(1)} = "SIGN LINE"' >
<true>
<assign value='source.{ORCgrp(1).OBXgrp(k3).NTE(k7):Comment(1)}' property='tmpNote' action='set' />
<assign value='tmpNote_"\par\line\line"' property='tmpNote' action='set' />
<assign value='$REPLACE(tmpNote,"\.br\","\par ")' property='tmpNote' action='set' />
<assign value='tmpNote' property='target.zNTESign' action='set' />
<assign value='tmprtfdoc_tmpNote' property='tmprtfdoc' action='set' />
</true>
</if>
</foreach>
</foreach>

<code>
<![CDATA[ 
	// $FIND returns next character posistion following returned column
	// inserting hdg after 1st {\*\generator TX_RTF32 18.0.541.501;}
	//  <assign value='"{"_tmprtfdoc_"}"' property='target.zFindingsComb' action='set' />
	//
	//  Addendums out of Cerner are using a different font table than the original document out of Nuance Escription
	//   Original goes into symbol font and appears to be foreign language
	//   Out of Nuance - fcharset2\E\fprq2{\E\*\E\panose 05050102010706020507}Symbol;}
	//   Out of Cerner - {\f2\froman\fcharset2\fprq2 Symbol;}
	//    Change \f2\froman\fcharset2\fprq2 Symbol; TO \f2\froman\fcharset0\fprq2 Times New Roman;
	//   03/21/2017  Symbol is occuring on fonts other than f2
	//   03/21/2017 Change \froman\fcharset2\fprq2 Symbol; TO \froman\fcharset0\fprq2 Times New Roman;
	//   03/04/2020 Change all occurences of Symbol to Times New Roman
	//   03/04/2020  <assign value='$REPLACE(target.zFindingsComb,"\froman\fcharset2\fprq2 Symbol;","\froman\fcharset0\fprq2 Times New Roman;")' property='target.zFindingsComb' action='set' />
	//   03/31/2020 Always place hdg based on 1st \pard regardless of \generator
	//   03/31/2020  <assign value='$FIND(tmprtfdoc,"\generator")' property='tmpgeneratorpos' action='set' />
    //   03/31/2020  <if condition='tmpgeneratorpos=0' >
    //   03/31/2020  <true>
    //   03/31/2020  <assign value='$FIND(tmprtfdoc,"\sectd")' property='tmpgeneratorpos' action='set' />
    //   03/31/2020  <assign value='tmpgeneratorpos-6' property='tmpgeneratorposbrk' action='set' />
    //   03/31/2020  </true>
    //   03/31/2020  <false>
    //   03/31/2020  <assign value='$FIND(tmprtfdoc,"}",tmpgeneratorpos)' property='tmpgeneratorposbrk' action='set' />
    //   03/31/2020  </false>
    //   03/31/2020  </if> 
    //   03/31/2020 Add counnt of OBX segments to send email if multiple addendums - use zTroubleShooting
]]]]><![CDATA[></code>

<assign value='$LENGTH(tmprtfdoc)' property='tmprtftotallength' action='set' />

<assign value='$FIND(tmprtfdoc,"\sectd")' property='tmpsectdpos' action='set' />
<assign value='tmpsectdpos-6' property='tmpsectdposbrk' action='set' />

<assign value='$EXTRACT(tmprtfdoc,1,tmpsectdposbrk-1)' property='tmprtfpart1' action='set' />
<assign value='$EXTRACT(tmprtfdoc,tmpsectdposbrk,tmprtftotallength)' property='tmprtfpart2' action='set' />
<assign value='"{"_tmprtfpart1_tmphdg_tmprtfpart2_"}"' property='target.zFindingsComb' action='set' />

<code>
<![CDATA[ 
    // $$$TRACE("HdgPos= "_tmpsectdpos_" totallength= "_tmprtftotallength_" posbrk= "_tmpsectdposbrk)
    // on addendums change fcharset2 to fcharset0
]]]]><![CDATA[></code>

<assign value='$REPLACE(target.zFindingsComb,"Symbol;","Times New Roman;")' property='target.zFindingsComb' action='set' />

<if condition='OBXcount&gt;"1"' >
<true>
<assign value='$REPLACE(target.zFindingsComb,"\fcharset2\","\fcharset0\")' property='target.zFindingsComb' action='set' />
</true>
</if>

<assign value='$LENGTH(target.zFindingsComb)' property='tmprtfendtotallength' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Nuance2eDOCSTagRevCalj">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65469,61643.402625</TimeChanged>
<TimeCreated>61600,49848.702831</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORU_R01' targetDocType='231.Cerner:ORU_R01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
	// Last Updated: 03/04/2020 Al Johnson
	// Moved to Prod: 05/14/2019
	// Create: 
	//    Description: 
	//  Check for Symbol font and / or missing \generator so hdgs inserted incorrectly
	//  Update table so any updates automatically reprocess after any correction
	//   Version to identify which to replay
]]]]><![CDATA[></code>
<assign value='source.{PID:PatientIdentifierList().ID}' property='tempMRN' action='set' />
<assign value='source.{PID:PatientName().familylastname.familyname}_","_source.{PID:PatientName().givenname}' property='tempNAME' action='set' />
<assign value='source.{PID:18}' property='tempFIN' action='set' />

<assign value='..SubString(source.{ORCgrp(1).OBR:7},5,6)_"/"_..SubString(source.{ORCgrp(1).OBR:7},7,8)_"/"_..SubString(source.{ORCgrp(1).OBR:7},1,4)' property='tempDOS' action='set' />

<assign value='source.{ORCgrp(1).OBR:4.1}' property='tempDOCTYPE' action='set' />

<assign value='""' property='tmprtfdoc' action='set' />
<foreach property='source.{ORCgrp(1).OBXgrp().OBX}' key='k3' >
<code>
<![CDATA[
     // extract the obx into 3 pieces delimited by '{\rtf1\' and '}|'
     //  perform actions on middle - remove ~^^RTF^^
     //  leave off last } when reconstructing obx-5.5
     //  add back delimiters when recreating obx segment
     //
     //  <assign value='$LENGTH(source.{ORCgrp(1).OBXgrp(k3).OBX:5(1).5})' property='tmprtflength' action='set' />
     //  <assign value='$EXTRACT(source.{ORCgrp(1).OBXgrp(k3).OBX:5(1).5},2,tmprtflength-1)' property='tmprtfdoc1' action='set' />
     //
     ]]]]><![CDATA[></code>
     
<assign value='""' property='holdobxseg' action='set' />
<assign value='source.{ORCgrp(1).OBXgrp(k3).OBX}' property='holdobxseg' action='set' />
<assign value='""' property='holdobxseg1' action='set' />
<assign value='""' property='holdobxseg1a' action='set' />
<assign value='""' property='holdobxseg2' action='set' />
<assign value='""' property='holdobxseg2a' action='set' />
<assign value='""' property='holdobxseg3' action='set' />

<assign value='$PIECE(holdobxseg,"{\rtf1\",1)' property='holdobxseg1' action='set' />
<assign value='$PIECE(holdobxseg,"{\rtf1\",2)' property='holdobxseg1a' action='set' />

<assign value='$PIECE(holdobxseg1a,"}|",1)' property='holdobxseg2' action='set' />
<assign value='$PIECE(holdobxseg1a,"}|",2)' property='holdobxseg3' action='set' />

<assign value='$REPLACE(holdobxseg2,"~^^RTF^^","")' property='holdobxseg2' action='set' />
<assign value='$REPLACE(holdobxseg2,"/.br/","/ ")' property='holdobxseg2' action='set' />
<assign value='("{\rtf1\"_holdobxseg2_"}")' property='holdobxseg2a' action='set' />
     
<assign value='""' property='tmprtflength' action='set' />
<assign value='""' property='tmprtfdoc1' action='set' />
<assign value='$LENGTH(holdobxseg2a)' property='tmprtflength' action='set' />
<assign value='$EXTRACT(holdobxseg2a,2,tmprtflength-1)' property='tmprtfdoc1' action='set' />

<assign value='tmprtfdoc_tmprtfdoc1' property='tmprtfdoc' action='set' />

<assign value='""' property='tmpNote' action='set' />

<foreach property='source.{ORCgrp(1).OBXgrp(k3).NTE()}' key='k7' >
<if condition='source.{ORCgrp(1).OBXgrp(k3).NTE(k7):SourceOfComment(1)} = "SIGN LINE"' >
<true>
<assign value='source.{ORCgrp(1).OBXgrp(k3).NTE(k7):Comment(1)}' property='tmpNote' action='set' />
<assign value='tmpNote_"\line\line"' property='tmpNote' action='set' />
<assign value='$REPLACE(tmpNote,"\.br\","\par ")' property='tmpNote' action='set' />
<assign value='tmprtfdoc_tmpNote' property='tmprtfdoc' action='set' />
</true>
</if>
</foreach>
</foreach>

<code>
<![CDATA[ 
	// $FIND returns next character posistion following returned column
	// inserting hdg after 1st {\*\generator TX_RTF32 18.0.541.501;}
	//  <assign value='"{"_tmprtfdoc_"}"' property='target.zFindingsComb' action='set' />
	//
	//  Addendums out of Cerner are using a different font table than the original document out of Nuance Escription
	//   Original goes into symbol font and appears to be foreign language
	//   Out of Nuance - fcharset2\E\fprq2{\E\*\E\panose 05050102010706020507}Symbol;}
	//   Out of Cerner - {\f2\froman\fcharset2\fprq2 Symbol;}
	//    Change \f2\froman\fcharset2\fprq2 Symbol; TO \f2\froman\fcharset0\fprq2 Times New Roman;
	//   03/21/2017  Symbol is occuring on fonts other than f2
	//   03/21/2017 Change \froman\fcharset2\fprq2 Symbol; TO \froman\fcharset0\fprq2 Times New Roman;
	//   03/04/2020 Change all occurences of Symbol to Times New Roman
	//   03/04/2020 <assign value='$REPLACE(target.zFindingsComb,"\froman\fcharset2\fprq2 Symbol;","\froman\fcharset0\fprq2 Times New Roman;")' property='target.zFindingsComb' action='set' />
]]]]><![CDATA[></code>

<assign value='"0"' property='tmpgeneratorpos' action='set' />
<assign value='"0"' property='tmpsymbolpos' action='set' />

<assign value='"0"' property='tmpfindsymbol' action='set' />
<assign value='"0"' property='tmpfindgen' action='set' />

<assign value='$FIND(tmprtfdoc,"\generator")' property='tmpgeneratorpos' action='set' />
<if condition='tmpgeneratorpos=0' >
<true>
<assign value='$FIND(tmprtfdoc,"\sectd")' property='tmpgeneratorpos' action='set' />
<if condition='tmpgeneratorpos=0' >
<true>
<assign value='"0"' property='tmpfindgen' action='set' />
</true>
<false>
<assign value='"2"' property='tmpfindgen' action='set' />
</false>
</if>
</true>
<false>
<assign value='"1"' property='tmpfindgen' action='set' />
</false>
</if>

<assign value='$FIND(tmprtfdoc,"\froman\fcharset2\fprq2 Symbol;")' property='tmpsymbolpos' action='set' />
<if condition='tmpsymbolpos=0' >
<true>
<assign value='$FIND(tmprtfdoc,"Symbol;")' property='tmpsymbolpos' action='set' />
<if condition='tmpsymbolpos=0' >
<true>
<assign value='"0"' property='tmpfindsymbol' action='set' />
</true>
<false>
<assign value='"2"' property='tmpfindsymbol' action='set' />
</false>
</if>
</true>
<false>
<assign value='"1"' property='tmpfindsymbol' action='set' />
</false>
</if>

<assign value='""' property='tmpOBXcount' action='set'/>
<assign property='tmpOBXcount' value='(source.{ORCgrp(1).OBXgrp(*)})' action='set'/>

<assign value='tmpfindgen_"-"_tmpfindsymbol' property='target.{MSH:14}' action='set' />
<assign value='tmpOBXcount' property='target.{MSH:16}' action='set' />

<code>
<![CDATA[ 
     // $$$TRACE("obxcount= "_OBXcount)
     // $$$TRACE("symbol find= "_tmpfindsymbol_" hdgfind= "_tmpfindgen)
     // $$$TRACE("HdgPos= "_tmpgeneratorpos_" totallength= "_tmprtftotallength_" sectd= "_tmpsectdpos)
     // $$$TRACE("font2symb= "_tmpfprq2sympos_" totalsymbolcnt= "_tmptotalsymbolcnt)
]]]]><![CDATA[></code>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Nuance2eDOCSemail">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65477,39956.117269</TimeChanged>
<TimeCreated>63949,42579.646118</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORU_R01' targetDocType='231.Cerner:ORU_R01' create='new' language='objectscript' >
<code>
<![CDATA[ 
  // Last Updated 04/08/2020 Al Johnson
  // Moved to Prod 04/08/2020 Al Johnson
  // Create: 04/08/2020 Al Johnson
  // Description:
  //    Create hl7 to email when addendums
  //    There is a problem when addendums trail the original document
]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='source.{PID:PatientIdentifierList()}' property='target.{PID:PatientIdentifierList()}' action='set' />
<assign value='source.{PID:PatientName()}' property='target.{PID:PatientName()}' action='set' />
<assign value='source.{PID:PatientAccountNumber}' property='target.{PID:PatientAccountNumber}' action='set' />

<assign value='source.{ORCgrp(1).ORC:3}' property='target.{ORCgrp(1).ORC:3}' action='set' />
<assign value='source.{ORCgrp(1).ORC:9}' property='target.{ORCgrp(1).ORC:9}' action='set' />
<assign value='source.{ORCgrp(1).OBR:3}' property='target.{ORCgrp(1).OBR:3}' action='set' />
<assign value='source.{ORCgrp(1).OBR:4}' property='target.{ORCgrp(1).OBR:4}' action='set' />

<foreach property='source.{ORCgrp(1).OBXgrp().OBX}' key='k3' >
<code>
<![CDATA[
     // email signature line and partial obx
     ]]]]><![CDATA[></code>
  <assign value='source.{ORCgrp(1).OBXgrp(k3).OBX:1}' property='target.{ORCgrp(1).OBXgrp(k3).OBX:1}' action='set' />
 <assign value='source.{ORCgrp(1).OBXgrp(k3).OBX:2}' property='target.{ORCgrp(1).OBXgrp(k3).OBX:2}' action='set' />
 <assign value='source.{ORCgrp(1).OBXgrp(k3).OBX:3}' property='target.{ORCgrp(1).OBXgrp(k3).OBX:3}' action='set' />
<foreach property='source.{ORCgrp(1).OBXgrp(k3).NTE()}' key='k7' >
<assign value='source.{ORCgrp(1).OBXgrp(k3).NTE(k7)}' property='target.{ORCgrp(1).OBXgrp(k3).NTE(k7)}' action='set' />
</foreach>
</foreach>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.NuanceDAXBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>66085,43131.205919</TimeChanged>
<TimeCreated>63901,50070.329867</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="SIU from Cerner" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="SIU_S12,SIU_S13,SIU_S14,SIU_S15,SIU_S17,SIU_S26"></constraint>
<when condition="1">
<send transform="GC.Cerner2NuanceDaxSIU" target="HL7.O.NuanceDAXSiu"></send>
<return></return>
</when>
</rule>
<rule name="Merge from Cerner" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34,ADT_A35,ADT_A44"></constraint>
<when condition="1">
<send transform="GC.Cerner2NuanceDaxMRG" target="HL7.O.NuanceDAXAdt"></send>
<return></return>
</when>
</rule>
<rule name="A28,A31 no PV1" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A28,ADT_A31"></constraint>
<when condition="1">
<send transform="GC.Cerner2NuanceDaxADTA28A31" target="HL7.O.NuanceDAXAdt"></send>
<return></return>
</when>
</rule>
<rule name="ADT from Cerner" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A02,ADT_A03,ADT_A04,ADT_A05,ADT_A06,ADT_A07,ADT_A08,ADT_A09,ADT_A10,ADT_A11,ADT_A12,ADT_A13,ADT_A14,ADT_A15,ADT_A16,ADT_A17,ADT_A21,ADT_A22,ADT_A24,ADT_A25,ADT_A26,ADT_A38"></constraint>
<when condition="1">
<send transform="GC.Cerner2NuanceDaxADT" target="HL7.O.NuanceDAXAdt"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.NuanceDAXBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>66092,57397.676267</TimeChanged>
<TimeCreated>63901,50070.329867</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="A34,35,44 Missing MRG Segment" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34,ADT_A35,ADT_A44"></constraint>
<when condition="DoesNotContain(HL7.{MRG})">
<return></return>
</when>
</rule>
<rule name="no MRN person add / update" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A28,ADT_A31"></constraint>
<when condition="(HL7.{PID:PatientIdentifierList(1).ID}=&quot;&quot;)">
<return></return>
</when>
</rule>
<rule name="Block Test Patients - ADT" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A02,ADT_A03,ADT_A04,ADT_A05,ADT_A06,ADT_A07,ADT_A08,ADT_A09,ADT_A10,ADT_A11,ADT_A12,ADT_A13,ADT_A14,ADT_A15,ADT_A16,ADT_A17,ADT_A21,ADT_A22,ADT_A23,ADT_A24,ADT_A25,ADT_A26,ADT_A28,ADT_A29,ADT_A31,ADT_A34,ADT_A35,ADT_A38,ADT_A44,ADT_ADSC"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="Block Test Patients - SIU" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="SIU_S12,SIU_S13,SIU_S14,SIU_S15,SIU_S17,SIU_S26"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PIDgrp(1).PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="ADT and SIU from Cerner" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="NuanceDAX.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.NuanceEscriptionBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65365,31831.5718</TimeChanged>
<TimeCreated>63901,50070.329867</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="MDM from Dictaphone" disabled="false">
<constraint name="docCategory" value="22.Dictaphone"></constraint>
<when condition="1">
<send transform="GC.Nuance2CernerMDM" target="HL7.O.CrNuanceEscriptionMdm"></send>
<return></return>
</when>
</rule>
<rule name="SIU from Cerner" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="SIU_S12,SIU_S13,SIU_S14,SIU_S15,SIU_S17,SIU_S26"></constraint>
<when condition="1">
<send transform="GC.Cerner2NuanceSiu" target="HL7.O.NuanceEscriptionSIU"></send>
<return></return>
</when>
</rule>
<rule name="ADT from Cerner" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A31,ADT_A28,ADT_A01,ADT_A02,ADT_A03,ADT_A04,ADT_A05,ADT_A06,ADT_A07,ADT_A08,ADT_A09,ADT_A10,ADT_A11,ADT_A12,ADT_A13,ADT_A14,ADT_A15,ADT_A16,ADT_A17,ADT_A21,ADT_A22,ADT_A24,ADT_A25,ADT_A26,ADT_A44,ADT_A38,ADT_A35,ADT_A34"></constraint>
<when condition="1">
<send transform="" target="HL7.O.NuanceEscriptionADT"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.NuanceEscriptionBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65440,49757.862157</TimeChanged>
<TimeCreated>63901,50070.329867</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="A34,35,44 Missing MRG Segment" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34,ADT_A35,ADT_A44"></constraint>
<when condition="DoesNotContain(HL7.{MRG})">
<return></return>
</when>
</rule>
<rule name="no MRN person add / update" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A28,ADT_A31"></constraint>
<when condition="(HL7.{PID:PatientIdentifierList(1).ID}=&quot;&quot;)">
<return></return>
</when>
</rule>
<rule name="Block Test Patients - ADT" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A02,ADT_A03,ADT_A04,ADT_A05,ADT_A06,ADT_A07,ADT_A08,ADT_A09,ADT_A10,ADT_A11,ADT_A12,ADT_A13,ADT_A14,ADT_A15,ADT_A16,ADT_A17,ADT_A21,ADT_A22,ADT_A23,ADT_A24,ADT_A25,ADT_A26,ADT_A28,ADT_A29,ADT_A31,ADT_A34,ADT_A35,ADT_A38,ADT_A44,ADT_ADSC"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="Block Test Patients - SIU" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="SIU_S12,SIU_S13,SIU_S14,SIU_S15,SIU_S17,SIU_S26"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PIDgrp(1).PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="Block Test Patients - MDM from Nuance" disabled="false">
<constraint name="docCategory" value="22.Dictaphone"></constraint>
<constraint name="docName" value="MDM_T02,MDM_T04"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIDInternalID(1).ID})">
<return></return>
</when>
</rule>
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="Block Inpatient SIU" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="SIU_S12,SIU_S13,SIU_S14,SIU_S15,SIU_S17,SIU_S26"></constraint>
<when condition="HL7.{PIDgrp(1).PV1:PatientClass}=&quot;I&quot;">
<return></return>
</when>
</rule>
<rule name="ADT-SIU from Cerner" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="NuanceEscription.P.bo"></send>
<return></return>
</when>
</rule>
<rule name="MDM from Dictaphone" disabled="false">
<constraint name="docCategory" value="22.Dictaphone"></constraint>
<when condition="1">
<send transform="" target="NuanceEscription.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.NuanceEscriptionBsoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64362,55087.421957</TimeChanged>
<TimeCreated>63901,50070.329867</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="source" value="HL7.S.CrNuanceEscriptionAdtSiu"></constraint>
<when condition="(HL7.{PID:PatientIdentifierList(1).ID} In &quot;507424,515173,600000,600001&quot;)">
<return></return>
</when>
</rule>
<rule name="MDM from Dictaphone" disabled="false">
<constraint name="source" value="HL7.S.NuanceEscriptionMdm"></constraint>
<when condition="1">
<send transform="GC.Nuance2CernerMDM" target="HL7.O.CrNuanceEscriptionMdm"></send>
<return></return>
</when>
</rule>
<rule name="SIU from Cerner" disabled="false">
<constraint name="source" value="HL7.S.CrNuanceEscriptionAdtSiu"></constraint>
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="SIU_S12,SIU_S13,SIU_S14,SIU_S15,SIU_S17,SIU_S26"></constraint>
<when condition="1">
<send transform="" target="HL7.O.NuanceEscriptionSIU"></send>
<return></return>
</when>
</rule>
<rule name="ADT from Cerner" disabled="false">
<constraint name="source" value="HL7.S.CrNuanceEscriptionAdtSiu"></constraint>
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A31,ADT_A28,ADT_A01,ADT_A02,ADT_A03,ADT_A04,ADT_A05,ADT_A06,ADT_A07,ADT_A08,ADT_A09,ADT_A10,ADT_A11,ADT_A12,ADT_A13,ADT_A14,ADT_A15,ADT_A16,ADT_A17,ADT_A21,ADT_A22,ADT_A24,ADT_A25,ADT_A26,ADT_A44,ADT_A38,ADT_A35,ADT_A34"></constraint>
<when condition="1">
<send transform="" target="HL7.O.NuanceEscriptionADT"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.NuancePDSBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65665,35977.565114</TimeChanged>
<TimeCreated>63901,50070.329867</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="do not process yet" disabled="true">
<when condition="1">
<return></return>
</when>
</rule>
<rule name="MDM from Cerner" disabled="false">
<constraint name="docCategory" value="231.Cernerbase"></constraint>
<constraint name="docName" value="MFN_M02"></constraint>
<when condition="1">
<send transform="" target="HL7.O.NuancePDSMfn"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.NuancePDSBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65636,56478.120513</TimeChanged>
<TimeCreated>63901,50070.329867</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="process docs PRA with DocID and NPI" disabled="false">
<constraint name="docCategory" value="231.Cernerbase"></constraint>
<constraint name="docName" value="MFN_M02"></constraint>
<when condition="(Document.{MFI:1.1} = (&quot;PRA&quot;))&amp;&amp;(Document.{MFEgrp(1).STF:1.1} != (&quot;&quot;))&amp;&amp;(Document.{MFEgrp(1).STF:2.1} != (&quot;&quot;))">
<send transform="" target="NuancePDS.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.OberdBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65365,32977.504969</TimeChanged>
<TimeCreated>63901,50070.329867</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Check AIP docs and set MSH-11" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="SIU_S12,SIU_S13,SIU_S14,SIU_S15,SIU_S17,SIU_S26"></constraint>
<when condition="1">
<send transform="GC.Cerner2OberdSIUcheckAIP" target="Oberd.P.boSiu"></send>
<return></return>
</when>
</rule>
<rule name="person merge" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34"></constraint>
<when condition="1">
<send transform="GC.Cerner2OberdMRG" target="HL7.O.OberdAdtSiu"></send>
<return></return>
</when>
</rule>
<rule name="ADT from Cerner" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A31,ADT_A28,ADT_A01,ADT_A04,ADT_A05,ADT_A08"></constraint>
<when condition="1">
<send transform="GC.Cerner2OberdADT" target="HL7.O.OberdAdtSiu"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.OberdBoSiuRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65365,32947.987252</TimeChanged>
<TimeCreated>63901,50070.329867</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="valid doc and appt type" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="SIU_S12,SIU_S13,SIU_S14,SIU_S15,SIU_S17,SIU_S26"></constraint>
<when condition="(Document.{MSH:14}=&quot;YES&quot;)">
<send transform="GC.Cerner2OberdSIU" target="HL7.O.OberdAdtSiu"></send>
<return></return>
</when>
</rule>
<rule name="S13 - not valid doc- send cancel" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="SIU_S13"></constraint>
<when condition="1">
<send transform="GC.Cerner2OberdSIUResched" target="HL7.O.OberdAdtSiu"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.OberdBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>66855,50043.221336</TimeChanged>
<TimeCreated>63901,50070.329867</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Ignore S14 when AIG 14 is Canceled" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="SIU_S14"></constraint>
<when condition="HL7.{RGSgrp(1).AIPgrp(1).AIP:FillerStatusCode.identifier}=&quot;CANCELED&quot;">
<send transform="" target="File.O.ArchiveStopped"></send>
<return></return>
</when>
</rule>
<rule name="A34,35,44 Missing MRG Segment" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34,ADT_A35,ADT_A44"></constraint>
<when condition="DoesNotContain(HL7.{MRG})">
<return></return>
</when>
</rule>
<rule name="no MRN person add / update" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A28,ADT_A31"></constraint>
<when condition="(HL7.{PID:PatientIdentifierList(1).ID}=&quot;&quot;)">
<return></return>
</when>
</rule>
<rule name="Block Test Patients - ADT" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A02,ADT_A03,ADT_A04,ADT_A05,ADT_A06,ADT_A07,ADT_A08,ADT_A09,ADT_A10,ADT_A11,ADT_A12,ADT_A13,ADT_A14,ADT_A15,ADT_A16,ADT_A17,ADT_A21,ADT_A22,ADT_A23,ADT_A24,ADT_A25,ADT_A26,ADT_A28,ADT_A29,ADT_A31,ADT_A34,ADT_A35,ADT_A38,ADT_A44,ADT_ADSC"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="Block Test Patients - SIU" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="SIU_S12,SIU_S13,SIU_S14,SIU_S15,SIU_S17,SIU_S26"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PIDgrp(1).PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="ADT and SIU from Cerner" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="Oberd.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.PS360RadiologyBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64765,60165.153392</TimeChanged>
<TimeCreated>64112,34341.843212</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="1">
<send transform="GC.PS360toCernerORU" target="HL7.O.CrPs360RadiologyOru"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="HL7.O.Ps360RadiologyOrmAdt"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.PS360RadiologyBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>67012,42215.702551</TimeChanged>
<TimeCreated>64112,34341.843212</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34,ADT_A35,ADT_A44"></constraint>
<when condition="DoesNotContain(HL7.{MRG})">
<return></return>
</when>
</rule>
<rule name="Block Test Patients - ADT, ORM and ORU" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="Archive" disabled="false">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="Block Prelim Results RFC SD-81257" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="(HL7.{ORCgrp(1).OBR:25}=&quot;P&quot;)">
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="PS360Radiology.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.PS360RadiologyBsoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64588,42333.47327</TimeChanged>
<TimeCreated>64112,34341.843212</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="" disabled="false">
<constraint name="source" value="HL7.S.CrPs360RadiologyOrmAdt"></constraint>
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34"></constraint>
<when condition="DoesNotContain(HL7.{MRG})">
<return></return>
</when>
</rule>
<rule name="" disabled="true">
<constraint name="source" value="HL7.S.CrPs360RadiologyOrmAdt"></constraint>
<when condition="HL7.{PID:PatientIdentifierList(1).ID} In &quot;507424,515173,600000,600001&quot;">
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="source" value="HL7.S.Ps360RadiologyOru"></constraint>
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="(HL7.{PID:PatientIdentifierList(1).ID} In &quot;507424,515173,600000,600001&quot;)&amp;&amp;(HL7.{ORCgrp(1).OBR:25}=&quot;&quot;)">
<send transform="" target="File.O.ArchiveStopped"></send>
<return></return>
</when>
</rule>
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="source" value="HL7.S.CrPs360RadiologyOrmAdt"></constraint>
<when condition="1">
<send transform="" target="HL7.O.Ps360RadiologyOrmAdt"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="source" value="HL7.S.Ps360RadiologyOru"></constraint>
<when condition="1">
<send transform="GC.PS360toCernerORU" target="HL7.O.CrPs360RadiologyOru"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="source" value="zzResend.S.AljOru"></constraint>
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="1">
<send transform="GC.Ps3602CernerORUfix" target="HL7.O.CrPs360RadiologyOru"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.PS360toCernerORU">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64581,57117.068894</TimeChanged>
<TimeCreated>61600,49848.702831</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORU_R01' targetDocType='231.Cerner:ORU_R01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
	// Last Updated: Al Johnson 10/25/2017 
	// Last Updated in Prod: Al Johnson 10/25/2017 
	// Create By: Al Johnson 10/25/2017
	// *** Description:
	// Critical Results out of Cerner to Pacs are splitting the report into two fields
	//  PS360 result sending /F/ Cerner is translating to "|", change it to space
]]]]><![CDATA[></code>

<assign value='""' property='tmpReport' action='set' />
<foreach property='source.{ORCgrp(1).OBXgrp()}' key='k1' >
<assign value='$REPLACE(source.{ORCgrp(1).OBXgrp(k1).OBX:5},"\F\"," ")' property='target.{ORCgrp(1).OBXgrp(k1).OBX:5}' action='set' />
</foreach>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.PacsBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64918,52601.041807</TimeChanged>
<TimeCreated>63901,47936.707356</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34"></constraint>
<when condition="1">
<send transform="GC.Cerner2PacsA34toA40" target="HL7.O.PacsAdtOrmOru"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A02,ADT_A03,ADT_A04,ADT_A05,ADT_A06,ADT_A07,ADT_A08,ADT_A09,ADT_A10,ADT_A11,ADT_A12,ADT_A13,ADT_A14,ADT_A15,ADT_A16,ADT_A17,ADT_A21,ADT_A22,ADT_A23,ADT_A24,ADT_A25,ADT_A26,ADT_A28,ADT_A29,ADT_A31,ADT_A34,ADT_A35,ADT_A38,ADT_A44,ADT_ADSC"></constraint>
<when condition="1">
<send transform="GC.Cerner2PacsADT" target="HL7.O.PacsAdtOrmOru"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="1">
<send transform="GC.Cerner2PacsORM" target="HL7.O.PacsAdtOrmOru"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="1">
<send transform="GC.Cerner2PacsORU" target="HL7.O.PacsAdtOrmOru"></send>
<return></return>
</when>
</rule>
<rule name="ORU with URL" disabled="false">
<constraint name="docCategory" value="231.Carestream"></constraint>
<when condition="1">
<send transform="" target="HL7.O.CrPacsOru"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.PacsBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>67012,42226.384495</TimeChanged>
<TimeCreated>63901,47936.707356</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Block Test Patients - ADT, ORM and ORU" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="Remove Merge Missing MRG Segment" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34,ADT_A35,ADT_A44"></constraint>
<when condition="DoesNotContain(HL7.{MRG})">
<return></return>
</when>
</rule>
<rule name="Merge MRN to SameMRN" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34"></constraint>
<when condition="HL7.{PID:3(1).1}=HL7.{MRG:1(1).1}">
<send transform="" target="File.O.ArchiveStopped"></send>
<return></return>
</when>
</rule>
<rule name="Pacs only wants A34 (mrn) Not A35 (fin), A44 (mrn)" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A35,ADT_A44"></constraint>
<when condition="1">
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="Pacs.P.bo"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Carestream"></constraint>
<when condition="1">
<send transform="" target="Pacs.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.PacsBsoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64448,29619.950076</TimeChanged>
<TimeCreated>63901,47936.707356</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="" disabled="false">
<constraint name="source" value="HL7.S.CrPacsAdtOrmOru"></constraint>
<when condition="(HL7.{PID:PatientIdentifierList(1).ID} In &quot;507424,515173,600001&quot;)">
<return></return>
</when>
</rule>
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="Remove Merge Missing MRG Segment" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34,ADT_A35,ADT_A44"></constraint>
<when condition="DoesNotContain(HL7.{MRG})">
<return></return>
</when>
</rule>
<rule name="Merge MRN to SameMRN" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34"></constraint>
<when condition="HL7.{PID:3(1).1}=HL7.{MRG:1(1).1}">
<send transform="" target="File.O.ArchiveStopped"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34"></constraint>
<when condition="1">
<send transform="GC.Cerner2PacsA34toA40" target="HL7.O.PacsAdtOrmOru"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="source" value="HL7.S.CrPacsAdtOrmOru"></constraint>
<when condition="1">
<send transform="" target="HL7.O.PacsAdtOrmOru"></send>
</when>
</rule>
<rule name="ORU with URL" disabled="false">
<constraint name="source" value="HL7.S.PacsOru"></constraint>
<when condition="1">
<send transform="" target="HL7.O.CrPacsOru"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.PharmacyKeeperBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>66261,45916.583507</TimeChanged>
<TimeCreated>63901,50070.329867</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="RDS from Cerner" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="RDS_O01"></constraint>
<when condition="1">
<send transform="" target="HL7.O.PharmacyKeeperRds"></send>
<return></return>
</when>
</rule>
<rule name="RDE from Cerner" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="RDE_O01"></constraint>
<when condition="1">
<send transform="" target="HL7.O.PharmacyKeeperRds"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.PharmacyKeeperBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>66261,46123.690098</TimeChanged>
<TimeCreated>63901,50070.329867</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="RDS " disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="RDS_O01"></constraint>
<when condition="1">
<send transform="" target="PharmacyKeeper.P.bo"></send>
<return></return>
</when>
</rule>
<rule name="RDE" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="RDE_O01"></constraint>
<when condition="1">
<send transform="" target="PharmacyKeeper.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.PowershareBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64877,49143.392938</TimeChanged>
<TimeCreated>64112,34341.843212</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="CERT.CERT">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="SPR and PS360 results to Powershare" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="HL7.{ORCgrp(1).OBR:25} In &quot;A,C,F&quot;">
<send transform="" target="HL7.O.PowershareOru"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.PowershareBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65412,45346.246112</TimeChanged>
<TimeCreated>64112,34341.843212</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="CERT.CERT">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="Block Test Patients - ORU" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="Powershare.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.Ps3602CernerORUfix">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64488,58339.864384</TimeChanged>
<TimeCreated>61600,49848.702831</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORU_R01' targetDocType='231.Cerner:ORU_R01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
	// Last Updated: Al Johnson 07/24/2017 
	// Last Updated in Prod: Al Johnson 07/24/2017 
	// Create By: Al Johnson 07/24/2017
	// *** Description:
	// PS360 Operative Reports were coming out of Cerner unsigned
	//  Configuration was added to Cerner, messages from go live to present needed to be replayed
	//   as corrections.  2/12 - 7/16 (7/17 - 7/19 manually fixed and replayed)
	//  Change OBR-25 ResultStatus to 'C' and append initials to MSH-10 MessageControlID 	 
]]]]><![CDATA[></code>

<assign value='source.{MSH:MessageControlID}' property='holdmsh10' action='set' />
<assign value='holdmsh10_"ALJ1"' property='target.{MSH:MessageControlID}' action='set' />
<assign value='"C"' property='target.{ORCgrp(1).OBR:25}' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.PyxisBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64918,60878.487429</TimeChanged>
<TimeCreated>63897,52083.466132</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="RDE_O01"></constraint>
<when condition="1">
<send transform="GC.Cerner2PyxisRDE" target="HL7.O.PyxisAdtRde"></send>
<return></return>
</when>
</rule>
<rule name="Merge A35 &amp; send A03 for dead FIN" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A35"></constraint>
<when condition="1">
<send transform="GC.Cerner2PyxisMerge" target="HL7.O.PyxisAdtRde"></send>
<send transform="GC.Cerner2PyxisMrg2ADT03" target="HL7.O.PyxisAdtRde"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A02,ADT_A03,ADT_A04,ADT_A05,ADT_A06,ADT_A07,ADT_A08,ADT_A09,ADT_A10,ADT_A11,ADT_A12,ADT_A13,ADT_A14,ADT_A38"></constraint>
<when condition="1">
<send transform="GC.Cerner2PyxisADT" target="HL7.O.PyxisAdtRde"></send>
<return></return>
</when>
</rule>
<rule name="Filtering out item update MFN" disabled="false">
<constraint name="docCategory" value="231.CernerPyxis"></constraint>
<constraint name="docName" value="MFN"></constraint>
<when condition="(Document.{MFEgrp(1).MFE:1}=&quot;MUP&quot;)">
<send transform="" target="File.O.ArchiveStopped"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.CernerPyxis"></constraint>
<constraint name="docName" value="MFN"></constraint>
<when condition="1">
<send transform="" target="HL7.O.PyxisAdtRde"></send>
<return></return>
</when>
</rule>
<rule name="ZPM Unload going to Cerner from Pyxis" disabled="true">
<constraint name="docCategory" value="23.Pyxis"></constraint>
<constraint name="docName" value="ZPM"></constraint>
<when condition="(HL7.{MSH.MessageType}=&quot;ZPM&quot;)&amp;&amp;(HL7.{ZPM.PocketCode}=&quot;U&quot;)">
<send transform="GC.PyxisZPMUnload2Cerner" target="HL7.O.CrPyxisDftZpm"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="23.Pyxis"></constraint>
<when condition="1">
<send transform="" target="HL7.O.CrPyxisDftZpm"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.PyxisBoRule1">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64918,62933.943038</TimeChanged>
<TimeCreated>63897,52083.466132</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="RDE_O01"></constraint>
<when condition="1">
<send transform="GC.Cerner2PyxisRDE" target="HL7.O.PyxisAdtRde"></send>
<return></return>
</when>
</rule>
<rule name="Merge A35 &amp; send A03 for dead FIN" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A35"></constraint>
<when condition="1">
<send transform="GC.Cerner2PyxisMerge" target="HL7.O.PyxisAdtRde"></send>
<send transform="GC.Cerner2PyxisMrg2ADT03" target="HL7.O.PyxisAdtRde"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A02,ADT_A03,ADT_A04,ADT_A05,ADT_A06,ADT_A07,ADT_A08,ADT_A09,ADT_A10,ADT_A11,ADT_A12,ADT_A13,ADT_A14,ADT_A38"></constraint>
<when condition="1">
<send transform="GC.Cerner2PyxisADT" target="HL7.O.PyxisAdtRde"></send>
<return></return>
</when>
</rule>
<rule name="Filtering out item update MFN" disabled="false">
<constraint name="docCategory" value="231.CernerPyxis"></constraint>
<constraint name="docName" value="MFN"></constraint>
<when condition="(Document.{MFEgrp(1).MFE:1}=&quot;MUP&quot;)">
<send transform="" target="File.O.ArchiveStopped"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.CernerPyxis"></constraint>
<constraint name="docName" value="MFN"></constraint>
<when condition="1">
<send transform="" target="HL7.O.PyxisAdtRde"></send>
<return></return>
</when>
</rule>
<rule name="ZPM Unload going to Cerner from Pyxis" disabled="true">
<constraint name="docCategory" value="23.Pyxis"></constraint>
<constraint name="docName" value="ZPM"></constraint>
<when condition="(HL7.{MSH.MessageType}=&quot;ZPM&quot;)&amp;&amp;(HL7.{ZPM.PocketCode}=&quot;U&quot;)">
<send transform="GC.PyxisZPMUnload2Cerner" target="HL7.O.CrPyxisDftZpm"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="23.Pyxis"></constraint>
<when condition="1">
<send transform="" target="HL7.O.CrPyxisDftZpm"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.PyxisBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>67022,35176.529777</TimeChanged>
<TimeCreated>63897,52083.466132</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Block Test Patients - ADT and RDE" disabled="true">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="Block Test Patients - DFT" disabled="false">
<constraint name="docCategory" value="23.Pyxis"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIDInternalID(1).ID})">
<return></return>
</when>
</rule>
<rule name="Ignore messages with Missing PID segment. " disabled="false">
<constraint name="docCategory" value="23.Pyxis"></constraint>
<when condition="HL7.{PID:PatientIDInternalID(1).ID}=&quot;&quot;">
<send transform="" target="File.O.ArchiveStopped"></send>
<return></return>
</when>
</rule>
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="From HL7..S.CrPyxisAdtRde" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="Pyxis.P.bo"></send>
<return></return>
</when>
</rule>
<rule name="From HL7.S.CrPyxisMfn" disabled="false">
<constraint name="docCategory" value="231.CernerPyxis"></constraint>
<when condition="1">
<send transform="" target="Pyxis.P.bo"></send>
<return></return>
</when>
</rule>
<rule name="From HL7.S.PyxisDftZpm" disabled="false">
<constraint name="docCategory" value="23.Pyxis"></constraint>
<when condition="1">
<send transform="" target="Pyxis.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.PyxisBsoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64554,60841.206435</TimeChanged>
<TimeCreated>63897,52083.466132</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Blocking test patient msgs" disabled="false">
<constraint name="source" value="HL7.S.CrPyxisAdtRde"></constraint>
<when condition="(HL7.{PID:PatientIdentifierList(1).ID} In &quot;507424,515173,600000,600001&quot;)">
<return></return>
</when>
</rule>
<rule name="Al - Temp" disabled="true">
<constraint name="source" value="HL7.S.CrPyxisAdtRde"></constraint>
<constraint name="docCategory" value="231.CernerPyxis"></constraint>
<constraint name="docName" value="ADT_A03"></constraint>
<when condition="1">
<return></return>
</when>
</rule>
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="source" value="HL7.S.CrPyxisAdtRde"></constraint>
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="RDE_O01"></constraint>
<when condition="1">
<send transform="GC.Cerner2PyxisRDE" target="HL7.O.PyxisAdtRde"></send>
<return></return>
</when>
</rule>
<rule name="Merge A35 &amp; send A03 for dead FIN" disabled="false">
<constraint name="source" value="HL7.S.CrPyxisAdtRde"></constraint>
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A35"></constraint>
<when condition="1">
<send transform="GC.Cerner2PyxisMerge" target="HL7.O.PyxisAdtRde"></send>
<send transform="GC.Cerner2PyxisMrg2ADT03" target="HL7.O.PyxisAdtRde"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="source" value="HL7.S.CrPyxisAdtRde"></constraint>
<when condition="1">
<send transform="" target="HL7.O.PyxisAdtRde"></send>
<return></return>
</when>
</rule>
<rule name="Filtering out item update MFN" disabled="false">
<constraint name="source" value="HL7.S.CrPyxisMfn"></constraint>
<when condition="(Document.{MFEgrp(1).MFE:1}=&quot;MUP&quot;)">
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="source" value="HL7.S.CrPyxisMfn"></constraint>
<when condition="1">
<send transform="" target="HL7.O.PyxisAdtRde"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="source" value="HL7.S.PyxisDftZpm"></constraint>
<when condition="1">
<send transform="" target="HL7.O.CrPyxisDftZpm"></send>
<return></return>
</when>
</rule>
<rule name="ZPM Unload going to Cerner from Pyxis" disabled="true">
<constraint name="source" value="HL7.S.PyxisDftZpm"></constraint>
<when condition="(HL7.{MSH.MessageType}=&quot;ZPM&quot;)&amp;&amp;(HL7.{ZPM.PocketCode}=&quot;U&quot;)">
<send transform="GC.PyxisZPMUnload2Cerner" target="HL7.O.CrPyxisDftZpm"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.PyxisZPMUnload2Cerner">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64483,39897.465196</TimeChanged>
<TimeCreated>64483,39836.438145</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='23.Pyxis:ZPM' targetDocType='23.Pyxis:ZPM' create='new' language='objectscript' >
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='source.{ZPM}' property='target.{ZPM}' action='set' />
<assign value='"0"' property='target.{ZPM:ZPM16setid}' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.QuantimBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64849,43621.387528</TimeChanged>
<TimeCreated>63949,40754.331744</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="blocking test patient msgs" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="(HL7.{PID:PatientIdentifierList(1).ID} In &quot;507424,515173,600000,600001,613174&quot;)">
<return></return>
</when>
</rule>
<rule name="Adt" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A03,ADT_A04,ADT_A06,ADT_A07,ADT_A08,ADT_A11,ADT_A13,ADT_A28,ADT_A31"></constraint>
<when condition="1">
<send transform="GC.CernerADT2QuantimADT" target="HL7.O.QuantimADT"></send>
<return></return>
</when>
</rule>
<rule name="ADTMerge" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34"></constraint>
<when condition="1">
<send transform="GC.CernerADTMrg2QuantimADTMrg" target="HL7.O.QuantimADT"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.QuantimBsoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64581,31334.120245</TimeChanged>
<TimeCreated>63949,40754.331744</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="blocking test patient msgs" disabled="false">
<constraint name="source" value="Bs.P.Cerner"></constraint>
<when condition="(HL7.{PID:PatientIdentifierList(1).ID} In &quot;507424,515173,600000,600001&quot;)">
<return></return>
</when>
</rule>
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="Adt" disabled="false">
<constraint name="source" value="Bs.P.Cerner"></constraint>
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A03,ADT_A04,ADT_A06,ADT_A07,ADT_A08,ADT_A11,ADT_A13,ADT_A28,ADT_A31"></constraint>
<when condition="1">
<send transform="GC.CernerADT2QuantimADT" target="HL7.O.QuantimADT"></send>
<return></return>
</when>
</rule>
<rule name="ADTMerge" disabled="false">
<constraint name="source" value="Bs.P.Cerner"></constraint>
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34"></constraint>
<when condition="1">
<send transform="GC.CernerADTMrg2QuantimADTMrg" target="HL7.O.QuantimADT"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.RLSolutionsBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65057,38030.647638</TimeChanged>
<TimeCreated>64112,34341.843212</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="CERT.CERT">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Merges A34,A35,A44" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34,ADT_A35,ADT_A44"></constraint>
<when condition="1">
<send transform="GC.Cerner2RLSolutionsMrg" target="HL7.O.RLSolutionsAdt"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A05"></constraint>
<when condition="1">
<return></return>
</when>
</rule>
<rule name="ADT to RLSolutions" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="GC.Cerner2RLSolutionsADT" target="HL7.O.RLSolutionsAdt"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.RLSolutionsBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65440,50111.361548</TimeChanged>
<TimeCreated>64112,34341.843212</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="CERT.CERT">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Block Test Patients - ADT" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="A34, A35,A44 Missing MRG Segment" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34,ADT_A35,ADT_A44"></constraint>
<when condition="DoesNotContain(HL7.{MRG})">
<return></return>
</when>
</rule>
<rule name="no MRN person add / update" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A28,ADT_A31"></constraint>
<when condition="(HL7.{PID:PatientIdentifierList(1).ID}=&quot;&quot;)">
<return></return>
</when>
</rule>
<rule name="Archive">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="RLSolutions.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.RegLab2CernerBkrORM">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65134,59764.438422</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='251.Regions:ORM_O01' targetDocType='251.Regions:ORM_O01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Update: 04/19/2019 Al Johnson
	//  Last Moved to Prod:  05/01/2019 Al Johnson
    //  Created 01/08/2019 Al Johnson
    //
    //  Check for Parent (ordered item) in OBR-50
    //  Panels are resulted on components
    //  Change OBR:4.1 to OBR:50.1 if valued and differnet
    //  If changing OBR:4.1 and status, add NTE segment
    //
    //  do not change obr-25 - send thru value from regions - 3/5/2019
    //  remove NTE segment, build ORU for panel off ORU for components - 3/11/2019
    //
	//  read Table = T_RegionsLab_OrderedConversion -if on table update OBR-4.2 with original value 4/19/2019
]]]]><![CDATA[></code>

<foreach property='target.{ORCgrp()}' key='k1' >
<if condition='target.{ORCgrp(k1).OBRuniongrp.OBRunion.OBR:50.1}=""' >
<false>
<if condition='target.{ORCgrp(k1).OBRuniongrp.OBRunion.OBR:4.1}= target.{ORCgrp(k1).OBRuniongrp.OBRunion.OBR:50.1}' >
<false>
<assign value='target.{ORCgrp(k1).OBRuniongrp.OBRunion.OBR:50.1}' property='target.{ORCgrp(k1).OBRuniongrp.OBRunion.OBR:4.1}' action='set' />
<assign value='""' property='target.{ORCgrp(k1).OBRuniongrp.OBRunion.OBR:3}' action='set' />
</false>
</if>
</false>
</if>
</foreach>

<foreach property='target.{ORCgrp()}' key='k4' >
<assign value='target.{ORCgrp(k4).OBRuniongrp.OBRunion.OBR:2.1}' property='wTableKeyOrdered' action='set' />
<assign value='""' property='wtableresultordered' action='set' />
<assign value='..Lookup("T_RegionsLab_OrderedConversion",wTableKeyOrdered)' property='wtableresultordered' action='set' />
<if condition='wtableresultordered=""' >
<true>
<code>
<![CDATA[ 
    // no entry found - so send to Cerner as received
]]]]><![CDATA[></code>
</true>
<false>
<code>
<![CDATA[ 
    // table entry found - change ordered in message
]]]]><![CDATA[></code>
<assign value='wtableresultordered' property='target.{ORCgrp(k4).OBRuniongrp.OBRunion.OBR:4.1}' action='set' />
</false>
</if>
</foreach>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.RegLab2CernerBkrORMLIOna">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65904,51290.37787</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORM_O01' targetDocType='231.Cerner:ORM_O01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Update: 03/17/2021 Al Johnson
	//  Last Moved to Prod:  06/29/2021 Al Johnson
    //  Created 03/17/2021 Al Johnson
    //
    //  ORC-1 = NA (Number Assigned - Lab Initiated Order)
    //  Regions sends two status messages - collected and inprocess
    //  On LIO they are changing the first status to SN, then the second is flowing out without Gillette order number
    //  Table data on SN so Cerner generated NA can update with Cerner order number
    //  Trap and hold second SC until it can read table and update inbound SC with Gillette number.
    //  Do this via rules and send to separate process
    //
    //  Update message with Regions Accession, OBR-20 to OBR-3
    //  Update OBR-20 with held Epic Order number
    //  Update table with Gillette Order number
    //
	//  Table = T_RegionsLab_LIO - key is Regions accession OBR-3.1 pipe delimiter and OBR-4.1 ordered
	//  RFC SD-85921
]]]]><![CDATA[></code>
<assign value='source.{ORCgrp(1).OBRgrp.OBR:20}' property='target.{ORCgrp(1).OBRgrp.OBR:3}' action='set' />
<assign value='source.{ORCgrp(1).OBRgrp.OBR:20}' property='holdobr20in' action='set' />
<assign value='source.{ORCgrp(1).OBRgrp.OBR:4.2}' property='holdobr4' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBRgrp.OBR:20}' action='set' />

<assign value='holdobr20in_"|"_holdobr4' property='holdobrtblkey' action='set' />

<assign value='source.{ORCgrp(1).OBRgrp.OBR:2}' property='holdobrgillnbr' action='set' />

<assign value='""' property='wtableresult' action='set' />
<assign value='""' property='wtabledata' action='set' />
<assign value='""' property='temptblbkrorder' action='set' />
<assign value='..Lookup("T_RegionsLab_LIO",holdobrtblkey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<code>
<![CDATA[ 
    // no entry found - so leave
	]]]]><![CDATA[></code>
</true>
<false>
<assign value='$PIECE(wtableresult,"|",2)' property='target.{ORCgrp(1).OBRgrp.OBR:20}' action='set' />
<assign value='$PIECE(wtableresult,"|",1)' property='tfield1' action='set' />
<assign value='$PIECE(wtableresult,"|",2)' property='tfield2' action='set' />
<code>
<![CDATA[ 
    // table entry found get tabled data, update gillette nbr
        set wTableData=(tfield1_"|"_tfield2_"|"_holdobrgillnbr) 
        set wTableName="T_RegionsLab_LIO"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,holdobrtblkey,wTableData)
]]]]><![CDATA[></code>
</false>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.RegLab2CernerBkrORMLIOsc">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65904,51640.60166</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='251.Regions:ORM_O01' targetDocType='251.Regions:ORM_O01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Update: 03/18/2021 Al Johnson
	//  Last Moved to Prod:  06/29/2021 Al Johnson
    //  Created 03/18/2021 Al Johnson
    //
    //  This dtl is to cover the SC inprocess status message missing the Gillette order number
    //  The SN, NA process should create the table entry, but Regions is sending this with the SN message
    //
    //  Read table, if updated entry with Gillette order does not exist, wait and read again
    //  Limit number of waits so system does not hang
    //  If no table entry after limit, send as received
    //
	//  Table = T_RegionsLab_LIO - key is Regions accession OBR-3.1 pipe delimiter and OBR-4.1 ordered
	//  RFC SD-85921
]]]]><![CDATA[></code>

<assign value='target.{ORCgrp(1).OBRuniongrp.OBRunion.OBR:2.1}' property='holdobr2' action='set' />
<assign value='target.{ORCgrp(1).OBRuniongrp.OBRunion.OBR:3.1}' property='holdobr3' action='set' />
<assign value='target.{ORCgrp(1).OBRuniongrp.OBRunion.OBR:4.1}' property='holdobr4' action='set' />
<assign value='target.{ORCgrp(1).OBRuniongrp.OBRunion.OBR:20}' property='holdobr20' action='set' />
<assign value='holdobr3_"|"_holdobr4' property='holdobrtblkey' action='set' />

<code>
<![CDATA[ 
    // <assign value='$ZDATETIME($NOW(),8,1,0)' property='tmpdatetime' action='set' />
    // $$$TRACE("Wait1 "_tmpdatetime)
    // collected / sn and inprocess sent together - initial wait 10 sec for na update
    
    Hang 10
    
]]]]><![CDATA[></code>

<code>
<![CDATA[ 
    // <assign value='$ZDATETIME($NOW(),8,1,0)' property='tmpdatetime' action='set' />
    // $$$TRACE("EndWait1 "_tmpdatetime)
]]]]><![CDATA[></code>

<assign value='""' property='tGilletteOrder' action='set' />

<assign value='""' property='wtableresult' action='set' />
<assign value='""' property='wtabledata' action='set' />
<assign value='..Lookup("T_RegionsLab_LIO",holdobrtblkey)' property='wtableresult' action='set' />

<if condition='wtableresult=""' >
<true>
<code>
<![CDATA[ 
    // $$$TRACE("No table entry")
    // no entry found - SN never received - send thru as is
	]]]]><![CDATA[></code>
<assign value='""' property='wtableresult' action='set' />
</true>
<false>
<code>
<![CDATA[ 
    // $$$TRACE("Table entry found")
    // table entry found - check for Gillette order, if not updated wait and retry (updated by NA)    
]]]]><![CDATA[></code>
<assign value='$PIECE(wtableresult,"|",3)' property='tGilletteOrder' action='set' />
<if condition='tGilletteOrder=""' >
<true>
<code>
<![CDATA[ 
    // <assign value='$ZDATETIME($NOW(),8,1,0)' property='tmpdatetime' action='set' />
    // $$$TRACE("Wait2 "_tmpdatetime)
    // wait an additional 10 seconds - reread
   Hang 10
]]]]><![CDATA[></code>
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_RegionsLab_LIO",holdobrtblkey)' property='wtableresult' action='set' />
</true>
</if>
</false>
</if>

<assign value='$PIECE(wtableresult,"|",3)' property='tGilletteOrder' action='set' />
<assign value='tGilletteOrder' property='target.{ORCgrp(1).OBRuniongrp.OBRunion.OBR:2}' action='set' />
<if condition='tGilletteOrder=""' >
<true>
<assign value='holdobr2' property='target.{ORCgrp(1).OBRuniongrp.OBRunion.OBR:2}' action='set' />
</true>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.RegLab2CernerBkrORMLIOsn">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65904,51509.596685</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='251.Regions:ORM_O01' targetDocType='251.Regions:ORM_O01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Update: 03/17/2021 Al Johnson
	//  Last Moved to Prod:  06/29/2021 Al Johnson
    //  Created 03/17/2021 Al Johnson
    //
    //  ORC-1 = SN (Send Number - Lab Initiated Order)
    //  Regions sends two status messages - collected and inprocess
    //  On LIO they are changing the first status to SN, then the second is flowing out without Gillette order number
    //  Table data on SN so Cerner generated NA can update with Cerner order number
    //  Trap and hold second SC until it can read table and update inbound SC with Gillette number.
    //  Do this via rules and send to separate process
    //
	//  Table = T_RegionsLab_LIO - key is Regions accession OBR-3.1 pipe delimiter and OBR-4.1 ordered
	//  Possible that the same test could be run on same specimen (accession number if result is strange - would have new epic order nbr)
	//  So update table if record is found
	//  RFC SD-85921
]]]]><![CDATA[></code>

<assign value='""' property='holdobr3' action='set' />
<assign value='""' property='holdobr4' action='set' />
<assign value='""' property='holdobr20' action='set' />
<assign value='""' property='holdobrtblkey' action='set' />
<assign value='target.{ORCgrp(1).OBRuniongrp.OBRunion.OBR:3.1}' property='holdobr3' action='set' />
<assign value='target.{ORCgrp(1).OBRuniongrp.OBRunion.OBR:4.1}' property='holdobr4' action='set' />
<assign value='target.{ORCgrp(1).OBRuniongrp.OBRunion.OBR:20}' property='holdobr20' action='set' />
<assign value='holdobr3_"|"_holdobr4' property='holdobrtblkey' action='set' />

<assign value='$ZDATE($NOW(),8)' property='tempDateAdd' action='set' />

<assign value='""' property='wtableresult' action='set' />
<assign value='""' property='wtabledata' action='set' />
<assign value='..Lookup("T_RegionsLab_LIO",holdobrtblkey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<code>
<![CDATA[ 
    // no entry found - so add new entry
        set wTableData=(tempDateAdd_"|"_holdobr20_"|") 
        set wTableName="T_RegionsLab_LIO"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,holdobrtblkey,wTableData)
	]]]]><![CDATA[></code>
</true>
<false>
<code>
<![CDATA[ 
    // table entry found - update with new epic order number, remove original gillette nbr
        set wTableData=(tempDateAdd_"|"_holdobr20_"|")
        set wTableName="T_RegionsLab_LIO"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,holdobrtblkey,wTableData)
]]]]><![CDATA[></code>
</false>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.RegLab2CernerBkrORUCancel">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65566,34117.811557</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='251.Regions:ORU_R01' targetDocType='251.Regions:ORU_R01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Update: 07/02/2020 Al Johnson
	//  Last Moved to Prod:  07/08/2020 Al Johnson
    //  Created 04/20/2020 Al Johnson
    //
    //  Beaker version - schema changed from 22.RegLab to 231.Cerner
    //   Changed to version 251.Regions 10/15/2018
    //
    //  Beaker sending Cancel on ORU Result versus ORM Order
    //  Ensure OBR-7 date and time populated
    //  Populate ORC-16 cancel reason if missing
    //
    //  read Table = T_RegionsLab_OrderedConversion -if on table update OBR-4.2 with original value 4/19/2019
    //
    //  Change result cancel to order cancel - 07/02/2020 SD-40423 RFC SD-48154
]]]]><![CDATA[></code>

<assign value='""' property='tempDateCancel' action='set' />
<assign value='""' property='tempDateResult' action='set' />

<if condition='(source.{PIDgrpgrp(1).ORCgrp(1).OBR:7}="0000")||(source.{PIDgrpgrp(1).ORCgrp(1).OBR:7}="")' >
<true>
<assign value='source.{MSH:7.1}' property='target.{PIDgrpgrp(1).ORCgrp(1).OBR:7}' action='set' />
<assign value='source.{MSH:7.1}' property='tempDateCancel' action='set' />
</true>
<false>
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:7}' property='tempDateCancel' action='set' />
</false>
</if>

<if condition='(source.{PIDgrpgrp(1).ORCgrp(1).ORC:16}="")' >
<true>
<assign value='"LAB DUP"' property='target.{PIDgrpgrp(1).ORCgrp(1).ORC:16.1}' action='set' />
<assign value='"Duplicate"' property='target.{PIDgrpgrp(1).ORCgrp(1).ORC:16.2}' action='set' />
</true>
</if>

<code>
<![CDATA[ 
    //  Change result cancel to order cancel
]]]]><![CDATA[></code>
<assign value='"ORM"' property='target.{MSH:9.1}' action='set' />
<assign value='"O01"' property='target.{MSH:9.2}' action='set' />
<assign value='"CA"' property='target.{PIDgrpgrp(1).ORCgrp(1).ORC:1}' action='set' />

<code>
<![CDATA[ 
    //  Check table T_RegionsLab_OrderingProvider for a change in ordering provider
    //  Change result message to table ordering provider
]]]]><![CDATA[></code>
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:2.1}' property='tempCernerOrder' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).ORC:12(1)}' property='tempORC12' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:16(1)}' property='tempOBR16' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).ORC:12(1).1}' property='tempInORC12id' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:16(1).1}' property='tempInOBR16id' action='set' />
<assign value='""' property='tempDateResult' action='set' />
<assign value='""' property='tempDateCancel' action='set' />
<assign value='tempCernerOrder' property='wTableKey' action='set' />
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_RegionsLab_OrderingProvider",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<code>
<![CDATA[ 
    // no entry found - so send to Cerner as received
]]]]><![CDATA[></code>
</true>
<false>
<code>
<![CDATA[ 
    // table entry found - change ordering doc in message
]]]]><![CDATA[></code>
<assign value='$PIECE(wtableresult,"|",1)' property='temptblORC12' action='set' />
<assign value='$PIECE(temptblORC12,"^",1)' property='temptblORC12id' action='set' />
<assign value='$PIECE(wtableresult,"|",2)' property='temptblOBR16' action='set' />
<assign value='$PIECE(temptblOBR16,"^",1)' property='temptblOBR16id' action='set' />
<assign value='$PIECE(wtableresult,"|",3)' property='temptblDateAdd' action='set' />
<assign value='$PIECE(wtableresult,"|",4)' property='temptblDateResult' action='set' />
<assign value='$PIECE(wtableresult,"|",5)' property='temptblDateCancel' action='set' />

<assign value='$ZDATE($NOW(),8)' property='tempDateResult' action='set' />

<code>
<![CDATA[ 
    // result from Regions - update table with result date and cancel date
        set wTableData=(temptblORC12_"|"_temptblOBR16_"|"_temptblDateAdd_"|"_tempDateResult_"|"_tempDateCancel_"|") 
        set wTableName="T_RegionsLab_OrderingProvider"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,wTableKey,wTableData)	
]]]]><![CDATA[></code>
<if condition='(tempInORC12id = temptblORC12id)&amp;(tempInOBR16id = temptblOBR16id)' >
<false>
<code>
<![CDATA[ 
    // ordering doc on table differs from regions hl7 message
    //  update hl7 message
    //
    //  if multiple orc do fornext to updated each orc/obr
]]]]><![CDATA[></code>
<foreach property='target.{PIDgrpgrp(1).ORCgrp()}' key='k3' >
<assign value='temptblORC12' property='target.{PIDgrpgrp(1).ORCgrp(k3).ORC:12(1)}' action='set' />
<assign value='temptblOBR16' property='target.{PIDgrpgrp(1).ORCgrp(k3).OBR:16(1)}' action='set' />
</foreach>
</false>
</if>
</false>
</if>

<code>
<![CDATA[ 
    //  Check table T_RegionsLab_OrderedConversion for a change in original orderable
    //  Change result message to table value
]]]]><![CDATA[></code>

<foreach property='target.{PIDgrpgrp(1).ORCgrp()}' key='k4' >
<assign value='target.{PIDgrpgrp(1).ORCgrp(k4).OBR:2.1}' property='wTableKeyOrdered' action='set' />
<assign value='""' property='wtableresultordered' action='set' />
<assign value='..Lookup("T_RegionsLab_OrderedConversion",wTableKeyOrdered)' property='wtableresultordered' action='set' />
<if condition='wtableresultordered=""' >
<true>
<code>
<![CDATA[ 
    // no entry found - so send to Cerner as received
]]]]><![CDATA[></code>
</true>
<false>
<code>
<![CDATA[ 
    // table entry found - change ordered in message
]]]]><![CDATA[></code>
<assign value='wtableresultordered' property='target.{PIDgrpgrp(1).ORCgrp(k4).OBR:4.1}' action='set' />
</false>
</if>
</foreach>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.RegLab2CernerBkrORUCoPath">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65077,49122.805922</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='251.Regions:ORU_R01' targetDocType='251.Regions:ORU_R01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Update: 11/28/2018 Al Johnson
	//  Last Moved to Prod:  03/05/2019 Al Johnson
    //  Created 08/20/2018 Al Johnson
    //
    //  Beaker version - schema changed from 22.RegLab to 231.Cerner
    //   Changed to version 251.Regions 11/05/2018
    //
    //  Populate OBR-22 with MSH-7 datetime of message 03/23/2017
    //  Populate OBR-27.4 with MSH-7 datetime of message 03/23/2017
    //
    //  Check table T_RegionsLab_OrderingProvider for a change in ordering provider 11/22/2017
    //  Change result message to table ordering provider 11/22/2017
    //  Update table with result date 11/22/2017
    //
    //  Rebuild all OBX - sequence=1, id=test, subid=orig id 11/28/2018
    //  Insert new OBX Header on OBX-3 change of data 11/28/2018
    //
]]]]><![CDATA[></code>

<foreach property='target.{PIDgrpgrp(1).ORCgrp()}' key='k2' >
<assign value='source.{MSH:DateTimeOfMessage.Time}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBR:22}' action='set' />
<assign value='source.{MSH:DateTimeOfMessage.Time}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBR:27.4}' action='set' />
<assign value='"CoPath"' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBR:24}' action='set' />
<code>
<![CDATA[ 
    //  Remove OBX segments copied from source
]]]]><![CDATA[></code>
<foreach property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp()}' key='k1' >
<assign value='' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1)}' action='remove' />
</foreach>

<code>
<![CDATA[ 
    //  Insert Heading Line on change of OBX-3
    //  Do not create on first grouping LAB AP CASE REPORT
    //  Do not create LAB AP EMBEDDED IMAGES if no data
]]]]><![CDATA[></code>
<assign value='""' property='holdnewobx3' action='set' />
<assign value='"0"' property='tmpseq' action='set' />

<foreach property='source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp()}' key='k4' >
<if condition='source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k4).OBX:3.2}="LAB AP CASE REPORT"' >
<true>
<assign value='source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k4).OBX:3.2}' property='holdnewobx3' action='set' />
<assign value='tmpseq+1' property='tmpseq' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k4)}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(tmpseq)}' action='set' />
<assign value='tmpseq' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(tmpseq).OBX:4}' action='set' />
<assign value='target.{PIDgrpgrp(1).ORCgrp(k2).OBR:4.1}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(tmpseq).OBX:3.1}' action='set' />
<assign value='target.{PIDgrpgrp(1).ORCgrp(k2).OBR:4.1}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(tmpseq).OBX:3.2}' action='set' />
<assign value='"1"' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(tmpseq).OBX:1}' action='set' />
<assign value='"ST"' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(tmpseq).OBX:2}' action='set' />
</true>
<false>
<if condition='source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k4).OBX:3.2}=holdnewobx3' >
<true>
<assign value='tmpseq+1' property='tmpseq' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k4)}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(tmpseq)}' action='set' />
<assign value='tmpseq' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(tmpseq).OBX:4}' action='set' />
<assign value='target.{PIDgrpgrp(1).ORCgrp(k2).OBR:4.1}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(tmpseq).OBX:3.1}' action='set' />
<assign value='target.{PIDgrpgrp(1).ORCgrp(k2).OBR:4.1}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(tmpseq).OBX:3.2}' action='set' />
<assign value='"1"' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(tmpseq).OBX:1}' action='set' />
<assign value='"ST"' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(tmpseq).OBX:2}' action='set' />
</true>

<false>
<if condition='(source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k4).OBX:3.2}="LAB AP EMBEDDED IMAGES")&amp;(source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k4).OBX:5}="")' >
<false>
<assign value='tmpseq+1' property='tmpseq' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k4).OBX}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(tmpseq).OBX}' action='set' />
<assign value='tmpseq' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(tmpseq).OBX:4}' action='set' />
<assign value='$LENGTH(source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k4).OBX:3.2})' property='tmplgth' action='set' />
<assign value='$EXTRACT(source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k4).OBX:3.2},8,tmplgth)' property='holdOBX3desc' action='set' />
<assign value='holdOBX3desc' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(tmpseq).OBX:5}' action='set' />
<assign value='target.{PIDgrpgrp(1).ORCgrp(k2).OBR:4.1}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(tmpseq).OBX:3.1}' action='set' />
<assign value='target.{PIDgrpgrp(1).ORCgrp(k2).OBR:4.1}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(tmpseq).OBX:3.2}' action='set' />
<assign value='"1"' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(tmpseq).OBX:1}' action='set' />
<assign value='"ST"' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(tmpseq).OBX:2}' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k4).OBX:3.2}' property='holdnewobx3' action='set' />

<assign value='tmpseq+1' property='tmpseq' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k4)}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(tmpseq)}' action='set' />
<assign value='tmpseq' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(tmpseq).OBX:4}' action='set' />
<assign value='target.{PIDgrpgrp(1).ORCgrp(k2).OBR:4.1}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(tmpseq).OBX:3.1}' action='set' />
<assign value='target.{PIDgrpgrp(1).ORCgrp(k2).OBR:4.1}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(tmpseq).OBX:3.2}' action='set' />
<assign value='"1"' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(tmpseq).OBX:1}' action='set' />
<assign value='"ST"' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(tmpseq).OBX:2}' action='set' />
</false>
</if>

<code>
<![CDATA[ 
  // set holdk1=k1
  //  set holdk3=k3
  // set holdk5=(target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k4).OBX})
  // $$$TRACE("holdobxcnt= "_holdobxcnt)
  // $$$TRACE("holdnewobx3= "_holdnewobx3_" obx= "_holdk5)
]]]]><![CDATA[></code>
</false>
</if>
</false>
</if>
</foreach>
</foreach>

<code>
<![CDATA[ 
    //  Check table T_RegionsLab_OrderingProvider for a change in ordering provider 11/22/2017
    //  Change result message to table ordering provider 11/22/2017
]]]]><![CDATA[></code>
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:2.1}' property='tempCernerOrder' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).ORC:12(1)}' property='tempORC12' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:16(1)}' property='tempOBR16' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).ORC:12(1).1}' property='tempInORC12id' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:16(1).1}' property='tempInOBR16id' action='set' />
<assign value='""' property='tempDateResult' action='set' />
<assign value='""' property='tempDateCancel' action='set' />
<assign value='tempCernerOrder' property='wTableKey' action='set' />
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_RegionsLab_OrderingProvider",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<code>
<![CDATA[ 
    // no entry found - so send to Cerner as received
]]]]><![CDATA[></code>
</true>
<false>
<code>
<![CDATA[ 
    // table entry found - change ordering doc in message
]]]]><![CDATA[></code>
<assign value='$PIECE(wtableresult,"|",1)' property='temptblORC12' action='set' />
<assign value='$PIECE(temptblORC12,"^",1)' property='temptblORC12id' action='set' />
<assign value='$PIECE(wtableresult,"|",2)' property='temptblOBR16' action='set' />
<assign value='$PIECE(temptblOBR16,"^",1)' property='temptblOBR16id' action='set' />
<assign value='$PIECE(wtableresult,"|",3)' property='temptblDateAdd' action='set' />
<assign value='$PIECE(wtableresult,"|",4)' property='temptblDateResult' action='set' />
<assign value='$PIECE(wtableresult,"|",5)' property='temptblDateCancel' action='set' />
<assign value='$ZDATE($NOW(),8)' property='tempDateResult' action='set' />
<code>
<![CDATA[ 
    // result from Regions - update table with result date
        set wTableData=(temptblORC12_"|"_temptblOBR16_"|"_temptblDateAdd_"|"_tempDateResult_"|"_temptblDateCancel_"|") 
        set wTableName="T_RegionsLab_OrderingProvider"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,wTableKey,wTableData)	
]]]]><![CDATA[></code>
<if condition='(tempInORC12id = temptblORC12id)&amp;(tempInOBR16id = temptblOBR16id)' >
<false>
<code>
<![CDATA[ 
    // ordering doc on table differs from regions hl7 message
    //  update hl7 message
    //
    //  if multiple orc do fornext to updated each orc/obr
]]]]><![CDATA[></code>
<foreach property='target.{PIDgrpgrp(1).ORCgrp()}' key='k3' >
<assign value='temptblORC12' property='target.{PIDgrpgrp(1).ORCgrp(k3).ORC:12(1)}' action='set' />
<assign value='temptblOBR16' property='target.{PIDgrpgrp(1).ORCgrp(k3).OBR:16(1)}' action='set' />
</foreach>
</false>
</if>
</false>
</if>
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.RegLab2CernerBkrORUGenlab">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>66084,62262.062192</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='251.Regions:ORU_R01' targetDocType='251.Regions:ORU_R01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Update: 12/06/2021 Al Johnson
	//  Last Moved to Prod:  12/06/2021 Al Johnson
    //  Created 08/20/2018 Al Johnson
    //
    //  Beaker version - schema changed from 22.RegLab to 231.Cerner
    //   Changed to version 251.Regions 10/15/2018
    //
    //   Check for OBX subtype FT FreeText
    //    If tied to previous OBX change to NTE segment
    //    If standalone change to subtype RC
    //  Populate OBR-22 with MSH-7 datetime of message 03/23/2017
    //  Populate OBR-27.4 with MSH-7 datetime of message 03/23/2017
    //  Schema changed so NTE segment is repeating - add index for NTE under OBX 04/17/2017
    //  Check table T_RegionsLab_OrderingProvider for a change in ordering provider 11/22/2017
    //  Change result message to table ordering provider 11/22/2017
    //  Update table with result date 11/22/2017
    //  Consolidate consecutive OBX segments for CSFD 01/02/2018
    //  Change OBX=2 SN (structured numeric) to ST (string) consolidate result value OBX-5.1 and 5.2 9/28/2018
    //  Beaker sends parent id in OBR-4.1 and individual items in OBX-3.1 (sunquest was .2) 9/28/2018
    //
    //  Beaker sending OBX-2 type of CWE, Regions truncating to CW - change to CE
    //
    //  Results for 123007300 or 123007301 will almost always be resulted with a comment and not a numeric
    //   in that case nm and blank - change nte to obx
    //
    //  for OBX-3.1 values of PROD_CD, UNIT_ID, PROD_STAT, EXP_DTTM, BLOOD_TYPE_BARCODE 02/19/2019
    //  prefix with the orderable from OBR-4.1 and an underscore 02/19/2019
    //  Change OBX type TX to ST on Blood Products 02/19/2019
    //
    //  Beaker is sending the same alias for total volume on genlab and sendout
    //  Change on genlab from 123003048 to G123003048  03/18/2019
    //  Change on genlab from 123002092 to G123002092  03/25/2019
    //
    //  read Table = T_RegionsLab_OrderedConversion -if on table update OBR-4.2 with original value 4/19/2019
    //
    //  Remap specific OBX results on CG8 ^ Blood Gas, Poct for specimen sites Venous and Arterial - CNR-20438 RFC SD-48926 7/9/2020
    //
    //  Check for Unsolicited Covid19 result from Regions - add NTE line - SD-48732 RFC SD-48883 7/13/2020
    //
    //  Check for Unsolicited Covid19 result from Regions (LAB1482 same as orig LAB1477) - add NTE line - CNR-20524 7/22/2020 RFC SD-50386
    //
    //  Add OBX-3.1 UNIT_VOLUME to Blood Product logic from 2/19/2019 SD-61446 RFC SD-61956
    //
    //  Add EP2048 Check for unsolicited COVID result - add note 12/06/2021 RFC SD-108101
]]]]><![CDATA[></code>
<code>
<![CDATA[ 
    //  Update FreeText OBX as ST or NTE segment
    //  01/02/2018 cosolidate CSFD OBX segments
    //             Also consolidate if CE followed by FT for CSFD
    //  07/09/2020 set switches for CG8-Venous and CG8-Arterial
]]]]><![CDATA[></code>

<foreach property='target.{PIDgrpgrp(1).ORCgrp()}' key='k2' >
<assign value='source.{MSH:DateTimeOfMessage.Time}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBR:22}' action='set' />
<assign value='source.{MSH:DateTimeOfMessage.Time}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBR:27.4}' action='set' />
<assign value='0' property='tmpnte' action='set' />
<assign value='""' property='HldOBXval1' action='set' />
<assign value='""' property='HldOBXval2' action='set' />
<assign value='""' property='tmpCG8' action='set' />
<assign value='""' property='tmpCG8obx' action='set' />

<if condition='target.{PIDgrpgrp(1).ORCgrp(k2).OBR:4.1}="CG8"' >
<true>
<assign value='"X"' property='tmpCG8' action='set' />
</true>
</if>

<foreach property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp()}' key='k1' >
<if condition='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:ValueType}="FT"' >
<true>
<if condition='k1="1"' >
<true>
<assign value='"ST"' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:ValueType}' action='set' />
</true>
<false>
<if condition='(target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:SetIDOBX})=(target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1-1).OBX:SetIDOBX})' >
<true>
<assign value='tmpnte+1' property='tmpnte' action='set' />
<assign value='' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1)}' action='remove' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:SetIDOBX}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).NTE(tmpnte):SetIDNTE}' action='set' />
<assign value='"RC"' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).NTE(tmpnte):SourceofComment}' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:ObservationValue(1)}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).NTE(tmpnte):Comment(1)}' action='set' />
</true>
<false>
<assign value='"ST"' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:ValueType}' action='set' />
</false>
</if>
</false>
</if>
</true>
<false>
<code>
<![CDATA[ 
    //  09/28/2018 change SN to ST consolidate OBX-5.1 and 5.2 values
]]]]><![CDATA[></code>
<if condition='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:ValueType}="SN"' >
<true>
<assign value='"ST"' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:ValueType}' action='set' />
<assign value='""' property='hold51' action='set' />
<assign value='""' property='hold52' action='set' />
<assign value='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:5(1).1}' property='hold51' action='set' />
<assign value='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:5(1).2}' property='hold52' action='set' />
<assign value='hold51_hold52' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:5(1)}' action='set' />
</true>
<false>
<if condition='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:ValueType}="CW"' >
<true>
<assign value='"CE"' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:ValueType}' action='set' />
</true>
</if>
</false>
</if>
<code>
<![CDATA[ 
    //  01/02/2018 consolidate consecutive CSFD even if CE followed by FT
]]]]><![CDATA[></code>
<if condition='(target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:3.2}="CSFD") &amp; (target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1+1).OBX:3.2}="CSFD")' >
<true>
<assign value='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:5(1)}' property='HldOBXval1' action='set' />
<assign value='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1+1).OBX:5(1)}' property='HldOBXval2' action='set' />
<assign value='HldOBXval1_" "_HldOBXval2' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:5}' action='set' />
<assign value='' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1+1).OBX}' action='remove' />
</true>
</if>
</false>
</if>
<code>
<![CDATA[ 
    //  10/30/2018 check for 123007300 or 123007301 followed by NTE
]]]]><![CDATA[></code>
<if condition='(target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:3.1}="123007300")||(target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:3.1}="123007301")' >
<true>
<if condition='(target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:5(1)}="")' >
<true>
<if condition='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).NTE(1):3(1)}=""' >
<false>
<assign value='"ST"' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:ValueType}' action='set' />
<assign value='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).NTE(1):3(1)}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:5(1)}' action='set' />
<assign value='' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).NTE(1)}' action='remove' />
</false>
</if>
</true>
</if>
</true>
</if>
<code>
<![CDATA[ 
    //  02/19/2019 for OBX-3.1 values of PROD_CD, UNIT_ID, PROD_STAT, EXP_DTTM, BLOOD_TYPE_BARCODE
    //  02/19/2019 prefix with the orderable from OBR-4.1 and an underscore
]]]]><![CDATA[></code>
<if condition='..In(target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:3.1},"PROD_CD,UNIT_ID,PROD_STAT,EXP_DTTM,BLOOD_TYPE_BARCODE,UNIT_VOLUME")' >
<true>
<assign value='target.{PIDgrpgrp(1).ORCgrp(k2).OBR:4.1}' property='hldobr4' action='set' />
<assign value='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:3.1}' property='hldobx3' action='set' />
<assign value='hldobr4_"_"_hldobx3' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:3.1}' action='set' />
<if condition='(target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:2}="TX")' >
<true>
<assign value='"ST"' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:2}' action='set' />
</true>
</if>
</true>
</if>

<code>
<![CDATA[ 
    //  03/18/2019 for OBX-3.1 Genlab value of 123003048 change to G123003048
    //  03/25/2019 for OBX-3.1 Genlab value of 123002092 change to G123002092
 ]]]]><![CDATA[></code>
<if condition='(target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:3.1}="123003048")' >
<true>
<assign value='"G123003048"' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:3.1}' action='set' />
</true>
</if>
<if condition='(target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:3.1}="123002092")' >
<true>
<assign value='"G123002092"' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:3.1}' action='set' />
</true>
</if>

<code>
<![CDATA[ 
    //  07/09/2020 set CG8 Venous/Arterial switch
 ]]]]><![CDATA[></code>
 <if condition='(target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:5}="Arterial")' >
<true>
<assign value='"A"' property='tmpCG8obx' action='set' />
</true>
<false>
<if condition='(target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:5}="Venous")' >
<true>
<assign value='"V"' property='tmpCG8obx' action='set' />
</true>
</if>
</false>
</if>

</foreach>
</foreach>

<code>
<![CDATA[ 
    //  07/09/2020 change specific obx segments for CG8 Venous/Arterial
 ]]]]><![CDATA[></code>
 <if condition='tmpCG8="X"' >
 <true>
 <foreach property='target.{PIDgrpgrp(1).ORCgrp()}' key='k5' >
<foreach property='target.{PIDgrpgrp(1).ORCgrp(k5).OBXgrp()}' key='k6' >
<if condition='tmpCG8obx="A"' >
<true>
<if condition='target.{PIDgrpgrp(1).ORCgrp(k5).OBXgrp(k6).OBX:3.1}="123002472"' >
<true>
<assign value='"123003331"' property='target.{PIDgrpgrp(1).ORCgrp(k5).OBXgrp(k6).OBX:3.1}' action='set' />
</true>
</if>
</true>
<false>
<if condition='tmpCG8obx="V"' >
<true>
<if condition='target.{PIDgrpgrp(1).ORCgrp(k5).OBXgrp(k6).OBX:3.1}="123002472"' >
<true>
<assign value='"123002966"' property='target.{PIDgrpgrp(1).ORCgrp(k5).OBXgrp(k6).OBX:3.1}' action='set' />
</true>
</if>
<if condition='target.{PIDgrpgrp(1).ORCgrp(k5).OBXgrp(k6).OBX:3.1}="123002987"' >
<true>
<assign value='"123002974"' property='target.{PIDgrpgrp(1).ORCgrp(k5).OBXgrp(k6).OBX:3.1}' action='set' />
</true>
</if>
<if condition='target.{PIDgrpgrp(1).ORCgrp(k5).OBXgrp(k6).OBX:3.1}="123002988"' >
<true>
<assign value='"123002975"' property='target.{PIDgrpgrp(1).ORCgrp(k5).OBXgrp(k6).OBX:3.1}' action='set' />
</true>
</if>
<if condition='target.{PIDgrpgrp(1).ORCgrp(k5).OBXgrp(k6).OBX:3.1}="123002989"' >
<true>
<assign value='"123002976"' property='target.{PIDgrpgrp(1).ORCgrp(k5).OBXgrp(k6).OBX:3.1}' action='set' />
</true>
</if>
<if condition='target.{PIDgrpgrp(1).ORCgrp(k5).OBXgrp(k6).OBX:3.1}="123002468"' >
<true>
<assign value='"123002467"' property='target.{PIDgrpgrp(1).ORCgrp(k5).OBXgrp(k6).OBX:3.1}' action='set' />
</true>
</if>
</true>
</if>
</false>
</if>

</foreach>
</foreach>
</true>
</if>

<code>
<![CDATA[ 
    //  Check for unsolicited COVID result - add note 07/13/2020
    //  Add EP2048 to unsolicted COVID results - 12/06/2021
]]]]><![CDATA[></code>
<assign value='"Patients Epic medical record is source system for this result.  Please call lab with any questions."' property='tmpcovidnte' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:2.1}' property='tempCernerOrdCovid' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:3.1}' property='tempRegionsOrdCovid' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:4.1}' property='tmpcovidtest' action='set' />
<if condition='(tmpcovidtest="LAB1477") || (tmpcovidtest="LAB1482") || (tmpcovidtest="EP2048")' >
<true>
<if condition='(tempCernerOrdCovid = tempRegionsOrdCovid)||(tempCernerOrdCovid = "")' >
<true>
<assign value='(target.{PIDgrpgrp(1).ORCgrp(1).NTE(*)}+1)' property='NewNTE' action='set' />
<assign value='NewNTE' property='target.{PIDgrpgrp(1).ORCgrp(1).NTE(NewNTE):1}' action='set' />
<assign value='"L"' property='target.{PIDgrpgrp(1).ORCgrp(1).NTE(NewNTE):2}' action='set' />
<assign value='tmpcovidnte' property='target.{PIDgrpgrp(1).ORCgrp(1).NTE(NewNTE):3}' action='set' />
</true>
</if>
</true>
</if>

<code>
<![CDATA[ 
    //  Check table T_RegionsLab_OrderingProvider for a change in ordering provider
    //  Change result message to table ordering provider
]]]]><![CDATA[></code>
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:2.1}' property='tempCernerOrder' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).ORC:12(1)}' property='tempORC12' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:16(1)}' property='tempOBR16' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).ORC:12(1).1}' property='tempInORC12id' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:16(1).1}' property='tempInOBR16id' action='set' />
<assign value='""' property='tempDateResult' action='set' />
<assign value='""' property='tempDateCancel' action='set' />
<assign value='tempCernerOrder' property='wTableKey' action='set' />
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_RegionsLab_OrderingProvider",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<code>
<![CDATA[ 
    // no entry found - so send to Cerner as received
]]]]><![CDATA[></code>
</true>
<false>
<code>
<![CDATA[ 
    // table entry found - change ordering doc in message
]]]]><![CDATA[></code>
<assign value='$PIECE(wtableresult,"|",1)' property='temptblORC12' action='set' />
<assign value='$PIECE(temptblORC12,"^",1)' property='temptblORC12id' action='set' />
<assign value='$PIECE(wtableresult,"|",2)' property='temptblOBR16' action='set' />
<assign value='$PIECE(temptblOBR16,"^",1)' property='temptblOBR16id' action='set' />
<assign value='$PIECE(wtableresult,"|",3)' property='temptblDateAdd' action='set' />
<assign value='$PIECE(wtableresult,"|",4)' property='temptblDateResult' action='set' />
<assign value='$PIECE(wtableresult,"|",5)' property='temptblDateCancel' action='set' />
<assign value='$ZDATE($NOW(),8)' property='tempDateResult' action='set' />
<code>
<![CDATA[ 
    // result from Regions - update table with result date
        set wTableData=(temptblORC12_"|"_temptblOBR16_"|"_temptblDateAdd_"|"_tempDateResult_"|"_temptblDateCancel_"|") 
        set wTableName="T_RegionsLab_OrderingProvider"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,wTableKey,wTableData)	
]]]]><![CDATA[></code>
<if condition='(tempInORC12id = temptblORC12id)&amp;(tempInOBR16id = temptblOBR16id)' >
<false>
<code>
<![CDATA[ 
    // ordering doc on table differs from regions hl7 message
    //  update hl7 message
    //
    //  if multiple orc do fornext to updated each orc/obr
]]]]><![CDATA[></code>
<foreach property='target.{PIDgrpgrp(1).ORCgrp()}' key='k3' >
<assign value='temptblORC12' property='target.{PIDgrpgrp(1).ORCgrp(k3).ORC:12(1)}' action='set' />
<assign value='temptblOBR16' property='target.{PIDgrpgrp(1).ORCgrp(k3).OBR:16(1)}' action='set' />
</foreach>
</false>
</if>
</false>
</if>

<code>
<![CDATA[ 
    //  Check table T_RegionsLab_OrderedConversion for a change in original orderable
    //  Change result message to table value
]]]]><![CDATA[></code>

<foreach property='target.{PIDgrpgrp(1).ORCgrp()}' key='k4' >
<assign value='target.{PIDgrpgrp(1).ORCgrp(k4).OBR:2.1}' property='wTableKeyOrdered' action='set' />
<assign value='""' property='wtableresultordered' action='set' />
<assign value='..Lookup("T_RegionsLab_OrderedConversion",wTableKeyOrdered)' property='wtableresultordered' action='set' />
<if condition='wtableresultordered=""' >
<true>
<code>
<![CDATA[ 
    // no entry found - so send to Cerner as received
]]]]><![CDATA[></code>
</true>
<false>
<code>
<![CDATA[ 
    // table entry found - change ordered in message
]]]]><![CDATA[></code>
<assign value='wtableresultordered' property='target.{PIDgrpgrp(1).ORCgrp(k4).OBR:4.1}' action='set' />
</false>
</if>
</foreach>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.RegLab2CernerBkrORUPanel">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65751,40838.268381</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='251.Regions:ORU_R01' targetDocType='251.Regions:ORU_R01' create='new' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Update: 12/30/2020 Al Johnson
	//  Last Moved to Prod:  01/07/2021 Al Johnson
    //  Created 03/06/2019 Al Johnson
    //
    //  Ensemble rule should only pass in if a value in OBR-50
    //  Go ahead and check for it anyway
    //
    //  Create ORU result on parent / panel
    //  Change OBR:4.1 to OBR:50.1
    //  Add OBX segment, type ST with verbiage in OBX-5
    //  Send thru MSH, PID, PV1, ORC and OBR
    //
    //  Check table T_RegionsLab_OrderingProvider for a change in ordering provider 11/22/2017
    //  Change result message to table ordering provider
    //
    //  Create OBX for specific tests EP2032, EP2018, EP2014 3/11/2019
    //  Create OBX for specific tests EP2029, EP2022, EP2021 3/26/2019
    //  Create OBX for specific tests EP2003, BFT, CSFT, EP2019, HEMPL 3/28/2019
    //  Create OBX for specific tests CTBAL 4/17/2019
    //  Create OBX for specific tests EP1019 4/21/2020
    //  Create OBX for specific tests EP2031 10/19/2020 SD-59574 RFC SD-59652
    //  Create OBX for specific tests EP2049 12/30/2020 SD-67403 RFC SD-68045
]]]]><![CDATA[></code>

<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='source.{PIDgrpgrp(1).PIDgrp.PID}' property='target.{PIDgrpgrp(1).PIDgrp.PID}' action='set' />
<assign value='source.{PIDgrpgrp(1).PIDgrp.PV1grp.PV1}' property='target.{PIDgrpgrp(1).PIDgrp.PV1grp.PV1}' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).ORC}' property='target.{PIDgrpgrp(1).ORCgrp(1).ORC}' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR}' property='target.{PIDgrpgrp(1).ORCgrp(1).OBR}' action='set' />

<foreach property='target.{PIDgrpgrp(1).ORCgrp()}' key='k1' >
<if condition='target.{PIDgrpgrp(1).ORCgrp(k1).OBR:50.1}=""' >
<false>
<if condition='target.{PIDgrpgrp(1).ORCgrp(k1).OBR:4.1}=target.{PIDgrpgrp(1).ORCgrp(k1).OBR:50.1}' >
<false>
<assign value='target.{PIDgrpgrp(1).ORCgrp(k1).OBR:50.1}' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBR:4.1}' action='set' />
<assign value='""' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBR:3}' action='set' />

<if condition='target.{PIDgrpgrp(1).ORCgrp(k1).OBR:50.1}="EP2032"' >
<true>
<assign value='"1"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:1}' action='set' />
<assign value='"ST"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:2}' action='set' />
<assign value='"TYHDRESULT"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:3.1}' action='set' />
<assign value='"Please see Results Review for Ab Screen, RH (D) Type and ABO Type results"' property='tmpdesc' action='set' />
<assign value='tmpdesc' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:5(1)}' action='set' />
</true>
</if>

<if condition='target.{PIDgrpgrp(1).ORCgrp(k1).OBR:50.1}="EP2018"' >
<true>
<assign value='"1"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:1}' action='set' />
<assign value='"ST"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:2}' action='set' />
<assign value='"EP2018RESULT"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:3.1}' action='set' />
<assign value='"Please see Results Review for Aerobic and Anaerobic Culture reports"' property='tmpdesc' action='set' />
<assign value='tmpdesc' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:5(1)}' action='set' />
</true>
</if>

<if condition='target.{PIDgrpgrp(1).ORCgrp(k1).OBR:50.1}="EP2014"' >
<true>
<assign value='"1"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:1}' action='set' />
<assign value='"ST"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:2}' action='set' />
<assign value='"EP2014RESULT"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:3.1}' action='set' />
<assign value='"Please see Results Review for Extended Aerobic and Anaerobic Culture reports"' property='tmpdesc' action='set' />
<assign value='tmpdesc' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:5(1)}' action='set' />
</true>
</if>

<if condition='target.{PIDgrpgrp(1).ORCgrp(k1).OBR:50.1}="EP2029"' >
<true>
<assign value='"1"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:1}' action='set' />
<assign value='"ST"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:2}' action='set' />
<assign value='"EP2029RESULT"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:3.1}' action='set' />
<assign value='"Please see Results Review for Tuberculin Culture Panel reports"' property='tmpdesc' action='set' />
<assign value='tmpdesc' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:5(1)}' action='set' />
</true>
</if>

<if condition='target.{PIDgrpgrp(1).ORCgrp(k1).OBR:50.1}="EP2022"' >
<true>
<assign value='"1"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:1}' action='set' />
<assign value='"ST"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:2}' action='set' />
<assign value='"EP2022RESULT"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:3.1}' action='set' />
<assign value='"Please see Results Review for Enteric Stool Pathogens Panel reports"' property='tmpdesc' action='set' />
<assign value='tmpdesc' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:5(1)}' action='set' />
</true>
</if>

<if condition='target.{PIDgrpgrp(1).ORCgrp(k1).OBR:50.1}="EP2021"' >
<true>
<assign value='"1"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:1}' action='set' />
<assign value='"ST"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:2}' action='set' />
<assign value='"EP2021RESULT"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:3.1}' action='set' />
<assign value='"Please see Results Review for Blood Culture and Molecular Blood Culture Identification reports"' property='tmpdesc' action='set' />
<assign value='tmpdesc' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:5(1)}' action='set' />
</true>
</if>

<if condition='target.{PIDgrpgrp(1).ORCgrp(k1).OBR:50.1}="EP2003"' >
<true>
<assign value='"1"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:1}' action='set' />
<assign value='"ST"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:2}' action='set' />
<assign value='"EP2003RESULT"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:3.1}' action='set' />
<assign value='"Please see Results Review for Cortisol Baseline and Post results"' property='tmpdesc' action='set' />
<assign value='tmpdesc' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:5(1)}' action='set' />
</true>
</if>

<if condition='target.{PIDgrpgrp(1).ORCgrp(k1).OBR:50.1}="BFT"' >
<true>
<assign value='"1"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:1}' action='set' />
<assign value='"ST"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:2}' action='set' />
<assign value='"BFTRESULT"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:3.1}' action='set' />
<assign value='"Please see Results Review/Body Fluids for requested results"' property='tmpdesc' action='set' />
<assign value='tmpdesc' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:5(1)}' action='set' />
</true>
</if>

<if condition='target.{PIDgrpgrp(1).ORCgrp(k1).OBR:50.1}="CSFT"' >
<true>
<assign value='"1"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:1}' action='set' />
<assign value='"ST"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:2}' action='set' />
<assign value='"CSFTRESULT"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:3.1}' action='set' />
<assign value='"Please see Results Review/CSF for requested results"' property='tmpdesc' action='set' />
<assign value='tmpdesc' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:5(1)}' action='set' />
</true>
</if>

<if condition='target.{PIDgrpgrp(1).ORCgrp(k1).OBR:50.1}="EP2019"' >
<true>
<assign value='"1"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:1}' action='set' />
<assign value='"ST"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:2}' action='set' />
<assign value='"EP2019RESULT"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:3.1}' action='set' />
<assign value='"Please see Results Review/Hematology for results"' property='tmpdesc' action='set' />
<assign value='tmpdesc' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:5(1)}' action='set' />
</true>
</if>

<if condition='target.{PIDgrpgrp(1).ORCgrp(k1).OBR:50.1}="HEMPL"' >
<true>
<assign value='"1"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:1}' action='set' />
<assign value='"ST"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:2}' action='set' />
<assign value='"HEMPLRESULT"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:3.1}' action='set' />
<assign value='"Please see Results Review/Hematology for results"' property='tmpdesc' action='set' />
<assign value='tmpdesc' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:5(1)}' action='set' />
</true>
</if>

<if condition='target.{PIDgrpgrp(1).ORCgrp(k1).OBR:50.1}="CTBAL"' >
<true>
<assign value='"1"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:1}' action='set' />
<assign value='"ST"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:2}' action='set' />
<assign value='"CTBALRESULT"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:3.1}' action='set' />
<assign value='"Please see Results Review/Body Fluids for results"' property='tmpdesc' action='set' />
<assign value='tmpdesc' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:5(1)}' action='set' />
</true>
</if>

<if condition='target.{PIDgrpgrp(1).ORCgrp(k1).OBR:50.1}="EP1019"' >
<true>
<assign value='"1"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:1}' action='set' />
<assign value='"ST"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:2}' action='set' />
<assign value='"EP1019RESULT"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:3.1}' action='set' />
<assign value='"Please see Results Review/Chemistry for results"' property='tmpdesc' action='set' />
<assign value='tmpdesc' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:5(1)}' action='set' />
</true>
</if>

<if condition='target.{PIDgrpgrp(1).ORCgrp(k1).OBR:50.1}="EP2031"' >
<true>
<assign value='"1"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:1}' action='set' />
<assign value='"ST"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:2}' action='set' />
<assign value='"EP2031RESULT"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:3.1}' action='set' />
<assign value='"Please see Results Review/Transfusion Medicine for results"' property='tmpdesc' action='set' />
<assign value='tmpdesc' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:5(1)}' action='set' />
</true>
</if>

<if condition='target.{PIDgrpgrp(1).ORCgrp(k1).OBR:50.1}="EP2049"' >
<true>
<assign value='"1"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:1}' action='set' />
<assign value='"ST"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:2}' action='set' />
<assign value='"EP2049RESULT"' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:3.1}' action='set' />
<assign value='"Please see Results Review/Microbiology for COVID and Influenza results"' property='tmpdesc' action='set' />
<assign value='tmpdesc' property='target.{PIDgrpgrp(1).ORCgrp(k1).OBXgrp(1).OBX:5(1)}' action='set' />
</true>
</if>

</false>
</if>
</false>
</if>
</foreach>
<code>
<![CDATA[ 
    //  Check table T_RegionsLab_OrderingProvider for a change in ordering provider
    //  Change result message to table ordering provider
]]]]><![CDATA[></code>
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:2.1}' property='tempCernerOrder' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).ORC:12(1)}' property='tempORC12' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:16(1)}' property='tempOBR16' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).ORC:12(1).1}' property='tempInORC12id' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:16(1).1}' property='tempInOBR16id' action='set' />
<assign value='""' property='tempDateResult' action='set' />
<assign value='""' property='tempDateCancel' action='set' />
<assign value='tempCernerOrder' property='wTableKey' action='set' />
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_RegionsLab_OrderingProvider",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<code>
<![CDATA[ 
    // no entry found - so send to Cerner as received
]]]]><![CDATA[></code>
</true>
<false>
<code>
<![CDATA[ 
    // table entry found - change ordering doc in message
]]]]><![CDATA[></code>
<assign value='$PIECE(wtableresult,"|",1)' property='temptblORC12' action='set' />
<assign value='$PIECE(temptblORC12,"^",1)' property='temptblORC12id' action='set' />
<assign value='$PIECE(wtableresult,"|",2)' property='temptblOBR16' action='set' />
<assign value='$PIECE(temptblOBR16,"^",1)' property='temptblOBR16id' action='set' />
<assign value='$PIECE(wtableresult,"|",3)' property='temptblDateAdd' action='set' />
<assign value='$PIECE(wtableresult,"|",4)' property='temptblDateResult' action='set' />
<assign value='$PIECE(wtableresult,"|",5)' property='temptblDateCancel' action='set' />
<assign value='$ZDATE($NOW(),8)' property='tempDateResult' action='set' />
<code>
<![CDATA[ 
    // since we are creating result - do not update ordering doc table
    // actual result will handle
]]]]><![CDATA[></code>
<if condition='(tempInORC12id = temptblORC12id)&amp;(tempInOBR16id = temptblOBR16id)' >
<false>
<code>
<![CDATA[ 
    // ordering doc on table differs from regions hl7 message
    //  update hl7 message
    //
    //  if multiple orc do fornext to updated each orc/obr
]]]]><![CDATA[></code>
<foreach property='target.{PIDgrpgrp(1).ORCgrp()}' key='k3' >
<assign value='temptblORC12' property='target.{PIDgrpgrp(1).ORCgrp(k3).ORC:12(1)}' action='set' />
<assign value='temptblOBR16' property='target.{PIDgrpgrp(1).ORCgrp(k3).OBR:16(1)}' action='set' />
</foreach>
</false>
</if>
</false>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.RegLab2CernerBkrORUQFT4">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65077,49251.173003</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>0</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>0</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='251.Regions:ORU_R01' targetDocType='251.Regions:ORU_R01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Update: 02/25/2019 Al Johnson
	//  Last Moved to Prod:  03/05/2019 Al Johnson
    //  Created 12/06/2018 Al Johnson
    //
    //  Beaker version - QFT4 test result
    //
    //   OBR-4.1 = QFT4
    //
    //   Check for OBX Change in Sequence
    //    If tied to previous OBX change to NTE segment
    //    If standalone change to subtype RC
    //  Populate OBR-22 with MSH-7 datetime of message 03/23/2017
    //  Populate OBR-27.4 with MSH-7 datetime of message 03/23/2017
    //  Check table T_RegionsLab_OrderingProvider for a change in ordering provider 11/22/2017
    //  Change result message to table ordering provider 11/22/2017
    //  Update table with result date 11/22/2017
    //
    //  Remove NTE segments tied to OBR
    //  Add back as NTE segments tied to first OBX
    //
    //  Change OBX=2 SN (structured numeric) to ST (string) consolidate result value OBX-5.1 and 5.2 02/25/2019
    //
]]]]><![CDATA[></code>
<code>
<![CDATA[ 
    //  Update FreeText OBX as ST or NTE segment
]]]]><![CDATA[></code>

<foreach property='target.{PIDgrpgrp(1).ORCgrp()}' key='k2' >
<assign value='source.{MSH:DateTimeOfMessage.Time}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBR:22}' action='set' />
<assign value='source.{MSH:DateTimeOfMessage.Time}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBR:27.4}' action='set' />
<assign value='0' property='tmpnte' action='set' />
<foreach property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp()}' key='k1' >
<if condition='k1="1"' >
<true>
<assign value='0' property='tmpnte' action='set' />
</true>
<false>
<if condition='(source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:SetIDOBX})=(source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1-1).OBX:SetIDOBX})' >
<true>
<code>
<![CDATA[ 
    //  remove of OBXgrp (k1) removes attached NTE segments with OBX
    //  read from source and add back NTE after converting OBX to NTE
    // 
]]]]><![CDATA[></code>
<assign value='tmpnte+1' property='tmpnte' action='set' />
<assign value='' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1)}' action='remove' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:SetIDOBX}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).NTE(tmpnte):SetIDNTE}' action='set' />
<assign value='"NTE"' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).NTE(tmpnte):SourceofComment}' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:ObservationValue(1)}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).NTE(tmpnte):Comment(1)}' action='set' />

<foreach property='source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).NTE()}' key='k4' >
<assign value='tmpnte+1' property='tmpnte' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:SetIDOBX}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).NTE(tmpnte):SetIDNTE}' action='set' />
<assign value='"NTE"' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).NTE(tmpnte):SourceofComment}' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).NTE(k4):3}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).NTE(tmpnte):3}' action='set' />
</foreach>

</true>
<false>
<assign value='0' property='tmpnte' action='set' />
</false>
</if>
</false>
</if>
</foreach>
</foreach>

<code>
<![CDATA[ 
    //  Remove NTE segments tied to OBR and add them to 1st OBX after existing NTE segments
]]]]><![CDATA[></code>
   
<foreach property='target.{PIDgrpgrp(1).ORCgrp()}' key='k5' >
<foreach property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp()}' key='k6' >

<if condition='k6="1"' >
<true>
<assign value='"0"' property='obxntecnt' action='set' /> 
<foreach property='target.{PIDgrpgrp(1).ORCgrp(k5).OBXgrp(k6).NTE()}' key='k7' >
<assign value='obxntecnt+1' property='obxntecnt' action='set' />
</foreach>

<foreach property='target.{PIDgrpgrp(1).ORCgrp(k5).NTE()}' key='k8' >
<assign value='obxntecnt+1' property='obxntecnt' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(k5).NTE(k8)}' property='target.{PIDgrpgrp(1).ORCgrp(k5).OBXgrp(1).NTE(obxntecnt)}' action='set' />
<assign value='"1"' property='target.{PIDgrpgrp(1).ORCgrp(k5).OBXgrp(1).NTE(obxntecnt):1}' action='set' />
<assign value='"NTE"' property='target.{PIDgrpgrp(1).ORCgrp(k5).OBXgrp(1).NTE(obxntecnt):2}' action='set' />
<assign value='' property='target.{PIDgrpgrp(1).ORCgrp(k5).NTE(k8)}' action='remove' />
</foreach>

</true>
</if>
</foreach>
</foreach>

<code>
<![CDATA[ 
    //  02/25/2019 change SN to ST consolidate OBX-5.1 and 5.2 values
]]]]><![CDATA[></code>
   
<foreach property='target.{PIDgrpgrp(1).ORCgrp()}' key='k10' >
<foreach property='target.{PIDgrpgrp(1).ORCgrp(k10).OBXgrp()}' key='k11' >
<if condition='target.{PIDgrpgrp(1).ORCgrp(k10).OBXgrp(k11).OBX:2}="SN"' >
<true>
<assign value='"ST"' property='target.{PIDgrpgrp(1).ORCgrp(k10).OBXgrp(k11).OBX:2}' action='set' />
<assign value='""' property='hold51' action='set' />
<assign value='""' property='hold52' action='set' />
<assign value='target.{PIDgrpgrp(1).ORCgrp(k10).OBXgrp(k11).OBX:5(1).1}' property='hold51' action='set' />
<assign value='target.{PIDgrpgrp(1).ORCgrp(k10).OBXgrp(k11).OBX:5(1).2}' property='hold52' action='set' />
<assign value='hold51_hold52' property='target.{PIDgrpgrp(1).ORCgrp(k10).OBXgrp(k11).OBX:5(1)}' action='set' />
</true>
</if>
</foreach>
</foreach>

<code>
<![CDATA[ 
    //  Check table T_RegionsLab_OrderingProvider for a change in ordering provider 11/22/2017
    //  Change result message to table ordering provider 11/22/2017
]]]]><![CDATA[></code>
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:2.1}' property='tempCernerOrder' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).ORC:12(1)}' property='tempORC12' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:16(1)}' property='tempOBR16' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).ORC:12(1).1}' property='tempInORC12id' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:16(1).1}' property='tempInOBR16id' action='set' />
<assign value='""' property='tempDateResult' action='set' />
<assign value='""' property='tempDateCancel' action='set' />
<assign value='tempCernerOrder' property='wTableKey' action='set' />
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_RegionsLab_OrderingProvider",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<code>
<![CDATA[ 
    // no entry found - so send to Cerner as received
]]]]><![CDATA[></code>
</true>
<false>
<code>
<![CDATA[ 
    // table entry found - change ordering doc in message
]]]]><![CDATA[></code>
<assign value='$PIECE(wtableresult,"|",1)' property='temptblORC12' action='set' />
<assign value='$PIECE(temptblORC12,"^",1)' property='temptblORC12id' action='set' />
<assign value='$PIECE(wtableresult,"|",2)' property='temptblOBR16' action='set' />
<assign value='$PIECE(temptblOBR16,"^",1)' property='temptblOBR16id' action='set' />
<assign value='$PIECE(wtableresult,"|",3)' property='temptblDateAdd' action='set' />
<assign value='$PIECE(wtableresult,"|",4)' property='temptblDateResult' action='set' />
<assign value='$PIECE(wtableresult,"|",5)' property='temptblDateCancel' action='set' />
<assign value='$ZDATE($NOW(),8)' property='tempDateResult' action='set' />
<code>
<![CDATA[ 
    // result from Regions - update table with result date
        set wTableData=(temptblORC12_"|"_temptblOBR16_"|"_temptblDateAdd_"|"_tempDateResult_"|"_temptblDateCancel_"|") 
        set wTableName="T_RegionsLab_OrderingProvider"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,wTableKey,wTableData)	
]]]]><![CDATA[></code>
<if condition='(tempInORC12id = temptblORC12id)&amp;(tempInOBR16id = temptblOBR16id)' >
<false>
<code>
<![CDATA[ 
    // ordering doc on table differs from regions hl7 message
    //  update hl7 message
    //  if multiple orc do fornext to updated each orc/obr
]]]]><![CDATA[></code>
<foreach property='target.{PIDgrpgrp(1).ORCgrp()}' key='k3' >
<assign value='temptblORC12' property='target.{PIDgrpgrp(1).ORCgrp(k3).ORC:12(1)}' action='set' />
<assign value='temptblOBR16' property='target.{PIDgrpgrp(1).ORCgrp(k3).OBR:16(1)}' action='set' />
</foreach>
</false>
</if>
</false>
</if>
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.RegLab2CernerBkrORUSendOut">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65931,34287.491077</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>0</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>0</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='251.Regions:ORU_R01' targetDocType='251.Regions:ORU_R01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Update: 07/01/2021 Al Johnson
	//  Last Moved to Prod:  07/06/2021 Al Johnson
    //  Created 11/05/2018 Al Johnson
    //
    //  Beaker version - schema changed from 22.RegLab to 231.Cerner
    //   Changed to version 251.Regions 11/05/2018
    //
    //   OBR-24 = SO SendOuts (Regions changed from Quest to Arup Lab)
    //   Check for OBX Change in Sequence
    //    If tied to previous OBX change to NTE segment
    //    If standalone change to subtype RC
    //  Populate OBR-22 with MSH-7 datetime of message 03/23/2017
    //  Populate OBR-27.4 with MSH-7 datetime of message 03/23/2017
    //  Check table T_RegionsLab_OrderingProvider for a change in ordering provider 11/22/2017
    //  Change result message to table ordering provider 11/22/2017
    //  Update table with result date 11/22/2017
    //
    //  Change OBX=2 SN (structured numeric) to ST (string) consolidate result value OBX-5.1 and 5.2 02/25/2019
    //
    //  Change verbiage "See Scanned Result"  SD-86137 RFC = SD-89052
    //
]]]]><![CDATA[></code>
<code>
<![CDATA[ 
    //  Update FreeText OBX as ST or NTE segment
    //  Change verbiage of "See Scanned Result" - copy so change both source and target at start
]]]]><![CDATA[></code>

<assign value='"See Scanned Result"' property='tempobx5' action='set' />
<assign value='"See scanned report located in Cerner Notes Lab folder, Documentation or eDocs."' property='tempobx5new' action='set' />
<foreach property='target.{PIDgrpgrp(1).ORCgrp()}' key='k4' >
<foreach property='target.{PIDgrpgrp(1).ORCgrp(k4).OBXgrp()}' key='k5' >
<if condition='(target.{PIDgrpgrp(1).ORCgrp(k4).OBXgrp(k5).OBX:ObservationValue(1)})=tempobx5' >
<true>
<assign value='tempobx5new' property='target.{PIDgrpgrp(1).ORCgrp(k4).OBXgrp(k5).OBX:ObservationValue(1)}' action='set' />
</true>
</if>
</foreach>
</foreach>

<foreach property='target.{PIDgrpgrp(1).ORCgrp()}' key='k2' >
<assign value='source.{MSH:DateTimeOfMessage.Time}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBR:22}' action='set' />
<assign value='source.{MSH:DateTimeOfMessage.Time}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBR:27.4}' action='set' />
<assign value='0' property='tmpnte' action='set' />
<foreach property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp()}' key='k1' >
<if condition='k1="1"' >
<true>
<assign value='0' property='tmpnte' action='set' />
</true>
<false>
<if condition='(source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:SetIDOBX})=(source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1-1).OBX:SetIDOBX})' >
<true>
<assign value='tmpnte+1' property='tmpnte' action='set' />
<assign value='' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1)}' action='remove' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:SetIDOBX}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).NTE(tmpnte):SetIDNTE}' action='set' />
<assign value='"NTE"' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).NTE(tmpnte):SourceofComment}' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:ObservationValue(1)}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).NTE(tmpnte):Comment(1)}' action='set' />
<if condition='source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:ObservationValue(1)}=tempobx5' >
<true>
<assign value='tempobx5new' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).NTE(tmpnte):Comment(1)}' action='set' />
</true>
</if>
</true>
<false>
<assign value='0' property='tmpnte' action='set' />
</false>
</if>
</false>
</if>
</foreach>
</foreach>

<code>
<![CDATA[ 
    //  02/25/2019 change SN to ST consolidate OBX-5.1 and 5.2 values
]]]]><![CDATA[></code>
   
<foreach property='target.{PIDgrpgrp(1).ORCgrp()}' key='k10' >
<foreach property='target.{PIDgrpgrp(1).ORCgrp(k10).OBXgrp()}' key='k11' >
<if condition='target.{PIDgrpgrp(1).ORCgrp(k10).OBXgrp(k11).OBX:2}="SN"' >
<true>
<assign value='"ST"' property='target.{PIDgrpgrp(1).ORCgrp(k10).OBXgrp(k11).OBX:2}' action='set' />
<assign value='""' property='hold51' action='set' />
<assign value='""' property='hold52' action='set' />
<assign value='target.{PIDgrpgrp(1).ORCgrp(k10).OBXgrp(k11).OBX:5(1).1}' property='hold51' action='set' />
<assign value='target.{PIDgrpgrp(1).ORCgrp(k10).OBXgrp(k11).OBX:5(1).2}' property='hold52' action='set' />
<assign value='hold51_hold52' property='target.{PIDgrpgrp(1).ORCgrp(k10).OBXgrp(k11).OBX:5(1)}' action='set' />
</true>
</if>
</foreach>
</foreach>

<code>
<![CDATA[ 
    //  Check table T_RegionsLab_OrderingProvider for a change in ordering provider 11/22/2017
    //  Change result message to table ordering provider 11/22/2017
]]]]><![CDATA[></code>
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:2.1}' property='tempCernerOrder' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).ORC:12(1)}' property='tempORC12' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:16(1)}' property='tempOBR16' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).ORC:12(1).1}' property='tempInORC12id' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:16(1).1}' property='tempInOBR16id' action='set' />
<assign value='""' property='tempDateResult' action='set' />
<assign value='""' property='tempDateCancel' action='set' />
<assign value='tempCernerOrder' property='wTableKey' action='set' />
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_RegionsLab_OrderingProvider",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<code>
<![CDATA[ 
    // no entry found - so send to Cerner as received
]]]]><![CDATA[></code>
</true>
<false>
<code>
<![CDATA[ 
    // table entry found - change ordering doc in message
]]]]><![CDATA[></code>
<assign value='$PIECE(wtableresult,"|",1)' property='temptblORC12' action='set' />
<assign value='$PIECE(temptblORC12,"^",1)' property='temptblORC12id' action='set' />
<assign value='$PIECE(wtableresult,"|",2)' property='temptblOBR16' action='set' />
<assign value='$PIECE(temptblOBR16,"^",1)' property='temptblOBR16id' action='set' />
<assign value='$PIECE(wtableresult,"|",3)' property='temptblDateAdd' action='set' />
<assign value='$PIECE(wtableresult,"|",4)' property='temptblDateResult' action='set' />
<assign value='$PIECE(wtableresult,"|",5)' property='temptblDateCancel' action='set' />
<assign value='$ZDATE($NOW(),8)' property='tempDateResult' action='set' />
<code>
<![CDATA[ 
    // result from Regions - update table with result date
        set wTableData=(temptblORC12_"|"_temptblOBR16_"|"_temptblDateAdd_"|"_tempDateResult_"|"_temptblDateCancel_"|") 
        set wTableName="T_RegionsLab_OrderingProvider"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,wTableKey,wTableData)	
]]]]><![CDATA[></code>
<if condition='(tempInORC12id = temptblORC12id)&amp;(tempInOBR16id = temptblOBR16id)' >
<false>
<code>
<![CDATA[ 
    // ordering doc on table differs from regions hl7 message
    //  update hl7 message
    //  if multiple orc do fornext to updated each orc/obr
]]]]><![CDATA[></code>
<foreach property='target.{PIDgrpgrp(1).ORCgrp()}' key='k3' >
<assign value='temptblORC12' property='target.{PIDgrpgrp(1).ORCgrp(k3).ORC:12(1)}' action='set' />
<assign value='temptblOBR16' property='target.{PIDgrpgrp(1).ORCgrp(k3).OBR:16(1)}' action='set' />
</foreach>
</false>
</if>
</false>
</if>
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.RegLab2CernerBkrORUmb">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>66135,30008.286725</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='251.Regions:ORU_R01' targetDocType='251.Regions:ORU_R01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Update: 01/24/2022 Al Johnson
	//  Last Moved to Prod:  01/26/2022 Al Johnson
    //  Created 08/20/2018 Al Johnson
    //
    //  Beaker version - schema changed from 22.RegLab to 231.Cerner
    //   Changed to version 251.Regions 10/15/2018
    //
    //   copy Regions Message to Cerner output
    //   remove OBXgrp
    //   string together OBX result messages for Cerner
    //   write one OBX with new data
    //  12/12/2016  send TX in OBX-2, not ST. String has a limit of 255 characters so PowerChart display is bad.
    //  01/29/2107 check for OBX-5 This is considered a significant result. Clinical correlation is indicated. and set ABN abnormal result
    //
    //  03/23/2017 Populate OBR-22 with MSH-7 datetime of message
    //  03/23/2017 Populate OBR-27.4 with MSH-7 datetime of message
    //
    //  Check table T_RegionsLab_OrderingProvider for a change in ordering provider 11/22/2017
    //  Change result message to table ordering provider 11/22/2017
    //  Update table with result date 11/22/2017
    //
    //  01/02/2018 change ABN to 'A' for abnormal result
    //  11/27/2018 Beaker Epic sends test in OBR:4.1, take from there
    //  11/27/2018 Beaker Epic changed to send report in OBX - Cerner discrete as seperate viewer
    //  11/27/2018 Performing Lab not being sent in OBX:15
    //
    //  03/21/2019 Move NTE segments from OBR to after OBX
    //  03/21/2019 Include specific OBX NTE segments in OBX string
    //
    //  03/27/2019 Check OBX:3.1 for value.  If populated add OBX:3.2 to OBX:5 in new OBX
    //
    //  06/03/2021 Check Test for specific values and set OBX(1)-3.1 and 3.2  RFC SD-85921
    //             Anaerobic = ANAC Aerobic = AERC Extended Anaerobic = EANAC Extended Aerobic = EAERC
    //
    //  01/24/2022 Embed OBR NTE segments in data blob, add heading ADDITIONAL INFORMATION SD-110894 RFC SD-113789
]]]]><![CDATA[></code>
<foreach property='target.{PIDgrpgrp(1).ORCgrp()}' key='k2' >
<assign value='source.{MSH:DateTimeOfMessage.Time}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBR:22}' action='set' />
<assign value='source.{MSH:DateTimeOfMessage.Time}' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBR:27.4}' action='set' />
<if condition='(source.{PIDgrpgrp(1).ORCgrp(k2).OBR:ResultStatus} = "") || (source.{PIDgrpgrp(1).ORCgrp(k2).OBR:ResultStatus} = "I")' >
<true>
<assign value='"P"' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBR:ResultStatus}' action='set' />
</true>
</if>
<code>
<![CDATA[ 
    //  Remove OBX segments copied from source
    //  Set tempfield obx5 to check for obx3 update
]]]]><![CDATA[></code>
<assign value='""' property='tempobx5' action='set' />
<foreach property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp()}' key='k1' >
<if condition='(..StartsWith(target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:ObservationValue(1)},"Test:"))' >
<true>
<assign value='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:ObservationValue(1)}' property='tempobx5' action='set' />
</true>
</if>
<assign value='' property='target.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1)}' action='remove' />
</foreach>
<code>
<![CDATA[ 
    //  String descriptions together, remove ~ from col 1 add performed at line
]]]]><![CDATA[></code>
<assign value='""' property='tempabnormal' action='set' />
<assign value='""' property='holdOBXdesc' action='set' />
<assign value='""' property='holdOBXdesc1' action='set' />
<assign value='""' property='holdOBXdesc1a' action='set' />
<foreach property='source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp()}' key='k1' >

<if condition='(source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:3.1}="")' >
<true>
<assign value='$TR(source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:5},"^"," ")' property='holdOBXdesc1' action='set' />
<assign value='(holdOBXdesc_"~"_holdOBXdesc1)' property='holdOBXdesc' action='set' />
</true>
<false>
<assign value='source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:3.2}' property='holdOBXdesc1a' action='set' />
<assign value='$TR(source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:5},"^"," ")' property='holdOBXdesc1' action='set' />
<assign value='(holdOBXdesc_"~"_holdOBXdesc1a_": "_holdOBXdesc1)' property='holdOBXdesc' action='set' />
</false>
</if>

<if condition='source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).OBX:8(1)}=""' >
<false>
<assign value='"A"' property='tempabnormal' action='set' />
</false>
</if>
<foreach property='source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).NTE()}' key='k4' >
<assign value='$TR(source.{PIDgrpgrp(1).ORCgrp(k2).OBXgrp(k1).NTE(k4):3},"^"," ")' property='holdOBXdesc1' action='set' />
<assign value='(holdOBXdesc_"~"_holdOBXdesc1)' property='holdOBXdesc' action='set' />
</foreach>
</foreach>
</foreach>
<code>
<![CDATA[ 
   set holdOBXdesc=$REPLACE(holdOBXdesc,"~","",1,1)
   
   //   <assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(1).OBX:15}' property='PERFlab' action='set' />
   //   <assign value='(holdOBXdesc_"~"_PERFlab)' property='holdOBXdesc' action='set' />
]]]]><![CDATA[></code>

<assign value='""' property='target.{PIDgrpgrp(1).ORCgrp(1).OBR:4}' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:4.1}' property='target.{PIDgrpgrp(1).ORCgrp(1).OBR:4.1}' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:4.1}' property='target.{PIDgrpgrp(1).ORCgrp(1).OBR:4.2}' action='set' />
<assign value='"MB"' property='target.{PIDgrpgrp(1).ORCgrp(1).OBR:24}' action='set' />
<assign value='"1"' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(1).OBX:SetIDOBX}' action='set' />
<assign value='"TX"' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(1).OBX:ValueType}' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:4.1}' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(1).OBX:ObservationIdentifier.Identifier}' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:4.1}' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(1).OBX:ObservationIdentifier.Text}' action='set' />
<assign value='holdOBXdesc' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(1).OBX:5}' action='set' />
<assign value='tempabnormal' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(1).OBX:8}' action='set' />
<assign value='target.{PIDgrpgrp(1).ORCgrp(1).OBR:ResultStatus}' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(1).OBX:11}' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(1).OBX:15}' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(1).OBX:15}' action='set' />

<code>
<![CDATA[ 
   //  6/3/2021 set obx:3.1 and obx:3.2 different on specific reports
]]]]><![CDATA[></code>
<if condition='tempobx5="Test:               Anaerobic Culture"' >
<true>
<assign value='"ANAC"' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(1).OBX:ObservationIdentifier.Identifier}' action='set' />
<assign value='"ANAC"' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(1).OBX:ObservationIdentifier.Text}' action='set' />
</true>
</if>

<if condition='tempobx5="Test:               Aerobic Culture"' >
<true>
<assign value='"AERC"' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(1).OBX:ObservationIdentifier.Identifier}' action='set' />
<assign value='"AERC"' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(1).OBX:ObservationIdentifier.Text}' action='set' />
</true>
</if>

<if condition='tempobx5="Test:               Anaerobic Culture Extended Incubation 14 Days"' >
<true>
<assign value='"EANAC"' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(1).OBX:ObservationIdentifier.Identifier}' action='set' />
<assign value='"EANAC"' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(1).OBX:ObservationIdentifier.Text}' action='set' />
</true>
</if>

<if condition='tempobx5="Test:               Aerobic Culture Extended Incubation 14 Days"' >
<true>
<assign value='"EAERC"' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(1).OBX:ObservationIdentifier.Identifier}' action='set' />
<assign value='"EAERC"' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(1).OBX:ObservationIdentifier.Text}' action='set' />
</true>
</if>

<code>
<![CDATA[ 
    //  Remove NTE segments following OBR - move to follow OBX
    //
    //  Embed NTE data in OBX data blob
]]]]><![CDATA[></code>
<assign value='""' property='temphasnte' action='set' />
<assign value='""' property='tempnteseg2' action='set' />
<assign value='""' property='tempnteseg3' action='set' />
<assign value='"~ADDITIONAL INFORMATION~-------------------------------------------"' property='holdnteseg1' action='set' />

<foreach property='target.{PIDgrpgrp(1).ORCgrp()}' key='k5' >
<foreach property='target.{PIDgrpgrp(1).ORCgrp(k5).NTE()}' key='k6' >
<assign value='' property='target.{PIDgrpgrp(1).ORCgrp(k5).NTE(k6)}' action='remove' />
<assign value='"1"' property='temphasnte' action='set' />
<assign value='$TR(source.{PIDgrpgrp(1).ORCgrp(k5).NTE(k6):3},"^"," ")' property='tempnteseg3' action='set' />
<assign value='(tempnteseg2_"~"_tempnteseg3)' property='tempnteseg2' action='set' />
</foreach>
</foreach>

<if condition='temphasnte="1"' >
<true>
<assign value='(holdnteseg1_tempnteseg2)' property='tempnteseg2' action='set' />
<assign value='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(1).OBX:5}' property='tempnteseg3' action='set' />
<assign value='tempnteseg3_tempnteseg2_"~"' property='target.{PIDgrpgrp(1).ORCgrp(1).OBXgrp(1).OBX:5}' action='set' />
</true>
</if>

<code>
<![CDATA[ 
    //  Check table T_RegionsLab_OrderingProvider for a change in ordering provider 11/22/2017
    //  Change result message to table ordering provider 11/22/2017
]]]]><![CDATA[></code>
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:2.1}' property='tempCernerOrder' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).ORC:12(1)}' property='tempORC12' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:16(1)}' property='tempOBR16' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).ORC:12(1).1}' property='tempInORC12id' action='set' />
<assign value='source.{PIDgrpgrp(1).ORCgrp(1).OBR:16(1).1}' property='tempInOBR16id' action='set' />
<assign value='""' property='tempDateResult' action='set' />
<assign value='""' property='tempDateCancel' action='set' />
<assign value='tempCernerOrder' property='wTableKey' action='set' />
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_RegionsLab_OrderingProvider",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<code>
<![CDATA[ 
    // no entry found - so send to Cerner as received
]]]]><![CDATA[></code>
</true>
<false>
<code>
<![CDATA[ 
    // table entry found - change ordering doc in message
]]]]><![CDATA[></code>
<assign value='$PIECE(wtableresult,"|",1)' property='temptblORC12' action='set' />
<assign value='$PIECE(temptblORC12,"^",1)' property='temptblORC12id' action='set' />
<assign value='$PIECE(wtableresult,"|",2)' property='temptblOBR16' action='set' />
<assign value='$PIECE(temptblOBR16,"^",1)' property='temptblOBR16id' action='set' />
<assign value='$PIECE(wtableresult,"|",3)' property='temptblDateAdd' action='set' />
<assign value='$PIECE(wtableresult,"|",4)' property='temptblDateResult' action='set' />
<assign value='$PIECE(wtableresult,"|",5)' property='temptblDateCancel' action='set' />
<assign value='$ZDATE($NOW(),8)' property='tempDateResult' action='set' />
<code>
<![CDATA[ 
    // result from Regions - update table with result date
        set wTableData=(temptblORC12_"|"_temptblOBR16_"|"_temptblDateAdd_"|"_tempDateResult_"|"_temptblDateCancel_"|") 
        set wTableName="T_RegionsLab_OrderingProvider"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,wTableKey,wTableData)	
]]]]><![CDATA[></code>
<if condition='(tempInORC12id = temptblORC12id)&amp;(tempInOBR16id = temptblOBR16id)' >
<false>
<code>
<![CDATA[ 
    // ordering doc on table differs from regions hl7 message
    //  update hl7 message
    //
    //  if multiple orc do fornext to updated each orc/obr
]]]]><![CDATA[></code>
<foreach property='target.{PIDgrpgrp(1).ORCgrp()}' key='k3' >
<assign value='temptblORC12' property='target.{PIDgrpgrp(1).ORCgrp(k3).ORC:12(1)}' action='set' />
<assign value='temptblOBR16' property='target.{PIDgrpgrp(1).ORCgrp(k3).OBR:16(1)}' action='set' />
</foreach>
</false>
</if>
</false>
</if>
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.RegLab2CernerGDFTv1">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64378,53924.011467</TimeChanged>
<TimeCreated>61601,38599.428669</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='22.RegLab:GLT_DFT' targetDocType='231.Cerner:DFT_P03' create='new' language='objectscript' >
<code>
<![CDATA[ 
	// Last Updated: 01/26/2016 Al Johnson
	// Last Updated in Prod:  xx/xx/xxxx
	// Created in Cert 06/09/2016 copied from DEV GCH.RegLab2AffinityGDFTv3 - Al Johnson
	// Use Z segment to transfer data in HL7 file instead of flat file
	// Remove leading zero in account numbers if sent
	// Remove leading M or E in Physician code if sent
	// Use GC.RegionsCharges.CernerGetPatientInfo to get MRN off Cerner tables
	// 
	// Use GCH.Regions.DFT.VisitTBL Table data to assign MRN and verify Account number
		// First Using Account get MRN
		// If Account not found 
		//   use Patient Last & First Name, if unique, to get MRN
		//   If MRN found use to get valid Account number by DOS if IP account exists use else look for valid OP
		//      If none found just send account as sent by Regions
	// Do Not Send CPT code.  Cerner will build in tables based on CDM.
	// --  original dev / prod code - Check for CPT code range >= 80000 and <=89999 add modifier 90 01/26/2016 ALJ
	// Format unique value in FT1-2 TransactionId hl7 max 12 - take MSH:MessageControlID first 8 and last 4 characters
	// 01-11-2017 if cdm is misc CDM00011403 - include cpt and modifier
	// 01-17-2017   cpt - 25.1, 25.3 needs to be CPT  modifier/s - 26.1, 26.3 needs to be CPTMOD

]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='"GCH"' property='target.{MSH:ReceivingFacility}' action='set' />
<assign value='"RegLab2CernerGDFTv1"' property='target.{MSH:Security}' action='set' />
<assign value='"DFT^P03"' property='target.{MSH:MessageType}' action='set' />
<assign value='"2.3"' property='target.{MSH:VersionID}' action='set' />
<assign value='"P03"' property='target.{EVN:EventTypeCode}' action='set' />
<assign value='"RGCHG"' property='target.{FT1grp(1).FT1:DepartmentCode}' action='set' />
<assign value='"CHG"' property='target.{FT1grp(1).FT1:TransactionCode.nameofcodingsystem}' action='set' />
<code>
<![CDATA[ 
	// Configure Credits
]]]]><![CDATA[></code>
<if condition='source.{ZDF:ZDF7ChargeCreditCode} = "CR"' >
<true>
<assign value='$Translate(source.{ZDF:ZDF10Quanity},"-","")' property='source.{ZDF:ZDF10Quanity}' action='set' />
<assign value='$Translate(source.{ZDF:ZDF11ExtAmount},"-","")' property='source.{ZDF:ZDF11ExtAmount}' action='set' />
</true>
</if>
<code>
<![CDATA[ 
    // set FT1-1 setid
    // set FT1-2 transaction id must be unique - take 1st 8 and last 4 from msh message control id
	// set FT1-5 transaction posting date for Cerner
]]]]><![CDATA[></code>
<assign value='"1"' property='target.{FT1grp(1).FT1:SetIDFT1}' action='set' />
<assign value='source.{MSH:MessageControlID}' property='tempid1' action='set' />
<assign value='$EXTRACT(tempid1,1,8)' property='tempid1a' action='set' />
<assign value='$EXTRACT(tempid1,*-3,*)' property='tempid1b' action='set' />
<assign value='tempid1a_tempid1b' property='target.{FT1grp(1).FT1:TransactionID}' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='target.{FT1grp(1).FT1:TransactionDate}' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='target.{FT1grp(1).FT1:TransactionPostingDate}' action='set' />
<assign value='source.{ZDF:ZDF7ChargeCreditCode}' property='target.{FT1grp(1).FT1:TransactionType}' action='set' />
<assign value='source.{ZDF:ZDF8ChargeCode}' property='Tempcode' action='set' />
<if condition='(..StartsWith(Tempcode,"00011403")) &amp;&amp; ($LENGTH(source.{ZDF:ZDF8ChargeCode}) &gt; 0) ' >
<true>
<assign value='source.{ZDF:ZDF8ChargeCode}' property='target.{FT1grp(1).FT1:ProcedureCode.identifier}' action='set' />
<assign value='Tempcode' property='target.{FT1grp(1).FT1:TransactionCode.identifier}' action='set' />
</true>
</if>
<if condition='(..StartsWith(Tempcode,"00011403")) &amp;&amp; ($LENGTH(source.{ZDF:ZDF8ChargeCode}) &lt; 1) ' >
<true>
<assign value='"MISCERROR"' property='target.{FT1grp(1).FT1:TransactionCode.identifier}' action='set' />
<assign value='"MiscErrorNoProc"' property='target.{FT1grp(1).FT1:TransactionCode.text}' action='set' />
<assign value='"ERR"' property='target.{FT1grp(1).FT1:TransactionCode.nameofcodingsystem}' action='set' >
<annotation># set  misc charge code to MISCERROR so will error in affinity 
	# Helps PA , they will then put account on hold. </annotation>
</assign>
</true>
</if>
<if condition='$LENGTH(source.{ZDF:ZDF8ChargeCode}) &gt; 0 ' >
<true>
<assign value='"MISCERROR"' property='target.{FT1grp(1).FT1:TransactionCode.identifier}' action='set' />
<assign value='"MiscErrorNoProc"' property='target.{FT1grp(1).FT1:TransactionCode.text}' action='set' />
<assign value='"ERR"' property='target.{FT1grp(1).FT1:TransactionCode.nameofcodingsystem}' action='set' >
<annotation># set  misc charge code to MISCERROR so will error in affinity 
	# Helps PA , they will then put account on hold. </annotation>
</assign>
</true>
</if>
<if condition='((..StartsWith(Tempcode, "00011403" )) &amp; (+source.{ZDF:ZDF11ExtAmount} = 0)) ' >
<annotation>
	-----------------------------------------------
	If an error Force REGIONS misc charge to exception report in affinity
	Move 7.1 to 7.2
	Remove CHF from 7.3
	Set FT1.6  to ERR
	-----------------------------------------------
	</annotation>
<true>
<assign value='"ERR"' property='target.{FT1grp(1).FT1:TransactionType}' action='set' />
<assign value='Tempcode' property='target.{FT1grp(1).FT1:TransactionCode.identifier}' action='set' />
<assign value='"MiscErrorZeroAmt"' property='target.{FT1grp(1).FT1:TransactionCode.text}' action='set' />
<assign value='"ERR"' property='target.{FT1grp(1).FT1:TransactionCode.nameofcodingsystem}' action='set' />
<assign value='""' property='ChargeText' action='set' />
</true>
<false>
<if condition='(..StartsWith(source.{ZDF:ZDF8ChargeCode}, "00011403" )) &amp; (+source.{ZDF:ZDF11ExtAmount} &gt; 0) &amp; (source.{ZDF:ZDF8ChargeCode} = "") ' >
<annotation>
		-----------------------------------------------
		If an error Force REGIONS misc charge to exception report in affinity
		Move 7.1 to 7.2
		Remove CHF from 7.3
		Set FT1.6  to ERR
		-----------------------------------------------
		</annotation>
<true>
<assign value='"ERR"' property='target.{FT1grp(1).FT1:TransactionCode.identifier}' action='set' />
<assign value='"MiscErrorNoPro"' property='target.{FT1grp(1).FT1:TransactionCode.text}' action='set' />
<assign value='"ERR"' property='target.{FT1grp(1).FT1:TransactionCode.nameofcodingsystem}' action='set' />
<assign value='""' property='ChargeText' action='set' />
</true>
<false>
<assign value='Tempcode' property='target.{FT1grp(1).FT1:TransactionCode.identifier}' action='set' />
<assign value='""' property='target.{FT1grp(1).FT1:TransactionCode.text}' action='set' />
<assign value='"CHG"' property='target.{FT1grp(1).FT1:TransactionCode.nameofcodingsystem}' action='set' />
<assign value='source.{ZDF:ZDF7ChargeCreditCode}' property='target.{FT1grp(1).FT1:TransactionType}' action='set' >
<annotation>
		-----------------------------------------------
		Everything is good and pad out the card code to 8
		-----------------------------------------------
		</annotation>
</assign>
</false>
</if>
</false>
</if>
<code>
<![CDATA[ 
	// update Regions price by 1.5048 and round
	// for Cerner update unit price with 1.5048 rounded price
]]]]><![CDATA[></code>
<if condition='( +source.{ZDF:ZDF11ExtAmount} &lt;= 0)' >
<true>
<assign value='"0"' property='target.{FT1grp(1).FT1:TransactionAmountExtended}' action='set' />
<assign value='"0"' property='target.{FT1grp(1).FT1:TransactionAmountUnit}' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF11ExtAmount}/source.{ZDF:ZDF10Quanity}' property='currPrice' action='set' />
<assign value='currPrice * (1.5048*1000)' property='newPrice' action='set' />
<assign value='$NUMBER(newPrice,0)' property='newPrice' action='set' />
<assign value='((((( newPrice \ 500 ) + 1 ) * 500 ) - newPrice ) # 500)' property='diff' action='set' />
<assign value=' newPrice + diff' property='newPrice' action='set' />
<assign value='newPrice / 1000' property='newPrice' action='set' />
<assign value='newPrice' property='target.{FT1grp(1).FT1:TransactionAmountUnit}' action='set' />
<assign value='newPrice * source.{ZDF:ZDF10Quanity}' property='newPrice' action='set' />
<assign value='newPrice' property='target.{FT1grp(1).FT1:TransactionAmountExtended}' action='set' />
</false>
</if>
<assign value='source.{ZDF:ZDF10Quanity}' property='target.{FT1grp(1).FT1:TransactionQuantity}' action='set' />
<assign value='source.{ZDF:ZDF2LastName}' property='target.{PID:PatientName(1).familylastname}' action='set' />
<assign value='source.{ZDF:ZDF3FirstName}' property='target.{PID:PatientName(1).givenname}' action='set' />
<assign value='source.{ZDF:ZDF4MiddleName}' property='target.{PID:PatientName(1).middleinitialorname}' action='set' />
<assign value='source.{ZDF:ZDF2LastName}' property='tpatientlastnm' action='set' />
<assign value='source.{ZDF:ZDF3FirstName}' property='tpatientfirstnm' action='set' />
<assign value='source.{ZDF:ZDF4MiddleName}' property='tpatientmiddlenm' action='set' />
<code>
<![CDATA[ 
	// remove CDM prefix and leading zeros from Regions cdm
	// set cpt field and modifier to null
]]]]><![CDATA[></code>
<assign value='source.{ZDF:ZDF8ChargeCode}' property='tempcdm' action='set' />
<assign value='$ZSTRIP(tempcdm,"&lt;","CDM")' property='tempcdm1' action='set' />
<assign value='$ZSTRIP(tempcdm1,"&lt;","0")' property='tempcdm2' action='set' />
<assign value='tempcdm2' property='target.{FT1grp(1).FT1:TransactionCode.identifier}' action='set' />
<code>
<![CDATA[ 
	// keep cpt and modifier on misc cdm 11403
]]]]><![CDATA[></code>
<if condition='tempcdm2="11403"' >
<true>
<assign value='source.{ZDF:ZDF14CPTCode}' property='target.{FT1grp(1).FT1:ProcedureCode.identifier}' action='set' />
<assign value='"CPT"' property='target.{FT1grp(1).FT1:ProcedureCode.nameofcodingsystem}' action='set' />
<assign value='source.{ZDF:ZDF15Modifier}' property='target.{FT1grp(1).FT1:ProcedureCodeModifier(1).identifier}' action='set' />
<if condition='source.{ZDF:ZDF15Modifier}=""' >
<false>
<assign value='"CPTMOD"' property='target.{FT1grp(1).FT1:ProcedureCodeModifier(1).nameofcodingsystem}' action='set' />
</false>
</if>
</true>
<false>
<assign value='""' property='target.{FT1grp(1).FT1:ProcedureCode}' action='set' />
<assign value='""' property='target.{FT1grp(1).FT1:ProcedureCodeModifier(1)}' action='set' />
</false>
</if>
<code>
<![CDATA[ 
    // write !,("tempcdm="_tempcdm_" tempcdm1="_tempcdm1)
    // $$$TRACE("tempcdm="_tempcdm_" tempcdm1="_tempcdm1)
    // $$$TRACE("tMRN="_tMRN)    
	]]]]><![CDATA[></code>
<code>
<![CDATA[ 
	// remove M prefix if one exists
]]]]><![CDATA[></code>
<if condition='..StartsWith(source.{ZDF:ZDF13ServicePhyCode},"M")|| ..StartsWith(source.{ZDF:ZDF12OrderingPhyCode},"E") ' >
<true>
<assign value='..SubString(source.{ZDF:ZDF13ServicePhyCode},2,8)' property='target.{FT1grp(1).FT1:PerformedByCode}' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF13ServicePhyCode}' property='target.{FT1grp(1).FT1:PerformedByCode}' action='set' />
</false>
</if>
<if condition='..StartsWith(source.{ZDF:ZDF12OrderingPhyCode},"M") || ..StartsWith(source.{ZDF:ZDF12OrderingPhyCode},"E") ' >
<true>
<assign value='..SubString(source.{ZDF:ZDF12OrderingPhyCode},2,8)' property='target.{FT1grp(1).FT1:OrderedByCode}' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF12OrderingPhyCode}' property='target.{FT1grp(1).FT1:OrderedByCode}' action='set' />
</false>
</if>
<code>
<![CDATA[ 
	// ***************** Coding for Account and MRN ************************
	// Use GCH.Regions.DFT.VisitTBL Table data to assign MRN and verify Account number
	// First Using Account get MRN
	// If Account not found 
		// use Patient Last & First Name, if unique, to get MRN
		// with MRN get valid Account by DOS if IP account exists else look for valid OP
			// If none found just send account as sent by Regions
]]]]><![CDATA[></code>
<assign value='source.{ZDF:ZDF2LastName}' property='pPatientNameLast' action='set' />
<assign value='source.{ZDF:ZDF3FirstName}' property='pPatientNameFirst' action='set' />
<assign value='""' property='pMRN' action='set' />
<code>
<![CDATA[ 
	// strip leading zero on account numbers and set variable.		
]]]]><![CDATA[></code>
<assign value='"0NopAcct"' property='pPatientAccount' action='set' />
<assign value='"NotAcct"' property='tPatientAccount' action='set' />
<assign value='"NoOldAcct"' property='OldAccount' action='set' />
<assign value='"NoOutAcct"' property='tAccountOut' action='set' />
<assign value='"NoInAcct"' property='tAccountIn' action='set' />
<assign value='"notMRN"' property='tMRN' action='set' />
<assign value='"Noname"' property='tMRNname' action='set' />
<assign value='""' property='pDOS' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='pDOS' action='set' />
<assign value='source.{ZDF:ZDF1AccountNumber}' property='OldAccount' action='set' />
<assign value='$ZSTRIP(OldAccount,"&lt;","0")' property='pPatientAccount' action='set' />
<assign value='pPatientAccount' property='target.{MSH:25}' action='set' />
<assign value='pPatientAccount' property='target.{PID:18}' action='set' />
<assign value='"MRNnotFnd"' property='target.{MSH:16}' action='set' />
<assign value='"NoMRN "' property='target.{MSH:22}' action='set' />
<assign value='""' property='tMRN' action='set' />
<if condition='pPatientAccount = ""' >
<false>
<code>
<![CDATA[ 
	// Using Account and get MRN 
    // alj 	set tMRN = ##class(GCH.Regions.DFT.VisitTBL).AccountGetMRN(pPatientAccount)
    // $$$TRACE("pPatientAccount="_pPatientAccount)
    set tMRN=""
    set tMRN=##class(GC.CernerGetData).CernerGetPatientInfoByFin(pPatientAccount)
    // $$$TRACE("tMRN="_tMRN)    
    ]]]]><![CDATA[></code>
</false>
</if>
<if condition='tMRN=""' >
<false>
<assign value='pPatientAccount' property='tAccountIn' action='set' />
</false>
</if>

<if condition='tMRN = ""' >
<true>
<assign value='"AcctNoFnd"' property='target.{MSH:21}' action='set' />
<code>
<![CDATA[ 
	// Using Patient Last,First Name and Middle Name to get MRN from PatientData table if unique
    //  $$$TRACE("tMRNpatnmB4="_tMRN)
    set tMRN=##class(GC.CernerGetData).CernerGetPatientInfoByName(tpatientlastnm,tpatientfirstnm,tpatientmiddlenm)
    // $$$TRACE("tMRN="_tMRN)
	]]]]><![CDATA[></code>
<if condition='tMRN = ""' >
<true>
<assign value='""' property='target.{PID:3}' action='set' />
</true>
<false>
<assign value='"MRNbyName"' property='target.{MSH:16}' action='set' />
<assign value='tMRN' property='target.{PID:3}' action='set' />
<assign value='tMRN' property='target.{MSH:22}' action='set' />
</false>
</if>
</true>
<false>
<assign value='"MRNbyAcct"' property='target.{MSH:16}' action='set' />
<assign value='tMRN' property='target.{PID:3}' action='set' />
<assign value='tMRN' property='target.{MSH:22}' action='set' />
<assign value='"AcctFound"' property='target.{MSH:21}' action='set' />
</false>
</if>
<if condition='target.{PID:18} = "noacct"' >
<true>
<code>
<![CDATA[ 
	//  If no valid account found account as sent from Regions
]]]]><![CDATA[></code>
<assign value='pPatientAccount' property='target.{PID:18}' action='set' />
</true>
</if>

<code>
<![CDATA[ 
	// MSH Value Depending on Account Number Changed
]]]]><![CDATA[></code>
<if condition='target.{PID:18} = source.{ZDF:ZDF1AccountNumber}' >
<true>
<assign value='"AcctSame"' property='target.{MSH:23}' action='set' />
<assign value='source.{ZDF:ZDF1AccountNumber}' property='target.{MSH:24}' action='set' />
<assign value='target.{PID:18}' property='target.{MSH:25}' action='set' />
<assign value='""' property='target.{MSH:26}' action='set' />
</true>
<false>
<if condition='target.{PID:18} = target.{MSH:25}' >
<true>
<assign value='"AcctChg"' property='target.{MSH:23}' action='set' />
<assign value='source.{ZDF:ZDF1AccountNumber}' property='target.{MSH:24}' action='set' />
<assign value='""' property='target.{MSH:26}' action='set' />
</true>
<false>
<assign value='"NewAccount"' property='target.{MSH:23}' action='set' />
<assign value='source.{ZDF:ZDF1AccountNumber}' property='target.{MSH:24}' action='set' />
<assign value='target.{PID:18}' property='target.{MSH:26}' action='set' />
<assign value='""' property='target.{MSH:27}' action='set' />
</false>
</if>
</false>
</if>
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.RegLab2CernerGDFTv1TESTODBC">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64748,32473.380034</TimeChanged>
<TimeCreated>61601,38599.428669</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='22.RegLab:GLT_DFT' targetDocType='231.Cerner:DFT_P03' create='new' language='objectscript' >
<code>
<![CDATA[ 
	// Last Updated: 01/26/2016 Al Johnson
	// Last Updated in Prod:  xx/xx/xxxx
	// Created in Cert 06/09/2016 copied from DEV GCH.RegLab2AffinityGDFTv3 - Al Johnson
	// Use Z segment to transfer data in HL7 file instead of flat file
	// Remove leading zero in account numbers if sent
	// Remove leading M or E in Physician code if sent
	// Use GC.RegionsCharges.CernerGetPatientInfo to get MRN off Cerner tables
	// 
	// Use GCH.Regions.DFT.VisitTBL Table data to assign MRN and verify Account number
		// First Using Account get MRN
		// If Account not found 
		//   use Patient Last & First Name, if unique, to get MRN
		//   If MRN found use to get valid Account number by DOS if IP account exists use else look for valid OP
		//      If none found just send account as sent by Regions
	// Do Not Send CPT code.  Cerner will build in tables based on CDM.
	// --  original dev / prod code - Check for CPT code range >= 80000 and <=89999 add modifier 90 01/26/2016 ALJ
	// Format unique value in FT1-2 TransactionId hl7 max 12 - take MSH:MessageControlID first 8 and last 4 characters
	// 01-11-2017 if cdm is misc CDM00011403 - include cpt and modifier
	// 01-17-2017   cpt - 25.1, 25.3 needs to be CPT  modifier/s - 26.1, 26.3 needs to be CPTMOD

]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='"GCH"' property='target.{MSH:ReceivingFacility}' action='set' />
<assign value='"RegLab2CernerGDFTv1"' property='target.{MSH:Security}' action='set' />
<assign value='"DFT^P03"' property='target.{MSH:MessageType}' action='set' />
<assign value='"2.3"' property='target.{MSH:VersionID}' action='set' />
<assign value='"P03"' property='target.{EVN:EventTypeCode}' action='set' />
<assign value='"RGCHG"' property='target.{FT1grp(1).FT1:DepartmentCode}' action='set' />
<assign value='"CHG"' property='target.{FT1grp(1).FT1:TransactionCode.nameofcodingsystem}' action='set' />
<code>
<![CDATA[ 
	// Configure Credits
]]]]><![CDATA[></code>
<if condition='source.{ZDF:ZDF7ChargeCreditCode} = "CR"' >
<true>
<assign value='$Translate(source.{ZDF:ZDF10Quanity},"-","")' property='source.{ZDF:ZDF10Quanity}' action='set' />
<assign value='$Translate(source.{ZDF:ZDF11ExtAmount},"-","")' property='source.{ZDF:ZDF11ExtAmount}' action='set' />
</true>
</if>
<code>
<![CDATA[ 
    // set FT1-1 setid
    // set FT1-2 transaction id must be unique - take 1st 8 and last 4 from msh message control id
	// set FT1-5 transaction posting date for Cerner
]]]]><![CDATA[></code>
<assign value='"1"' property='target.{FT1grp(1).FT1:SetIDFT1}' action='set' />
<assign value='source.{MSH:MessageControlID}' property='tempid1' action='set' />
<assign value='$EXTRACT(tempid1,1,8)' property='tempid1a' action='set' />
<assign value='$EXTRACT(tempid1,*-3,*)' property='tempid1b' action='set' />
<assign value='tempid1a_tempid1b' property='target.{FT1grp(1).FT1:TransactionID}' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='target.{FT1grp(1).FT1:TransactionDate}' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='target.{FT1grp(1).FT1:TransactionPostingDate}' action='set' />
<assign value='source.{ZDF:ZDF7ChargeCreditCode}' property='target.{FT1grp(1).FT1:TransactionType}' action='set' />
<assign value='source.{ZDF:ZDF8ChargeCode}' property='Tempcode' action='set' />
<if condition='(..StartsWith(Tempcode,"00011403")) &amp;&amp; ($LENGTH(source.{ZDF:ZDF8ChargeCode}) &gt; 0) ' >
<true>
<assign value='source.{ZDF:ZDF8ChargeCode}' property='target.{FT1grp(1).FT1:ProcedureCode.identifier}' action='set' />
<assign value='Tempcode' property='target.{FT1grp(1).FT1:TransactionCode.identifier}' action='set' />
</true>
</if>
<if condition='(..StartsWith(Tempcode,"00011403")) &amp;&amp; ($LENGTH(source.{ZDF:ZDF8ChargeCode}) &lt; 1) ' >
<true>
<assign value='"MISCERROR"' property='target.{FT1grp(1).FT1:TransactionCode.identifier}' action='set' />
<assign value='"MiscErrorNoProc"' property='target.{FT1grp(1).FT1:TransactionCode.text}' action='set' />
<assign value='"ERR"' property='target.{FT1grp(1).FT1:TransactionCode.nameofcodingsystem}' action='set' >
<annotation># set  misc charge code to MISCERROR so will error in affinity 
	# Helps PA , they will then put account on hold. </annotation>
</assign>
</true>
</if>
<if condition='$LENGTH(source.{ZDF:ZDF8ChargeCode}) &gt; 0 ' >
<true>
<assign value='"MISCERROR"' property='target.{FT1grp(1).FT1:TransactionCode.identifier}' action='set' />
<assign value='"MiscErrorNoProc"' property='target.{FT1grp(1).FT1:TransactionCode.text}' action='set' />
<assign value='"ERR"' property='target.{FT1grp(1).FT1:TransactionCode.nameofcodingsystem}' action='set' >
<annotation># set  misc charge code to MISCERROR so will error in affinity 
	# Helps PA , they will then put account on hold. </annotation>
</assign>
</true>
</if>
<if condition='((..StartsWith(Tempcode, "00011403" )) &amp; (+source.{ZDF:ZDF11ExtAmount} = 0)) ' >
<annotation>
	-----------------------------------------------
	If an error Force REGIONS misc charge to exception report in affinity
	Move 7.1 to 7.2
	Remove CHF from 7.3
	Set FT1.6  to ERR
	-----------------------------------------------
	</annotation>
<true>
<assign value='"ERR"' property='target.{FT1grp(1).FT1:TransactionType}' action='set' />
<assign value='Tempcode' property='target.{FT1grp(1).FT1:TransactionCode.identifier}' action='set' />
<assign value='"MiscErrorZeroAmt"' property='target.{FT1grp(1).FT1:TransactionCode.text}' action='set' />
<assign value='"ERR"' property='target.{FT1grp(1).FT1:TransactionCode.nameofcodingsystem}' action='set' />
<assign value='""' property='ChargeText' action='set' />
</true>
<false>
<if condition='(..StartsWith(source.{ZDF:ZDF8ChargeCode}, "00011403" )) &amp; (+source.{ZDF:ZDF11ExtAmount} &gt; 0) &amp; (source.{ZDF:ZDF8ChargeCode} = "") ' >
<annotation>
		-----------------------------------------------
		If an error Force REGIONS misc charge to exception report in affinity
		Move 7.1 to 7.2
		Remove CHF from 7.3
		Set FT1.6  to ERR
		-----------------------------------------------
		</annotation>
<true>
<assign value='"ERR"' property='target.{FT1grp(1).FT1:TransactionCode.identifier}' action='set' />
<assign value='"MiscErrorNoPro"' property='target.{FT1grp(1).FT1:TransactionCode.text}' action='set' />
<assign value='"ERR"' property='target.{FT1grp(1).FT1:TransactionCode.nameofcodingsystem}' action='set' />
<assign value='""' property='ChargeText' action='set' />
</true>
<false>
<assign value='Tempcode' property='target.{FT1grp(1).FT1:TransactionCode.identifier}' action='set' />
<assign value='""' property='target.{FT1grp(1).FT1:TransactionCode.text}' action='set' />
<assign value='"CHG"' property='target.{FT1grp(1).FT1:TransactionCode.nameofcodingsystem}' action='set' />
<assign value='source.{ZDF:ZDF7ChargeCreditCode}' property='target.{FT1grp(1).FT1:TransactionType}' action='set' >
<annotation>
		-----------------------------------------------
		Everything is good and pad out the card code to 8
		-----------------------------------------------
		</annotation>
</assign>
</false>
</if>
</false>
</if>
<code>
<![CDATA[ 
	// update Regions price by 1.5048 and round
	// for Cerner update unit price with 1.5048 rounded price
]]]]><![CDATA[></code>
<if condition='( +source.{ZDF:ZDF11ExtAmount} &lt;= 0)' >
<true>
<assign value='"0"' property='target.{FT1grp(1).FT1:TransactionAmountExtended}' action='set' />
<assign value='"0"' property='target.{FT1grp(1).FT1:TransactionAmountUnit}' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF11ExtAmount}/source.{ZDF:ZDF10Quanity}' property='currPrice' action='set' />
<assign value='currPrice * (1.5048*1000)' property='newPrice' action='set' />
<assign value='$NUMBER(newPrice,0)' property='newPrice' action='set' />
<assign value='((((( newPrice \ 500 ) + 1 ) * 500 ) - newPrice ) # 500)' property='diff' action='set' />
<assign value=' newPrice + diff' property='newPrice' action='set' />
<assign value='newPrice / 1000' property='newPrice' action='set' />
<assign value='newPrice' property='target.{FT1grp(1).FT1:TransactionAmountUnit}' action='set' />
<assign value='newPrice * source.{ZDF:ZDF10Quanity}' property='newPrice' action='set' />
<assign value='newPrice' property='target.{FT1grp(1).FT1:TransactionAmountExtended}' action='set' />
</false>
</if>
<assign value='source.{ZDF:ZDF10Quanity}' property='target.{FT1grp(1).FT1:TransactionQuantity}' action='set' />
<assign value='source.{ZDF:ZDF2LastName}' property='target.{PID:PatientName(1).familylastname}' action='set' />
<assign value='source.{ZDF:ZDF3FirstName}' property='target.{PID:PatientName(1).givenname}' action='set' />
<assign value='source.{ZDF:ZDF4MiddleName}' property='target.{PID:PatientName(1).middleinitialorname}' action='set' />
<assign value='source.{ZDF:ZDF2LastName}' property='tpatientlastnm' action='set' />
<assign value='source.{ZDF:ZDF3FirstName}' property='tpatientfirstnm' action='set' />
<assign value='source.{ZDF:ZDF4MiddleName}' property='tpatientmiddlenm' action='set' />
<code>
<![CDATA[ 
	// remove CDM prefix and leading zeros from Regions cdm
	// set cpt field and modifier to null
]]]]><![CDATA[></code>
<assign value='source.{ZDF:ZDF8ChargeCode}' property='tempcdm' action='set' />
<assign value='$ZSTRIP(tempcdm,"&lt;","CDM")' property='tempcdm1' action='set' />
<assign value='$ZSTRIP(tempcdm1,"&lt;","0")' property='tempcdm2' action='set' />
<assign value='tempcdm2' property='target.{FT1grp(1).FT1:TransactionCode.identifier}' action='set' />
<code>
<![CDATA[ 
	// keep cpt and modifier on misc cdm 11403
]]]]><![CDATA[></code>
<if condition='tempcdm2="11403"' >
<true>
<assign value='source.{ZDF:ZDF14CPTCode}' property='target.{FT1grp(1).FT1:ProcedureCode.identifier}' action='set' />
<assign value='"CPT"' property='target.{FT1grp(1).FT1:ProcedureCode.nameofcodingsystem}' action='set' />
<assign value='source.{ZDF:ZDF15Modifier}' property='target.{FT1grp(1).FT1:ProcedureCodeModifier(1).identifier}' action='set' />
<if condition='source.{ZDF:ZDF15Modifier}=""' >
<false>
<assign value='"CPTMOD"' property='target.{FT1grp(1).FT1:ProcedureCodeModifier(1).nameofcodingsystem}' action='set' />
</false>
</if>
</true>
<false>
<assign value='""' property='target.{FT1grp(1).FT1:ProcedureCode}' action='set' />
<assign value='""' property='target.{FT1grp(1).FT1:ProcedureCodeModifier(1)}' action='set' />
</false>
</if>
<code>
<![CDATA[ 
    // write !,("tempcdm="_tempcdm_" tempcdm1="_tempcdm1)
    // $$$TRACE("tempcdm="_tempcdm_" tempcdm1="_tempcdm1)
    // $$$TRACE("tMRN="_tMRN)    
	]]]]><![CDATA[></code>
<code>
<![CDATA[ 
	// remove M prefix if one exists
]]]]><![CDATA[></code>
<if condition='..StartsWith(source.{ZDF:ZDF13ServicePhyCode},"M")|| ..StartsWith(source.{ZDF:ZDF12OrderingPhyCode},"E") ' >
<true>
<assign value='..SubString(source.{ZDF:ZDF13ServicePhyCode},2,8)' property='target.{FT1grp(1).FT1:PerformedByCode}' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF13ServicePhyCode}' property='target.{FT1grp(1).FT1:PerformedByCode}' action='set' />
</false>
</if>
<if condition='..StartsWith(source.{ZDF:ZDF12OrderingPhyCode},"M") || ..StartsWith(source.{ZDF:ZDF12OrderingPhyCode},"E") ' >
<true>
<assign value='..SubString(source.{ZDF:ZDF12OrderingPhyCode},2,8)' property='target.{FT1grp(1).FT1:OrderedByCode}' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF12OrderingPhyCode}' property='target.{FT1grp(1).FT1:OrderedByCode}' action='set' />
</false>
</if>
<code>
<![CDATA[ 
	// ***************** Coding for Account and MRN ************************
	// Use GCH.Regions.DFT.VisitTBL Table data to assign MRN and verify Account number
	// First Using Account get MRN
	// If Account not found 
		// use Patient Last & First Name, if unique, to get MRN
		// with MRN get valid Account by DOS if IP account exists else look for valid OP
			// If none found just send account as sent by Regions
]]]]><![CDATA[></code>
<assign value='source.{ZDF:ZDF2LastName}' property='pPatientNameLast' action='set' />
<assign value='source.{ZDF:ZDF3FirstName}' property='pPatientNameFirst' action='set' />
<assign value='""' property='pMRN' action='set' />
<code>
<![CDATA[ 
	// strip leading zero on account numbers and set variable.		
]]]]><![CDATA[></code>
<assign value='"0NopAcct"' property='pPatientAccount' action='set' />
<assign value='"NotAcct"' property='tPatientAccount' action='set' />
<assign value='"NoOldAcct"' property='OldAccount' action='set' />
<assign value='"NoOutAcct"' property='tAccountOut' action='set' />
<assign value='"NoInAcct"' property='tAccountIn' action='set' />
<assign value='"notMRN"' property='tMRN' action='set' />
<assign value='"Noname"' property='tMRNname' action='set' />
<assign value='""' property='pDOS' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='pDOS' action='set' />
<assign value='source.{ZDF:ZDF1AccountNumber}' property='OldAccount' action='set' />
<assign value='$ZSTRIP(OldAccount,"&lt;","0")' property='pPatientAccount' action='set' />
<assign value='pPatientAccount' property='target.{MSH:25}' action='set' />
<assign value='pPatientAccount' property='target.{PID:18}' action='set' />
<assign value='"MRNnotFnd"' property='target.{MSH:16}' action='set' />
<assign value='"NoMRN "' property='target.{MSH:22}' action='set' />
<assign value='""' property='tMRN' action='set' />
<if condition='pPatientAccount = ""' >
<false>
<code>
<![CDATA[ 
	// Using Account and get MRN 
    // alj 	set tMRN = ##class(GCH.Regions.DFT.VisitTBL).AccountGetMRN(pPatientAccount)
    // $$$TRACE("pPatientAccount="_pPatientAccount)
    set tMRN=""
    set tMRN=##class(GC.CernerGetDataTESTODBC).CernerGetPatientInfoByFin(pPatientAccount)
    // $$$TRACE("tMRN="_tMRN)    
    ]]]]><![CDATA[></code>
</false>
</if>
<if condition='tMRN=""' >
<false>
<assign value='pPatientAccount' property='tAccountIn' action='set' />
</false>
</if>

<if condition='tMRN = ""' >
<true>
<assign value='"AcctNoFnd"' property='target.{MSH:21}' action='set' />
<code>
<![CDATA[ 
	// Using Patient Last,First Name and Middle Name to get MRN from PatientData table if unique
    //  $$$TRACE("tMRNpatnmB4="_tMRN)
    set tMRN=##class(GC.CernerGetDataTESTODBC).CernerGetPatientInfoByName(tpatientlastnm,tpatientfirstnm,tpatientmiddlenm)
    // $$$TRACE("tMRN="_tMRN)
	]]]]><![CDATA[></code>
<if condition='tMRN = ""' >
<true>
<assign value='""' property='target.{PID:3}' action='set' />
</true>
<false>
<assign value='"MRNbyName"' property='target.{MSH:16}' action='set' />
<assign value='tMRN' property='target.{PID:3}' action='set' />
<assign value='tMRN' property='target.{MSH:22}' action='set' />
</false>
</if>
</true>
<false>
<assign value='"MRNbyAcct"' property='target.{MSH:16}' action='set' />
<assign value='tMRN' property='target.{PID:3}' action='set' />
<assign value='tMRN' property='target.{MSH:22}' action='set' />
<assign value='"AcctFound"' property='target.{MSH:21}' action='set' />
</false>
</if>
<if condition='target.{PID:18} = "noacct"' >
<true>
<code>
<![CDATA[ 
	//  If no valid account found account as sent from Regions
]]]]><![CDATA[></code>
<assign value='pPatientAccount' property='target.{PID:18}' action='set' />
</true>
</if>

<code>
<![CDATA[ 
	// MSH Value Depending on Account Number Changed
]]]]><![CDATA[></code>
<if condition='target.{PID:18} = source.{ZDF:ZDF1AccountNumber}' >
<true>
<assign value='"AcctSame"' property='target.{MSH:23}' action='set' />
<assign value='source.{ZDF:ZDF1AccountNumber}' property='target.{MSH:24}' action='set' />
<assign value='target.{PID:18}' property='target.{MSH:25}' action='set' />
<assign value='""' property='target.{MSH:26}' action='set' />
</true>
<false>
<if condition='target.{PID:18} = target.{MSH:25}' >
<true>
<assign value='"AcctChg"' property='target.{MSH:23}' action='set' />
<assign value='source.{ZDF:ZDF1AccountNumber}' property='target.{MSH:24}' action='set' />
<assign value='""' property='target.{MSH:26}' action='set' />
</true>
<false>
<assign value='"NewAccount"' property='target.{MSH:23}' action='set' />
<assign value='source.{ZDF:ZDF1AccountNumber}' property='target.{MSH:24}' action='set' />
<assign value='target.{PID:18}' property='target.{MSH:26}' action='set' />
<assign value='""' property='target.{MSH:27}' action='set' />
</false>
</if>
</false>
</if>
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.RegLab2CernerGDFTv2">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65084,53982.483961</TimeChanged>
<TimeCreated>61601,38599.428669</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='22.RegLab:GLT_DFT' targetDocType='231.Cerner:DFT_P03' create='new' language='objectscript' >
<code>
<![CDATA[ 
	// Last Updated: 01/30/2019 Al Johnson
	// Last Updated in Prod:  03/12/2019
	// Created in Cert 01/30/2019 copied from GC.RegLab2CernerGDFTv1 - Al Johnson
	// Changes based on Beaker charges intermixed with Sunquest charges
	//
	// Use Z segment to transfer data in HL7 file instead of flat file
	// Remove leading zero in account numbers if sent
	// Remove leading M or E in Physician code if sent
	// Use GC.RegionsCharges.CernerGetPatientInfo to get MRN off Cerner tables
	//  Beaker now will send MRN.  If not sent read tables
	// 
	// Use GCH.Regions.DFT.VisitTBL Table data to assign MRN and verify Account number
	//    First Using Account get MRN
	//    If Account not found 
	//       use Patient Last & First Name, if unique, to get MRN
	//    If MRN found use to get valid Account number by DOS if IP account exists use else look for valid OP
	//    If none found just send account as sent by Regions
	// Do Not Send CPT code.  Cerner will build in tables based on CDM.
	// --  original dev / prod code - Check for CPT code range >= 80000 and <=89999 add modifier 90 01/26/2016 ALJ
	// Format unique value in FT1-2 TransactionId hl7 max 12 - take MSH:MessageControlID first 8 and last 4 characters
	// 01-11-2017 if cdm is misc CDM00011403 - include cpt and modifier
	// 01-17-2017   cpt - 25.1, 25.3 needs to be CPT  modifier/s - 26.1, 26.3 needs to be CPTMOD
	//
	// 01-30-2019 Beaker charges now include MRN
	// 01-30-2019 Beaker Regions charge code now 11 characters 3 digit revenue code, 5 char cpt/hcpcs, 3 digit counter
	// 01-30-2019 30084999001 is the new code for misc test - old was 00011403

]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='"GCH"' property='target.{MSH:ReceivingFacility}' action='set' />
<assign value='"RegLab2CernerGDFTv2"' property='target.{MSH:Security}' action='set' />
<assign value='"DFT^P03"' property='target.{MSH:MessageType}' action='set' />
<assign value='"2.3"' property='target.{MSH:VersionID}' action='set' />
<assign value='"P03"' property='target.{EVN:EventTypeCode}' action='set' />
<assign value='"RGCHG"' property='target.{FT1grp(1).FT1:DepartmentCode}' action='set' />
<assign value='"CHG"' property='target.{FT1grp(1).FT1:TransactionCode.nameofcodingsystem}' action='set' />
<code>
<![CDATA[ 
	// Configure Credits
	//  Remove '-' negative sign if received on credit
]]]]><![CDATA[></code>
<if condition='source.{ZDF:ZDF7ChargeCreditCode} = "CR"' >
<true>
<assign value='$Translate(source.{ZDF:ZDF10Quanity},"-","")' property='source.{ZDF:ZDF10Quanity}' action='set' />
<assign value='$Translate(source.{ZDF:ZDF11ExtAmount},"-","")' property='source.{ZDF:ZDF11ExtAmount}' action='set' />
</true>
</if>
<code>
<![CDATA[ 
    // set FT1-1 setid
    // set FT1-2 transaction id must be unique - take 1st 8 and last 4 from msh message control id
	// set FT1-5 transaction posting date for Cerner
]]]]><![CDATA[></code>
<assign value='"1"' property='target.{FT1grp(1).FT1:SetIDFT1}' action='set' />
<assign value='source.{MSH:MessageControlID}' property='tempid1' action='set' />
<assign value='$EXTRACT(tempid1,1,8)' property='tempid1a' action='set' />
<assign value='$EXTRACT(tempid1,*-3,*)' property='tempid1b' action='set' />
<assign value='tempid1a_tempid1b' property='target.{FT1grp(1).FT1:TransactionID}' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='target.{FT1grp(1).FT1:TransactionDate}' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='target.{FT1grp(1).FT1:TransactionPostingDate}' action='set' />
<assign value='source.{ZDF:ZDF7ChargeCreditCode}' property='target.{FT1grp(1).FT1:TransactionType}' action='set' />

<code>
<![CDATA[ 
	// update Regions price by 1.5048 and round
	// for Cerner update unit price with 1.5048 rounded price
]]]]><![CDATA[></code>
<if condition='( +source.{ZDF:ZDF11ExtAmount} &lt;= 0)' >
<true>
<assign value='"0"' property='target.{FT1grp(1).FT1:TransactionAmountExtended}' action='set' />
<assign value='"0"' property='target.{FT1grp(1).FT1:TransactionAmountUnit}' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF11ExtAmount}/source.{ZDF:ZDF10Quanity}' property='currPrice' action='set' />
<assign value='currPrice * (1.5048*1000)' property='newPrice' action='set' />
<assign value='$NUMBER(newPrice,0)' property='newPrice' action='set' />
<assign value='((((( newPrice \ 500 ) + 1 ) * 500 ) - newPrice ) # 500)' property='diff' action='set' />
<assign value=' newPrice + diff' property='newPrice' action='set' />
<assign value='newPrice / 1000' property='newPrice' action='set' />
<assign value='newPrice' property='target.{FT1grp(1).FT1:TransactionAmountUnit}' action='set' />
<assign value='newPrice * source.{ZDF:ZDF10Quanity}' property='newPrice' action='set' />
<assign value='newPrice' property='target.{FT1grp(1).FT1:TransactionAmountExtended}' action='set' />
</false>
</if>
<assign value='source.{ZDF:ZDF10Quanity}' property='target.{FT1grp(1).FT1:TransactionQuantity}' action='set' />
<assign value='source.{ZDF:ZDF2LastName}' property='target.{PID:PatientName(1).familylastname}' action='set' />
<assign value='source.{ZDF:ZDF3FirstName}' property='target.{PID:PatientName(1).givenname}' action='set' />
<assign value='source.{ZDF:ZDF4MiddleName}' property='target.{PID:PatientName(1).middleinitialorname}' action='set' />
<assign value='source.{ZDF:ZDF2LastName}' property='tpatientlastnm' action='set' />
<assign value='source.{ZDF:ZDF3FirstName}' property='tpatientfirstnm' action='set' />
<assign value='source.{ZDF:ZDF4MiddleName}' property='tpatientmiddlenm' action='set' />

<code>
<![CDATA[ 
	// Beaker will send MRN remove G prefix and leading zeros from mrn if sent by Regions
]]]]><![CDATA[></code>
<assign value='""' property='tempmrn' action='set' />
<assign value='""' property='tempmrn1' action='set' />
<assign value='""' property='tempmrn2' action='set' />
<assign value='source.{ZDF:ZDF16MRN}' property='tempmrn' action='set' />
<assign value='$ZSTRIP(tempmrn,"&lt;","G")' property='tempmrn1' action='set' />
<assign value='$ZSTRIP(tempmrn1,"&lt;","0")' property='tempmrn2' action='set' />

<code>
<![CDATA[ 
	// remove CDM prefix and leading zeros from Regions cdm
	// set cpt field and modifier to null
]]]]><![CDATA[></code>
<assign value='source.{ZDF:ZDF8ChargeCode}' property='tempcdm' action='set' />
<assign value='$ZSTRIP(tempcdm,"&lt;","CDM")' property='tempcdm1' action='set' />
<assign value='$ZSTRIP(tempcdm1,"&lt;","0")' property='tempcdm2' action='set' />
<assign value='tempcdm2' property='target.{FT1grp(1).FT1:TransactionCode.identifier}' action='set' />
<code>
<![CDATA[ 
	// keep cpt and modifier on misc cdm 11403 and new code 30084999001
]]]]><![CDATA[></code>
<if condition='(tempcdm2="11403")||(tempcdm2="30084999001")' >
<true>
<assign value='source.{ZDF:ZDF14CPTCode}' property='target.{FT1grp(1).FT1:ProcedureCode.identifier}' action='set' />
<assign value='"CPT"' property='target.{FT1grp(1).FT1:ProcedureCode.nameofcodingsystem}' action='set' />
<assign value='source.{ZDF:ZDF15Modifier}' property='target.{FT1grp(1).FT1:ProcedureCodeModifier(1).identifier}' action='set' />
<if condition='source.{ZDF:ZDF15Modifier}=""' >
<false>
<assign value='"CPTMOD"' property='target.{FT1grp(1).FT1:ProcedureCodeModifier(1).nameofcodingsystem}' action='set' />
</false>
</if>
</true>
<false>
<assign value='""' property='target.{FT1grp(1).FT1:ProcedureCode}' action='set' />
<assign value='""' property='target.{FT1grp(1).FT1:ProcedureCodeModifier(1)}' action='set' />
</false>
</if>
<code>
<![CDATA[ 
    // write !,("tempcdm="_tempcdm_" tempcdm1="_tempcdm1)
    // $$$TRACE("tempcdm="_tempcdm_" tempcdm1="_tempcdm1)
    // $$$TRACE("tMRN="_tMRN)    
	]]]]><![CDATA[></code>
<code>
<![CDATA[ 
	// remove M prefix if one exists
]]]]><![CDATA[></code>
<if condition='..StartsWith(source.{ZDF:ZDF13ServicePhyCode},"M")|| ..StartsWith(source.{ZDF:ZDF12OrderingPhyCode},"E") ' >
<true>
<assign value='..SubString(source.{ZDF:ZDF13ServicePhyCode},2,8)' property='target.{FT1grp(1).FT1:PerformedByCode}' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF13ServicePhyCode}' property='target.{FT1grp(1).FT1:PerformedByCode}' action='set' />
</false>
</if>
<if condition='..StartsWith(source.{ZDF:ZDF12OrderingPhyCode},"M") || ..StartsWith(source.{ZDF:ZDF12OrderingPhyCode},"E") ' >
<true>
<assign value='..SubString(source.{ZDF:ZDF12OrderingPhyCode},2,8)' property='target.{FT1grp(1).FT1:OrderedByCode}' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF12OrderingPhyCode}' property='target.{FT1grp(1).FT1:OrderedByCode}' action='set' />
</false>
</if>
<code>
<![CDATA[ 
	// ***************** Coding for Account and MRN ************************
	// Use GCH.Regions.DFT.VisitTBL Table data to assign MRN and verify Account number
	// First Using Account get MRN
	// If Account not found 
		// use Patient Last & First Name, if unique, to get MRN
		// with MRN get valid Account by DOS if IP account exists else look for valid OP
			// If none found just send account as sent by Regions
]]]]><![CDATA[></code>
<assign value='source.{ZDF:ZDF2LastName}' property='pPatientNameLast' action='set' />
<assign value='source.{ZDF:ZDF3FirstName}' property='pPatientNameFirst' action='set' />
<assign value='""' property='pMRN' action='set' />
<code>
<![CDATA[ 
	// strip leading zero on account numbers and set variable.		
]]]]><![CDATA[></code>
<assign value='"0NopAcct"' property='pPatientAccount' action='set' />
<assign value='"NotAcct"' property='tPatientAccount' action='set' />
<assign value='"NoOldAcct"' property='OldAccount' action='set' />
<assign value='"NoOutAcct"' property='tAccountOut' action='set' />
<assign value='"NoInAcct"' property='tAccountIn' action='set' />
<assign value='"notMRN"' property='tMRN' action='set' />
<assign value='"Noname"' property='tMRNname' action='set' />
<assign value='""' property='pDOS' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='pDOS' action='set' />
<assign value='source.{ZDF:ZDF1AccountNumber}' property='OldAccount' action='set' />
<assign value='$ZSTRIP(OldAccount,"&lt;","0")' property='pPatientAccount' action='set' />
<assign value='pPatientAccount' property='target.{MSH:25}' action='set' />
<assign value='pPatientAccount' property='target.{PID:18}' action='set' />
<assign value='"MRNnotFnd"' property='target.{MSH:16}' action='set' />
<assign value='"NoMRN "' property='target.{MSH:22}' action='set' />
<assign value='""' property='tMRN' action='set' />

<if condition='tempmrn2 = ""'>
<false>
<assign value='tempmrn2' property='tMRN' action='set'/>
<assign value='"MRNsent"' property='target.{MSH:16}' action='set' />
<assign value='tempmrn2' property='target.{PID:3}' action='set' />
<assign value='tempmrn2' property='target.{MSH:22}' action='set' />
</false>
</if>

<if condition='tempmrn2 = ""' >
<true>
<if condition='pPatientAccount = ""' >
<false>
<code>
<![CDATA[ 
	// Using Account and get MRN 
    // alj 	set tMRN = ##class(GCH.Regions.DFT.VisitTBL).AccountGetMRN(pPatientAccount)
    // $$$TRACE("pPatientAccount="_pPatientAccount)
    set tMRN=""
    set tMRN=##class(GC.CernerGetData).CernerGetPatientInfoByFin(pPatientAccount)
    // $$$TRACE("tMRN="_tMRN)    
    ]]]]><![CDATA[></code>
</false>
</if>
</true>
</if>

<if condition='tMRN=""' >
<false>
<assign value='pPatientAccount' property='tAccountIn' action='set' />
</false>
</if>

<if condition='tMRN = ""' >
<true>
<assign value='"AcctNoFnd"' property='target.{MSH:21}' action='set' />
<code>
<![CDATA[ 
	// Using Patient Last,First Name and Middle Name to get MRN from PatientData table if unique
    //  $$$TRACE("tMRNpatnmB4="_tMRN)
    set tMRN=##class(GC.CernerGetData).CernerGetPatientInfoByName(tpatientlastnm,tpatientfirstnm,tpatientmiddlenm)
    // $$$TRACE("tMRN="_tMRN)
	]]]]><![CDATA[></code>
<if condition='tMRN = ""' >
<true>
<assign value='""' property='target.{PID:3}' action='set' />
</true>
<false>
<assign value='"MRNbyName"' property='target.{MSH:16}' action='set' />
<assign value='tMRN' property='target.{PID:3}' action='set' />
<assign value='tMRN' property='target.{MSH:22}' action='set' />
</false>
</if>
</true>
<false>
<assign value='"MRNbyAcct"' property='target.{MSH:16}' action='set' />
<assign value='tMRN' property='target.{PID:3}' action='set' />
<assign value='tMRN' property='target.{MSH:22}' action='set' />
<assign value='"AcctFound"' property='target.{MSH:21}' action='set' />
</false>
</if>

<if condition='target.{PID:18} = "noacct"' >
<true>
<code>
<![CDATA[ 
	//  If no valid account found account as sent from Regions
]]]]><![CDATA[></code>
<assign value='pPatientAccount' property='target.{PID:18}' action='set' />
</true>
</if>

<code>
<![CDATA[ 
	// MSH Value Depending on Account Number Changed
]]]]><![CDATA[></code>
<if condition='target.{PID:18} = source.{ZDF:ZDF1AccountNumber}' >
<true>
<assign value='"AcctSame"' property='target.{MSH:23}' action='set' />
<assign value='source.{ZDF:ZDF1AccountNumber}' property='target.{MSH:24}' action='set' />
<assign value='target.{PID:18}' property='target.{MSH:25}' action='set' />
<assign value='""' property='target.{MSH:26}' action='set' />
</true>
<false>
<if condition='target.{PID:18} = target.{MSH:25}' >
<true>
<assign value='"AcctChg"' property='target.{MSH:23}' action='set' />
<assign value='source.{ZDF:ZDF1AccountNumber}' property='target.{MSH:24}' action='set' />
<assign value='""' property='target.{MSH:26}' action='set' />
</true>
<false>
<assign value='"NewAccount"' property='target.{MSH:23}' action='set' />
<assign value='source.{ZDF:ZDF1AccountNumber}' property='target.{MSH:24}' action='set' />
<assign value='target.{PID:18}' property='target.{MSH:26}' action='set' />
<assign value='""' property='target.{MSH:27}' action='set' />
</false>
</if>
</false>
</if>
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.RegLab2CernerGDFTv3">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65188,55321.347459</TimeChanged>
<TimeCreated>61601,38599.428669</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='22.RegLab:GLT_DFT' targetDocType='231.Cerner:DFT_P03' create='new' language='objectscript' >
<code>
<![CDATA[ 
	// Last Updated: 06/10/2019 Al Johnson
	// Last Updated in Prod:  03/12/2019
	// Created in Cert 06/10/2019 copied from GC.RegLab2CernerGDFTv2 - Al Johnson
	// Changes based on Beaker charges intermixed with Sunquest charges
	// Regions now sending MRN - changes to search for fin and insurance
	//
	// Use Z segment to transfer data in HL7 file instead of flat file
	// Remove leading zero in account numbers if sent
	// Remove leading M or E in Physician code if sent
	// Use GC.RegionsCharges.CernerGetPatientInfo to get MRN off Cerner tables
	//  Beaker now will send MRN.  If not sent read tables
	// 
	// Use GCH.Regions.DFT.VisitTBL Table data to assign MRN and verify Account number
	//    First Using Account get MRN
	//    If Account not found 
	//       use Patient Last & First Name, if unique, to get MRN
	//    If MRN found use to get valid Account number by DOS if IP account exists use else look for valid OP
	//    If none found just send account as sent by Regions
	// Do Not Send CPT code.  Cerner will build in tables based on CDM.
	// --  original dev / prod code - Check for CPT code range >= 80000 and <=89999 add modifier 90 01/26/2016 ALJ
	// Format unique value in FT1-2 TransactionId hl7 max 12 - take MSH:MessageControlID first 8 and last 4 characters
	// 01-11-2017 if cdm is misc CDM00011403 - include cpt and modifier
	// 01-17-2017   cpt - 25.1, 25.3 needs to be CPT  modifier/s - 26.1, 26.3 needs to be CPTMOD
	//
	// 01-30-2019 Beaker charges now include MRN
	// 01-30-2019 Beaker Regions charge code now 11 characters 3 digit revenue code, 5 char cpt/hcpcs, 3 digit counter
	// 01-30-2019 30084999001 is the new code for misc test - old was 00011403
	//
	// 06-10-2019 add search of fin by mrn and dos
	//            CernerGetFinByMrnDos
	//            lgc.sp_HL7_Get_FIN_By_MRN_DOS
	//            Parameter 1: MRN  Parameter 2: DOS
	// 06-10-2019 search for insurance using fin
	//            CernerGetFinInsurance
	//            lgc.sp_HL7_Get_Insurance_By_FIN_And_Rank
	//            Parameter 1: FIN  Parameter 2: Rank
	// 06-10-2019 SQLDBDEV16\DEV16 and SQLDBTEST16\DBTEST16 database EDW_IS both contain Prod data - current to previous day
	// 06-21-2019 if multiple fins returned, blank out on pid-18
	// 06-24-2019 fin returned needs to start with 7 (prod) 2=cert, 9=mock

]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='"GCH"' property='target.{MSH:ReceivingFacility}' action='set' />
<assign value='"RegLab2CernerGDFTv3"' property='target.{MSH:Security}' action='set' />
<assign value='"DFT^P03"' property='target.{MSH:MessageType}' action='set' />
<assign value='"2.3"' property='target.{MSH:VersionID}' action='set' />
<assign value='"P03"' property='target.{EVN:EventTypeCode}' action='set' />
<assign value='"RGCHG"' property='target.{FT1grp(1).FT1:DepartmentCode}' action='set' />
<assign value='"CHG"' property='target.{FT1grp(1).FT1:TransactionCode.nameofcodingsystem}' action='set' />
<code>
<![CDATA[ 
	// Configure Credits
	//  Remove '-' negative sign if received on credit
]]]]><![CDATA[></code>
<if condition='source.{ZDF:ZDF7ChargeCreditCode} = "CR"' >
<true>
<assign value='$Translate(source.{ZDF:ZDF10Quanity},"-","")' property='source.{ZDF:ZDF10Quanity}' action='set' />
<assign value='$Translate(source.{ZDF:ZDF11ExtAmount},"-","")' property='source.{ZDF:ZDF11ExtAmount}' action='set' />
</true>
</if>
<code>
<![CDATA[ 
    // set FT1-1 setid
    // set FT1-2 transaction id must be unique - take 1st 8 and last 4 from msh message control id
	// set FT1-5 transaction posting date for Cerner
]]]]><![CDATA[></code>
<assign value='"1"' property='target.{FT1grp(1).FT1:SetIDFT1}' action='set' />
<assign value='source.{MSH:MessageControlID}' property='tempid1' action='set' />
<assign value='$EXTRACT(tempid1,1,8)' property='tempid1a' action='set' />
<assign value='$EXTRACT(tempid1,*-3,*)' property='tempid1b' action='set' />
<assign value='tempid1a_tempid1b' property='target.{FT1grp(1).FT1:TransactionID}' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='target.{FT1grp(1).FT1:TransactionDate}' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='target.{FT1grp(1).FT1:TransactionPostingDate}' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='tZDF6DOS' action='set' />
<assign value='source.{ZDF:ZDF7ChargeCreditCode}' property='target.{FT1grp(1).FT1:TransactionType}' action='set' />

<code>
<![CDATA[ 
	// update Regions price by 1.5048 and round
	// for Cerner update unit price with 1.5048 rounded price
]]]]><![CDATA[></code>
<if condition='( +source.{ZDF:ZDF11ExtAmount} &lt;= 0)' >
<true>
<assign value='"0"' property='target.{FT1grp(1).FT1:TransactionAmountExtended}' action='set' />
<assign value='"0"' property='target.{FT1grp(1).FT1:TransactionAmountUnit}' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF11ExtAmount}/source.{ZDF:ZDF10Quanity}' property='currPrice' action='set' />
<assign value='currPrice * (1.5048*1000)' property='newPrice' action='set' />
<assign value='$NUMBER(newPrice,0)' property='newPrice' action='set' />
<assign value='((((( newPrice \ 500 ) + 1 ) * 500 ) - newPrice ) # 500)' property='diff' action='set' />
<assign value=' newPrice + diff' property='newPrice' action='set' />
<assign value='newPrice / 1000' property='newPrice' action='set' />
<assign value='newPrice' property='target.{FT1grp(1).FT1:TransactionAmountUnit}' action='set' />
<assign value='newPrice * source.{ZDF:ZDF10Quanity}' property='newPrice' action='set' />
<assign value='newPrice' property='target.{FT1grp(1).FT1:TransactionAmountExtended}' action='set' />
</false>
</if>
<assign value='source.{ZDF:ZDF10Quanity}' property='target.{FT1grp(1).FT1:TransactionQuantity}' action='set' />
<assign value='source.{ZDF:ZDF2LastName}' property='target.{PID:PatientName(1).familylastname}' action='set' />
<assign value='source.{ZDF:ZDF3FirstName}' property='target.{PID:PatientName(1).givenname}' action='set' />
<assign value='source.{ZDF:ZDF4MiddleName}' property='target.{PID:PatientName(1).middleinitialorname}' action='set' />
<assign value='source.{ZDF:ZDF2LastName}' property='tpatientlastnm' action='set' />
<assign value='source.{ZDF:ZDF3FirstName}' property='tpatientfirstnm' action='set' />
<assign value='source.{ZDF:ZDF4MiddleName}' property='tpatientmiddlenm' action='set' />

<code>
<![CDATA[ 
	// Beaker will send MRN remove G prefix and leading zeros from mrn if sent by Regions
]]]]><![CDATA[></code>
<assign value='""' property='tempmrn' action='set' />
<assign value='""' property='tempmrn1' action='set' />
<assign value='""' property='inZDF16Mrn' action='set' />
<assign value='source.{ZDF:ZDF16MRN}' property='tempmrn' action='set' />
<assign value='$ZSTRIP(tempmrn,"&lt;","G")' property='tempmrn1' action='set' />
<assign value='$ZSTRIP(tempmrn1,"&lt;","0")' property='inZDF16Mrn' action='set' />

<code>
<![CDATA[ 
	// remove CDM prefix and leading zeros from Regions cdm
	// set cpt field and modifier to null
]]]]><![CDATA[></code>
<assign value='source.{ZDF:ZDF8ChargeCode}' property='tempcdm' action='set' />
<assign value='$ZSTRIP(tempcdm,"&lt;","CDM")' property='tempcdm1' action='set' />
<assign value='$ZSTRIP(tempcdm1,"&lt;","0")' property='tempcdm2' action='set' />
<assign value='tempcdm2' property='target.{FT1grp(1).FT1:TransactionCode.identifier}' action='set' />
<code>
<![CDATA[ 
	// keep cpt and modifier on misc cdm 11403 and new code 30084999001
]]]]><![CDATA[></code>
<if condition='(tempcdm2="11403")||(tempcdm2="30084999001")' >
<true>
<assign value='source.{ZDF:ZDF14CPTCode}' property='target.{FT1grp(1).FT1:ProcedureCode.identifier}' action='set' />
<assign value='"CPT"' property='target.{FT1grp(1).FT1:ProcedureCode.nameofcodingsystem}' action='set' />
<assign value='source.{ZDF:ZDF15Modifier}' property='target.{FT1grp(1).FT1:ProcedureCodeModifier(1).identifier}' action='set' />
<if condition='source.{ZDF:ZDF15Modifier}=""' >
<false>
<assign value='"CPTMOD"' property='target.{FT1grp(1).FT1:ProcedureCodeModifier(1).nameofcodingsystem}' action='set' />
</false>
</if>
</true>
<false>
<assign value='""' property='target.{FT1grp(1).FT1:ProcedureCode}' action='set' />
<assign value='""' property='target.{FT1grp(1).FT1:ProcedureCodeModifier(1)}' action='set' />
</false>
</if>

<code>
<![CDATA[ 
	// remove M prefix if one exists
]]]]><![CDATA[></code>
<if condition='..StartsWith(source.{ZDF:ZDF13ServicePhyCode},"M")|| ..StartsWith(source.{ZDF:ZDF12OrderingPhyCode},"E") ' >
<true>
<assign value='..SubString(source.{ZDF:ZDF13ServicePhyCode},2,8)' property='target.{FT1grp(1).FT1:PerformedByCode}' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF13ServicePhyCode}' property='target.{FT1grp(1).FT1:PerformedByCode}' action='set' />
</false>
</if>
<if condition='..StartsWith(source.{ZDF:ZDF12OrderingPhyCode},"M") || ..StartsWith(source.{ZDF:ZDF12OrderingPhyCode},"E") ' >
<true>
<assign value='..SubString(source.{ZDF:ZDF12OrderingPhyCode},2,8)' property='target.{FT1grp(1).FT1:OrderedByCode}' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF12OrderingPhyCode}' property='target.{FT1grp(1).FT1:OrderedByCode}' action='set' />
</false>
</if>
<code>
<![CDATA[ 
	// ***************** Coding for Account and MRN ************************
	//  MRN
	// 1.  Use MRN if sent by Regions  (inZDF16Mrn)
	// 2.  Search for MRN using Account sent by Regions (inZDF1Account)
	//                                                  (inZDF1Accounta - leading zeros removed)
	// 3.  Search for MRN using Patient Name
	//
	//  Account
	// 1.  Use Account sent by Regions
	// 2.  Search for Account using MRN and DOS (inZDF1Dos)
	//          implies you have the MRN from above either 1 or 3 (but not 2)
	//
	//  MSH Values 
	//   MSH:21 where MRN came from
	//           NOMRN, MRNbyNAME, MRNbyFIN,  MRNSent
	//   MSH:22 where Account came from
	//           NOFIN, FINbyMRN, FINSent
	//   MSH:23  Number of Fins
	//   MSH:24  Name of Primary Insurance
	//   MSH:25  Primary Insurance Type - MNMedicaid or OtherIns
	//
	//
]]]]><![CDATA[></code>

<code>
<![CDATA[ 
	// strip leading zero on account numbers and set variable.
	// 6/24/2019 Fin in Prod eight digits starting with 7. 2=cert, 9=mock		
]]]]><![CDATA[></code>

<if condition='..StartsWith(source.{ZDF:ZDF1AccountNumber},"7")' >
<true>
<assign value='source.{ZDF:ZDF1AccountNumber}' property='inZDF1Account' action='set' />
<assign value='$ZSTRIP(inZDF1Account,"&lt;","0")' property='inZDF1Accounta' action='set' />
</true>
<false>
<assign value='""' property='inZDF1Accounta' action='set' />
</false>
</if>

<code>
<![CDATA[
    // ***************************
	// search for mrn if not sent
	// ***************************
]]]]><![CDATA[></code>

<assign value='""' property='tableMRNbyFin' action='set' />
<assign value='""' property='tableMRNbyName' action='set' />

<if condition='inZDF16Mrn = ""' >
<true>
<if condition='inZDF1Accounta = ""' >
<false>
<code>
<![CDATA[ 
    // find mrn by fin
       set tableMRNbyFin=##class(GC.CernerGetData2019).CernerGetPatientInfoByFin(inZDF1Accounta)
    // $$$TRACE("tableMRNbyFin= "_tableMRNbyFin)    
    ]]]]><![CDATA[></code>
</false>
</if>
</true>
</if>

<if condition='(inZDF16Mrn="")&amp;(tableMRNbyFin = "")' >
<true>
<code>
<![CDATA[ 
	// Using Patient Last,First Name and Middle Name to get MRN from PatientData table if unique
    //  $$$TRACE("tableMRNbyNameB4="_tableMRNbyName)
    set tableMRNbyName=##class(GC.CernerGetData2019).CernerGetPatientInfoByName(tpatientlastnm,tpatientfirstnm,tpatientmiddlenm)
    // $$$TRACE("tableMRNbyName="_tableMRNbyName)
	]]]]><![CDATA[></code>
</true>
</if>

<code>
<![CDATA[
    // ****************************************************
	// set PID-3 based on MRN sent or by MRN search result
	// ****************************************************
]]]]><![CDATA[></code>	

<assign value='""' property='tFinalMRN' action='set' />
<assign value='""' property='tFinalMRNfromWhere' action='set' />	
<if condition='inZDF16Mrn = ""' >
<true>
<if condition='tableMRNbyFin = ""' >
<true>
<if condition='tableMRNbyName = ""' >
<true>
<assign value='""' property='target.{PID:3}' action='set' />
<assign value='"NOMRN"' property='target.{MSH:21}' action='set' />
</true>
<false>
<assign value='tableMRNbyName' property='target.{PID:3}' action='set' />
<assign value='tableMRNbyName' property='tFinalMRN' action='set' />
<assign value='"3"' property='tFinalMRNfromWhere' action='set' />
<assign value='"MRNbyNAME"' property='target.{MSH:21}' action='set' />
</false>
</if>
</true>
<false>
<assign value='tableMRNbyFin' property='target.{PID:3}' action='set' />
<assign value='tableMRNbyFin' property='tFinalMRN' action='set' />
<assign value='"2"' property='tFinalMRNfromWhere' action='set' />
<assign value='"MRNbyFIN"' property='target.{MSH:21}' action='set' />
</false>
</if>
</true>
<false>
<assign value='inZDF16Mrn' property='target.{PID:3}' action='set' />
<assign value='inZDF16Mrn' property='tFinalMRN' action='set' />
<assign value='"1"' property='tFinalMRNfromWhere' action='set' />
<assign value='"MRNSent"' property='target.{MSH:21}' action='set' />
</false>
</if>

<code>
<![CDATA[
    // ***************************
	// search for fin if not sent
	// ***************************
]]]]><![CDATA[></code>

<assign value='""' property='tableFINbyMRNDos' action='set' />
<assign value='""' property='tableFINbyMRNDosCount' action='set' />
<if condition='inZDF1Accounta = ""' >
<true>
<if condition='tFinalMRN = ""' >
<false>
<code>
<![CDATA[ 
    //  routine adds a comma between fin followed by a count of fins seperated by verbiage Count=
    //   i.e. 70037267,70116182,70204540,70214105,70332251Count=5
    set tableFINbyMRNDos=##class(GC.CernerGetData2019).CernerGetFinByMRNDos(tFinalMRN,tZDF6DOS)
    // $$$TRACE("tableFINbyMRNDos after= "_tableFINbyMRNDos)
	]]]]><![CDATA[></code>
</false>
</if>
</true>
</if>

<assign value='""' property='tableFINbyMRNDosCount' action='set' />
<assign value='""' property='tableFINbyMRNDosFin' action='set' />
<assign value='$PIECE(tableFINbyMRNDos,"Count=",1)' property='tableFINbyMRNDosFin' action='set' />
<assign value='$PIECE(tableFINbyMRNDos,"Count=",2)' property='tableFINbyMRNDosCount' action='set' />

<code>
<![CDATA[
    // *****************************************************
	// set PID-18 based on FIN sent or by MRN search result
	// *****************************************************
]]]]><![CDATA[></code>

<assign value='""' property='tFinalFIN' action='set' />
<assign value='""' property='tFinalFINfromWhere' action='set' />	
<if condition='inZDF1Accounta = ""' >
<true>
<if condition='tableFINbyMRNDosFin = ""' >
<true>
<assign value='""' property='target.{PID:18}' action='set' />
<assign value='"NOFIN"' property='target.{MSH:22}' action='set' />
<assign value='"0"' property='target.{MSH:23}' action='set' />
</true>
<false>
<assign value='tableFINbyMRNDosFin' property='target.{PID:18}' action='set' />
<assign value='tableFINbyMRNDosFin' property='tFinalFIN' action='set' />
<assign value='"2"' property='tFinalFINfromWhere' action='set' />
<assign value='"FINbyMRN"' property='target.{MSH:22}' action='set' />
<assign value='tableFINbyMRNDosCount' property='target.{MSH:23}' action='set' />
</false>
</if>
</true>
<false>
<assign value='inZDF1Accounta' property='target.{PID:18}' action='set' />
<assign value='inZDF1Accounta' property='tFinalFIN' action='set' />
<assign value='"1"' property='tFinalFINfromWhere' action='set' />
<assign value='"FINSent"' property='target.{MSH:22}' action='set' />
<assign value='"1"' property='target.{MSH:23}' action='set' />
</false>
</if>

<if condition='tableFINbyMRNDosCount &gt; "1"' >
<true>
<assign value='""' property='target.{PID:18}' action='set' />
</true>
</if>

<code>
<![CDATA[
    // ********************************************************
	// find insurance based on fin - 1=primary, 2=secodary etc
	// ********************************************************
]]]]><![CDATA[></code>

<assign value='""' property='tableInsName' action='set' />
	
<if condition='tFinalFIN = ""' >
<false>
<code>
<![CDATA[
     // $$$TRACE("b4insnamecall= "_tFinalFIN)
     set tableInsName=##class(GC.CernerGetData2019).CernerGetFinInsurance(tFinalFIN,"1")
    // $$$TRACE("tableInsName after= "_tableInsName)
	]]]]><![CDATA[></code>
</false>
</if>

<code>
<![CDATA[ 
	// ***************** Set MSH Values ************************
	//
	//  MSH Values 
	//   MSH:21 where MRN came from
	//           NOMRN, MRNbyNAME, MRNbyFIN,  MRNSent
	//   MSH:22 where Account came from
	//           NOFIN, FINbyMRN, FINSent
	//   MSH:23  Number of Fins
	//   MSH:24  Name of Primary Insurance
	//   MSH:25  Primary Insurance Type - MNMedicaid or OtherIns
	//
	//   MSH:
	//
]]]]><![CDATA[></code>

<assign value='tableInsName' property='target.{MSH:24}' action='set' />
<if condition='tableInsName="MN MED ASSISTANCE"' >
<true>
<assign value='"MNMedicaid"' property='target.{MSH:25}' action='set' />
</true>
<false>
<assign value='"OtherIns"' property='target.{MSH:25}' action='set' />
</false>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.RegLab2CernerGDFTv3ALJ">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>66206,40586.478538</TimeChanged>
<TimeCreated>61601,38599.428669</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='22.RegLab:GLT_DFT' targetDocType='231.Cerner:DFT_P03' create='new' language='objectscript' >
<code>
<![CDATA[ 
	// Last Updated: 06/10/2019 Al Johnson
	// Last Updated in Prod:  03/12/2019
	// Created in Cert 06/10/2019 copied from GC.RegLab2CernerGDFTv2 - Al Johnson
	// Changes based on Beaker charges intermixed with Sunquest charges
	// Regions now sending MRN - changes to search for fin and insurance
	//
	// Use Z segment to transfer data in HL7 file instead of flat file
	// Remove leading zero in account numbers if sent
	// Remove leading M or E in Physician code if sent
	// Use GC.RegionsCharges.CernerGetPatientInfo to get MRN off Cerner tables
	//  Beaker now will send MRN.  If not sent read tables
	// 
	// Use GCH.Regions.DFT.VisitTBL Table data to assign MRN and verify Account number
	//    First Using Account get MRN
	//    If Account not found 
	//       use Patient Last & First Name, if unique, to get MRN
	//    If MRN found use to get valid Account number by DOS if IP account exists use else look for valid OP
	//    If none found just send account as sent by Regions
	// Do Not Send CPT code.  Cerner will build in tables based on CDM.
	// --  original dev / prod code - Check for CPT code range >= 80000 and <=89999 add modifier 90 01/26/2016 ALJ
	// Format unique value in FT1-2 TransactionId hl7 max 12 - take MSH:MessageControlID first 8 and last 4 characters
	// 01-11-2017 if cdm is misc CDM00011403 - include cpt and modifier
	// 01-17-2017   cpt - 25.1, 25.3 needs to be CPT  modifier/s - 26.1, 26.3 needs to be CPTMOD
	//
	// 01-30-2019 Beaker charges now include MRN
	// 01-30-2019 Beaker Regions charge code now 11 characters 3 digit revenue code, 5 char cpt/hcpcs, 3 digit counter
	// 01-30-2019 30084999001 is the new code for misc test - old was 00011403
	//
	// 06-10-2019 add search of fin by mrn and dos
	//            CernerGetFinByMrnDos
	//            lgc.sp_HL7_Get_FIN_By_MRN_DOS
	//            Parameter 1: MRN  Parameter 2: DOS
	// 06-10-2019 search for insurance using fin
	//            CernerGetFinInsurance
	//            lgc.sp_HL7_Get_Insurance_By_FIN_And_Rank
	//            Parameter 1: FIN  Parameter 2: Rank
	// 06-10-2019 SQLDBDEV16\DEV16 and SQLDBTEST16\DBTEST16 database EDW_IS both contain Prod data - current to previous day
	// 06-21-2019 if multiple fins returned, blank out on pid-18
	// 06-24-2019 fin returned needs to start with 7 (prod) 2=cert, 9=mock

]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='"GCH"' property='target.{MSH:ReceivingFacility}' action='set' />
<assign value='"RegLab2CernerGDFTv3"' property='target.{MSH:Security}' action='set' />
<assign value='"DFT^P03"' property='target.{MSH:MessageType}' action='set' />
<assign value='"2.3"' property='target.{MSH:VersionID}' action='set' />
<assign value='"P03"' property='target.{EVN:EventTypeCode}' action='set' />
<assign value='"RGCHG"' property='target.{FT1grp(1).FT1:DepartmentCode}' action='set' />
<assign value='"CHG"' property='target.{FT1grp(1).FT1:TransactionCode.nameofcodingsystem}' action='set' />
<code>
<![CDATA[ 
	// Configure Credits
	//  Remove '-' negative sign if received on credit
]]]]><![CDATA[></code>
<if condition='source.{ZDF:ZDF7ChargeCreditCode} = "CR"' >
<true>
<assign value='$Translate(source.{ZDF:ZDF10Quanity},"-","")' property='source.{ZDF:ZDF10Quanity}' action='set' />
<assign value='$Translate(source.{ZDF:ZDF11ExtAmount},"-","")' property='source.{ZDF:ZDF11ExtAmount}' action='set' />
</true>
</if>
<code>
<![CDATA[ 
    // set FT1-1 setid
    // set FT1-2 transaction id must be unique - take 1st 8 and last 4 from msh message control id
	// set FT1-5 transaction posting date for Cerner
]]]]><![CDATA[></code>
<assign value='"1"' property='target.{FT1grp(1).FT1:SetIDFT1}' action='set' />
<assign value='source.{MSH:MessageControlID}' property='tempid1' action='set' />
<assign value='$EXTRACT(tempid1,1,8)' property='tempid1a' action='set' />
<assign value='$EXTRACT(tempid1,*-3,*)' property='tempid1b' action='set' />
<assign value='tempid1a_tempid1b' property='target.{FT1grp(1).FT1:TransactionID}' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='target.{FT1grp(1).FT1:TransactionDate}' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='target.{FT1grp(1).FT1:TransactionPostingDate}' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='tZDF6DOS' action='set' />
<assign value='source.{ZDF:ZDF7ChargeCreditCode}' property='target.{FT1grp(1).FT1:TransactionType}' action='set' />

<code>
<![CDATA[ 
	// update Regions price by 1.5048 and round
	// for Cerner update unit price with 1.5048 rounded price
]]]]><![CDATA[></code>
<if condition='( +source.{ZDF:ZDF11ExtAmount} &lt;= 0)' >
<true>
<assign value='"0"' property='target.{FT1grp(1).FT1:TransactionAmountExtended}' action='set' />
<assign value='"0"' property='target.{FT1grp(1).FT1:TransactionAmountUnit}' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF11ExtAmount}/source.{ZDF:ZDF10Quanity}' property='currPrice' action='set' />
<assign value='currPrice * (1.5048*1000)' property='newPrice' action='set' />
<assign value='$NUMBER(newPrice,0)' property='newPrice' action='set' />
<assign value='((((( newPrice \ 500 ) + 1 ) * 500 ) - newPrice ) # 500)' property='diff' action='set' />
<assign value=' newPrice + diff' property='newPrice' action='set' />
<assign value='newPrice / 1000' property='newPrice' action='set' />
<assign value='newPrice' property='target.{FT1grp(1).FT1:TransactionAmountUnit}' action='set' />
<assign value='newPrice * source.{ZDF:ZDF10Quanity}' property='newPrice' action='set' />
<assign value='newPrice' property='target.{FT1grp(1).FT1:TransactionAmountExtended}' action='set' />
</false>
</if>
<assign value='source.{ZDF:ZDF10Quanity}' property='target.{FT1grp(1).FT1:TransactionQuantity}' action='set' />
<assign value='source.{ZDF:ZDF2LastName}' property='target.{PID:PatientName(1).familylastname}' action='set' />
<assign value='source.{ZDF:ZDF3FirstName}' property='target.{PID:PatientName(1).givenname}' action='set' />
<assign value='source.{ZDF:ZDF4MiddleName}' property='target.{PID:PatientName(1).middleinitialorname}' action='set' />
<assign value='source.{ZDF:ZDF2LastName}' property='tpatientlastnm' action='set' />
<assign value='source.{ZDF:ZDF3FirstName}' property='tpatientfirstnm' action='set' />
<assign value='source.{ZDF:ZDF4MiddleName}' property='tpatientmiddlenm' action='set' />

<code>
<![CDATA[ 
	// Beaker will send MRN remove G prefix and leading zeros from mrn if sent by Regions
]]]]><![CDATA[></code>
<assign value='""' property='tempmrn' action='set' />
<assign value='""' property='tempmrn1' action='set' />
<assign value='""' property='inZDF16Mrn' action='set' />
<assign value='source.{ZDF:ZDF16MRN}' property='tempmrn' action='set' />
<assign value='$ZSTRIP(tempmrn,"&lt;","G")' property='tempmrn1' action='set' />
<assign value='$ZSTRIP(tempmrn1,"&lt;","0")' property='inZDF16Mrn' action='set' />

<code>
<![CDATA[ 
	// remove CDM prefix and leading zeros from Regions cdm
	// set cpt field and modifier to null
]]]]><![CDATA[></code>
<assign value='source.{ZDF:ZDF8ChargeCode}' property='tempcdm' action='set' />
<assign value='$ZSTRIP(tempcdm,"&lt;","CDM")' property='tempcdm1' action='set' />
<assign value='$ZSTRIP(tempcdm1,"&lt;","0")' property='tempcdm2' action='set' />
<assign value='tempcdm2' property='target.{FT1grp(1).FT1:TransactionCode.identifier}' action='set' />
<code>
<![CDATA[ 
	// keep cpt and modifier on misc cdm 11403 and new code 30084999001
]]]]><![CDATA[></code>
<if condition='(tempcdm2="11403")||(tempcdm2="30084999001")' >
<true>
<assign value='source.{ZDF:ZDF14CPTCode}' property='target.{FT1grp(1).FT1:ProcedureCode.identifier}' action='set' />
<assign value='"CPT"' property='target.{FT1grp(1).FT1:ProcedureCode.nameofcodingsystem}' action='set' />
<assign value='source.{ZDF:ZDF15Modifier}' property='target.{FT1grp(1).FT1:ProcedureCodeModifier(1).identifier}' action='set' />
<if condition='source.{ZDF:ZDF15Modifier}=""' >
<false>
<assign value='"CPTMOD"' property='target.{FT1grp(1).FT1:ProcedureCodeModifier(1).nameofcodingsystem}' action='set' />
</false>
</if>
</true>
<false>
<assign value='""' property='target.{FT1grp(1).FT1:ProcedureCode}' action='set' />
<assign value='""' property='target.{FT1grp(1).FT1:ProcedureCodeModifier(1)}' action='set' />
</false>
</if>

<code>
<![CDATA[ 
	// remove M prefix if one exists
]]]]><![CDATA[></code>
<if condition='..StartsWith(source.{ZDF:ZDF13ServicePhyCode},"M")|| ..StartsWith(source.{ZDF:ZDF12OrderingPhyCode},"E") ' >
<true>
<assign value='..SubString(source.{ZDF:ZDF13ServicePhyCode},2,8)' property='target.{FT1grp(1).FT1:PerformedByCode}' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF13ServicePhyCode}' property='target.{FT1grp(1).FT1:PerformedByCode}' action='set' />
</false>
</if>
<if condition='..StartsWith(source.{ZDF:ZDF12OrderingPhyCode},"M") || ..StartsWith(source.{ZDF:ZDF12OrderingPhyCode},"E") ' >
<true>
<assign value='..SubString(source.{ZDF:ZDF12OrderingPhyCode},2,8)' property='target.{FT1grp(1).FT1:OrderedByCode}' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF12OrderingPhyCode}' property='target.{FT1grp(1).FT1:OrderedByCode}' action='set' />
</false>
</if>
<code>
<![CDATA[ 
	// ***************** Coding for Account and MRN ************************
	//  MRN
	// 1.  Use MRN if sent by Regions  (inZDF16Mrn)
	// 2.  Search for MRN using Account sent by Regions (inZDF1Account)
	//                                                  (inZDF1Accounta - leading zeros removed)
	// 3.  Search for MRN using Patient Name
	//
	//  Account
	// 1.  Use Account sent by Regions
	// 2.  Search for Account using MRN and DOS (inZDF1Dos)
	//          implies you have the MRN from above either 1 or 3 (but not 2)
	//
	//  MSH Values 
	//   MSH:21 where MRN came from
	//           NOMRN, MRNbyNAME, MRNbyFIN,  MRNSent
	//   MSH:22 where Account came from
	//           NOFIN, FINbyMRN, FINSent
	//   MSH:23  Number of Fins
	//   MSH:24  Name of Primary Insurance
	//   MSH:25  Primary Insurance Type - MNMedicaid or OtherIns
	//
	//
]]]]><![CDATA[></code>

<code>
<![CDATA[ 
	// strip leading zero on account numbers and set variable.
	// 6/24/2019 Fin in Prod eight digits starting with 7. 2=cert, 9=mock		
]]]]><![CDATA[></code>

<if condition='..StartsWith(source.{ZDF:ZDF1AccountNumber},"7")' >
<true>
<assign value='source.{ZDF:ZDF1AccountNumber}' property='inZDF1Account' action='set' />
<assign value='$ZSTRIP(inZDF1Account,"&lt;","0")' property='inZDF1Accounta' action='set' />
</true>
<false>
<assign value='""' property='inZDF1Accounta' action='set' />
</false>
</if>

<code>
<![CDATA[
    // ***************************
	// search for mrn if not sent
	// ***************************
]]]]><![CDATA[></code>

<assign value='""' property='tableMRNbyFin' action='set' />
<assign value='""' property='tableMRNbyName' action='set' />

<if condition='inZDF16Mrn = ""' >
<true>
<if condition='inZDF1Accounta = ""' >
<false>
<code>
<![CDATA[ 
    // find mrn by fin
       set tableMRNbyFin=##class(GC.CernerGetData2019ALJ).CernerGetPatientInfoByFin(inZDF1Accounta)
    // $$$TRACE("tableMRNbyFin= "_tableMRNbyFin)    
    ]]]]><![CDATA[></code>
</false>
</if>
</true>
</if>

<if condition='(inZDF16Mrn="")&amp;(tableMRNbyFin = "")' >
<true>
<code>
<![CDATA[ 
	// Using Patient Last,First Name and Middle Name to get MRN from PatientData table if unique
    //  $$$TRACE("tableMRNbyNameB4="_tableMRNbyName)
    set tableMRNbyName=##class(GC.CernerGetData2019ALJ).CernerGetPatientInfoByName(tpatientlastnm,tpatientfirstnm,tpatientmiddlenm)
    // $$$TRACE("tableMRNbyName="_tableMRNbyName)
	]]]]><![CDATA[></code>
</true>
</if>

<code>
<![CDATA[
    // ****************************************************
	// set PID-3 based on MRN sent or by MRN search result
	// ****************************************************
]]]]><![CDATA[></code>	

<assign value='""' property='tFinalMRN' action='set' />
<assign value='""' property='tFinalMRNfromWhere' action='set' />	
<if condition='inZDF16Mrn = ""' >
<true>
<if condition='tableMRNbyFin = ""' >
<true>
<if condition='tableMRNbyName = ""' >
<true>
<assign value='""' property='target.{PID:3}' action='set' />
<assign value='"NOMRN"' property='target.{MSH:21}' action='set' />
</true>
<false>
<assign value='tableMRNbyName' property='target.{PID:3}' action='set' />
<assign value='tableMRNbyName' property='tFinalMRN' action='set' />
<assign value='"3"' property='tFinalMRNfromWhere' action='set' />
<assign value='"MRNbyNAME"' property='target.{MSH:21}' action='set' />
</false>
</if>
</true>
<false>
<assign value='tableMRNbyFin' property='target.{PID:3}' action='set' />
<assign value='tableMRNbyFin' property='tFinalMRN' action='set' />
<assign value='"2"' property='tFinalMRNfromWhere' action='set' />
<assign value='"MRNbyFIN"' property='target.{MSH:21}' action='set' />
</false>
</if>
</true>
<false>
<assign value='inZDF16Mrn' property='target.{PID:3}' action='set' />
<assign value='inZDF16Mrn' property='tFinalMRN' action='set' />
<assign value='"1"' property='tFinalMRNfromWhere' action='set' />
<assign value='"MRNSent"' property='target.{MSH:21}' action='set' />
</false>
</if>

<code>
<![CDATA[
    // ***************************
	// search for fin if not sent
	// ***************************
]]]]><![CDATA[></code>

<assign value='""' property='tableFINbyMRNDos' action='set' />
<assign value='""' property='tableFINbyMRNDosCount' action='set' />
<if condition='inZDF1Accounta = ""' >
<true>
<if condition='tFinalMRN = ""' >
<false>
<code>
<![CDATA[ 
    //  routine adds a comma between fin followed by a count of fins seperated by verbiage Count=
    //   i.e. 70037267,70116182,70204540,70214105,70332251Count=5
    set tableFINbyMRNDos=##class(GC.CernerGetData2019ALJ).CernerGetFinByMRNDos(tFinalMRN,tZDF6DOS)
    // $$$TRACE("tableFINbyMRNDos after= "_tableFINbyMRNDos)
	]]]]><![CDATA[></code>
</false>
</if>
</true>
</if>

<assign value='""' property='tableFINbyMRNDosCount' action='set' />
<assign value='""' property='tableFINbyMRNDosFin' action='set' />
<assign value='$PIECE(tableFINbyMRNDos,"Count=",1)' property='tableFINbyMRNDosFin' action='set' />
<assign value='$PIECE(tableFINbyMRNDos,"Count=",2)' property='tableFINbyMRNDosCount' action='set' />

<code>
<![CDATA[
    // *****************************************************
	// set PID-18 based on FIN sent or by MRN search result
	// *****************************************************
]]]]><![CDATA[></code>

<assign value='""' property='tFinalFIN' action='set' />
<assign value='""' property='tFinalFINfromWhere' action='set' />	
<if condition='inZDF1Accounta = ""' >
<true>
<if condition='tableFINbyMRNDosFin = ""' >
<true>
<assign value='""' property='target.{PID:18}' action='set' />
<assign value='"NOFIN"' property='target.{MSH:22}' action='set' />
<assign value='"0"' property='target.{MSH:23}' action='set' />
</true>
<false>
<assign value='tableFINbyMRNDosFin' property='target.{PID:18}' action='set' />
<assign value='tableFINbyMRNDosFin' property='tFinalFIN' action='set' />
<assign value='"2"' property='tFinalFINfromWhere' action='set' />
<assign value='"FINbyMRN"' property='target.{MSH:22}' action='set' />
<assign value='tableFINbyMRNDosCount' property='target.{MSH:23}' action='set' />
</false>
</if>
</true>
<false>
<assign value='inZDF1Accounta' property='target.{PID:18}' action='set' />
<assign value='inZDF1Accounta' property='tFinalFIN' action='set' />
<assign value='"1"' property='tFinalFINfromWhere' action='set' />
<assign value='"FINSent"' property='target.{MSH:22}' action='set' />
<assign value='"1"' property='target.{MSH:23}' action='set' />
</false>
</if>

<if condition='tableFINbyMRNDosCount &gt; "1"' >
<true>
<assign value='""' property='target.{PID:18}' action='set' />
</true>
</if>

<code>
<![CDATA[
    // ********************************************************
	// find insurance based on fin - 1=primary, 2=secodary etc
	// ********************************************************
]]]]><![CDATA[></code>

<assign value='""' property='tableInsName' action='set' />
	
<if condition='tFinalFIN = ""' >
<false>
<code>
<![CDATA[
     // $$$TRACE("b4insnamecall= "_tFinalFIN)
     set tableInsName=##class(GC.CernerGetData2019ALJ).CernerGetFinInsurance(tFinalFIN,"1")
    // $$$TRACE("tableInsName after= "_tableInsName)
	]]]]><![CDATA[></code>
</false>
</if>

<code>
<![CDATA[ 
	// ***************** Set MSH Values ************************
	//
	//  MSH Values 
	//   MSH:21 where MRN came from
	//           NOMRN, MRNbyNAME, MRNbyFIN,  MRNSent
	//   MSH:22 where Account came from
	//           NOFIN, FINbyMRN, FINSent
	//   MSH:23  Number of Fins
	//   MSH:24  Name of Primary Insurance
	//   MSH:25  Primary Insurance Type - MNMedicaid or OtherIns
	//
	//   MSH:
	//
]]]]><![CDATA[></code>

<assign value='tableInsName' property='target.{MSH:24}' action='set' />
<if condition='tableInsName="MN MED ASSISTANCE"' >
<true>
<assign value='"MNMedicaid"' property='target.{MSH:25}' action='set' />
</true>
<false>
<assign value='"OtherIns"' property='target.{MSH:25}' action='set' />
</false>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.RegLab2CernerGDFTv4">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>66288,49699.923879</TimeChanged>
<TimeCreated>61601,38599.428669</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='22.RegLab:GLT_DFT' targetDocType='231.Cerner:DFT_P03' create='new' language='objectscript' >
<code>
<![CDATA[ 
	// Last Updated: 06/10/2019 Al Johnson
	// Last Updated in Prod:  03/12/2019
	// Created in Cert 06/10/2019 copied from GC.RegLab2CernerGDFTv2 - Al Johnson
	// Changes based on Beaker charges intermixed with Sunquest charges
	// Regions now sending MRN - changes to search for fin and insurance
	//
	// Use Z segment to transfer data in HL7 file instead of flat file
	// Remove leading zero in account numbers if sent
	// Remove leading M or E in Physician code if sent
	// Use GC.RegionsCharges.CernerGetPatientInfo to get MRN off Cerner tables
	//  Beaker now will send MRN.  If not sent read tables
	// 
	// Use GCH.Regions.DFT.VisitTBL Table data to assign MRN and verify Account number
	//    First Using Account get MRN
	//    If Account not found 
	//       use Patient Last & First Name, if unique, to get MRN
	//    If MRN found use to get valid Account number by DOS if IP account exists use else look for valid OP
	//    If none found just send account as sent by Regions
	// Do Not Send CPT code.  Cerner will build in tables based on CDM.
	// --  original dev / prod code - Check for CPT code range >= 80000 and <=89999 add modifier 90 01/26/2016 ALJ
	// Format unique value in FT1-2 TransactionId hl7 max 12 - take MSH:MessageControlID first 8 and last 4 characters
	// 01-11-2017 if cdm is misc CDM00011403 - include cpt and modifier
	// 01-17-2017   cpt - 25.1, 25.3 needs to be CPT  modifier/s - 26.1, 26.3 needs to be CPTMOD
	//
	// 01-30-2019 Beaker charges now include MRN
	// 01-30-2019 Beaker Regions charge code now 11 characters 3 digit revenue code, 5 char cpt/hcpcs, 3 digit counter
	// 01-30-2019 30084999001 is the new code for misc test - old was 00011403
	//
	// 06-10-2019 add search of fin by mrn and dos
	//            CernerGetFinByMrnDos
	//            lgc.sp_HL7_Get_FIN_By_MRN_DOS
	//            Parameter 1: MRN  Parameter 2: DOS
	// 06-10-2019 search for insurance using fin
	//            CernerGetFinInsurance
	//            lgc.sp_HL7_Get_Insurance_By_FIN_And_Rank
	//            Parameter 1: FIN  Parameter 2: Rank
	// 06-10-2019 SQLDBDEV16\DEV16 and SQLDBTEST16\DBTEST16 database EDW_IS both contain Prod data - current to previous day
	// 06-21-2019 if multiple fins returned, blank out on pid-18
	// 06-24-2019 fin returned needs to start with 7 (prod) 2=cert, 9=mock

]]]]><![CDATA[></code>
<assign value='source.{MSH}' property='target.{MSH}' action='set' />
<assign value='"GCH"' property='target.{MSH:ReceivingFacility}' action='set' />
<assign value='"RegLab2CernerGDFTv3"' property='target.{MSH:Security}' action='set' />
<assign value='"DFT^P03"' property='target.{MSH:MessageType}' action='set' />
<assign value='"2.3"' property='target.{MSH:VersionID}' action='set' />
<assign value='"P03"' property='target.{EVN:EventTypeCode}' action='set' />
<assign value='"RGCHG"' property='target.{FT1grp(1).FT1:DepartmentCode}' action='set' />
<assign value='"CHG"' property='target.{FT1grp(1).FT1:TransactionCode.nameofcodingsystem}' action='set' />
<code>
<![CDATA[ 
	// Configure Credits
	//  Remove '-' negative sign if received on credit
]]]]><![CDATA[></code>
<if condition='source.{ZDF:ZDF7ChargeCreditCode} = "CR"' >
<true>
<assign value='$Translate(source.{ZDF:ZDF10Quanity},"-","")' property='source.{ZDF:ZDF10Quanity}' action='set' />
<assign value='$Translate(source.{ZDF:ZDF11ExtAmount},"-","")' property='source.{ZDF:ZDF11ExtAmount}' action='set' />
</true>
</if>
<code>
<![CDATA[ 
    // set FT1-1 setid
    // set FT1-2 transaction id must be unique - take 1st 8 and last 4 from msh message control id
	// set FT1-5 transaction posting date for Cerner
]]]]><![CDATA[></code>
<assign value='"1"' property='target.{FT1grp(1).FT1:SetIDFT1}' action='set' />
<assign value='source.{MSH:MessageControlID}' property='tempid1' action='set' />
<assign value='$EXTRACT(tempid1,1,8)' property='tempid1a' action='set' />
<assign value='$EXTRACT(tempid1,*-3,*)' property='tempid1b' action='set' />
<assign value='tempid1a_tempid1b' property='target.{FT1grp(1).FT1:TransactionID}' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='target.{FT1grp(1).FT1:TransactionDate}' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='target.{FT1grp(1).FT1:TransactionPostingDate}' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='tZDF6DOS' action='set' />
<assign value='source.{ZDF:ZDF7ChargeCreditCode}' property='target.{FT1grp(1).FT1:TransactionType}' action='set' />

<code>
<![CDATA[ 
	// update Regions price by 1.5048 and round
	// for Cerner update unit price with 1.5048 rounded price
]]]]><![CDATA[></code>
<if condition='( +source.{ZDF:ZDF11ExtAmount} &lt;= 0)' >
<true>
<assign value='"0"' property='target.{FT1grp(1).FT1:TransactionAmountExtended}' action='set' />
<assign value='"0"' property='target.{FT1grp(1).FT1:TransactionAmountUnit}' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF11ExtAmount}/source.{ZDF:ZDF10Quanity}' property='currPrice' action='set' />
<assign value='currPrice * (1.5048*1000)' property='newPrice' action='set' />
<assign value='$NUMBER(newPrice,0)' property='newPrice' action='set' />
<assign value='((((( newPrice \ 500 ) + 1 ) * 500 ) - newPrice ) # 500)' property='diff' action='set' />
<assign value=' newPrice + diff' property='newPrice' action='set' />
<assign value='newPrice / 1000' property='newPrice' action='set' />
<assign value='newPrice' property='target.{FT1grp(1).FT1:TransactionAmountUnit}' action='set' />
<assign value='newPrice * source.{ZDF:ZDF10Quanity}' property='newPrice' action='set' />
<assign value='newPrice' property='target.{FT1grp(1).FT1:TransactionAmountExtended}' action='set' />
</false>
</if>
<assign value='source.{ZDF:ZDF10Quanity}' property='target.{FT1grp(1).FT1:TransactionQuantity}' action='set' />
<assign value='source.{ZDF:ZDF2LastName}' property='target.{PID:PatientName(1).familylastname}' action='set' />
<assign value='source.{ZDF:ZDF3FirstName}' property='target.{PID:PatientName(1).givenname}' action='set' />
<assign value='source.{ZDF:ZDF4MiddleName}' property='target.{PID:PatientName(1).middleinitialorname}' action='set' />
<assign value='source.{ZDF:ZDF2LastName}' property='tpatientlastnm' action='set' />
<assign value='source.{ZDF:ZDF3FirstName}' property='tpatientfirstnm' action='set' />
<assign value='source.{ZDF:ZDF4MiddleName}' property='tpatientmiddlenm' action='set' />

<code>
<![CDATA[ 
	// Beaker will send MRN remove G prefix and leading zeros from mrn if sent by Regions
]]]]><![CDATA[></code>
<assign value='""' property='tempmrn' action='set' />
<assign value='""' property='tempmrn1' action='set' />
<assign value='""' property='inZDF16Mrn' action='set' />
<assign value='source.{ZDF:ZDF16MRN}' property='tempmrn' action='set' />
<assign value='$ZSTRIP(tempmrn,"&lt;","G")' property='tempmrn1' action='set' />
<assign value='$ZSTRIP(tempmrn1,"&lt;","0")' property='inZDF16Mrn' action='set' />

<code>
<![CDATA[ 
	// remove CDM prefix and leading zeros from Regions cdm
	// set cpt field and modifier to null
]]]]><![CDATA[></code>
<assign value='source.{ZDF:ZDF8ChargeCode}' property='tempcdm' action='set' />
<assign value='$ZSTRIP(tempcdm,"&lt;","CDM")' property='tempcdm1' action='set' />
<assign value='$ZSTRIP(tempcdm1,"&lt;","0")' property='tempcdm2' action='set' />
<assign value='tempcdm2' property='target.{FT1grp(1).FT1:TransactionCode.identifier}' action='set' />
<code>
<![CDATA[ 
	// keep cpt and modifier on misc cdm 11403 and new code 30084999001
]]]]><![CDATA[></code>
<if condition='(tempcdm2="11403")||(tempcdm2="30084999001")' >
<true>
<assign value='source.{ZDF:ZDF14CPTCode}' property='target.{FT1grp(1).FT1:ProcedureCode.identifier}' action='set' />
<assign value='"CPT"' property='target.{FT1grp(1).FT1:ProcedureCode.nameofcodingsystem}' action='set' />
<assign value='source.{ZDF:ZDF15Modifier}' property='target.{FT1grp(1).FT1:ProcedureCodeModifier(1).identifier}' action='set' />
<if condition='source.{ZDF:ZDF15Modifier}=""' >
<false>
<assign value='"CPTMOD"' property='target.{FT1grp(1).FT1:ProcedureCodeModifier(1).nameofcodingsystem}' action='set' />
</false>
</if>
</true>
<false>
<assign value='""' property='target.{FT1grp(1).FT1:ProcedureCode}' action='set' />
<assign value='""' property='target.{FT1grp(1).FT1:ProcedureCodeModifier(1)}' action='set' />
</false>
</if>

<code>
<![CDATA[ 
	// remove M prefix if one exists
]]]]><![CDATA[></code>
<if condition='..StartsWith(source.{ZDF:ZDF13ServicePhyCode},"M")|| ..StartsWith(source.{ZDF:ZDF12OrderingPhyCode},"E") ' >
<true>
<assign value='..SubString(source.{ZDF:ZDF13ServicePhyCode},2,8)' property='target.{FT1grp(1).FT1:PerformedByCode}' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF13ServicePhyCode}' property='target.{FT1grp(1).FT1:PerformedByCode}' action='set' />
</false>
</if>
<if condition='..StartsWith(source.{ZDF:ZDF12OrderingPhyCode},"M") || ..StartsWith(source.{ZDF:ZDF12OrderingPhyCode},"E") ' >
<true>
<assign value='..SubString(source.{ZDF:ZDF12OrderingPhyCode},2,8)' property='target.{FT1grp(1).FT1:OrderedByCode}' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF12OrderingPhyCode}' property='target.{FT1grp(1).FT1:OrderedByCode}' action='set' />
</false>
</if>
<code>
<![CDATA[ 
	// ***************** Coding for Account and MRN ************************
	//  MRN
	// 1.  Use MRN if sent by Regions  (inZDF16Mrn)
	// 2.  Search for MRN using Account sent by Regions (inZDF1Account)
	//                                                  (inZDF1Accounta - leading zeros removed)
	// 3.  Search for MRN using Patient Name
	//
	//  Account
	// 1.  Use Account sent by Regions
	// 2.  Search for Account using MRN and DOS (inZDF1Dos)
	//          implies you have the MRN from above either 1 or 3 (but not 2)
	//
	//  MSH Values 
	//   MSH:21 where MRN came from
	//           NOMRN, MRNbyNAME, MRNbyFIN,  MRNSent
	//   MSH:22 where Account came from
	//           NOFIN, FINbyMRN, FINSent
	//   MSH:23  Number of Fins
	//   MSH:24  Name of Primary Insurance
	//   MSH:25  Primary Insurance Type - MNMedicaid or OtherIns
	//
	//
]]]]><![CDATA[></code>

<code>
<![CDATA[ 
	// strip leading zero on account numbers and set variable.
	// 6/24/2019 Fin in Prod eight digits starting with 7. 2=cert, 9=mock		
]]]]><![CDATA[></code>

<if condition='..StartsWith(source.{ZDF:ZDF1AccountNumber},"7")' >
<true>
<assign value='source.{ZDF:ZDF1AccountNumber}' property='inZDF1Account' action='set' />
<assign value='$ZSTRIP(inZDF1Account,"&lt;","0")' property='inZDF1Accounta' action='set' />
</true>
<false>
<assign value='""' property='inZDF1Accounta' action='set' />
</false>
</if>

<code>
<![CDATA[
    // ***************************
	// search for mrn if not sent
	// ***************************
]]]]><![CDATA[></code>

<assign value='""' property='tableMRNbyFin' action='set' />
<assign value='""' property='tableMRNbyName' action='set' />

<if condition='inZDF16Mrn = ""' >
<true>
<if condition='inZDF1Accounta = ""' >
<false>
<code>
<![CDATA[ 
    // find mrn by fin
       set tableMRNbyFin=##class(GC.CernerGetData2022).CernerGetPatientInfoByFin(inZDF1Accounta)
    // $$$TRACE("tableMRNbyFin= "_tableMRNbyFin)    
    ]]]]><![CDATA[></code>
</false>
</if>
</true>
</if>

<if condition='(inZDF16Mrn="")&amp;(tableMRNbyFin = "")' >
<true>
<code>
<![CDATA[ 
	// Using Patient Last,First Name and Middle Name to get MRN from PatientData table if unique
    //  $$$TRACE("tableMRNbyNameB4="_tableMRNbyName)
    set tableMRNbyName=##class(GC.CernerGetData2022).CernerGetPatientInfoByName(tpatientlastnm,tpatientfirstnm,tpatientmiddlenm)
    // $$$TRACE("tableMRNbyName="_tableMRNbyName)
	]]]]><![CDATA[></code>
</true>
</if>

<code>
<![CDATA[
    // ****************************************************
	// set PID-3 based on MRN sent or by MRN search result
	// ****************************************************
]]]]><![CDATA[></code>	

<assign value='""' property='tFinalMRN' action='set' />
<assign value='""' property='tFinalMRNfromWhere' action='set' />	
<if condition='inZDF16Mrn = ""' >
<true>
<if condition='tableMRNbyFin = ""' >
<true>
<if condition='tableMRNbyName = ""' >
<true>
<assign value='""' property='target.{PID:3}' action='set' />
<assign value='"NOMRN"' property='target.{MSH:21}' action='set' />
</true>
<false>
<assign value='tableMRNbyName' property='target.{PID:3}' action='set' />
<assign value='tableMRNbyName' property='tFinalMRN' action='set' />
<assign value='"3"' property='tFinalMRNfromWhere' action='set' />
<assign value='"MRNbyNAME"' property='target.{MSH:21}' action='set' />
</false>
</if>
</true>
<false>
<assign value='tableMRNbyFin' property='target.{PID:3}' action='set' />
<assign value='tableMRNbyFin' property='tFinalMRN' action='set' />
<assign value='"2"' property='tFinalMRNfromWhere' action='set' />
<assign value='"MRNbyFIN"' property='target.{MSH:21}' action='set' />
</false>
</if>
</true>
<false>
<assign value='inZDF16Mrn' property='target.{PID:3}' action='set' />
<assign value='inZDF16Mrn' property='tFinalMRN' action='set' />
<assign value='"1"' property='tFinalMRNfromWhere' action='set' />
<assign value='"MRNSent"' property='target.{MSH:21}' action='set' />
</false>
</if>

<code>
<![CDATA[
    // ***************************
	// search for fin if not sent
	// ***************************
]]]]><![CDATA[></code>

<assign value='""' property='tableFINbyMRNDos' action='set' />
<assign value='""' property='tableFINbyMRNDosCount' action='set' />
<if condition='inZDF1Accounta = ""' >
<true>
<if condition='tFinalMRN = ""' >
<false>
<code>
<![CDATA[ 
    //  routine adds a comma between fin followed by a count of fins seperated by verbiage Count=
    //   i.e. 70037267,70116182,70204540,70214105,70332251Count=5
    set tableFINbyMRNDos=##class(GC.CernerGetData2022).CernerGetFinByMRNDos(tFinalMRN,tZDF6DOS)
    // $$$TRACE("tableFINbyMRNDos after= "_tableFINbyMRNDos)
	]]]]><![CDATA[></code>
</false>
</if>
</true>
</if>

<assign value='""' property='tableFINbyMRNDosCount' action='set' />
<assign value='""' property='tableFINbyMRNDosFin' action='set' />
<assign value='$PIECE(tableFINbyMRNDos,"Count=",1)' property='tableFINbyMRNDosFin' action='set' />
<assign value='$PIECE(tableFINbyMRNDos,"Count=",2)' property='tableFINbyMRNDosCount' action='set' />

<code>
<![CDATA[
    // *****************************************************
	// set PID-18 based on FIN sent or by MRN search result
	// *****************************************************
]]]]><![CDATA[></code>

<assign value='""' property='tFinalFIN' action='set' />
<assign value='""' property='tFinalFINfromWhere' action='set' />	
<if condition='inZDF1Accounta = ""' >
<true>
<if condition='tableFINbyMRNDosFin = ""' >
<true>
<assign value='""' property='target.{PID:18}' action='set' />
<assign value='"NOFIN"' property='target.{MSH:22}' action='set' />
<assign value='"0"' property='target.{MSH:23}' action='set' />
</true>
<false>
<assign value='tableFINbyMRNDosFin' property='target.{PID:18}' action='set' />
<assign value='tableFINbyMRNDosFin' property='tFinalFIN' action='set' />
<assign value='"2"' property='tFinalFINfromWhere' action='set' />
<assign value='"FINbyMRN"' property='target.{MSH:22}' action='set' />
<assign value='tableFINbyMRNDosCount' property='target.{MSH:23}' action='set' />
</false>
</if>
</true>
<false>
<assign value='inZDF1Accounta' property='target.{PID:18}' action='set' />
<assign value='inZDF1Accounta' property='tFinalFIN' action='set' />
<assign value='"1"' property='tFinalFINfromWhere' action='set' />
<assign value='"FINSent"' property='target.{MSH:22}' action='set' />
<assign value='"1"' property='target.{MSH:23}' action='set' />
</false>
</if>

<if condition='tableFINbyMRNDosCount &gt; "1"' >
<true>
<assign value='""' property='target.{PID:18}' action='set' />
</true>
</if>

<code>
<![CDATA[
    // ********************************************************
	// find insurance based on fin - 1=primary, 2=secodary etc
	// ********************************************************
]]]]><![CDATA[></code>

<assign value='""' property='tableInsName' action='set' />
	
<if condition='tFinalFIN = ""' >
<false>
<code>
<![CDATA[
     // $$$TRACE("b4insnamecall= "_tFinalFIN)
     set tableInsName=##class(GC.CernerGetData2022).CernerGetFinInsurance(tFinalFIN,"1")
    // $$$TRACE("tableInsName after= "_tableInsName)
	]]]]><![CDATA[></code>
</false>
</if>

<code>
<![CDATA[ 
	// ***************** Set MSH Values ************************
	//
	//  MSH Values 
	//   MSH:21 where MRN came from
	//           NOMRN, MRNbyNAME, MRNbyFIN,  MRNSent
	//   MSH:22 where Account came from
	//           NOFIN, FINbyMRN, FINSent
	//   MSH:23  Number of Fins
	//   MSH:24  Name of Primary Insurance
	//   MSH:25  Primary Insurance Type - MNMedicaid or OtherIns
	//
	//   MSH:
	//
]]]]><![CDATA[></code>

<assign value='tableInsName' property='target.{MSH:24}' action='set' />
<if condition='tableInsName="MN MED ASSISTANCE"' >
<true>
<assign value='"MNMedicaid"' property='target.{MSH:25}' action='set' />
</true>
<false>
<assign value='"OtherIns"' property='target.{MSH:25}' action='set' />
</false>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.RegLab2CernerORM">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64616,55398.022435</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='22.RegLab:ORM_O01' targetDocType='22.RegLab:ORM_O01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Updated 11/22/2017
	//  Last Updated in Prod: 11/29/2017 Al Johnson
	//  Create: 11/22/2017  Al Johnson 
	//  Description: 
	//  Check incoming order messages from Regions - exception SN send Order Number
	//  Replace ordering doctor from table T_RegionsLab_OrderingProvider 11/22/2017
	//  Update table with result date 11/22/2017 
]]]]><![CDATA[></code>

<assign property='tempCernerOrder' value='source.{OBR:2(1).1}' action='set' />

<assign property='tempORC12' value='source.{ORC:12(1)}' action='set' />
<assign property='tempOBR16' value='source.{OBR:16(1)}' action='set' />
<assign property='tempInORC12id' value='source.{ORC:12(1).1}' action='set' />
<assign property='tempInOBR16id' value='source.{OBR:16(1).1}' action='set' />

<assign property='tempDateResult' value='""' action='set' />
<assign property='tempDateCancel' value='""' action='set' />

<if condition='(source.{ORC:1}="SN")' >
<false>
<code>
<![CDATA[
    // SN Send Number- no Cerner order - so send to Cerner as received
]]]]><![CDATA[></code>
	

<assign value='tempCernerOrder' property='wTableKey' action='set' />
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_RegionsLab_OrderingProvider",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<code>
<![CDATA[
    // no entry found - so send to Cerner as received
]]]]><![CDATA[></code>
</true>
<false>
<code>
<![CDATA[
    // table entry found - change ordering doc in message
    // if cancel - update cancel date in table
]]]]><![CDATA[></code>
<assign value='$PIECE(wtableresult,"|",1)' property='temptblORC12' action='set' />
<assign value='$PIECE(temptblORC12,"^",1)' property='temptblORC12id' action='set' />
<assign value='$PIECE(wtableresult,"|",2)' property='temptblOBR16' action='set' />
<assign value='$PIECE(temptblOBR16,"^",1)' property='temptblOBR16id' action='set' />
<assign value='$PIECE(wtableresult,"|",3)' property='temptblDateAdd' action='set' />
<assign value='$PIECE(wtableresult,"|",4)' property='temptblDateResult' action='set' />
<assign value='$PIECE(wtableresult,"|",5)' property='temptblDateCancel' action='set' />

<code>
<![CDATA[
    // OC Order Cancel - update cancel date in table
]]]]><![CDATA[></code>
<if condition='(source.{ORC:1}="OC")' >
<true>
<assign property='tempDateCancel' value='$ZDATE($NOW(),8)' action='set' />
<code>
<![CDATA[
    // cancel or discontinue - update table with cancel date
        set wTableData=(temptblORC12_"|"_temptblOBR16_"|"_temptblDateAdd_"|"_temptblDateResult_"|"_tempDateCancel_"|") 
        set wTableName="T_RegionsLab_OrderingProvider"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,wTableKey,wTableData)	
]]]]><![CDATA[></code>
</true>
</if>

<if condition='(tempInORC12id = temptblORC12id)&amp;(tempInOBR16id = temptblOBR16id)' >
<false>
<code>
<![CDATA[
    // ordering doc on table differs from regions hl7 message
    //  update hl7 message
]]]]><![CDATA[></code>
  <assign property='target.{ORC:12(1)}' value='temptblORC12' action='set' />
  <assign property='target.{OBR:16(1)}' value='temptblOBR16' action='set' />
</false>
</if>

</false>
</if>
</false>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.RegLab2CernerORUCoPath">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64616,45823.561928</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<?xml version="1.0" ?>
<transform targetClass='EnsLib.HL7.Message' targetDocType='22.RegLab:ORU_R01' sourceClass='EnsLib.HL7.Message' sourceDocType='22.RegLab:ORU_R01' create='copy' language='objectscript'>
<code>
<![CDATA[ 
	//  Last Updated: 11/22/2017 Al Johnson
	//  Last Moved to Prod: 11/29/2017 
    //  Created 03/23/2017 Al Johnson
    //
    //  Populate OBR-22 with MSH-7 datetime of message 03/23/2017
    //  Populate OBR-27.4 with MSH-7 datetime of message 03/23/2017
    //
    //  Check table T_RegionsLab_OrderingProvider for a change in ordering provider 11/22/2017
    //  Change result message to table ordering provider 11/22/2017
    //  Update table with result date 11/22/2017
]]]]><![CDATA[>
</code>

<assign value='source.{MSH:DateTimeofMessage.timeofanevent}' property='target.{OBR:22}' action='set' />
<assign value='source.{MSH:DateTimeofMessage.timeofanevent}' property='target.{OBR:27.4}' action='set' />

<code>
<![CDATA[
    //  Check table T_RegionsLab_OrderingProvider for a change in ordering provider 11/22/2017
    //  Change result message to table ordering provider 11/22/2017
]]]]><![CDATA[></code>
<assign property='tempCernerOrder' value='source.{OBR:2(1).1}' action='set' />

<assign property='tempORC12' value='source.{ORC:12(1)}' action='set' />
<assign property='tempOBR16' value='source.{OBR:16(1)}' action='set' />
<assign property='tempInORC12id' value='source.{ORC:12(1).1}' action='set' />
<assign property='tempInOBR16id' value='source.{OBR:16(1).1}' action='set' />

<assign property='tempDateResult' value='""' action='set' />
<assign property='tempDateCancel' value='""' action='set' />

<assign value='tempCernerOrder' property='wTableKey' action='set' />
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_RegionsLab_OrderingProvider",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<code>
<![CDATA[
    // no entry found - so send to Cerner as received
]]]]><![CDATA[></code>
</true>
<false>
<code>
<![CDATA[
    // table entry found - change ordering doc in message
]]]]><![CDATA[></code>
<assign value='$PIECE(wtableresult,"|",1)' property='temptblORC12' action='set' />
<assign value='$PIECE(temptblORC12,"^",1)' property='temptblORC12id' action='set' />
<assign value='$PIECE(wtableresult,"|",2)' property='temptblOBR16' action='set' />
<assign value='$PIECE(temptblOBR16,"^",1)' property='temptblOBR16id' action='set' />
<assign value='$PIECE(wtableresult,"|",3)' property='temptblDateAdd' action='set' />
<assign value='$PIECE(wtableresult,"|",4)' property='temptblDateResult' action='set' />
<assign value='$PIECE(wtableresult,"|",5)' property='temptblDateCancel' action='set' />

<assign property='tempDateResult' value='$ZDATE($NOW(),8)' action='set' />
<code>
<![CDATA[
    // result from Regions - update table with result date
        set wTableData=(temptblORC12_"|"_temptblOBR16_"|"_temptblDateAdd_"|"_tempDateResult_"|"_temptblDateCancel_"|") 
        set wTableName="T_RegionsLab_OrderingProvider"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,wTableKey,wTableData)	
]]]]><![CDATA[></code>

<if condition='(tempInORC12id = temptblORC12id)&amp;(tempInOBR16id = temptblOBR16id)' >
<false>
<code>
<![CDATA[
    // ordering doc on table differs from regions hl7 message
    //  update hl7 message
]]]]><![CDATA[></code>
  <assign property='target.{ORC:12(1)}' value='temptblORC12' action='set' />
  <assign property='target.{OBR:16(1)}' value='temptblOBR16' action='set' />
</false>
</if>

</false>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.RegLab2CernerORUGenlab">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64657,59281.462994</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='22.RegLab:ORU_R01' targetDocType='22.RegLab:ORU_R01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Update: 01/02/2018 Al Johnson
	//  Last Moved to Prod:  01/10/2018
    //  Created 02/05/2017 Al Johnson
    //   Check for OBX subtype FT FreeText
    //    If tied to previous OBX change to NTE segment
    //    If standalone change to subtype RC
    //  Populate OBR-22 with MSH-7 datetime of message 03/23/2017
    //  Populate OBR-27.4 with MSH-7 datetime of message 03/23/2017
    //  Schema changed so NTE segment is repeating - add index for NTE under OBX 04/17/2017
    //  Check table T_RegionsLab_OrderingProvider for a change in ordering provider 11/22/2017
    //  Change result message to table ordering provider 11/22/2017
    //  Update table with result date 11/22/2017
    //  Consolidate consecutive OBX segments for CSFD 01/02/2018
]]]]><![CDATA[></code>
<code>
<![CDATA[ 
    //  Update FreeText OBX as ST or NTE segment
    //  01/02/2018 cosolidate CSFD OBX segments
    //             Also consolidate if CE followed by FT for CSFD
]]]]><![CDATA[></code>
<assign value='source.{MSH:DateTimeofMessage.timeofanevent}' property='target.{OBR:22}' action='set' />
<assign value='source.{MSH:DateTimeofMessage.timeofanevent}' property='target.{OBR:27.4}' action='set' />
<assign value='0' property='tmpnte' action='set' />
<assign property='HldOBXval1' value='""' action='set' />
<assign property='HldOBXval2' value='""' action='set' />
<foreach property='target.{OBXgrp()}' key='k1' >
<if condition='target.{OBXgrp(k1).OBX:ValueType}="FT"' >
<true>
<if condition='k1="1"' >
<true>
<assign value='"ST"' property='target.{OBXgrp(k1).OBX:ValueType}' action='set' />
</true>
<false>
<if condition='(target.{OBXgrp(k1).OBX:SetIDOBX})=(target.{OBXgrp(k1-1).OBX:SetIDOBX})' >
<true>
<assign value='tmpnte+1' property='tmpnte' action='set' />
<assign value='' property='target.{OBXgrp(k1)}' action='remove' />
<assign value='source.{OBXgrp(k1).OBX:SetIDOBX}' property='target.{OBXgrp(k1).NTE(tmpnte):SetIDNotesandComments}' action='set' />
<assign value='"RC"' property='target.{OBXgrp(k1).NTE(tmpnte):SourceofComment}' action='set' />
<assign value='source.{OBXgrp(k1).OBX:ObservationValue}' property='target.{OBXgrp(k1).NTE(tmpnte):Comment(1)}' action='set' />
</true>
<false>
<assign value='"ST"' property='target.{OBXgrp(k1).OBX:ValueType}' action='set' />
</false>
</if>
</false>
</if>
</true>
<false>
<code>
<![CDATA[ 
    //  01/02/2018 consolidate consecutive CSFD even if CE followed by FT
]]]]><![CDATA[></code>
<if condition='(target.{OBXgrp(k1).OBX:3.2}="CSFD") &amp; (target.{OBXgrp(k1+1).OBX:3.2}="CSFD")'>
<true>
<assign property='HldOBXval1' value='target.{OBXgrp(k1).OBX:5(1)}' action='set' />
<assign property='HldOBXval2' value='target.{OBXgrp(k1+1).OBX:5(1)}' action='set' />
<assign property='target.{OBXgrp(k1).OBX:5}' value='HldOBXval1_" "_HldOBXval2' action='set' />
<assign property='target.{OBXgrp(k1+1).OBX}' value='' action='remove' />
</true>
</if>
</false>
</if>
</foreach>

<code>
<![CDATA[
    //  Check table T_RegionsLab_OrderingProvider for a change in ordering provider
    //  Change result message to table ordering provider
]]]]><![CDATA[></code>

<assign property='tempCernerOrder' value='source.{OBR:2(1).1}' action='set' />

<assign property='tempORC12' value='source.{ORC:12(1)}' action='set' />
<assign property='tempOBR16' value='source.{OBR:16(1)}' action='set' />
<assign property='tempInORC12id' value='source.{ORC:12(1).1}' action='set' />
<assign property='tempInOBR16id' value='source.{OBR:16(1).1}' action='set' />

<assign property='tempDateResult' value='""' action='set' />
<assign property='tempDateCancel' value='""' action='set' />

<assign value='tempCernerOrder' property='wTableKey' action='set' />
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_RegionsLab_OrderingProvider",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<code>
<![CDATA[
    // no entry found - so send to Cerner as received
]]]]><![CDATA[></code>
</true>
<false>
<code>
<![CDATA[
    // table entry found - change ordering doc in message
]]]]><![CDATA[></code>
<assign value='$PIECE(wtableresult,"|",1)' property='temptblORC12' action='set' />
<assign value='$PIECE(temptblORC12,"^",1)' property='temptblORC12id' action='set' />
<assign value='$PIECE(wtableresult,"|",2)' property='temptblOBR16' action='set' />
<assign value='$PIECE(temptblOBR16,"^",1)' property='temptblOBR16id' action='set' />
<assign value='$PIECE(wtableresult,"|",3)' property='temptblDateAdd' action='set' />
<assign value='$PIECE(wtableresult,"|",4)' property='temptblDateResult' action='set' />
<assign value='$PIECE(wtableresult,"|",5)' property='temptblDateCancel' action='set' />

<assign property='tempDateResult' value='$ZDATE($NOW(),8)' action='set' />
<code>
<![CDATA[
    // result from Regions - update table with result date
        set wTableData=(temptblORC12_"|"_temptblOBR16_"|"_temptblDateAdd_"|"_tempDateResult_"|"_temptblDateCancel_"|") 
        set wTableName="T_RegionsLab_OrderingProvider"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,wTableKey,wTableData)	
]]]]><![CDATA[></code>

<if condition='(tempInORC12id = temptblORC12id)&amp;(tempInOBR16id = temptblOBR16id)' >
<false>
<code>
<![CDATA[
    // ordering doc on table differs from regions hl7 message
    //  update hl7 message
]]]]><![CDATA[></code>
  <assign property='target.{ORC:12(1)}' value='temptblORC12' action='set' />
  <assign property='target.{OBR:16(1)}' value='temptblOBR16' action='set' />
</false>
</if>

</false>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.RegLab2CernerORUSendOut">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64616,46061.8698</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>0</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>0</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='22.RegLab:ORU_R01' targetDocType='22.RegLab:ORU_R01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
	//  Last Updated: 11/22/2017 Al Johnson
	//  Last Moved to Prod:  11/29/2017
    //  Created 04/07/2017 Al Johnson
    //   OBR-24 = SO SendOuts (Regions changed from Quest to Arup Lab)
    //   Check for OBX Change in Sequeence
    //    If tied to previous OBX change to NTE segment
    //    If standalone change to subtype RC
    //  Populate OBR-22 with MSH-7 datetime of message 03/23/2017
    //  Populate OBR-27.4 with MSH-7 datetime of message 03/23/2017
    //  Check table T_RegionsLab_OrderingProvider for a change in ordering provider 11/22/2017
    //  Change result message to table ordering provider 11/22/2017
    //  Update table with result date 11/22/2017
]]]]><![CDATA[></code>
<code>
<![CDATA[ 
    //  Update FreeText OBX as ST or NTE segment
]]]]><![CDATA[></code>
<assign value='source.{MSH:DateTimeofMessage.timeofanevent}' property='target.{OBR:22}' action='set' />
<assign value='source.{MSH:DateTimeofMessage.timeofanevent}' property='target.{OBR:27.4}' action='set' />
<assign value='0' property='tmpnte' action='set' />
<foreach property='source.{OBXgrp()}' key='k1' >
<if condition='k1="1"' >
<true>
<assign value='0' property='tmpnte' action='set' />
</true>
<false>
<if condition='(source.{OBXgrp(k1).OBX:SetIDOBX})=(source.{OBXgrp(k1-1).OBX:SetIDOBX})' >
<true>
<assign value='tmpnte+1' property='tmpnte' action='set' />
<assign value='' property='target.{OBXgrp(k1)}' action='remove' />
<assign value='source.{OBXgrp(k1).OBX:SetIDOBX}' property='target.{OBXgrp(k1).NTE(tmpnte):SetIDNotesandComments}' action='set' />
<assign value='"NTE"' property='target.{OBXgrp(k1).NTE(tmpnte):SourceofComment}' action='set' />
<assign value='source.{OBXgrp(k1).OBX:ObservationValue}' property='target.{OBXgrp(k1).NTE(tmpnte):Comment(1)}' action='set' />
</true>
<false>
<assign value='0' property='tmpnte' action='set' />
</false>
</if>
</false>
</if>
</foreach>

<code>
<![CDATA[
    //  Check table T_RegionsLab_OrderingProvider for a change in ordering provider 11/22/2017
    //  Change result message to table ordering provider 11/22/2017
]]]]><![CDATA[></code>
<assign property='tempCernerOrder' value='source.{OBR:2(1).1}' action='set' />

<assign property='tempORC12' value='source.{ORC:12(1)}' action='set' />
<assign property='tempOBR16' value='source.{OBR:16(1)}' action='set' />
<assign property='tempInORC12id' value='source.{ORC:12(1).1}' action='set' />
<assign property='tempInOBR16id' value='source.{OBR:16(1).1}' action='set' />

<assign property='tempDateResult' value='""' action='set' />
<assign property='tempDateCancel' value='""' action='set' />

<assign value='tempCernerOrder' property='wTableKey' action='set' />
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_RegionsLab_OrderingProvider",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<code>
<![CDATA[
    // no entry found - so send to Cerner as received
]]]]><![CDATA[></code>
</true>
<false>
<code>
<![CDATA[
    // table entry found - change ordering doc in message
]]]]><![CDATA[></code>
<assign value='$PIECE(wtableresult,"|",1)' property='temptblORC12' action='set' />
<assign value='$PIECE(temptblORC12,"^",1)' property='temptblORC12id' action='set' />
<assign value='$PIECE(wtableresult,"|",2)' property='temptblOBR16' action='set' />
<assign value='$PIECE(temptblOBR16,"^",1)' property='temptblOBR16id' action='set' />
<assign value='$PIECE(wtableresult,"|",3)' property='temptblDateAdd' action='set' />
<assign value='$PIECE(wtableresult,"|",4)' property='temptblDateResult' action='set' />
<assign value='$PIECE(wtableresult,"|",5)' property='temptblDateCancel' action='set' />

<assign property='tempDateResult' value='$ZDATE($NOW(),8)' action='set' />
<code>
<![CDATA[
    // result from Regions - update table with result date
        set wTableData=(temptblORC12_"|"_temptblOBR16_"|"_temptblDateAdd_"|"_tempDateResult_"|"_temptblDateCancel_"|") 
        set wTableName="T_RegionsLab_OrderingProvider"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,wTableKey,wTableData)	
]]]]><![CDATA[></code>

<if condition='(tempInORC12id = temptblORC12id)&amp;(tempInOBR16id = temptblOBR16id)' >
<false>
<code>
<![CDATA[
    // ordering doc on table differs from regions hl7 message
    //  update hl7 message
]]]]><![CDATA[></code>
  <assign property='target.{ORC:12(1)}' value='temptblORC12' action='set' />
  <assign property='target.{OBR:16(1)}' value='temptblOBR16' action='set' />
</false>
</if>

</false>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.RegLab2CernerORUbb">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64657,59386.803179</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<?xml version="1.0" ?>
<transform targetClass='EnsLib.HL7.Message' targetDocType='22.RegLab:ORU_R01' sourceClass='EnsLib.HL7.Message' sourceDocType='22.RegLab:ORU_R01' create='new' language='objectscript'>
<code>
<![CDATA[ 
	//  Last Updated: 01/02/2018 Al Johnson 
	//  Last Updated in Prod:  01/10/2018
	// 	Create: 08/26/2015 copy from GCH.RegLab2QcprORU changed specific to Blood Bank
	// 
	// updated results format for OBX sections
	// combine obx if the OBX_1 have the same value
	// Combine OBX_5 into one NTE if same OBX_3 code
	// added logic for Blood Bank
	//  Send performing lab information in last OBX as COMM only if sent by lab
	// remove leading zero from QCPR order number 
	// remove prefix of E if it exists in ordering doctor dont need to pad
	//
    //  Populate OBR-22 with MSH-7 datetime of message 03/23/2017
    //  Populate OBR-27.4 with MSH-7 datetime of message 03/23/2017
    //
    //  Check table T_RegionsLab_OrderingProvider for a change in ordering provider 11/22/2017
    //  Change result message to table ordering provider 11/22/2017
    //  Update table with result date 11/22/2017
    //
    //  Consolidate consecutive OBX segments for %ABR 01/02/2018
]]]]><![CDATA[>
</code>
<assign property='target.{MSH}' value='source.{MSH}' action='set'/>
<assign property='target.{MSH:ReceivingApplication}' value='"OCRR"' action='set'/>
<assign property='target.{MSH:ReceivingFacility}' value='"GCS"' action='set'/>
<assign property='target.{MSH:ProcessingID}' value='"P"' action='set'/>
<assign property='target.{MSH:Security}' value='"Reg2CernerORUbb"' action='set'/>
<assign property='target.{PID}' value='source.{PID}' action='set'/>

<code>
<![CDATA[ 
	// *****************************  ORDER LOGIC ********************************
]]]]><![CDATA[>
</code>
<assign property='target.{ORC}' value='source.{ORC}' action='set'/>
<assign property='target.{OBR}' value='source.{OBR}' action='set'/>

<assign value='source.{MSH:DateTimeofMessage.timeofanevent}' property='target.{OBR:22}' action='set' />
<assign value='source.{MSH:DateTimeofMessage.timeofanevent}' property='target.{OBR:27.4}' action='set' />

<code>
<![CDATA[ 
	// ***************************** Result Status ********************************
]]]]><![CDATA[>
</code>
<if condition='(source.{OBR:ResultStatus} = "") || (source.{OBR:ResultStatus} = "I")'>
<true>
<assign property='target.{OBR:ResultStatus}' value='"P"' action='set'/>
</true>
</if>
<code>
<![CDATA[ 
	// ***************************** priority changes ********************************
]]]]><![CDATA[>
</code>

<if condition='(source.{OBR:QuantityTiming(1).priority} = "")'>
<true>
<assign property='target.{OBR:QuantityTiming(1).priority}' value='"RO"' action='set'/>
</true>
</if>

<code>
<![CDATA[ 
	// *****************************  RESULT LOGIC ********************************
]]]]><![CDATA[>
</code>
<foreach property='source.{OBXgrp()}' key='k1'>
<assign property='target.{OBXgrp(k1).OBX}' value='source.{OBXgrp(k1).OBX}' action='set'/>
</foreach>

<code>
<![CDATA[ 
	// *****************************  Combine OBX_5 with same OBX_3 ********************************
]]]]><![CDATA[>
</code>
<assign property='Result' value='""' action='set'/>
<assign property='Cnt' value='"1"' action='set'/>
<assign property='CNT2' value='"1"' action='set'/>
<assign property='TestName' value='source.{OBXgrp(1).OBX:3.2}' action='set'/>

<assign property='HldOBXval1' value='""' action='set' />
<assign property='HldOBXval2' value='""' action='set' />

<code>
<![CDATA[ 
	// *****************************  Blood Bank Results ********************************
]]]]><![CDATA[>
</code>
<if condition='source.{OBR:24} = "BB" '>
<true>
<assign property='CntBB' value='"0"' action='set'/>
<foreach property='source.{OBXgrp()}' key='k1'>
<if condition='target.{OBXgrp(k1).OBX:3.2} = "%UN" '>
<true>
<assign property='CntBB' value='CntBB + "1"' action='set'/>
<assign property='target.{OBXgrp(k1).OBX:ObservationIdentifier.text}' value='target.{OBXgrp(k1).OBX:ObservationIdentifier.text}_CntBB' action='set'/>
</true>
</if>
<if condition='(target.{OBXgrp(k1).OBX:3.2}="%ABR") &amp; (target.{OBXgrp(k1+1).OBX:3.2}="%ABR")'>
<true>
<assign property='HldOBXval1' value='target.{OBXgrp(k1).OBX:5(1)}' action='set' />
<assign property='HldOBXval2' value='target.{OBXgrp(k1+1).OBX:5(1)}' action='set' />
<assign property='target.{OBXgrp(k1).OBX:5}' value='HldOBXval1_" "_HldOBXval2' action='set' />
<assign property='target.{OBXgrp(k1+1).OBX}' value='' action='remove' />
</true>
</if>
<if condition='..In(target.{OBXgrp(k1).OBX:3.2},"%CT,%ST,%TS,%UDIV,%XM") '>
<true>
<assign property='target.{OBXgrp(k1).OBX:ObservationIdentifier.text}' value='target.{OBXgrp(k1).OBX:ObservationIdentifier.text}_CntBB' action='set'/>
</true>
</if>
</foreach>
</true>
</if>
<code>
<![CDATA[ 
	// ******Send performing lab information in last OBX as COMM only if sent by lab ************
	]]]]><![CDATA[>
</code>
<code>
<![CDATA[
    // commented out add of performed at obx creation
    // <assign property='Obxcnt' value='"1"' action='set'/>
    // <assign property='Plab' value='"none"' action='set'/>
    // <foreach property='source.{OBXgrp()}' key='k1'>
    // <assign property='Obxcnt' value='Obxcnt +"1"' action='set'/>
    // <if condition='source.{OBXgrp(k1).OBX:15} = "" '>
    // <false>
    // <assign property='Plab' value='source.{OBXgrp(k1).OBX:15}' action='set'/>
    // </false>
    // </if>
    // </foreach>
    // <if condition='Plab = "none" '>
    // <false>
    // <assign property='target.{OBXgrp(Obxcnt).OBX:1}' value='Obxcnt' action='set'/>
    // <assign property='target.{OBXgrp(Obxcnt).OBX:2}' value='"ST"' action='set'/>
    // <assign property='target.{OBXgrp(Obxcnt).OBX:3}' value='"COMM"' action='set'/>
    // <assign property='target.{OBXgrp(Obxcnt).OBX:5}' value='Plab' action='set'/>
    // </false>
    //</if>
	]]]]><![CDATA[>
</code>


<code>
<![CDATA[
    //  Check table T_RegionsLab_OrderingProvider for a change in ordering provider 11/22/2017
    //  Change result message to table ordering provider 11/22/2017
]]]]><![CDATA[></code>
<assign property='tempCernerOrder' value='source.{OBR:2(1).1}' action='set' />

<assign property='tempORC12' value='source.{ORC:12(1)}' action='set' />
<assign property='tempOBR16' value='source.{OBR:16(1)}' action='set' />
<assign property='tempInORC12id' value='source.{ORC:12(1).1}' action='set' />
<assign property='tempInOBR16id' value='source.{OBR:16(1).1}' action='set' />

<assign property='tempDateResult' value='""' action='set' />
<assign property='tempDateCancel' value='""' action='set' />

<assign value='tempCernerOrder' property='wTableKey' action='set' />
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_RegionsLab_OrderingProvider",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<code>
<![CDATA[
    // no entry found - so send to Cerner as received
]]]]><![CDATA[></code>
</true>
<false>
<code>
<![CDATA[
    // table entry found - change ordering doc in message
]]]]><![CDATA[></code>
<assign value='$PIECE(wtableresult,"|",1)' property='temptblORC12' action='set' />
<assign value='$PIECE(temptblORC12,"^",1)' property='temptblORC12id' action='set' />
<assign value='$PIECE(wtableresult,"|",2)' property='temptblOBR16' action='set' />
<assign value='$PIECE(temptblOBR16,"^",1)' property='temptblOBR16id' action='set' />
<assign value='$PIECE(wtableresult,"|",3)' property='temptblDateAdd' action='set' />
<assign value='$PIECE(wtableresult,"|",4)' property='temptblDateResult' action='set' />
<assign value='$PIECE(wtableresult,"|",5)' property='temptblDateCancel' action='set' />

<assign property='tempDateResult' value='$ZDATE($NOW(),8)' action='set' />
<code>
<![CDATA[
    // result from Regions - update table with result date
        set wTableData=(temptblORC12_"|"_temptblOBR16_"|"_temptblDateAdd_"|"_tempDateResult_"|"_temptblDateCancel_"|") 
        set wTableName="T_RegionsLab_OrderingProvider"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,wTableKey,wTableData)	
]]]]><![CDATA[></code>

<if condition='(tempInORC12id = temptblORC12id)&amp;(tempInOBR16id = temptblOBR16id)' >
<false>
<code>
<![CDATA[
    // ordering doc on table differs from regions hl7 message
    //  update hl7 message
]]]]><![CDATA[></code>
  <assign property='target.{ORC:12(1)}' value='temptblORC12' action='set' />
  <assign property='target.{OBR:16(1)}' value='temptblOBR16' action='set' />
</false>
</if>

</false>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.RegLab2CernerORUmb">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64657,59296.978697</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<?xml version="1.0" ?>
<transform targetClass='EnsLib.HL7.Message' targetDocType='22.RegLab:ORU_R01' sourceClass='EnsLib.HL7.Message' sourceDocType='22.RegLab:ORU_R01' create='copy' language='objectscript'>
<code>
<![CDATA[ 
	//  Last Updated: 01/02/2018 Al Johnson
	//  Last Moved to Prod:  01/10/2018
    //  Created 10/06/2016 Al Johnson
    //   started with copy of GCH.RegLab2QcprORUmb from old interfaces
    //   copy Regions Message to Cerner output
    //   remove OBXgrp
    //   string together OBX result messages for Cerner
    //   write one OBX with new data
    //  12/12/2016  send TX in OBX-2, not ST. String has a limit of 255 characters so PowerChart display is bad.
    //  01/29/2107 check for OBX-5 This is considered a significant result. Clinical correlation is indicated. and set ABN abnormal result
    //
    //  03/23/2017 Populate OBR-22 with MSH-7 datetime of message
    //  03/23/2017 Populate OBR-27.4 with MSH-7 datetime of message
    //
    //  Check table T_RegionsLab_OrderingProvider for a change in ordering provider 11/22/2017
    //  Change result message to table ordering provider 11/22/2017
    //  Update table with result date 11/22/2017
    //
    //  01/02/2018 change ABN to 'A' for abnormal result
]]]]><![CDATA[>
</code>

<assign value='source.{MSH:DateTimeofMessage.timeofanevent}' property='target.{OBR:22}' action='set' />
<assign value='source.{MSH:DateTimeofMessage.timeofanevent}' property='target.{OBR:27.4}' action='set' />

<if condition='(source.{OBR:ResultStatus} = "") || (source.{OBR:ResultStatus} = "I")'>
<true>
<assign property='target.{OBR:ResultStatus}' value='"P"' action='set'/>
</true>
</if>

<code>
<![CDATA[
    //  Remove OBX segments copied from source
]]]]><![CDATA[>
</code>

<foreach property='target.{OBXgrp()}' key='k1'>
<assign value='' property='target.{OBXgrp(k1)}' action='remove' />
</foreach>

<code>
<![CDATA[
    //  String descriptions together, remove ~ from col 1 add performed at line
]]]]><![CDATA[>
</code>

<assign property='tempabnormal' value='""' action='set' />

<assign property='holdOBXdesc' value='""' action='set' />
<assign property='holdOBXdesc1' value='""' action='set' />
<foreach property='source.{OBXgrp()}' key='k1'>
<assign property='holdOBXdesc1' value='$TR(source.{OBXgrp(k1).OBX:5},"^"," ")' action='set'/>
<assign property='holdOBXdesc' value='(holdOBXdesc_"~"_holdOBXdesc1)' action='set' />
<if condition='source.{OBXgrp(k1).OBX:5}="This is considered a significant result. Clinical correlation is indicated."' >
<true>
<assign property='tempabnormal' value='"A"' action='set' />
</true>
</if>
</foreach>

<code>
<![CDATA[
   set holdOBXdesc=$REPLACE(holdOBXdesc,"~","",1,1)
]]]]><![CDATA[>
</code>

<assign property='PERFlab' value='source.{OBXgrp(1).OBX:15}' action='set'/>
<assign property='holdOBXdesc' value='(holdOBXdesc_"~"_PERFlab)' action='set' />

<assign property='target.{OBR:4}' value='""' action='set' />
<assign property='target.{OBR:4.1}' value='source.{OBR:4.2}' action='set' />
<assign property='target.{OBR:4.2}' value='source.{OBR:4.2}' action='set' />
<assign property='target.{OBR:24}' value='"MB"' action='set' />
<assign property='target.{OBXgrp(1).OBX:SetIDOBX}' value='"1"' action='set'/>
<assign property='target.{OBXgrp(1).OBX:ValueType}' value='"TX"' action='set'/>
<assign property='target.{OBXgrp(1).OBX:ObservationIdentifier.identifier}' value='source.{OBR:4.2}' action='set' />
<assign property='target.{OBXgrp(1).OBX:ObservationIdentifier.text}' value='source.{OBR:4.2}' action='set' />
<assign property='target.{OBXgrp(1).OBX:5}' value='holdOBXdesc' action='set' />
<assign property='target.{OBXgrp(1).OBX:8}' value='tempabnormal' action='set' />
<assign property='target.{OBXgrp(1).OBX:ObservResultStatus}' value='target.{OBR:ResultStatus}' action='set' />
<assign property='target.{OBXgrp(1).OBX:15}' value='source.{OBXgrp(1).OBX:15}' action='set'/>

<code>
<![CDATA[
    //  Check table T_RegionsLab_OrderingProvider for a change in ordering provider 11/22/2017
    //  Change result message to table ordering provider 11/22/2017
]]]]><![CDATA[></code>
<assign property='tempCernerOrder' value='source.{OBR:2(1).1}' action='set' />

<assign property='tempORC12' value='source.{ORC:12(1)}' action='set' />
<assign property='tempOBR16' value='source.{OBR:16(1)}' action='set' />
<assign property='tempInORC12id' value='source.{ORC:12(1).1}' action='set' />
<assign property='tempInOBR16id' value='source.{OBR:16(1).1}' action='set' />

<assign property='tempDateResult' value='""' action='set' />
<assign property='tempDateCancel' value='""' action='set' />

<assign value='tempCernerOrder' property='wTableKey' action='set' />
<assign value='""' property='wTableData' action='set' />
<assign value='""' property='wtableresult' action='set' />
<assign value='..Lookup("T_RegionsLab_OrderingProvider",wTableKey)' property='wtableresult' action='set' />
<if condition='wtableresult=""' >
<true>
<code>
<![CDATA[
    // no entry found - so send to Cerner as received
]]]]><![CDATA[></code>
</true>
<false>
<code>
<![CDATA[
    // table entry found - change ordering doc in message
]]]]><![CDATA[></code>
<assign value='$PIECE(wtableresult,"|",1)' property='temptblORC12' action='set' />
<assign value='$PIECE(temptblORC12,"^",1)' property='temptblORC12id' action='set' />
<assign value='$PIECE(wtableresult,"|",2)' property='temptblOBR16' action='set' />
<assign value='$PIECE(temptblOBR16,"^",1)' property='temptblOBR16id' action='set' />
<assign value='$PIECE(wtableresult,"|",3)' property='temptblDateAdd' action='set' />
<assign value='$PIECE(wtableresult,"|",4)' property='temptblDateResult' action='set' />
<assign value='$PIECE(wtableresult,"|",5)' property='temptblDateCancel' action='set' />

<assign property='tempDateResult' value='$ZDATE($NOW(),8)' action='set' />
<code>
<![CDATA[
    // result from Regions - update table with result date
        set wTableData=(temptblORC12_"|"_temptblOBR16_"|"_temptblDateAdd_"|"_tempDateResult_"|"_temptblDateCancel_"|") 
        set wTableName="T_RegionsLab_OrderingProvider"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,wTableKey,wTableData)	
]]]]><![CDATA[></code>

<if condition='(tempInORC12id = temptblORC12id)&amp;(tempInOBR16id = temptblOBR16id)' >
<false>
<code>
<![CDATA[
    // ordering doc on table differs from regions hl7 message
    //  update hl7 message
]]]]><![CDATA[></code>
  <assign property='target.{ORC:12(1)}' value='temptblORC12' action='set' />
  <assign property='target.{OBR:16(1)}' value='temptblOBR16' action='set' />
</false>
</if>

</false>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.RegLab2CernerORUpath">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64264,58731.852143</TimeChanged>
<TimeCreated>61585,46790.770016</TimeCreated>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<?xml version="1.0" ?>
<transform targetClass='EnsLib.HL7.Message' targetDocType='22.RegLab:ORU_R01' sourceClass='EnsLib.HL7.Message' sourceDocType='22.RegLab:ORU_R01' create='copy' language='objectscript'>
<code>
<![CDATA[ 
	//  Created 10/06/2016 Al Johnson
	//  Last Moved to Prod:  07/22/15
    //  Created 10/06/2016 Al Johnson
    //   started with copy of GCH.RegLab2QcprORUmb from old interfaces
    //   copy Regions Message to Cerner output
    //   remove OBXgrp
    //   string together OBX result messages for Cerner
    //   write one OBX with new data
    //  12/12/2016  send TX in OBX-2, not ST. String has a limit of 255 characters so PowerChart display is bad.
]]]]><![CDATA[>
</code>

<if condition='(source.{OBR:ResultStatus} = "") || (source.{OBR:ResultStatus} = "I")'>
<true>
<assign property='target.{OBR:ResultStatus}' value='"P"' action='set'/>
</true>
</if>

<code>
<![CDATA[
    //  Remove OBX segments copied from source
]]]]><![CDATA[>
</code>

<foreach property='target.{OBXgrp()}' key='k1'>
<assign value='' property='target.{OBXgrp(k1)}' action='remove' />
</foreach>

<code>
<![CDATA[
    //  String descriptions together, remove ~ from col 1 add performed at line
]]]]><![CDATA[>
</code>

<assign property='holdOBXdesc' value='""' action='set' />
<assign property='holdOBXdesc1' value='""' action='set' />
<foreach property='source.{OBXgrp()}' key='k1'>
<assign property='holdOBXdesc1' value='$TR(source.{OBXgrp(k1).OBX:5},"^"," ")' action='set'/>
<assign property='holdOBXdesc' value='(holdOBXdesc_"~"_holdOBXdesc1)' action='set' />
</foreach>

<code>
<![CDATA[
   set holdOBXdesc=$REPLACE(holdOBXdesc,"~","",1,1)
]]]]><![CDATA[>
</code>

<assign property='PERFlab' value='source.{OBXgrp(1).OBX:15}' action='set'/>
<assign property='holdOBXdesc' value='(holdOBXdesc_"~"_PERFlab)' action='set' />

<assign property='target.{OBR:4}' value='""' action='set' />
<assign property='target.{OBR:4.1}' value='source.{OBR:4.2}' action='set' />
<assign property='target.{OBR:4.2}' value='source.{OBR:4.2}' action='set' />
<assign property='target.{OBR:24}' value='"CoPath"' action='set' />
<assign property='target.{OBXgrp(1).OBX:SetIDOBX}' value='"1"' action='set'/>
<assign property='target.{OBXgrp(1).OBX:ValueType}' value='"TX"' action='set'/>
<assign property='target.{OBXgrp(1).OBX:ObservationIdentifier.identifier}' value='source.{OBR:4.2}' action='set' />
<assign property='target.{OBXgrp(1).OBX:ObservationIdentifier.text}' value='source.{OBR:4.2}' action='set' />
<assign property='target.{OBXgrp(1).OBX:5}' value='holdOBXdesc' action='set' />
<assign property='target.{OBXgrp(1).OBX:ObservResultStatus}' value='target.{OBR:ResultStatus}' action='set' />
<assign property='target.{OBXgrp(1).OBX:15}' value='source.{OBXgrp(1).OBX:15}' action='set'/>


</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Regions.DFT.ChargeDFT">
<Description><![CDATA[
Sample class that gets used to build a request message from a line of delimited values 
in a text file<br><br>

v1.0 apc 08/2009 Birth of class, based on code from DRL<br><br>

Note the inherited Delimiter parameter, defaults to "|". Override here to change this<br>
Define the names of the pieces in each record, specifying the 
piece using the COLNUM dataype parameter. Make sure they are unique and > 0.<br><br>
TODO:<br>
- Consider making the delimiter a config parameter<br>
- Create more datatypes? I.e. date, integer, timestamp etc. <br>]]></Description>
<Super>GC.Shared.Delimited</Super>
<TimeChanged>64378,34523.870075</TimeChanged>
<TimeCreated>63468,52303.685337</TimeCreated>

<Property name="MRN">
<Type>%String</Type>
</Property>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="Fin">
<Type>%String</Type>
</Property>

<Property name="MSHMRNFind">
<Type>%String</Type>
</Property>

<Property name="TransactionID">
<Type>%String</Type>
</Property>

<Property name="TransactionDate">
<Type>%String</Type>
</Property>

<Property name="PostingDate">
<Type>%String</Type>
</Property>

<Property name="TransactionType">
<Type>%String</Type>
</Property>

<Property name="CDM">
<Type>%String</Type>
</Property>

<Property name="Quantity">
<Type>%String</Type>
</Property>

<Property name="AmountExtended">
<Type>%String</Type>
</Property>

<Property name="AmountUnit">
<Type>%String</Type>
</Property>

<Property name="DeptCode">
<Type>%String</Type>
</Property>

<Property name="PerformingDoc">
<Type>%String</Type>
</Property>

<Property name="OrderedByDoc">
<Type>%String</Type>
</Property>

<Property name="CPT">
<Type>%String</Type>
</Property>

<Property name="CPTModifiers">
<Type>%String</Type>
</Property>

<Property name="HL7MessageDate">
<Type>%String</Type>
</Property>

<Property name="RegionsCDMDesc">
<Type>%String</Type>
</Property>

<Property name="RegionsCDMDept">
<Type>%String</Type>
</Property>

<Property name="RegionsCDMRevCode">
<Type>%String</Type>
</Property>

<Property name="RegionsCDMStatus">
<Type>%String</Type>
</Property>

<Property name="RegionsSentCPT">
<Type>%String</Type>
</Property>

<Property name="RegionsSentCPTMod">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ChargeDFTDefaultData</DefaultData>
<Data name="ChargeDFTDefaultData">
<Structure>listnode</Structure>
<Subscript>"ChargeDFT"</Subscript>
<Value name="1">
<Value>MRN</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Fin</Value>
</Value>
<Value name="4">
<Value>MSHMRNFind</Value>
</Value>
<Value name="5">
<Value>TransactionID</Value>
</Value>
<Value name="6">
<Value>TransactionDate</Value>
</Value>
<Value name="7">
<Value>PostingDate</Value>
</Value>
<Value name="8">
<Value>TransactionType</Value>
</Value>
<Value name="9">
<Value>CDM</Value>
</Value>
<Value name="10">
<Value>Quantity</Value>
</Value>
<Value name="11">
<Value>AmountExtended</Value>
</Value>
<Value name="12">
<Value>AmountUnit</Value>
</Value>
<Value name="13">
<Value>DeptCode</Value>
</Value>
<Value name="14">
<Value>PerformingDoc</Value>
</Value>
<Value name="15">
<Value>OrderedByDoc</Value>
</Value>
<Value name="16">
<Value>CPT</Value>
</Value>
<Value name="17">
<Value>CPTModifiers</Value>
</Value>
<Value name="18">
<Value>HL7MessageDate</Value>
</Value>
<Value name="19">
<Value>RegionsCDMDesc</Value>
</Value>
<Value name="20">
<Value>RegionsCDMDept</Value>
</Value>
<Value name="21">
<Value>RegionsCDMRevCode</Value>
</Value>
<Value name="22">
<Value>RegionsCDMStatus</Value>
</Value>
<Value name="23">
<Value>RegionsSentCPT</Value>
</Value>
<Value name="24">
<Value>RegionsSentCPTMod</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="GC.Regions.DFT.ChargeDFTv3">
<Description><![CDATA[
Sample class that gets used to build a request message from a line of delimited values 
in a text file<br><br>

v1.0 apc 08/2009 Birth of class, based on code from DRL<br><br>

Note the inherited Delimiter parameter, defaults to "|". Override here to change this<br>
Define the names of the pieces in each record, specifying the 
piece using the COLNUM dataype parameter. Make sure they are unique and > 0.<br><br>
TODO:<br>
- Consider making the delimiter a config parameter<br>
- Create more datatypes? I.e. date, integer, timestamp etc. <br>]]></Description>
<Super>GC.Shared.Delimited</Super>
<TimeChanged>65190,50293.528331</TimeChanged>
<TimeCreated>63468,52303.685337</TimeCreated>

<Property name="MRN">
<Type>%String</Type>
</Property>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="Fin">
<Type>%String</Type>
</Property>

<Property name="MSHMRNFind">
<Type>%String</Type>
</Property>

<Property name="TransactionID">
<Type>%String</Type>
</Property>

<Property name="TransactionDate">
<Type>%String</Type>
</Property>

<Property name="PostingDate">
<Type>%String</Type>
</Property>

<Property name="TransactionType">
<Type>%String</Type>
</Property>

<Property name="CDM">
<Type>%String</Type>
</Property>

<Property name="Quantity">
<Type>%String</Type>
</Property>

<Property name="AmountExtended">
<Type>%String</Type>
</Property>

<Property name="AmountUnit">
<Type>%String</Type>
</Property>

<Property name="DeptCode">
<Type>%String</Type>
</Property>

<Property name="PerformingDoc">
<Type>%String</Type>
</Property>

<Property name="OrderedByDoc">
<Type>%String</Type>
</Property>

<Property name="CPT">
<Type>%String</Type>
</Property>

<Property name="CPTModifiers">
<Type>%String</Type>
</Property>

<Property name="HL7MessageDate">
<Type>%String</Type>
</Property>

<Property name="RegionsCDMDesc">
<Type>%String</Type>
</Property>

<Property name="RegionsCDMDept">
<Type>%String</Type>
</Property>

<Property name="RegionsCDMRevCode">
<Type>%String</Type>
</Property>

<Property name="RegionsCDMStatus">
<Type>%String</Type>
</Property>

<Property name="RegionsSentCPT">
<Type>%String</Type>
</Property>

<Property name="RegionsSentCPTMod">
<Type>%String</Type>
</Property>

<Property name="MSHFINFind">
<Type>%String</Type>
</Property>

<Property name="FINFindCount">
<Type>%String</Type>
</Property>

<Property name="PrimInsName">
<Type>%String</Type>
</Property>

<Property name="PrimInsType">
<Type>%String</Type>
</Property>

<Property name="FinDifference">
<Type>%String</Type>
</Property>

<Property name="OriginalFinSent">
<Type>%String</Type>
</Property>

<Property name="FinDiffLookup">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ChargeDFTv3DefaultData</DefaultData>
<Data name="ChargeDFTv3DefaultData">
<Subscript>"ChargeDFTv3"</Subscript>
<Value name="1">
<Value>MRN</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Fin</Value>
</Value>
<Value name="4">
<Value>MSHMRNFind</Value>
</Value>
<Value name="5">
<Value>TransactionID</Value>
</Value>
<Value name="6">
<Value>TransactionDate</Value>
</Value>
<Value name="7">
<Value>PostingDate</Value>
</Value>
<Value name="8">
<Value>TransactionType</Value>
</Value>
<Value name="9">
<Value>CDM</Value>
</Value>
<Value name="10">
<Value>Quantity</Value>
</Value>
<Value name="11">
<Value>AmountExtended</Value>
</Value>
<Value name="12">
<Value>AmountUnit</Value>
</Value>
<Value name="13">
<Value>DeptCode</Value>
</Value>
<Value name="14">
<Value>PerformingDoc</Value>
</Value>
<Value name="15">
<Value>OrderedByDoc</Value>
</Value>
<Value name="16">
<Value>CPT</Value>
</Value>
<Value name="17">
<Value>CPTModifiers</Value>
</Value>
<Value name="18">
<Value>HL7MessageDate</Value>
</Value>
<Value name="19">
<Value>RegionsCDMDesc</Value>
</Value>
<Value name="20">
<Value>RegionsCDMDept</Value>
</Value>
<Value name="21">
<Value>RegionsCDMRevCode</Value>
</Value>
<Value name="22">
<Value>RegionsCDMStatus</Value>
</Value>
<Value name="23">
<Value>RegionsSentCPT</Value>
</Value>
<Value name="24">
<Value>RegionsSentCPTMod</Value>
</Value>
<Value name="25">
<Value>MSHFINFind</Value>
</Value>
<Value name="26">
<Value>FINFindCount</Value>
</Value>
<Value name="27">
<Value>PrimInsName</Value>
</Value>
<Value name="28">
<Value>PrimInsType</Value>
</Value>
<Value name="29">
<Value>FinDifference</Value>
</Value>
<Value name="30">
<Value>OriginalFinSent</Value>
</Value>
<Value name="31">
<Value>FinDiffLookup</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="GC.Regions.DFT.CreditDFT">
<ClassType>persistent</ClassType>
<Super>%Persistent,%Populate,%XML.Adaptor,Ens.Response</Super>
<TimeChanged>64324,63901.322319</TimeChanged>
<TimeCreated>63468,52303.685337</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="HL7MessageDate">
<Type>%String</Type>
</Property>

<Property name="MRN">
<Type>%String</Type>
</Property>

<Property name="Account">
<Type>%String</Type>
</Property>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="CDM">
<Type>%String</Type>
</Property>

<Property name="Quantity">
<Type>%String</Type>
</Property>

<Property name="Amount">
<Type>%String</Type>
</Property>

<Property name="DateOfService">
<Type>%String</Type>
</Property>

<Property name="CPT">
<Type>%String</Type>
</Property>

<Property name="CPTModifiers">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^GC.Regions.DFT.CreditDFTD</DataLocation>
<DefaultData>CreditDFTDefaultData</DefaultData>
<IdLocation>^GC.Regions.DFT.CreditDFTD</IdLocation>
<IndexLocation>^GC.Regions.DFT.CreditDFTI</IndexLocation>
<StreamLocation>^GC.Regions.DFT.CreditDFTS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="CreditDFTDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>HL7MessageDate</Value>
</Value>
<Value name="3">
<Value>MRN</Value>
</Value>
<Value name="4">
<Value>Account</Value>
</Value>
<Value name="5">
<Value>Name</Value>
</Value>
<Value name="6">
<Value>CDM</Value>
</Value>
<Value name="7">
<Value>Quantity</Value>
</Value>
<Value name="8">
<Value>Amount</Value>
</Value>
<Value name="9">
<Value>DateOfService</Value>
</Value>
<Value name="10">
<Value>CPT</Value>
</Value>
<Value name="11">
<Value>CPTModifiers</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="GC.Regions.DFT.PassthroughOperation">
<Description>
Accepts objects of type Ens.StreamContainer and saves the encapsulated stream data to a file using the File OutboundAdapter.</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessOperation</Super>
<System>4</System>
<TimeChanged>64378,57697.906055</TimeChanged>
<TimeCreated>60793,79113.749353</TimeCreated>

<Parameter name="ADAPTER">
<Default>GC.Shared.FileOutboundAdapter</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// "EnsLib.OutboundFileAdapter";

]]></Content>
</UDLText>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// Configurable properties

]]></Content>
</UDLText>

<Property name="TargetFilePath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Property name="TargetFileName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Parameter name="SETTINGS">
<Default>TargetFilePath,TargetFileName</Default>
</Parameter>

<Method name="OnMessage">
<FormalSpec>pRequest:GC.Regions.DFT.ChargeDFT,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//Quit:'$IsObject(pRequest.Stream) $$$ERROR($$$EnsErrGeneral,"No Stream contained in StreamContainer Request")
	//Set tFilename=..Adapter.CreateTimestamp(##class(%File).GetFilename(pRequest.OriginalFilename),..Filename)
	//Set tSC=..Adapter.PutStream(tFilename, pRequest.Stream)
	//Do pRequest.%Save() ; re-save in case PutStream() optimization changed the Stream filename
	//Quit tSC
   set tSC = $$$OK
                                                                                                                                                                                    set writer=##class(%XML.Writer).%New()
   set writer.Indent=0 // for flattened file
   set writer.ReferencesInline = 1
   
   //if $$$ISERR(status) do $System.Status.DisplayError(status) quit $$$ERROR() 
   //Do writer.OutputToString()
   //Do writer.RootObject(pRequest)
   
   //set xmlmsgOrig = writer.GetXMLString()
    
   Do writer.OutputToString()
   Do writer.RootObject(pRequest)
   
   set xmlmsgOrig = writer.GetXMLString()
   // added to flatten out file remove if you want it the other way.
   //set xmlmsg = $Translate(xmlmsgOrig,$char(13,10),"") // take out nl
   //set xmlmsg = xmlmsg_$char(10) // add back in the last nl
   // set tabchar
   set ztabchar=$char(09)
   
   set xmlmsg = $Translate(xmlmsgOrig,$char(13),"") // take out nl
   set xmlmsg = $Translate(xmlmsgOrig,$char(10),"") // take out nl
   set xmlmsg = xmlmsg_$char(13) // add back in the last nl   
   
   set tmpqte=$char(34)
   set tmpqtecomma=$char(34)_$char(44)
   //remove xml header and trailer - output is appended
   set xmlmsga=$REPLACE(xmlmsg,"</ChargeDFT>","")
   set xmlmsgb=$REPLACE(xmlmsga,"<ChargeDFT>","")
   set xmlmsga=$REPLACE(xmlmsgb,"<MRN>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</MRN>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<Name>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</Name>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<Fin>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</Fin>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<MSHMRNFind>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</MSHMRNFind>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<TransactionID>",tmpqte_ztabchar)
   set xmlmsgb=$REPLACE(xmlmsga,"</TransactionID>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<TransactionDate>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</TransactionDate>",tmpqtecomma)   
   set xmlmsga=$REPLACE(xmlmsgb,"<PostingDate>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</PostingDate>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<TransactionType>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</TransactionType>",tmpqtecomma) 
   set xmlmsga=$REPLACE(xmlmsgb,"<CDM>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</CDM>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<Quantity>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</Quantity>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<AmountExtended>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</AmountExtended>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<AmountUnit>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</AmountUnit>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<DeptCode>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</DeptCode>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<PerformingDoc>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</PerformingDoc>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<OrderedByDoc>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</OrderedByDoc>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<CPT>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</CPT>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<CPTModifiers>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</CPTModifiers>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<HL7MessageDate>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</HL7MessageDate>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<RegionsCDMDesc>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</RegionsCDMDesc>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<RegionsCDMDept>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</RegionsCDMDept>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<RegionsCDMRevCode>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</RegionsCDMRevCode>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<RegionsCDMStatus>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</RegionsCDMStatus>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<RegionsSentCPT>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</RegionsSentCPT>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<RegionsSentCPTMod>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</RegionsSentCPTMod>",tmpqte)
   
   set hdg1=("MRN,Name,Fin,EnsembleSearch,Transaction ID,Tran Date,Posting Date,Type,CDM,Qty,Extended Amount,Unit Price,Dept,")
   set hdg2=("Performed By,Ordered By,CPT,Modifier,HL7 Date,Regions Desc,Regions Dept,Regions Rev Code,CDM Status,Sent CPT,Sent Modifier")
   set hdg3=(hdg1_hdg2)

   // write header if file does not exist
   set tSCx=..Adapter.ExistsCustom(..TargetFilePath_..TargetFileName)
   // if file does not exist - returns 0, if exists returns 1
   if tSCx=0 {
       set tSC=..Adapter.PutLineCustom(..TargetFilePath_..TargetFileName,hdg3)
   }

   //append file
   set tSC=..Adapter.PutLineCustom(..TargetFilePath_..TargetFileName,xmlmsgb)

   Quit tSC
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
  <MapItem MessageType="GC.Regions.DFT.ChargeDFT">
    <Method>OnMessage</Method>
  </MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="GC.Regions.DFT.PassthroughOperationv3">
<Description>
Accepts objects of type Ens.StreamContainer and saves the encapsulated stream data to a file using the File OutboundAdapter.</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessOperation</Super>
<System>4</System>
<TimeChanged>65190,50222.146119</TimeChanged>
<TimeCreated>60793,79113.749353</TimeCreated>

<Parameter name="ADAPTER">
<Default>GC.Shared.FileOutboundAdapter</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// "EnsLib.OutboundFileAdapter";

]]></Content>
</UDLText>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// Configurable properties

]]></Content>
</UDLText>

<Property name="TargetFilePath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Property name="TargetFileName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Parameter name="SETTINGS">
<Default>TargetFilePath,TargetFileName</Default>
</Parameter>

<Method name="OnMessage">
<FormalSpec>pRequest:GC.Regions.DFT.ChargeDFTv3,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//Quit:'$IsObject(pRequest.Stream) $$$ERROR($$$EnsErrGeneral,"No Stream contained in StreamContainer Request")
	//Set tFilename=..Adapter.CreateTimestamp(##class(%File).GetFilename(pRequest.OriginalFilename),..Filename)
	//Set tSC=..Adapter.PutStream(tFilename, pRequest.Stream)
	//Do pRequest.%Save() ; re-save in case PutStream() optimization changed the Stream filename
	//Quit tSC
   set tSC = $$$OK
                                                                                                                                                                                    set writer=##class(%XML.Writer).%New()
   set writer.Indent=0 // for flattened file
   set writer.ReferencesInline = 1
   
   //if $$$ISERR(status) do $System.Status.DisplayError(status) quit $$$ERROR() 
   //Do writer.OutputToString()
   //Do writer.RootObject(pRequest)
   
   //set xmlmsgOrig = writer.GetXMLString()
    
   Do writer.OutputToString()
   Do writer.RootObject(pRequest)
   
   set xmlmsgOrig = writer.GetXMLString()
   // added to flatten out file remove if you want it the other way.
   //set xmlmsg = $Translate(xmlmsgOrig,$char(13,10),"") // take out nl
   //set xmlmsg = xmlmsg_$char(10) // add back in the last nl
   // set tabchar
   set ztabchar=$char(09)
   
   set xmlmsg = $Translate(xmlmsgOrig,$char(13),"") // take out nl
   set xmlmsg = $Translate(xmlmsgOrig,$char(10),"") // take out nl
   set xmlmsg = xmlmsg_$char(13) // add back in the last nl   
   
   set tmpqte=$char(34)
   set tmpqtecomma=$char(34)_$char(44)
   //remove xml header and trailer - output is appended
   set xmlmsga=$REPLACE(xmlmsg,"</ChargeDFTv3>","")
   set xmlmsgb=$REPLACE(xmlmsga,"<ChargeDFTv3>","")
   set xmlmsga=$REPLACE(xmlmsgb,"<MRN>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</MRN>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<Name>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</Name>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<Fin>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</Fin>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<MSHMRNFind>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</MSHMRNFind>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<TransactionID>",tmpqte_ztabchar)
   set xmlmsgb=$REPLACE(xmlmsga,"</TransactionID>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<TransactionDate>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</TransactionDate>",tmpqtecomma)   
   set xmlmsga=$REPLACE(xmlmsgb,"<PostingDate>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</PostingDate>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<TransactionType>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</TransactionType>",tmpqtecomma) 
   set xmlmsga=$REPLACE(xmlmsgb,"<CDM>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</CDM>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<Quantity>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</Quantity>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<AmountExtended>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</AmountExtended>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<AmountUnit>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</AmountUnit>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<DeptCode>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</DeptCode>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<PerformingDoc>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</PerformingDoc>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<OrderedByDoc>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</OrderedByDoc>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<CPT>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</CPT>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<CPTModifiers>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</CPTModifiers>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<HL7MessageDate>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</HL7MessageDate>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<RegionsCDMDesc>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</RegionsCDMDesc>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<RegionsCDMDept>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</RegionsCDMDept>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<RegionsCDMRevCode>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</RegionsCDMRevCode>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<RegionsCDMStatus>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</RegionsCDMStatus>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<RegionsSentCPT>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</RegionsSentCPT>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<RegionsSentCPTMod>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</RegionsSentCPTMod>",tmpqtecomma)
   
   set xmlmsga=$REPLACE(xmlmsgb,"<MSHFINFind>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</MSHFINFind>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<FINFindCount>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</FINFindCount>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<PrimInsName>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</PrimInsName>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<PrimInsType>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</PrimInsType>",tmpqtecomma)
   
   set xmlmsga=$REPLACE(xmlmsgb,"<FinDifference>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</FinDifference>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<OriginalFinSent>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</OriginalFinSent>",tmpqtecomma)
   set xmlmsga=$REPLACE(xmlmsgb,"<FinDiffLookup>",tmpqte)
   set xmlmsgb=$REPLACE(xmlmsga,"</FinDiffLookup>",tmpqte)
   
   set hdg1=("MRN,Name,Fin,EnsembleMRNSearch,Transaction ID,Tran Date,Posting Date,Type,CDM,Qty,Extended Amount,Unit Price,Dept,")
   set hdg2=("Performed By,Ordered By,CPT,Modifier,HL7 Date,Regions Desc,Regions Dept,Regions Rev Code,CDM Status,Sent CPT,Sent Modifier,")
   set hdg3=("EnsembleFINSearch,FIN Count,Primary Insurance,Insurance Type,Fin Difference,Original Fin SentFin Diff Lookup")
   set hdg4=(hdg1_hdg2_hdg3)

   // write header if file does not exist
   set tSCx=..Adapter.ExistsCustom(..TargetFilePath_..TargetFileName)
   // if file does not exist - returns 0, if exists returns 1
   if tSCx=0 {
       set tSC=..Adapter.PutLineCustom(..TargetFilePath_..TargetFileName,hdg4)
   }

   //append file
   set tSC=..Adapter.PutLineCustom(..TargetFilePath_..TargetFileName,xmlmsgb)

   Quit tSC
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
  <MapItem MessageType="GC.Regions.DFT.ChargeDFTv3">
    <Method>OnMessage</Method>
  </MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="GC.Regions.RegionsCDMDeptLoadTBL">
<ClassType/>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64378,50700.228813</TimeChanged>
<TimeCreated>61636,36544.001137</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='22.RegLab:GLT_CDM' targetDocType='22.RegLab:GLT_CDM' create='copy' language='objectscript' >
<code>
<![CDATA[ 	

	//  Last Updated 03/20/2017 by Al Johnson
	//  Last Updated in PROD  - 04/05/2017
	//  Create By: Al Johnson 03/20/2017
	//  Cerner does not accept Regions CDM records
	//   Table the CDM department fields to add to charge report for Charge Services
	//   Key is CDM code, string data seperated by hyphens
	//   Add if new else update format of data field is ZCD-7 dept (-) zcd-9 ub82code (-) zcd-10 status
	]]]]><![CDATA[></code>
<assign value='source.{ZCD:2}' property='wTableKey' action='set' />
<assign value='source.{ZCD:7}' property='wTableValue1' action='set' />
<assign value='source.{ZCD:9}' property='wTableValue2' action='set' />
<assign value='source.{ZCD:10}' property='wTableValue3' action='set' />
<assign value='wTableValue1_"-"_wTableValue2_"-"_wTableValue3' property='wTableData' action='set' />
<code>
<![CDATA[ 
        set wTableName="T_RegionsCDMDept"
        do ##class(Ens.Util.LookupTable).%UpdateValue(wTableName,wTableKey,wTableData)
			
	]]]]><![CDATA[></code>
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Regions2CernerChargeList">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64379,38507.91312</TimeChanged>
<TimeCreated>61636,36544.001137</TimeCreated>
<DependsOn>EnsLib.HL7.Message,GC.Regions.DFT.ChargeDFT</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='GC.Regions.DFT.ChargeDFT' sourceDocType='22.RegLab:GLT_DFT' create='new' language='objectscript' >
<code>
<![CDATA[ 
	// Last Moved to Prod - 04/05/2017 
	// Last Updated 04/04/2017
	// Created: 04/04/2017  Al Johnson  
	// Desc: Report Daily Regions Charges To Cerner
	]]]]><![CDATA[></code>

<assign value='source.{MSH:DateTimeofMessage}' property='target.HL7MessageDate' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='target.TransactionDate' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='target.PostingDate' action='set' />
<assign value='"RGCHG"' property='target.DeptCode' action='set' />
<code>
<![CDATA[ 
    // set FT1-1 setid
    // set FT1-2 transaction id must be unique - take 1st 8 and last 4 from msh message control id
	// set FT1-5 transaction posting date for Cerner
]]]]><![CDATA[></code>
<assign value='source.{MSH:MessageControlID}' property='tempid1' action='set' />
<assign value='$EXTRACT(tempid1,1,8)' property='tempid1a' action='set' />
<assign value='$EXTRACT(tempid1,*-3,*)' property='tempid1b' action='set' />
<assign value='tempid1a_tempid1b' property='target.TransactionID' action='set' />

<assign value='source.{ZDF:ZDF7ChargeCreditCode}' property='target.TransactionType' action='set' />
<assign value='""' property='tempCDMtable' action='set' />
<assign value='""' property='tempCDMtableDept' action='set' />
<assign value='""' property='tempCDMtableRevCode' action='set' />
<assign value='""' property='tempCDMtableStatus' action='set' />
<assign value='..Lookup("T_RegionsCDMDept",source.{ZDF:ZDF8ChargeCode})' property='tempCDMtable' action='set' />

<assign value='$PIECE(tempCDMtable,"-",1)' property='tempCDMtableDept' action='set' />
<assign value='$PIECE(tempCDMtable,"-",2)' property='tempCDMtableRevCode' action='set' />
<assign value='$PIECE(tempCDMtable,"-",3)' property='tempCDMtableStatus' action='set' />

<assign value='tempCDMtableDept' property='target.RegionsCDMDept' action='set' />
<assign value='tempCDMtableRevCode' property='target.RegionsCDMRevCode' action='set' />
<assign value='tempCDMtableStatus' property='target.RegionsCDMStatus' action='set' />

<assign value='source.{ZDF:ZDF9ChargeDesc}' property='target.RegionsCDMDesc' action='set' />
<assign value='source.{ZDF:ZDF14CPTCode}' property='target.RegionsSentCPT' action='set' />
<assign value='source.{ZDF:ZDF15Modifier}' property='target.RegionsSentCPTMod' action='set' />

<assign value='source.{ZDF:ZDF8ChargeCode}' property='Tempcode' action='set' />

<if condition='(..StartsWith(Tempcode,"00011403")) &amp;&amp; ($LENGTH(source.{ZDF:ZDF8ChargeCode}) &gt; 0) ' >
<true>
<assign value='source.{ZDF:ZDF8ChargeCode}' property='target.CDM' action='set' />
<assign value='Tempcode' property='target.CPT' action='set' />
</true>
</if>
<if condition='(..StartsWith(Tempcode,"00011403")) &amp;&amp; ($LENGTH(source.{ZDF:ZDF8ChargeCode}) &lt; 1) ' >
<true>
<assign value='"MISCERROR"_"^MiscErrorNoProc"_"^ERR"' property='target.CDM' action='set' >
<annotation># set  misc charge code to MISCERROR so will error in affinity 
	# Helps PA , they will then put account on hold. </annotation>
</assign>
</true>
</if>

<if condition='$LENGTH(source.{ZDF:ZDF8ChargeCode}) &gt; 0 ' >
<true>
<assign value='"MISCERROR"_"^MiscErrorNoProc"_"^ERR"' property='target.CDM' action='set' >
<annotation># set  misc charge code to MISCERROR so will error in affinity 
	# Helps PA , they will then put account on hold. </annotation>
</assign>
</true>
</if>

<if condition='((..StartsWith(Tempcode, "00011403" )) &amp; (+source.{ZDF:ZDF11ExtAmount} = 0)) ' >
<annotation>
	-----------------------------------------------
	If an error Force REGIONS misc charge to exception report in affinity
	Move 7.1 to 7.2
	Remove CHF from 7.3
	Set FT1.6  to ERR
	-----------------------------------------------
	</annotation>
<true>
<assign value='"ERR"' property='target.TransactionType' action='set' />
<assign value='Tempcode_"^MiscErrorZeroAmt"_"^ERR"' property='target.CDM' action='set' />
<assign value='""' property='ChargeText' action='set' />
</true>
<false>
<if condition='(..StartsWith(source.{ZDF:ZDF8ChargeCode}, "00011403" )) &amp; (+source.{ZDF:ZDF11ExtAmount} &gt; 0) &amp; (source.{ZDF:ZDF8ChargeCode} = "") ' >
<annotation>
		-----------------------------------------------
		If an error Force REGIONS misc charge to exception report in affinity
		Move 7.1 to 7.2
		Remove CHF from 7.3
		Set FT1.6  to ERR
		-----------------------------------------------
		</annotation>
<true>
<assign value='"ERR"_"^MiscErrorNoPro"_"^ERR"' property='target.CDM' action='set' />
<assign value='""' property='ChargeText' action='set' />
</true>
<false>
<assign value='Tempcode_"^^CHG"' property='target.CDM' action='set' />
<assign value='source.{ZDF:ZDF7ChargeCreditCode}' property='target.TransactionType' action='set' >
<annotation>
		-----------------------------------------------
		Everything is good and pad out the card code to 8
		-----------------------------------------------
		</annotation>
</assign>
</false>
</if>
</false>
</if>

<code>
<![CDATA[ 
	// update Regions price by 1.5048 and round
	// for Cerner update unit price with 1.5048 rounded price
]]]]><![CDATA[></code>
<if condition='( +source.{ZDF:ZDF11ExtAmount} &lt;= 0)' >
<true>
<assign value='"0"' property='target.AmountExtended' action='set' />
<assign value='"0"' property='target.AmountUnit' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF11ExtAmount}/source.{ZDF:ZDF10Quanity}' property='currPrice' action='set' />
<assign value='currPrice * (1.5048*1000)' property='newPrice' action='set' />
<assign value='$NUMBER(newPrice,0)' property='newPrice' action='set' />
<assign value='((((( newPrice \ 500 ) + 1 ) * 500 ) - newPrice ) # 500)' property='diff' action='set' />
<assign value=' newPrice + diff' property='newPrice' action='set' />
<assign value='newPrice / 1000' property='newPrice' action='set' />
<assign value='newPrice' property='target.AmountUnit' action='set' />
<assign value='newPrice * source.{ZDF:ZDF10Quanity}' property='newPrice' action='set' />
<assign value='newPrice' property='target.AmountExtended' action='set' />
</false>
</if>

<assign value='source.{ZDF:ZDF10Quanity}' property='target.Quantity' action='set' />

<assign value='source.{ZDF:ZDF2LastName}' property='tpatientlastnm' action='set' />
<assign value='source.{ZDF:ZDF3FirstName}' property='tpatientfirstnm' action='set' />
<assign value='source.{ZDF:ZDF4MiddleName}' property='tpatientmiddlenm' action='set' />
<assign value='(tpatientlastnm_", "_tpatientfirstnm_" "_tpatientmiddlenm)' property='target.Name' action='set' />
<code>
<![CDATA[ 
	// remove CDM prefix and leading zeros from Regions cdm
	// set cpt field and modifier to null
]]]]><![CDATA[></code>
<assign value='source.{ZDF:ZDF8ChargeCode}' property='tempcdm' action='set' />
<assign value='$ZSTRIP(tempcdm,"&lt;","CDM")' property='tempcdm1' action='set' />
<assign value='$ZSTRIP(tempcdm1,"&lt;","0")' property='tempcdm2' action='set' />
<assign value='tempcdm2' property='target.CDM' action='set' />
<code>
<![CDATA[ 
	// keep cpt and modifier on misc cdm 11403
]]]]><![CDATA[></code>

<if condition='tempcdm2="11403"' >
<true>
<assign value='source.{ZDF:ZDF14CPTCode}' property='tmpcpt' action='set' />
<assign value='tmpcpt_"^CPT"' property='target.CPT' action='set' />
<assign value='source.{ZDF:ZDF15Modifier}' property='tmpCPTMod' action='set' />
<if condition='source.{ZDF:ZDF15Modifier}=""' >
<false>
<assign value='tmpCPTMod_"^CPTMOD"' property='target.CPTModifiers' action='set' />
</false>
</if>
</true>
<false>
<assign value='""' property='target.CPT' action='set' />
<assign value='""' property='target.CPTModifiers' action='set' />
</false>
</if>
<code>
<![CDATA[ 
    // write !,("tempcdm="_tempcdm_" tempcdm1="_tempcdm1)
    // $$$TRACE("tempcdm="_tempcdm_" tempcdm1="_tempcdm1)
    // $$$TRACE("tMRN="_tMRN)    
	]]]]><![CDATA[></code>
<code>
<![CDATA[ 
	// remove M prefix if one exists
]]]]><![CDATA[></code>
<if condition='..StartsWith(source.{ZDF:ZDF13ServicePhyCode},"M")|| ..StartsWith(source.{ZDF:ZDF13ServicePhyCode},"E") ' >
<true>
<assign value='..SubString(source.{ZDF:ZDF13ServicePhyCode},2,8)' property='target.PerformingDoc' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF13ServicePhyCode}' property='target.PerformingDoc' action='set' />
</false>
</if>
<if condition='..StartsWith(source.{ZDF:ZDF12OrderingPhyCode},"M") || ..StartsWith(source.{ZDF:ZDF12OrderingPhyCode},"E") ' >
<true>
<assign value='..SubString(source.{ZDF:ZDF12OrderingPhyCode},2,8)' property='target.OrderedByDoc' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF12OrderingPhyCode}' property='target.OrderedByDoc' action='set' />
</false>
</if>

<code>
<![CDATA[ 
	// ***************** Coding for Account and MRN ************************
	// Use GCH.Regions.DFT.VisitTBL Table data to assign MRN and verify Account number
	// First Using Account get MRN
	// If Account not found 
		// use Patient Last & First Name, if unique, to get MRN
		// with MRN get valid Account by DOS if IP account exists else look for valid OP
			// If none found just send account as sent by Regions
]]]]><![CDATA[></code>
<assign value='source.{ZDF:ZDF2LastName}' property='pPatientNameLast' action='set' />
<assign value='source.{ZDF:ZDF3FirstName}' property='pPatientNameFirst' action='set' />
<assign value='""' property='pMRN' action='set' />
<code>
<![CDATA[ 
	// strip leading zero on account numbers and set variable.
	// 	<assign value='pPatientAccount' property='target.{MSH:25}' action='set' />
]]]]><![CDATA[></code>
<assign value='"0NopAcct"' property='pPatientAccount' action='set' />
<assign value='"NotAcct"' property='tPatientAccount' action='set' />
<assign value='"NoOldAcct"' property='OldAccount' action='set' />
<assign value='"NoOutAcct"' property='tAccountOut' action='set' />
<assign value='"NoInAcct"' property='tAccountIn' action='set' />
<assign value='"notMRN"' property='tMRN' action='set' />
<assign value='"Noname"' property='tMRNname' action='set' />
<assign value='""' property='pDOS' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='pDOS' action='set' />
<assign value='source.{ZDF:ZDF1AccountNumber}' property='OldAccount' action='set' />
<assign value='$ZSTRIP(OldAccount,"&lt;","0")' property='pPatientAccount' action='set' />

<assign value='"MRNnotFnd"' property='target.MSHMRNFind' action='set' />
<assign value='""' property='tMRN' action='set' />
<if condition='pPatientAccount = ""' >
<false>
<code>
<![CDATA[ 
	// Using Account and get MRN 
    // alj 	set tMRN = ##class(GCH.Regions.DFT.VisitTBL).AccountGetMRN(pPatientAccount)
    // $$$TRACE("pPatientAccount="_pPatientAccount)
    set tMRN=""
    set tMRN=##class(GC.CernerGetData).CernerGetPatientInfoByFin(pPatientAccount)
    // $$$TRACE("tMRN="_tMRN)    
    ]]]]><![CDATA[></code>
</false>
</if>
<if condition='tMRN=""' >
<false>
<assign value='pPatientAccount' property='tAccountIn' action='set' />
<assign value='pPatientAccount' property='target.Fin' action='set' />
</false>
</if>

<if condition='tMRN = ""' >
<true>
<code>
<![CDATA[ 
	// Using Patient Last,First Name and Middle Name to get MRN from PatientData table if unique
    set tMRN=##class(GC.CernerGetData).CernerGetPatientInfoByName(tpatientlastnm,tpatientfirstnm,tpatientmiddlenm)
	]]]]><![CDATA[></code>
<if condition='tMRN = ""' >
<true>
<assign value='""' property='target.MRN' action='set' />
<assign value='"MRNnotFnd"' property='target.MSHMRNFind' action='set' />
</true>
<false>
<assign value='"MRNbyName"' property='target.MSHMRNFind' action='set' />
<assign value='tMRN' property='target.MRN' action='set' />
</false>
</if>
</true>
<false>
<assign value='"MRNbyAcct"' property='target.MSHMRNFind' action='set' />
<assign value='tMRN' property='target.MRN' action='set' />
</false>
</if>
<if condition='target.Fin = "noacct"' >
<true>
<code>
<![CDATA[ 
	//  If no valid account found account as sent from Regions
]]]]><![CDATA[></code>
<assign value='pPatientAccount' property='target.Fin' action='set' />
</true>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Regions2CernerChargeListv2">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65084,54333.406397</TimeChanged>
<TimeCreated>61636,36544.001137</TimeCreated>
<DependsOn>EnsLib.HL7.Message,GC.Regions.DFT.ChargeDFT</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='GC.Regions.DFT.ChargeDFT' sourceDocType='22.RegLab:GLT_DFT' create='new' language='objectscript' >
<code>
<![CDATA[ 
	// Last Moved to Prod - 03/12/2019 
	// Last Updated 01/30/2019
	// Created: 04/04/2017  Al Johnson  
	// Desc: Report Daily Regions Charges To Cerner
	//  Beaker now sending MRN 01/30/2019 Al Johnson
	]]]]><![CDATA[></code>

<assign value='source.{MSH:DateTimeofMessage}' property='target.HL7MessageDate' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='target.TransactionDate' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='target.PostingDate' action='set' />
<assign value='"RGCHG"' property='target.DeptCode' action='set' />
<code>
<![CDATA[ 
    // set FT1-1 setid
    // set FT1-2 transaction id must be unique - take 1st 8 and last 4 from msh message control id
	// set FT1-5 transaction posting date for Cerner
]]]]><![CDATA[></code>
<assign value='source.{MSH:MessageControlID}' property='tempid1' action='set' />
<assign value='$EXTRACT(tempid1,1,8)' property='tempid1a' action='set' />
<assign value='$EXTRACT(tempid1,*-3,*)' property='tempid1b' action='set' />
<assign value='tempid1a_tempid1b' property='target.TransactionID' action='set' />

<assign value='source.{ZDF:ZDF7ChargeCreditCode}' property='target.TransactionType' action='set' />
<assign value='""' property='tempCDMtable' action='set' />
<assign value='""' property='tempCDMtableDept' action='set' />
<assign value='""' property='tempCDMtableRevCode' action='set' />
<assign value='""' property='tempCDMtableStatus' action='set' />
<assign value='..Lookup("T_RegionsCDMDept",source.{ZDF:ZDF8ChargeCode})' property='tempCDMtable' action='set' />

<assign value='$PIECE(tempCDMtable,"-",1)' property='tempCDMtableDept' action='set' />
<assign value='$PIECE(tempCDMtable,"-",2)' property='tempCDMtableRevCode' action='set' />
<assign value='$PIECE(tempCDMtable,"-",3)' property='tempCDMtableStatus' action='set' />

<assign value='tempCDMtableDept' property='target.RegionsCDMDept' action='set' />
<assign value='tempCDMtableRevCode' property='target.RegionsCDMRevCode' action='set' />
<assign value='tempCDMtableStatus' property='target.RegionsCDMStatus' action='set' />

<assign value='source.{ZDF:ZDF9ChargeDesc}' property='target.RegionsCDMDesc' action='set' />
<assign value='source.{ZDF:ZDF14CPTCode}' property='target.RegionsSentCPT' action='set' />
<assign value='source.{ZDF:ZDF15Modifier}' property='target.RegionsSentCPTMod' action='set' />

<code>
<![CDATA[ 
	// update Regions price by 1.5048 and round
	// for Cerner update unit price with 1.5048 rounded price
]]]]><![CDATA[></code>
<if condition='( +source.{ZDF:ZDF11ExtAmount} &lt;= 0)' >
<true>
<assign value='"0"' property='target.AmountExtended' action='set' />
<assign value='"0"' property='target.AmountUnit' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF11ExtAmount}/source.{ZDF:ZDF10Quanity}' property='currPrice' action='set' />
<assign value='currPrice * (1.5048*1000)' property='newPrice' action='set' />
<assign value='$NUMBER(newPrice,0)' property='newPrice' action='set' />
<assign value='((((( newPrice \ 500 ) + 1 ) * 500 ) - newPrice ) # 500)' property='diff' action='set' />
<assign value=' newPrice + diff' property='newPrice' action='set' />
<assign value='newPrice / 1000' property='newPrice' action='set' />
<assign value='newPrice' property='target.AmountUnit' action='set' />
<assign value='newPrice * source.{ZDF:ZDF10Quanity}' property='newPrice' action='set' />
<assign value='newPrice' property='target.AmountExtended' action='set' />
</false>
</if>

<assign value='source.{ZDF:ZDF10Quanity}' property='target.Quantity' action='set' />

<assign value='source.{ZDF:ZDF2LastName}' property='tpatientlastnm' action='set' />
<assign value='source.{ZDF:ZDF3FirstName}' property='tpatientfirstnm' action='set' />
<assign value='source.{ZDF:ZDF4MiddleName}' property='tpatientmiddlenm' action='set' />
<assign value='(tpatientlastnm_", "_tpatientfirstnm_" "_tpatientmiddlenm)' property='target.Name' action='set' />

<code>
<![CDATA[ 
	// Beaker will send MRN remove G prefix and leading zeros from mrn if sent by Regions
]]]]><![CDATA[></code>
<assign value='""' property='tempmrn' action='set' />
<assign value='""' property='tempmrn1' action='set' />
<assign value='""' property='tempmrn2' action='set' />
<assign value='source.{ZDF:ZDF16MRN}' property='tempmrn' action='set' />
<assign value='$ZSTRIP(tempmrn,"&lt;","G")' property='tempmrn1' action='set' />
<assign value='$ZSTRIP(tempmrn1,"&lt;","0")' property='tempmrn2' action='set' />

<code>
<![CDATA[ 
	// remove CDM prefix and leading zeros from Regions cdm
	// set cpt field and modifier to null
]]]]><![CDATA[></code>
<assign value='source.{ZDF:ZDF8ChargeCode}' property='tempcdm' action='set' />
<assign value='$ZSTRIP(tempcdm,"&lt;","CDM")' property='tempcdm1' action='set' />
<assign value='$ZSTRIP(tempcdm1,"&lt;","0")' property='tempcdm2' action='set' />
<assign value='tempcdm2' property='target.CDM' action='set' />
<code>
<![CDATA[ 
	// keep cpt and modifier on misc cdm 11403 and new code 30084999001
]]]]><![CDATA[></code>

<if condition='(tempcdm2="11403")||(tempcdm2="30084999001") ' >
<true>
<assign value='source.{ZDF:ZDF14CPTCode}' property='tmpcpt' action='set' />
<assign value='tmpcpt_"^CPT"' property='target.CPT' action='set' />
<assign value='source.{ZDF:ZDF15Modifier}' property='tmpCPTMod' action='set' />
<if condition='source.{ZDF:ZDF15Modifier}=""' >
<false>
<assign value='tmpCPTMod_"^CPTMOD"' property='target.CPTModifiers' action='set' />
</false>
</if>
</true>
<false>
<assign value='""' property='target.CPT' action='set' />
<assign value='""' property='target.CPTModifiers' action='set' />
</false>
</if>
<code>
<![CDATA[ 
    // write !,("tempcdm="_tempcdm_" tempcdm1="_tempcdm1)
    // $$$TRACE("tempcdm="_tempcdm_" tempcdm1="_tempcdm1)
    // $$$TRACE("tMRN="_tMRN)    
	]]]]><![CDATA[></code>
<code>
<![CDATA[ 
	// remove M prefix if one exists
]]]]><![CDATA[></code>
<if condition='..StartsWith(source.{ZDF:ZDF13ServicePhyCode},"M")|| ..StartsWith(source.{ZDF:ZDF13ServicePhyCode},"E") ' >
<true>
<assign value='..SubString(source.{ZDF:ZDF13ServicePhyCode},2,8)' property='target.PerformingDoc' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF13ServicePhyCode}' property='target.PerformingDoc' action='set' />
</false>
</if>
<if condition='..StartsWith(source.{ZDF:ZDF12OrderingPhyCode},"M") || ..StartsWith(source.{ZDF:ZDF12OrderingPhyCode},"E") ' >
<true>
<assign value='..SubString(source.{ZDF:ZDF12OrderingPhyCode},2,8)' property='target.OrderedByDoc' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF12OrderingPhyCode}' property='target.OrderedByDoc' action='set' />
</false>
</if>

<code>
<![CDATA[ 
	// ***************** Coding for Account and MRN ************************
	// Use GCH.Regions.DFT.VisitTBL Table data to assign MRN and verify Account number
	// First Using Account get MRN
	// If Account not found 
		// use Patient Last & First Name, if unique, to get MRN
		// with MRN get valid Account by DOS if IP account exists else look for valid OP
			// If none found just send account as sent by Regions
]]]]><![CDATA[></code>
<assign value='source.{ZDF:ZDF2LastName}' property='pPatientNameLast' action='set' />
<assign value='source.{ZDF:ZDF3FirstName}' property='pPatientNameFirst' action='set' />
<assign value='""' property='pMRN' action='set' />
<code>
<![CDATA[ 
	// strip leading zero on account numbers and set variable.
	// 	<assign value='pPatientAccount' property='target.{MSH:25}' action='set' />
]]]]><![CDATA[></code>
<assign value='"0NopAcct"' property='pPatientAccount' action='set' />
<assign value='"NotAcct"' property='tPatientAccount' action='set' />
<assign value='"NoOldAcct"' property='OldAccount' action='set' />
<assign value='"NoOutAcct"' property='tAccountOut' action='set' />
<assign value='"NoInAcct"' property='tAccountIn' action='set' />
<assign value='"notMRN"' property='tMRN' action='set' />
<assign value='"Noname"' property='tMRNname' action='set' />
<assign value='""' property='pDOS' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='pDOS' action='set' />
<assign value='source.{ZDF:ZDF1AccountNumber}' property='OldAccount' action='set' />
<assign value='$ZSTRIP(OldAccount,"&lt;","0")' property='pPatientAccount' action='set' />

<assign value='"MRNnotFnd"' property='target.MSHMRNFind' action='set' />
<assign value='""' property='tMRN' action='set' />

<if condition='tempmrn2 = ""'>
<false>
<assign value='tempmrn2' property='tMRN' action='set'/>
<assign value='"MRNsent"' property='target.MSHMRNFind' action='set' />
<assign value='tempmrn2' property='target.MRN' action='set' />
<assign value='pPatientAccount' property='target.Fin' action='set' />
</false>
</if>

<if condition='tempmrn2 = ""' >
<true>
<if condition='pPatientAccount = ""' >
<false>
<code>
<![CDATA[ 
	// Using Account and get MRN 
    // alj 	set tMRN = ##class(GCH.Regions.DFT.VisitTBL).AccountGetMRN(pPatientAccount)
    // $$$TRACE("pPatientAccount="_pPatientAccount)
    set tMRN=""
    set tMRN=##class(GC.CernerGetData).CernerGetPatientInfoByFin(pPatientAccount)
    // $$$TRACE("tMRN="_tMRN)    
    ]]]]><![CDATA[></code>
</false>
</if>
<if condition='tMRN=""' >
<false>
<assign value='pPatientAccount' property='tAccountIn' action='set' />
<assign value='pPatientAccount' property='target.Fin' action='set' />
</false>
</if>
</true>
</if>

<if condition='tMRN = ""' >
<true>
<code>
<![CDATA[ 
	// Using Patient Last,First Name and Middle Name to get MRN from PatientData table if unique
    set tMRN=##class(GC.CernerGetData).CernerGetPatientInfoByName(tpatientlastnm,tpatientfirstnm,tpatientmiddlenm)
	]]]]><![CDATA[></code>
<if condition='tMRN = ""' >
<true>
<assign value='""' property='target.MRN' action='set' />
<assign value='"MRNnotFnd"' property='target.MSHMRNFind' action='set' />
</true>
<false>
<assign value='"MRNbyName"' property='target.MSHMRNFind' action='set' />
<assign value='tMRN' property='target.MRN' action='set' />
</false>
</if>
</true>
<false>
<assign value='"MRNbyAcct"' property='target.MSHMRNFind' action='set' />
<assign value='tMRN' property='target.MRN' action='set' />
</false>
</if>
<if condition='target.Fin = "noacct"' >
<true>
<code>
<![CDATA[ 
	//  If no valid account found account as sent from Regions
]]]]><![CDATA[></code>
<assign value='pPatientAccount' property='target.Fin' action='set' />
</true>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Regions2CernerChargeListv3">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65192,39984.845154</TimeChanged>
<TimeCreated>61636,36544.001137</TimeCreated>
<DependsOn>EnsLib.HL7.Message,GC.Regions.DFT.ChargeDFTv3</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='GC.Regions.DFT.ChargeDFTv3' sourceDocType='22.RegLab:GLT_DFT' create='new' language='objectscript' >
<code>
<![CDATA[ 
	// Last Moved to Prod - 03/12/2019 
	// Last Updated 06/14/2019
	// Created: 04/04/2017  Al Johnson  
	// Desc: Report Daily Regions Charges To Cerner
	// GC.Regions2CernerChargesListv3 new version from v2
	//  Beaker now sending MRN 01/30/2019 Al Johnson
	//
	// 06-14-2019 add search of fin by mrn and dos
	//            CernerGetFinByMrnDos
	//            lgc.sp_HL7_Get_FIN_By_MRN_DOS
	//            Parameter 1: MRN  Parameter 2: DOS
	// 06-14-2019 search for insurance using fin
	//            CernerGetFinInsurance
	//            lgc.sp_HL7_Get_Insurance_By_FIN_And_Rank
	//            Parameter 1: FIN  Parameter 2: Rank
	// 06-14-2019 SQLDBDEV16\DEV16 and SQLDBTEST16\DBTEST16 database EDW_IS both contain Prod data - current to previous day
	// 06-24-2019 fin returned needs to start with 7 (prod) 2=cert, 9=mock
	// 06-25-2019 Check fin sent against mrn/dos routine
	]]]]><![CDATA[></code>
<assign value='source.{MSH:DateTimeofMessage}' property='target.HL7MessageDate' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='target.TransactionDate' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='target.PostingDate' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='tZDF6DOS' action='set' />
<assign value='"RGCHG"' property='target.DeptCode' action='set' />
<code>
<![CDATA[ 
    // set FT1-1 setid
    // set FT1-2 transaction id must be unique - take 1st 8 and last 4 from msh message control id
	// set FT1-5 transaction posting date for Cerner
]]]]><![CDATA[></code>
<assign value='source.{MSH:MessageControlID}' property='tempid1' action='set' />
<assign value='$EXTRACT(tempid1,1,8)' property='tempid1a' action='set' />
<assign value='$EXTRACT(tempid1,*-3,*)' property='tempid1b' action='set' />
<assign value='tempid1a_tempid1b' property='target.TransactionID' action='set' />
<assign value='source.{ZDF:ZDF7ChargeCreditCode}' property='target.TransactionType' action='set' />
<assign value='""' property='tempCDMtable' action='set' />
<assign value='""' property='tempCDMtableDept' action='set' />
<assign value='""' property='tempCDMtableRevCode' action='set' />
<assign value='""' property='tempCDMtableStatus' action='set' />
<assign value='..Lookup("T_RegionsCDMDept",source.{ZDF:ZDF8ChargeCode})' property='tempCDMtable' action='set' />
<assign value='$PIECE(tempCDMtable,"-",1)' property='tempCDMtableDept' action='set' />
<assign value='$PIECE(tempCDMtable,"-",2)' property='tempCDMtableRevCode' action='set' />
<assign value='$PIECE(tempCDMtable,"-",3)' property='tempCDMtableStatus' action='set' />
<assign value='tempCDMtableDept' property='target.RegionsCDMDept' action='set' />
<assign value='tempCDMtableRevCode' property='target.RegionsCDMRevCode' action='set' />
<assign value='tempCDMtableStatus' property='target.RegionsCDMStatus' action='set' />
<assign value='source.{ZDF:ZDF9ChargeDesc}' property='target.RegionsCDMDesc' action='set' />
<assign value='source.{ZDF:ZDF14CPTCode}' property='target.RegionsSentCPT' action='set' />
<assign value='source.{ZDF:ZDF15Modifier}' property='target.RegionsSentCPTMod' action='set' />
<code>
<![CDATA[ 
	// update Regions price by 1.5048 and round
	// for Cerner update unit price with 1.5048 rounded price
]]]]><![CDATA[></code>
<if condition='( +source.{ZDF:ZDF11ExtAmount} &lt;= 0)' >
<true>
<assign value='"0"' property='target.AmountExtended' action='set' />
<assign value='"0"' property='target.AmountUnit' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF11ExtAmount}/source.{ZDF:ZDF10Quanity}' property='currPrice' action='set' />
<assign value='currPrice * (1.5048*1000)' property='newPrice' action='set' />
<assign value='$NUMBER(newPrice,0)' property='newPrice' action='set' />
<assign value='((((( newPrice \ 500 ) + 1 ) * 500 ) - newPrice ) # 500)' property='diff' action='set' />
<assign value=' newPrice + diff' property='newPrice' action='set' />
<assign value='newPrice / 1000' property='newPrice' action='set' />
<assign value='newPrice' property='target.AmountUnit' action='set' />
<assign value='newPrice * source.{ZDF:ZDF10Quanity}' property='newPrice' action='set' />
<assign value='newPrice' property='target.AmountExtended' action='set' />
</false>
</if>
<assign value='source.{ZDF:ZDF10Quanity}' property='target.Quantity' action='set' />
<assign value='source.{ZDF:ZDF2LastName}' property='tpatientlastnm' action='set' />
<assign value='source.{ZDF:ZDF3FirstName}' property='tpatientfirstnm' action='set' />
<assign value='source.{ZDF:ZDF4MiddleName}' property='tpatientmiddlenm' action='set' />
<assign value='(tpatientlastnm_", "_tpatientfirstnm_" "_tpatientmiddlenm)' property='target.Name' action='set' />
<code>
<![CDATA[ 
	// Beaker will send MRN remove G prefix and leading zeros from mrn if sent by Regions
]]]]><![CDATA[></code>
<assign value='""' property='tempmrn' action='set' />
<assign value='""' property='tempmrn1' action='set' />
<assign value='""' property='inZDF16Mrn' action='set' />
<assign value='source.{ZDF:ZDF16MRN}' property='tempmrn' action='set' />
<assign value='$ZSTRIP(tempmrn,"&lt;","G")' property='tempmrn1' action='set' />
<assign value='$ZSTRIP(tempmrn1,"&lt;","0")' property='inZDF16Mrn' action='set' />
<code>
<![CDATA[ 
	// remove CDM prefix and leading zeros from Regions cdm
	// set cpt field and modifier to null
]]]]><![CDATA[></code>
<assign value='source.{ZDF:ZDF8ChargeCode}' property='tempcdm' action='set' />
<assign value='$ZSTRIP(tempcdm,"&lt;","CDM")' property='tempcdm1' action='set' />
<assign value='$ZSTRIP(tempcdm1,"&lt;","0")' property='tempcdm2' action='set' />
<assign value='tempcdm2' property='target.CDM' action='set' />
<code>
<![CDATA[ 
	// keep cpt and modifier on misc cdm 11403 and new code 30084999001
]]]]><![CDATA[></code>
<if condition='(tempcdm2="11403")||(tempcdm2="30084999001") ' >
<true>
<assign value='source.{ZDF:ZDF14CPTCode}' property='tmpcpt' action='set' />
<assign value='tmpcpt_"^CPT"' property='target.CPT' action='set' />
<assign value='source.{ZDF:ZDF15Modifier}' property='tmpCPTMod' action='set' />
<if condition='source.{ZDF:ZDF15Modifier}=""' >
<false>
<assign value='tmpCPTMod_"^CPTMOD"' property='target.CPTModifiers' action='set' />
</false>
</if>
</true>
<false>
<assign value='""' property='target.CPT' action='set' />
<assign value='""' property='target.CPTModifiers' action='set' />
</false>
</if>
<code>
<![CDATA[ 
	// remove M prefix if one exists
]]]]><![CDATA[></code>
<if condition='..StartsWith(source.{ZDF:ZDF13ServicePhyCode},"M")|| ..StartsWith(source.{ZDF:ZDF13ServicePhyCode},"E") ' >
<true>
<assign value='..SubString(source.{ZDF:ZDF13ServicePhyCode},2,8)' property='target.PerformingDoc' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF13ServicePhyCode}' property='target.PerformingDoc' action='set' />
</false>
</if>
<if condition='..StartsWith(source.{ZDF:ZDF12OrderingPhyCode},"M") || ..StartsWith(source.{ZDF:ZDF12OrderingPhyCode},"E") ' >
<true>
<assign value='..SubString(source.{ZDF:ZDF12OrderingPhyCode},2,8)' property='target.OrderedByDoc' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF12OrderingPhyCode}' property='target.OrderedByDoc' action='set' />
</false>
</if>
<code>
<![CDATA[ 
	// ***************** Coding for Account and MRN ************************
	//  MRN
	// 1.  Use MRN if sent by Regions  (inZDF16Mrn)
	// 2.  Search for MRN using Account sent by Regions (inZDF1Account)
	//                                                  (inZDF1Accounta - leading zeros removed)
	// 3.  Search for MRN using Patient Name
	//
	//  Account
	// 1.  Use Account sent by Regions
	// 2.  Search for Account using MRN and DOS (inZDF1Dos)
	//          implies you have the MRN from above either 1 or 3 (but not 2)
	//
	//  MSH Values 
	//   MSH:21 / tFinalMRNfromWhere where MRN came from
	//                               NOMRN, MRNbyNAME, MRNbyFIN,  MRNSent
	//   MSH:22 / tFinalFINfromWhere where Account came from
	//                               NOFIN, FINbyMRN, FINSent
	//   MSH:23 / tFinalFINcount   Number of Fins
	//   MSH:24 / tPrimaryInsName  Name of Primary Insurance
	//   MSH:25 / tPrimaryInsType  Primary Insurance - MNMedicaid or OtherIns
	//
	//   target.MSHMRNFind          MRNnotFnd, MRNsent, MRNbyName, MRNbyAcct
	//   target.MRN
	//   target.Fin                "noacct"
	//
]]]]><![CDATA[></code>
<code>
<![CDATA[ 
	// strip leading zero on account numbers and set variable.
	// hold fin sent for later comparison against mrn/dos search		
]]]]><![CDATA[></code>
<assign value='source.{ZDF:ZDF1AccountNumber}' property='inZDF1AccountSent' action='set' />
<assign value='$ZSTRIP(inZDF1AccountSent,"&lt;","0")' property='inZDF1AccountSenta' action='set' />

<if condition='..StartsWith(source.{ZDF:ZDF1AccountNumber},"7")' >
<true>
<assign value='source.{ZDF:ZDF1AccountNumber}' property='inZDF1Account' action='set' />
<assign value='$ZSTRIP(inZDF1Account,"&lt;","0")' property='inZDF1Accounta' action='set' />
</true>
<false>
<assign value='""' property='inZDF1Accounta' action='set' />
</false>
</if>

<code>
<![CDATA[ 
    // ***************************
	// search for mrn if not sent
	// ***************************
]]]]><![CDATA[></code>
<assign value='""' property='tableMRNbyFin' action='set' />
<assign value='""' property='tableMRNbyName' action='set' />
<if condition='inZDF16Mrn = ""' >
<true>
<if condition='inZDF1Accounta = ""' >
<false>
<code>
<![CDATA[ 
    // find mrn by fin
       set tableMRNbyFin=##class(GC.CernerGetData2019).CernerGetPatientInfoByFin(inZDF1Accounta)
    // $$$TRACE("tableMRNbyFin= "_tableMRNbyFin)    
    ]]]]><![CDATA[></code>
</false>
</if>
</true>
</if>
<if condition='(inZDF16Mrn="")&amp;(tableMRNbyFin = "")' >
<true>
<code>
<![CDATA[ 
	// Using Patient Last,First Name and Middle Name to get MRN from PatientData table if unique
    //  $$$TRACE("tableMRNbyNameB4="_tableMRNbyName)
    set tableMRNbyName=##class(GC.CernerGetData2019).CernerGetPatientInfoByName(tpatientlastnm,tpatientfirstnm,tpatientmiddlenm)
    // $$$TRACE("tableMRNbyName="_tableMRNbyName)
	]]]]><![CDATA[></code>
</true>
</if>
<code>
<![CDATA[ 
    // ****************************************************
	// set PID-3 based on MRN sent or by MRN search result
	// ****************************************************
]]]]><![CDATA[></code>
<assign value='""' property='tFinalMRN' action='set' />
<assign value='""' property='tFinalMRNfromWhere' action='set' />
<if condition='inZDF16Mrn = ""' >
<true>
<if condition='tableMRNbyFin = ""' >
<true>
<if condition='tableMRNbyName = ""' >
<true>
<assign value='""' property='target.MRN' action='set' />
<assign value='"NOMRN"' property='tFinalMRNfromWhere' action='set' />
</true>
<false>
<assign value='tableMRNbyName' property='target.MRN' action='set' />
<assign value='tableMRNbyName' property='tFinalMRN' action='set' />
<assign value='"MRNbyNAME"' property='tFinalMRNfromWhere' action='set' />
</false>
</if>
</true>
<false>
<assign value='tableMRNbyFin' property='target.MRN' action='set' />
<assign value='tableMRNbyFin' property='tFinalMRN' action='set' />
<assign value='"MRNbyFIN"' property='tFinalMRNfromWhere' action='set' />
</false>
</if>
</true>
<false>
<assign value='inZDF16Mrn' property='target.MRN' action='set' />
<assign value='inZDF16Mrn' property='tFinalMRN' action='set' />
<assign value='"MRNSent"' property='tFinalMRNfromWhere' action='set' />
</false>
</if>
<code>
<![CDATA[ 
    // ***************************
	// search for fin if not sent
	// search if sent - verify match on fins
	// ***************************
]]]]><![CDATA[></code>
<assign value='""' property='tableFINbyMRNDos' action='set' />
<assign value='""' property='tableFINbyMRNDosCount' action='set' />
<if condition='inZDF1Accounta = ""' >
<true>
<if condition='tFinalMRN = ""' >
<false>
<code>
<![CDATA[ 
    //  routine adds a comma between fin followed by a count of fins seperated by verbiage Count=
    //   i.e. 70037267,70116182,70204540,70214105,70332251Count=5
    set tableFINbyMRNDos=##class(GC.CernerGetData2019).CernerGetFinByMRNDos(tFinalMRN,tZDF6DOS)
    // $$$TRACE("tableFINbyMRNDos after= "_tableFINbyMRNDos)
	]]]]><![CDATA[></code>
</false>
</if>
</true>
</if>
<assign value='""' property='tableFINbyMRNDosCount' action='set' />
<assign value='""' property='tableFINbyMRNDosFin' action='set' />
<assign value='$PIECE(tableFINbyMRNDos,"Count=",1)' property='tableFINbyMRNDosFin' action='set' />
<assign value='$PIECE(tableFINbyMRNDos,"Count=",2)' property='tableFINbyMRNDosCount' action='set' />
<code>
<![CDATA[ 
    // *****************************************************
	// set PID-18 based on FIN sent or by MRN search result
	// *****************************************************
]]]]><![CDATA[></code>
<assign value='""' property='tFinalFIN' action='set' />
<assign value='""' property='tFinalFINfromWhere' action='set' />
<assign value='""' property='tFinalFINcount' action='set' />
<if condition='inZDF1Accounta = ""' >
<true>
<if condition='tableFINbyMRNDosFin = ""' >
<true>
<assign value='""' property='target.Fin' action='set' />
<assign value='"NOFIN"' property='tFinalFINfromWhere' action='set' />
<assign value='"0"' property='tFinalFINcount' action='set' />
</true>
<false>
<assign value='tableFINbyMRNDosFin' property='target.Fin' action='set' />
<assign value='tableFINbyMRNDosFin' property='tFinalFIN' action='set' />
<assign value='"FINbyMRN"' property='tFinalFINfromWhere' action='set' />
<assign value='tableFINbyMRNDosCount' property='tFinalFINcount' action='set' />
</false>
</if>
</true>
<false>
<assign value='inZDF1Accounta' property='target.Fin' action='set' />
<assign value='inZDF1Accounta' property='tFinalFIN' action='set' />
<assign value='"FINSent"' property='tFinalFINfromWhere' action='set' />
<assign value='"1"' property='tFinalFINcount' action='set' />
</false>
</if>
<code>
<![CDATA[ 
    // ********************************************************
	// find insurance based on fin - 1=primary, 2=secodary etc
	// ********************************************************
]]]]><![CDATA[></code>
<assign value='""' property='tableInsName' action='set' />
<if condition='tFinalFIN = ""' >
<false>
<code>
<![CDATA[ 
     // $$$TRACE("b4insnamecall= "_tFinalFIN)
     set tableInsName=##class(GC.CernerGetData2019).CernerGetFinInsurance(tFinalFIN,"1")
    // $$$TRACE("tableInsName after= "_tableInsName)
	]]]]><![CDATA[></code>
</false>
</if>


<code>
<![CDATA[ 
    // ***************************
	// search for fin by mrn/dos when fin sent
	// compare result for difference
	// ***************************
]]]]><![CDATA[></code>
<assign value='""' property='tableFINSentSearchbyMRNDos' action='set' />
<assign value='""' property='tableFINSentSearchbyMRNDosCount' action='set' />
<if condition='inZDF1AccountSenta = ""' >
<false>
<if condition='tFinalMRN = ""' >
<false>
<code>
<![CDATA[ 
    //  routine adds a comma between fin followed by a count of fins seperated by verbiage Count=
    //   i.e. 70037267,70116182,70204540,70214105,70332251Count=5
    set tableFINSentSearchbyMRNDos=##class(GC.CernerGetData2019).CernerGetFinByMRNDos(tFinalMRN,tZDF6DOS)
    // $$$TRACE("tableFINbyMRNDos after= "_tableFINbyMRNDos)
	]]]]><![CDATA[></code>
</false>
</if>
</false>
</if>
<assign value='""' property='tableFINSentSearchbyMRNDosCount' action='set' />
<assign value='""' property='tableFINSentSearchbyMRNDosFin' action='set' />
<assign value='$PIECE(tableFINSentSearchbyMRNDos,"Count=",1)' property='tableFINSentSearchbyMRNDosFin' action='set' />
<assign value='$PIECE(tableFINSentSearchbyMRNDos,"Count=",2)' property='tableFINSentSearchbyMRNDosCount' action='set' />

<assign value='""' property='tfinmatchdiff' action='set' />

<if condition='inZDF1AccountSenta = ""' >
<true>
<assign value='""' property='tfinmatchdiff' action='set' />
</true>
<false>
<if condition='inZDF1AccountSenta = tableFINSentSearchbyMRNDosFin' >
<true>
<assign value='"No"' property='tfinmatchdiff' action='set' />
</true>
<false>
<if condition='(tableFINSentSearchbyMRNDosCount)&gt;"1"' >
<true>
<if condition='..In(inZDF1AccountSenta,tableFINSentSearchbyMRNDosFin)' >
<true>
<assign value='"No"' property='tfinmatchdiff' action='set' />
</true>
<false>
<assign value='"Yes"' property='tfinmatchdiff' action='set' />
</false>
</if>
</true>
<false>
<if condition='tableFINSentSearchbyMRNDosFin=inZDF1AccountSenta' >
<true>
<assign value='"No"' property='tfinmatchdiff' action='set' />
</true>
<false>
<assign value='"Yes"' property='tfinmatchdiff' action='set' />
</false>
</if>
</false>
</if>
</false>
</if>
</false>
</if>


<code>
<![CDATA[ 
	// ***************** Set MSH Values ************************
	//
	//  MSH Values 
	//   MSH:21 / tFinalMRNfromWhere where MRN came from
	//                               NOMRN, MRNbyNAME, MRNbyFIN,  MRNSent
	//   MSH:22 / tFinalFINfromWhere where Account came from
	//                               NOFIN, FINbyMRN, FINSent
	//   MSH:23 / tFinalFINcount   Number of Fins
	//   MSH:24 / tPrimaryInsName  Name of Primary Insurance
	//   MSH:25 / tPrimaryInsType  Primary Insurance - MNMedicaid or OtherIns
	//
	//   tableFINSentSearchbyMRNDosFin   table lookup when fin sent by regions
	//   inZDF1AccountSenta         orig / actual fin sent - change if not 7xxxxxxx
	//   tfinmatchdiff                 yes or no - lookup and value sent match
	//                              or included if multiple fins returned
	//
]]]]><![CDATA[></code>
<assign value='""' property='tPrimaryInsType' action='set' />
<assign value='tableInsName' property='tPrimaryInsName' action='set' />
<if condition='tableInsName="MN MED ASSISTANCE"' >
<true>
<assign value='"MNMedicaid"' property='tPrimaryInsType' action='set' />
</true>
<false>
<assign value='"OtherIns"' property='tPrimaryInsType' action='set' />
</false>
</if>
<assign value='tFinalMRNfromWhere' property='target.MSHMRNFind' action='set' />
<assign value='tFinalFINfromWhere' property='target.MSHFINFind' action='set' />
<assign value='tFinalFINcount' property='target.FINFindCount' action='set' />
<assign value='tPrimaryInsName' property='target.PrimInsName' action='set' />
<assign value='tPrimaryInsType' property='target.PrimInsType' action='set' />
<assign value='tfinmatchdiff' property='target.FinDifference' action='set' />
<assign value='inZDF1AccountSenta' property='target.OriginalFinSent' action='set' />
<assign value='tableFINSentSearchbyMRNDosFin' property='target.FinDiffLookup' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Regions2CernerChargeListv4">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>66288,49490.356966</TimeChanged>
<TimeCreated>61636,36544.001137</TimeCreated>
<DependsOn>EnsLib.HL7.Message,GC.Regions.DFT.ChargeDFTv3</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='GC.Regions.DFT.ChargeDFTv3' sourceDocType='22.RegLab:GLT_DFT' create='new' language='objectscript' >
<code>
<![CDATA[ 
	// Last Moved to Prod - 03/12/2019 
	// Last Updated 06/14/2019
	// Created: 04/04/2017  Al Johnson  
	// Desc: Report Daily Regions Charges To Cerner
	// GC.Regions2CernerChargesListv3 new version from v2
	//  Beaker now sending MRN 01/30/2019 Al Johnson
	//
	// 06-14-2019 add search of fin by mrn and dos
	//            CernerGetFinByMrnDos
	//            lgc.sp_HL7_Get_FIN_By_MRN_DOS
	//            Parameter 1: MRN  Parameter 2: DOS
	// 06-14-2019 search for insurance using fin
	//            CernerGetFinInsurance
	//            lgc.sp_HL7_Get_Insurance_By_FIN_And_Rank
	//            Parameter 1: FIN  Parameter 2: Rank
	// 06-14-2019 SQLDBDEV16\DEV16 and SQLDBTEST16\DBTEST16 database EDW_IS both contain Prod data - current to previous day
	// 06-24-2019 fin returned needs to start with 7 (prod) 2=cert, 9=mock
	// 06-25-2019 Check fin sent against mrn/dos routine
	]]]]><![CDATA[></code>
<assign value='source.{MSH:DateTimeofMessage}' property='target.HL7MessageDate' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='target.TransactionDate' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='target.PostingDate' action='set' />
<assign value='source.{ZDF:ZDF6DOS}' property='tZDF6DOS' action='set' />
<assign value='"RGCHG"' property='target.DeptCode' action='set' />
<code>
<![CDATA[ 
    // set FT1-1 setid
    // set FT1-2 transaction id must be unique - take 1st 8 and last 4 from msh message control id
	// set FT1-5 transaction posting date for Cerner
]]]]><![CDATA[></code>
<assign value='source.{MSH:MessageControlID}' property='tempid1' action='set' />
<assign value='$EXTRACT(tempid1,1,8)' property='tempid1a' action='set' />
<assign value='$EXTRACT(tempid1,*-3,*)' property='tempid1b' action='set' />
<assign value='tempid1a_tempid1b' property='target.TransactionID' action='set' />
<assign value='source.{ZDF:ZDF7ChargeCreditCode}' property='target.TransactionType' action='set' />
<assign value='""' property='tempCDMtable' action='set' />
<assign value='""' property='tempCDMtableDept' action='set' />
<assign value='""' property='tempCDMtableRevCode' action='set' />
<assign value='""' property='tempCDMtableStatus' action='set' />
<assign value='..Lookup("T_RegionsCDMDept",source.{ZDF:ZDF8ChargeCode})' property='tempCDMtable' action='set' />
<assign value='$PIECE(tempCDMtable,"-",1)' property='tempCDMtableDept' action='set' />
<assign value='$PIECE(tempCDMtable,"-",2)' property='tempCDMtableRevCode' action='set' />
<assign value='$PIECE(tempCDMtable,"-",3)' property='tempCDMtableStatus' action='set' />
<assign value='tempCDMtableDept' property='target.RegionsCDMDept' action='set' />
<assign value='tempCDMtableRevCode' property='target.RegionsCDMRevCode' action='set' />
<assign value='tempCDMtableStatus' property='target.RegionsCDMStatus' action='set' />
<assign value='source.{ZDF:ZDF9ChargeDesc}' property='target.RegionsCDMDesc' action='set' />
<assign value='source.{ZDF:ZDF14CPTCode}' property='target.RegionsSentCPT' action='set' />
<assign value='source.{ZDF:ZDF15Modifier}' property='target.RegionsSentCPTMod' action='set' />
<code>
<![CDATA[ 
	// update Regions price by 1.5048 and round
	// for Cerner update unit price with 1.5048 rounded price
]]]]><![CDATA[></code>
<if condition='( +source.{ZDF:ZDF11ExtAmount} &lt;= 0)' >
<true>
<assign value='"0"' property='target.AmountExtended' action='set' />
<assign value='"0"' property='target.AmountUnit' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF11ExtAmount}/source.{ZDF:ZDF10Quanity}' property='currPrice' action='set' />
<assign value='currPrice * (1.5048*1000)' property='newPrice' action='set' />
<assign value='$NUMBER(newPrice,0)' property='newPrice' action='set' />
<assign value='((((( newPrice \ 500 ) + 1 ) * 500 ) - newPrice ) # 500)' property='diff' action='set' />
<assign value=' newPrice + diff' property='newPrice' action='set' />
<assign value='newPrice / 1000' property='newPrice' action='set' />
<assign value='newPrice' property='target.AmountUnit' action='set' />
<assign value='newPrice * source.{ZDF:ZDF10Quanity}' property='newPrice' action='set' />
<assign value='newPrice' property='target.AmountExtended' action='set' />
</false>
</if>
<assign value='source.{ZDF:ZDF10Quanity}' property='target.Quantity' action='set' />
<assign value='source.{ZDF:ZDF2LastName}' property='tpatientlastnm' action='set' />
<assign value='source.{ZDF:ZDF3FirstName}' property='tpatientfirstnm' action='set' />
<assign value='source.{ZDF:ZDF4MiddleName}' property='tpatientmiddlenm' action='set' />
<assign value='(tpatientlastnm_", "_tpatientfirstnm_" "_tpatientmiddlenm)' property='target.Name' action='set' />
<code>
<![CDATA[ 
	// Beaker will send MRN remove G prefix and leading zeros from mrn if sent by Regions
]]]]><![CDATA[></code>
<assign value='""' property='tempmrn' action='set' />
<assign value='""' property='tempmrn1' action='set' />
<assign value='""' property='inZDF16Mrn' action='set' />
<assign value='source.{ZDF:ZDF16MRN}' property='tempmrn' action='set' />
<assign value='$ZSTRIP(tempmrn,"&lt;","G")' property='tempmrn1' action='set' />
<assign value='$ZSTRIP(tempmrn1,"&lt;","0")' property='inZDF16Mrn' action='set' />
<code>
<![CDATA[ 
	// remove CDM prefix and leading zeros from Regions cdm
	// set cpt field and modifier to null
]]]]><![CDATA[></code>
<assign value='source.{ZDF:ZDF8ChargeCode}' property='tempcdm' action='set' />
<assign value='$ZSTRIP(tempcdm,"&lt;","CDM")' property='tempcdm1' action='set' />
<assign value='$ZSTRIP(tempcdm1,"&lt;","0")' property='tempcdm2' action='set' />
<assign value='tempcdm2' property='target.CDM' action='set' />
<code>
<![CDATA[ 
	// keep cpt and modifier on misc cdm 11403 and new code 30084999001
]]]]><![CDATA[></code>
<if condition='(tempcdm2="11403")||(tempcdm2="30084999001") ' >
<true>
<assign value='source.{ZDF:ZDF14CPTCode}' property='tmpcpt' action='set' />
<assign value='tmpcpt_"^CPT"' property='target.CPT' action='set' />
<assign value='source.{ZDF:ZDF15Modifier}' property='tmpCPTMod' action='set' />
<if condition='source.{ZDF:ZDF15Modifier}=""' >
<false>
<assign value='tmpCPTMod_"^CPTMOD"' property='target.CPTModifiers' action='set' />
</false>
</if>
</true>
<false>
<assign value='""' property='target.CPT' action='set' />
<assign value='""' property='target.CPTModifiers' action='set' />
</false>
</if>
<code>
<![CDATA[ 
	// remove M prefix if one exists
]]]]><![CDATA[></code>
<if condition='..StartsWith(source.{ZDF:ZDF13ServicePhyCode},"M")|| ..StartsWith(source.{ZDF:ZDF13ServicePhyCode},"E") ' >
<true>
<assign value='..SubString(source.{ZDF:ZDF13ServicePhyCode},2,8)' property='target.PerformingDoc' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF13ServicePhyCode}' property='target.PerformingDoc' action='set' />
</false>
</if>
<if condition='..StartsWith(source.{ZDF:ZDF12OrderingPhyCode},"M") || ..StartsWith(source.{ZDF:ZDF12OrderingPhyCode},"E") ' >
<true>
<assign value='..SubString(source.{ZDF:ZDF12OrderingPhyCode},2,8)' property='target.OrderedByDoc' action='set' />
</true>
<false>
<assign value='source.{ZDF:ZDF12OrderingPhyCode}' property='target.OrderedByDoc' action='set' />
</false>
</if>
<code>
<![CDATA[ 
	// ***************** Coding for Account and MRN ************************
	//  MRN
	// 1.  Use MRN if sent by Regions  (inZDF16Mrn)
	// 2.  Search for MRN using Account sent by Regions (inZDF1Account)
	//                                                  (inZDF1Accounta - leading zeros removed)
	// 3.  Search for MRN using Patient Name
	//
	//  Account
	// 1.  Use Account sent by Regions
	// 2.  Search for Account using MRN and DOS (inZDF1Dos)
	//          implies you have the MRN from above either 1 or 3 (but not 2)
	//
	//  MSH Values 
	//   MSH:21 / tFinalMRNfromWhere where MRN came from
	//                               NOMRN, MRNbyNAME, MRNbyFIN,  MRNSent
	//   MSH:22 / tFinalFINfromWhere where Account came from
	//                               NOFIN, FINbyMRN, FINSent
	//   MSH:23 / tFinalFINcount   Number of Fins
	//   MSH:24 / tPrimaryInsName  Name of Primary Insurance
	//   MSH:25 / tPrimaryInsType  Primary Insurance - MNMedicaid or OtherIns
	//
	//   target.MSHMRNFind          MRNnotFnd, MRNsent, MRNbyName, MRNbyAcct
	//   target.MRN
	//   target.Fin                "noacct"
	//
]]]]><![CDATA[></code>
<code>
<![CDATA[ 
	// strip leading zero on account numbers and set variable.
	// hold fin sent for later comparison against mrn/dos search		
]]]]><![CDATA[></code>
<assign value='source.{ZDF:ZDF1AccountNumber}' property='inZDF1AccountSent' action='set' />
<assign value='$ZSTRIP(inZDF1AccountSent,"&lt;","0")' property='inZDF1AccountSenta' action='set' />

<if condition='..StartsWith(source.{ZDF:ZDF1AccountNumber},"7")' >
<true>
<assign value='source.{ZDF:ZDF1AccountNumber}' property='inZDF1Account' action='set' />
<assign value='$ZSTRIP(inZDF1Account,"&lt;","0")' property='inZDF1Accounta' action='set' />
</true>
<false>
<assign value='""' property='inZDF1Accounta' action='set' />
</false>
</if>

<code>
<![CDATA[ 
    // ***************************
	// search for mrn if not sent
	// ***************************
]]]]><![CDATA[></code>
<assign value='""' property='tableMRNbyFin' action='set' />
<assign value='""' property='tableMRNbyName' action='set' />
<if condition='inZDF16Mrn = ""' >
<true>
<if condition='inZDF1Accounta = ""' >
<false>
<code>
<![CDATA[ 
    // find mrn by fin
       set tableMRNbyFin=##class(GC.CernerGetData2022).CernerGetPatientInfoByFin(inZDF1Accounta)
    // $$$TRACE("tableMRNbyFin= "_tableMRNbyFin)    
    ]]]]><![CDATA[></code>
</false>
</if>
</true>
</if>
<if condition='(inZDF16Mrn="")&amp;(tableMRNbyFin = "")' >
<true>
<code>
<![CDATA[ 
	// Using Patient Last,First Name and Middle Name to get MRN from PatientData table if unique
    //  $$$TRACE("tableMRNbyNameB4="_tableMRNbyName)
    set tableMRNbyName=##class(GC.CernerGetData2022).CernerGetPatientInfoByName(tpatientlastnm,tpatientfirstnm,tpatientmiddlenm)
    // $$$TRACE("tableMRNbyName="_tableMRNbyName)
	]]]]><![CDATA[></code>
</true>
</if>
<code>
<![CDATA[ 
    // ****************************************************
	// set PID-3 based on MRN sent or by MRN search result
	// ****************************************************
]]]]><![CDATA[></code>
<assign value='""' property='tFinalMRN' action='set' />
<assign value='""' property='tFinalMRNfromWhere' action='set' />
<if condition='inZDF16Mrn = ""' >
<true>
<if condition='tableMRNbyFin = ""' >
<true>
<if condition='tableMRNbyName = ""' >
<true>
<assign value='""' property='target.MRN' action='set' />
<assign value='"NOMRN"' property='tFinalMRNfromWhere' action='set' />
</true>
<false>
<assign value='tableMRNbyName' property='target.MRN' action='set' />
<assign value='tableMRNbyName' property='tFinalMRN' action='set' />
<assign value='"MRNbyNAME"' property='tFinalMRNfromWhere' action='set' />
</false>
</if>
</true>
<false>
<assign value='tableMRNbyFin' property='target.MRN' action='set' />
<assign value='tableMRNbyFin' property='tFinalMRN' action='set' />
<assign value='"MRNbyFIN"' property='tFinalMRNfromWhere' action='set' />
</false>
</if>
</true>
<false>
<assign value='inZDF16Mrn' property='target.MRN' action='set' />
<assign value='inZDF16Mrn' property='tFinalMRN' action='set' />
<assign value='"MRNSent"' property='tFinalMRNfromWhere' action='set' />
</false>
</if>
<code>
<![CDATA[ 
    // ***************************
	// search for fin if not sent
	// search if sent - verify match on fins
	// ***************************
]]]]><![CDATA[></code>
<assign value='""' property='tableFINbyMRNDos' action='set' />
<assign value='""' property='tableFINbyMRNDosCount' action='set' />
<if condition='inZDF1Accounta = ""' >
<true>
<if condition='tFinalMRN = ""' >
<false>
<code>
<![CDATA[ 
    //  routine adds a comma between fin followed by a count of fins seperated by verbiage Count=
    //   i.e. 70037267,70116182,70204540,70214105,70332251Count=5
    set tableFINbyMRNDos=##class(GC.CernerGetData2022).CernerGetFinByMRNDos(tFinalMRN,tZDF6DOS)
    // $$$TRACE("tableFINbyMRNDos after= "_tableFINbyMRNDos)
	]]]]><![CDATA[></code>
</false>
</if>
</true>
</if>
<assign value='""' property='tableFINbyMRNDosCount' action='set' />
<assign value='""' property='tableFINbyMRNDosFin' action='set' />
<assign value='$PIECE(tableFINbyMRNDos,"Count=",1)' property='tableFINbyMRNDosFin' action='set' />
<assign value='$PIECE(tableFINbyMRNDos,"Count=",2)' property='tableFINbyMRNDosCount' action='set' />
<code>
<![CDATA[ 
    // *****************************************************
	// set PID-18 based on FIN sent or by MRN search result
	// *****************************************************
]]]]><![CDATA[></code>
<assign value='""' property='tFinalFIN' action='set' />
<assign value='""' property='tFinalFINfromWhere' action='set' />
<assign value='""' property='tFinalFINcount' action='set' />
<if condition='inZDF1Accounta = ""' >
<true>
<if condition='tableFINbyMRNDosFin = ""' >
<true>
<assign value='""' property='target.Fin' action='set' />
<assign value='"NOFIN"' property='tFinalFINfromWhere' action='set' />
<assign value='"0"' property='tFinalFINcount' action='set' />
</true>
<false>
<assign value='tableFINbyMRNDosFin' property='target.Fin' action='set' />
<assign value='tableFINbyMRNDosFin' property='tFinalFIN' action='set' />
<assign value='"FINbyMRN"' property='tFinalFINfromWhere' action='set' />
<assign value='tableFINbyMRNDosCount' property='tFinalFINcount' action='set' />
</false>
</if>
</true>
<false>
<assign value='inZDF1Accounta' property='target.Fin' action='set' />
<assign value='inZDF1Accounta' property='tFinalFIN' action='set' />
<assign value='"FINSent"' property='tFinalFINfromWhere' action='set' />
<assign value='"1"' property='tFinalFINcount' action='set' />
</false>
</if>
<code>
<![CDATA[ 
    // ********************************************************
	// find insurance based on fin - 1=primary, 2=secodary etc
	// ********************************************************
]]]]><![CDATA[></code>
<assign value='""' property='tableInsName' action='set' />
<if condition='tFinalFIN = ""' >
<false>
<code>
<![CDATA[ 
     // $$$TRACE("b4insnamecall= "_tFinalFIN)
     set tableInsName=##class(GC.CernerGetData2022).CernerGetFinInsurance(tFinalFIN,"1")
    // $$$TRACE("tableInsName after= "_tableInsName)
	]]]]><![CDATA[></code>
</false>
</if>


<code>
<![CDATA[ 
    // ***************************
	// search for fin by mrn/dos when fin sent
	// compare result for difference
	// ***************************
]]]]><![CDATA[></code>
<assign value='""' property='tableFINSentSearchbyMRNDos' action='set' />
<assign value='""' property='tableFINSentSearchbyMRNDosCount' action='set' />
<if condition='inZDF1AccountSenta = ""' >
<false>
<if condition='tFinalMRN = ""' >
<false>
<code>
<![CDATA[ 
    //  routine adds a comma between fin followed by a count of fins seperated by verbiage Count=
    //   i.e. 70037267,70116182,70204540,70214105,70332251Count=5
    set tableFINSentSearchbyMRNDos=##class(GC.CernerGetData2022).CernerGetFinByMRNDos(tFinalMRN,tZDF6DOS)
    // $$$TRACE("tableFINbyMRNDos after= "_tableFINbyMRNDos)
	]]]]><![CDATA[></code>
</false>
</if>
</false>
</if>
<assign value='""' property='tableFINSentSearchbyMRNDosCount' action='set' />
<assign value='""' property='tableFINSentSearchbyMRNDosFin' action='set' />
<assign value='$PIECE(tableFINSentSearchbyMRNDos,"Count=",1)' property='tableFINSentSearchbyMRNDosFin' action='set' />
<assign value='$PIECE(tableFINSentSearchbyMRNDos,"Count=",2)' property='tableFINSentSearchbyMRNDosCount' action='set' />

<assign value='""' property='tfinmatchdiff' action='set' />

<if condition='inZDF1AccountSenta = ""' >
<true>
<assign value='""' property='tfinmatchdiff' action='set' />
</true>
<false>
<if condition='inZDF1AccountSenta = tableFINSentSearchbyMRNDosFin' >
<true>
<assign value='"No"' property='tfinmatchdiff' action='set' />
</true>
<false>
<if condition='(tableFINSentSearchbyMRNDosCount)&gt;"1"' >
<true>
<if condition='..In(inZDF1AccountSenta,tableFINSentSearchbyMRNDosFin)' >
<true>
<assign value='"No"' property='tfinmatchdiff' action='set' />
</true>
<false>
<assign value='"Yes"' property='tfinmatchdiff' action='set' />
</false>
</if>
</true>
<false>
<if condition='tableFINSentSearchbyMRNDosFin=inZDF1AccountSenta' >
<true>
<assign value='"No"' property='tfinmatchdiff' action='set' />
</true>
<false>
<assign value='"Yes"' property='tfinmatchdiff' action='set' />
</false>
</if>
</false>
</if>
</false>
</if>
</false>
</if>


<code>
<![CDATA[ 
	// ***************** Set MSH Values ************************
	//
	//  MSH Values 
	//   MSH:21 / tFinalMRNfromWhere where MRN came from
	//                               NOMRN, MRNbyNAME, MRNbyFIN,  MRNSent
	//   MSH:22 / tFinalFINfromWhere where Account came from
	//                               NOFIN, FINbyMRN, FINSent
	//   MSH:23 / tFinalFINcount   Number of Fins
	//   MSH:24 / tPrimaryInsName  Name of Primary Insurance
	//   MSH:25 / tPrimaryInsType  Primary Insurance - MNMedicaid or OtherIns
	//
	//   tableFINSentSearchbyMRNDosFin   table lookup when fin sent by regions
	//   inZDF1AccountSenta         orig / actual fin sent - change if not 7xxxxxxx
	//   tfinmatchdiff                 yes or no - lookup and value sent match
	//                              or included if multiple fins returned
	//
]]]]><![CDATA[></code>
<assign value='""' property='tPrimaryInsType' action='set' />
<assign value='tableInsName' property='tPrimaryInsName' action='set' />
<if condition='tableInsName="MN MED ASSISTANCE"' >
<true>
<assign value='"MNMedicaid"' property='tPrimaryInsType' action='set' />
</true>
<false>
<assign value='"OtherIns"' property='tPrimaryInsType' action='set' />
</false>
</if>
<assign value='tFinalMRNfromWhere' property='target.MSHMRNFind' action='set' />
<assign value='tFinalFINfromWhere' property='target.MSHFINFind' action='set' />
<assign value='tFinalFINcount' property='target.FINFindCount' action='set' />
<assign value='tPrimaryInsName' property='target.PrimInsName' action='set' />
<assign value='tPrimaryInsType' property='target.PrimInsType' action='set' />
<assign value='tfinmatchdiff' property='target.FinDifference' action='set' />
<assign value='inZDF1AccountSenta' property='target.OriginalFinSent' action='set' />
<assign value='tableFINSentSearchbyMRNDosFin' property='target.FinDiffLookup' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.Regions2CernerCredit">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64337,39970.817696</TimeChanged>
<TimeCreated>61636,36544.001137</TimeCreated>
<DependsOn>EnsLib.HL7.Message,GC.Regions.DFT.CreditDFT</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='GC.Regions.DFT.CreditDFT' sourceDocType='231.Cerner:DFT_P03' create='new' language='objectscript' >
<code>
<![CDATA[ 
	// Last Moved to Prod - 09/23/2016 
	// Last Updated 09/16/2016
	// Created: 09/16/2016  Al Johnson  
	// Desc: Format Credits for email
]]]]><![CDATA[></code>
<assign value='source.{MSH:DateTimeOfMessage}' property='target.HL7MessageDate' action='set' />
<assign value='source.{PID:PatientName(1).familylastname}_", "_source.{PID:PatientName(1).givenname}' property='target.Name' action='set' />
<assign value='source.{FT1grp(1).FT1:TransactionCode.identifier}' property='target.CDM' action='set' />
<assign value='source.{PID:PatientIdentifierList(1).ID}' property='target.MRN' action='set' />
<assign value='source.{PID:PatientAccountNumber.ID}' property='target.Account' action='set' />
<assign value='source.{FT1grp(1).FT1:TransactionQuantity}' property='target.Quantity' action='set' />
<assign value='source.{FT1grp(1).FT1:TransactionAmountExtended}' property='target.Amount' action='set' />
<assign value='source.{FT1grp(1).FT1:TransactionDate}' property='target.DateOfService' action='set' />
<assign value='source.{FT1grp(1).FT1:ProcedureCode}' property='target.CPT' action='set' />
<assign value='""' property='tmpmodifier' action='set' />
<foreach property='source.{FT1grp(1).FT1:ProcedureCodeModifier()}' key='k1' >
<if condition='k1=1' >
<true>
<assign value='source.{FT1grp(1).FT1:ProcedureCodeModifier(k1).identifier}' property='tmpmodifier' action='set' />
</true>
<false>
<assign value='tmpmodifier_"~"_source.{FT1grp(1).FT1:ProcedureCodeModifier(k1).identifier}' property='tmpmodifier' action='set' />
</false>
</if>
</foreach>
<assign value='tmpmodifier' property='target.CPTModifiers' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.RelayHealthBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64769,45160.971235</TimeChanged>
<TimeCreated>63938,41431.298872</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="CernerAdtsforRelayHealth" effectiveBegin="" effectiveEnd="">
<rule name="Relay Health ADT" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="HL7.O.RelayHealthAdt"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.RelayHealthBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65440,49954.535714</TimeChanged>
<TimeCreated>63938,41431.298872</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="CernerAdtsforRelayHealth" effectiveBegin="" effectiveEnd="">
<rule name="Block Test Patients - ADT" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="Archive">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="Send to BO" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="RelayHealth.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.RelayHealthBsoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64326,7376.593927</TimeChanged>
<TimeCreated>63938,41431.298872</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="CernerAdtsforRelayHealth" effectiveBegin="" effectiveEnd="">
<rule name="blocking test patient msgs" disabled="false">
<constraint name="source" value="HL7.S.CrRelayHealthAdt"></constraint>
<when condition="(HL7.{PID:PatientIdentifierList(1).ID} In &quot;507424,515173,600000,600001&quot;)">
<return></return>
</when>
</rule>
<rule name="Archive">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="New for Cerner" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="HL7.O.RelayHealthAdt"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.RelayHealthX12RoutingRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64355,61015.04048</TimeChanged>
<TimeCreated>64063,35930.250774</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.MsgRouter.VDocRuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.MsgRouter.VDocRoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="">
<constraint name="source" value="X12.S.CrRelayHealth270"></constraint>
<constraint name="msgClass" value="EnsLib.EDI.X12.Document"></constraint>
<when condition="1">
<send transform="" target="X12.O.RelayHealth270"></send>
<send transform="" target="File.O.ArchiveInboundX12"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="source" value="X12.S.RelayHealth271"></constraint>
<constraint name="msgClass" value="EnsLib.EDI.X12.Document"></constraint>
<when condition="1">
<send transform="" target="X12.O.CrRelayHealth271"></send>
<send transform="" target="File.O.ArchiveInboundX12"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.RgnsChargesBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>66658,37151.567979</TimeChanged>
<TimeCreated>63901,52869.534497</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="" disabled="false">
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="GLT_DFT"></constraint>
<when condition="(HL7.{ZDF:ZDF11ExtAmount}!=&quot;0&quot;)&amp;&amp;(HL7.{ZDF:ZDF7ChargeCreditCode}=&quot;CR&quot;)&amp;&amp;((HL7.{ZDF:ZDF8ChargeCode}=&quot;CDM00011403&quot;)||(HL7.{ZDF:ZDF8ChargeCode}=&quot;30084999001&quot;))">
<send transform="GC.RegLab2CernerGDFTv4,GC.Regions2CernerCredit" target="Email.O.AlertEmailRegCredit"></send>
</when>
</rule>
<rule name="DFTs from Reglab" disabled="true">
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="GLT_DFT"></constraint>
<when condition="(HL7.{ZDF:ZDF11ExtAmount}!=&quot;0&quot;)">
<send transform="GC.RegLab2CernerGDFTv2" target="HL7.O.CrRgnsLabDft"></send>
<send transform="GC.Regions2CernerChargeListv2" target="File.O.RegionsCharges"></send>
<return></return>
</when>
</rule>
<rule name="DFTs from Reglab" disabled="false">
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="GLT_DFT"></constraint>
<when condition="(HL7.{ZDF:ZDF11ExtAmount}!=&quot;0&quot;)">
<send transform="GC.RegLab2CernerGDFTv4" target="HL7.O.CrRgnsLabDft"></send>
<send transform="GC.Regions2CernerChargeListv4" target="File.O.RegionsChargesv3"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.RgnsChargesBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65440,50009.997537</TimeChanged>
<TimeCreated>63901,52869.534497</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="CDM from Reglab-Update Prod Cerner Table- Stop Send CDM to Affinity" disabled="false">
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="GLT_CDM"></constraint>
<when condition="1">
<send transform="GC.Regions.RegionsCDMDeptLoadTBL" target="File.O.ArchiveInbound"></send>
<return></return>
</when>
</rule>
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="GLT_DFT"></constraint>
<when condition="SubString(HL7.{ZDF:8},1,3) IN &quot;PAY,ADJ,CRE&quot;">
<send transform="" target="File.O.ArchiveStopped"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="GLT_DFT"></constraint>
<when condition="1">
<send transform="" target="RgnsCharges.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.RgnsChargesBsoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64378,52757.385622</TimeChanged>
<TimeCreated>63901,52869.534497</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="CDM from Reglab-Update Prod Cerner Table-Send CDM to Affinity" disabled="false">
<constraint name="source" value="HL7.S.RgnsLabDft"></constraint>
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="GLT_CDM"></constraint>
<when condition="1">
<send transform="GC.Regions.RegionsCDMDeptLoadTBL" target="zzRegLab.O.Qmint02CdmDft"></send>
<return></return>
</when>
</rule>
<rule name="DOS &lt; 20170212" disabled="false">
<constraint name="source" value="HL7.S.RgnsLabDft"></constraint>
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="GLT_DFT"></constraint>
<when condition="(HL7.{ZDF:ZDF6DOS}&lt;&quot;20170212&quot;)">
<send transform="" target="zzRegLab.O.Qmint02CdmDft"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="GLT_DFT"></constraint>
<when condition="SubString(HL7.{ZDF:8},1,3) IN &quot;PAY,ADJ,CRE&quot;">
<send transform="" target="File.O.ArchiveStopped"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="GLT_DFT"></constraint>
<when condition="(DoesNotStartWith(HL7.{ZDF:ZDF8ChargeCode},&quot;4&quot;))&amp;&amp;(HL7.{ZDF:ZDF11ExtAmount}!=&quot;0&quot;)&amp;&amp;(HL7.{ZDF:ZDF7ChargeCreditCode}=&quot;CR&quot;)&amp;&amp;(HL7.{ZDF:ZDF8ChargeCode}=&quot;CDM00011403&quot;)">
<send transform="GC.RegLab2CernerGDFTv1,GC.Regions2CernerCredit" target="Email.O.AlertEmailRegCredit"></send>
</when>
</rule>
<rule name="DFTs from Reglab" disabled="false">
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="GLT_DFT"></constraint>
<when condition="(DoesNotStartWith(HL7.{ZDF:ZDF8ChargeCode},&quot;4&quot;))&amp;&amp;(HL7.{ZDF:ZDF11ExtAmount}!=&quot;0&quot;)">
<send transform="GC.RegLab2CernerGDFTv1" target="HL7.O.CrRgnsLabDft"></send>
<send transform="GC.Regions2CernerChargeList" target="File.O.RegionsCharges"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.RgnsDietBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64931,42135.124428</TimeChanged>
<TimeCreated>63881,40500.982738</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A02,ADT_A04,ADT_A06,ADT_A07,ADT_A08,ADT_A23,ADT_A28,ADT_A31"></constraint>
<when condition="HL7.{PV1:DischargeDateTime.timeofanevent}!=&quot;&quot;">
<return></return>
</when>
</rule>
<rule name="ADT-fix language" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A02,ADT_A03,ADT_A04,ADT_A06,ADT_A07,ADT_A08,ADT_A11,ADT_A13,ADT_A23,ADT_A28,ADT_A31,ADT_A34,ADT_A35,ADT_A44"></constraint>
<when condition="1">
<send transform="GC.Cerner2RegDietADT" target="HL7.O.RgnsDietAdtOrm"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="1">
<send transform="GC.Cerner2RegDietORM" target="HL7.O.RgnsDietAdtOrm"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.RgnsDietBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>66261,31502.780192</TimeChanged>
<TimeCreated>63881,40500.982738</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="A34,35,44 Missing MRG Segment" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34,ADT_A35,ADT_A44"></constraint>
<when condition="DoesNotContain(HL7.{MRG})">
<return></return>
</when>
</rule>
<rule name="Block Test Patients - ADT and ORM" disabled="true">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="HL7.{ORCgrp(1).OBRgrp.OBR:4.1}=&quot;SKIP&quot;">
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="RgnsDiet.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.RgnsDietBsoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64707,29564.605921</TimeChanged>
<TimeCreated>63881,40500.982738</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="Blocking test patient msgs" disabled="false">
<constraint name="source" value="Bs.P.RgnsDiet"></constraint>
<when condition="(HL7.{PID:PatientIdentifierList(1).ID} In &quot;507424,515173,600000,600001&quot;)">
<return></return>
</when>
</rule>
<rule name="ADT-fix language" disabled="false">
<constraint name="source" value="Bs.P.RgnsDiet"></constraint>
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A02,ADT_A03,ADT_A04,ADT_A06,ADT_A07,ADT_A08,ADT_A11,ADT_A13,ADT_A23,ADT_A28,ADT_A31,ADT_A34,ADT_A35,ADT_A44"></constraint>
<when condition="1">
<send transform="GC.Cerner2RegDietADT" target="HL7.O.RgnsDietAdtOrm"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="source" value="Bs.P.RgnsDiet"></constraint>
<when condition="1">
<send transform="" target="HL7.O.RgnsDietAdtOrm"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.RgnsLabBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65101,81004.20113</TimeChanged>
<TimeCreated>63901,52869.534497</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="warning orm on pre reg" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="HL7.{PV1:PatientType} StartsWith &quot;Pre&quot;">
<send transform="" target="Email.O.AlertEmailRegLab"></send>
</when>
</rule>
<rule name="micro result" disabled="false">
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="(Contains(HL7.{OBR:24},&quot;MB&quot;))">
<send transform="GC.RegLab2CernerORUmb" target="HL7.O.CrRgnsLabOrmOru"></send>
<return></return>
</when>
</rule>
<rule name="copath result" disabled="false">
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="(Contains(HL7.{OBR:24},&quot;CoPath&quot;))">
<send transform="GC.RegLab2CernerORUCoPath" target="HL7.O.CrRgnsLabOrmOru"></send>
<return></return>
</when>
</rule>
<rule name="blood bank" disabled="false">
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="(Contains(HL7.{OBR:24},&quot;BB&quot;))">
<send transform="GC.RegLab2CernerORUbb" target="HL7.O.CrRgnsLabOrmOru"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="(Contains(HL7.{OBR:24},&quot;SO&quot;))">
<send transform="GC.RegLab2CernerORUSendOut" target="HL7.O.CrRgnsLabOrmOru"></send>
<return></return>
</when>
</rule>
<rule name="Specific Tests thru SendOut Logic" disabled="false">
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="HL7.{OBR:4.2} In &quot;TBGLD,QFT4&quot;">
<send transform="GC.RegLab2CernerORUSendOut" target="HL7.O.CrRgnsLabOrmOru"></send>
<return></return>
</when>
</rule>
<rule name="GenLab" disabled="false">
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="1">
<send transform="GC.RegLab2CernerORUGenlab" target="HL7.O.CrRgnsLabOrmOru"></send>
<return></return>
</when>
</rule>
<rule name="PreReg from Cerner" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A02,ADT_A03,ADT_A04,ADT_A06,ADT_A05,ADT_A07,ADT_A08,ADT_A09,ADT_A10,ADT_A11,ADT_A12,ADT_A13,ADT_A15,ADT_A14,ADT_A16,ADT_A17,ADT_A21,ADT_A22,ADT_A24,ADT_A23,ADT_A25,ADT_A26,ADT_A28,ADT_A29,ADT_A31,ADT_A34,ADT_A35,ADT_A38,ADT_A44,ADT_ADSC"></constraint>
<when condition="(Document.{PV1:PatientType} StartsWith &quot;Pre&quot;)">
<return></return>
</when>
</rule>
<rule name="ADTs from Cerner" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A02,ADT_A03,ADT_A04,ADT_A05,ADT_A06,ADT_A07,ADT_A08,ADT_A09,ADT_A10,ADT_A11,ADT_A12,ADT_A13,ADT_A14,ADT_A15,ADT_A16,ADT_A17,ADT_A21,ADT_A22,ADT_A23,ADT_A24,ADT_A25,ADT_A26,ADT_A28,ADT_A29,ADT_A31,ADT_ADSC,ADT_A44,ADT_A38,ADT_A35,ADT_A34"></constraint>
<when condition="1">
<send transform="GC.Cerner2RegionsLabADT" target="HL7.O.RgnsLabAdtOrm"></send>
<return></return>
</when>
</rule>
<rule name="Pathology ORM TO Regions" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="HL7.{ORCgrp(1).OBRgrp.OBR:24}=&quot;AP&quot;">
<send transform="GC.Cerner2RegLabORMpath" target="HL7.O.RgnsLabAdtOrm"></send>
<return></return>
</when>
</rule>
<rule name="Micro ORM TO Regions" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="HL7.{ORCgrp(1).OBRgrp.OBR:24}=&quot;Micro&quot;">
<send transform="GC.Cerner2RegLabORMmicro" target="HL7.O.RgnsLabAdtOrm"></send>
<return></return>
</when>
</rule>
<rule name="Blood Bank ORM TO Regions" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="HL7.{ORCgrp(1).OBRgrp.OBR:24}=&quot;BB&quot;">
<send transform="GC.Cerner2RegLabORMblood" target="HL7.O.RgnsLabAdtOrm"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="HL7.{ORCgrp(1).OBRgrp.OBR:4.2}=&quot;RMTST&quot;">
<send transform="GC.Cerner2RegLabORMProcRMTST" target="HL7.O.RgnsLabAdtOrm"></send>
<return></return>
</when>
</rule>
<rule name="GenLab ORM TO Regions" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="GC.Cerner2RegLabORMgenlab" target="HL7.O.RgnsLabAdtOrm"></send>
</when>
</rule>
<rule name="LabInitialedORM or results FROM Regions" disabled="false">
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="ORM_O01,ORM_O02"></constraint>
<when condition="(Document.{OBR:DiagnosticservicesectionID}!=&quot;Z&quot;)||(Document.{OBR:4.2} In &quot;BFT,CSFT&quot;)">
<send transform="GC.RegLab2CernerORM" target="HL7.O.CrRgnsLabOrmOru"></send>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.RgnsLabBoRuleBeaker">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>66186,31077.081009</TimeChanged>
<TimeCreated>63901,52869.534497</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Sunquest Order Starts Alpha" disabled="true">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="(HL7.{ORCgrp(1).OBRgrp.OBR:20}!=&quot;&quot;)&amp;&amp;(Substring(HL7.{ORCgrp(1).OBRgrp.OBR:20},1,1) In &quot;A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z&quot;)">
<return></return>
</when>
</rule>
<rule name="warning orm on pre reg" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="(Document.{PV1:PatientType} StartsWith &quot;Pre&quot;)">
<send transform="" target="Email.O.AlertEmailRegLab"></send>
</when>
</rule>
<rule name="PreReg from Cerner Only Allow A05" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A02,ADT_A03,ADT_A04,ADT_A06,ADT_A07,ADT_A08,ADT_A09,ADT_A10,ADT_A11,ADT_A12,ADT_A13,ADT_A14,ADT_A15,ADT_A16,ADT_A17,ADT_A21,ADT_A22,ADT_A23,ADT_A24,ADT_A25,ADT_A26,ADT_A28,ADT_A29,ADT_A31,ADT_A34,ADT_A38,ADT_A35,ADT_A44,ADT_ADSC"></constraint>
<when condition="(Document.{PV1:PatientType} StartsWith &quot;Pre&quot;)">
<return></return>
</when>
</rule>
<rule name="Only Allow Specific A05 " disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A05"></constraint>
<when condition="(Document.{PV1:PatientType} != (&quot;PreInpatient&quot;))&amp;&amp;(Document.{PV1:PatientType} != (&quot;PreDaySurgery&quot;))&amp;&amp;(Document.{PV1:PatientType} != (&quot;PreOutpatientinabed&quot;))&amp;&amp;(Document.{PV1:PatientType} != (&quot;PreOvernight Outpatient&quot;))">
<return></return>
</when>
</rule>
<rule name="ADTs from Cerner" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A02,ADT_A03,ADT_A04,ADT_A05,ADT_A06,ADT_A07,ADT_A08,ADT_A09,ADT_A10,ADT_A11,ADT_A12,ADT_A13,ADT_A14,ADT_A15,ADT_A16,ADT_A17,ADT_A21,ADT_A22,ADT_A23,ADT_A24,ADT_A25,ADT_A26,ADT_A28,ADT_A29,ADT_A31,ADT_ADSC,ADT_A44,ADT_A38,ADT_A35,ADT_A34"></constraint>
<when condition="(Document.{PV1:3.4} In &quot;BRN,GCH,GCSH,LTC,MKO,MGC,MTK,PGC,STP&quot;)">
<send transform="GC.Cerner2RegLabBkrADT" target="RgnsLab.P.boBeakerAdt"></send>
<return></return>
</when>
</rule>
<rule name="Cerner Cancel Originated From Regions" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="(HL7.{ORCgrp(1).ORC:1}=&quot;CA&quot;)&amp;&amp;(HL7.{ORCgrp(1).ORC:18.1}=&quot;ESI Default&quot;)">
<send transform="" target="File.O.ArchiveStopped"></send>
<return></return>
</when>
</rule>
<rule name="SN from Beaker table data" disabled="false">
<constraint name="docCategory" value="251.Regions"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="HL7.{ORCgrp(1).ORC:1}=&quot;SN&quot;">
<send transform="GC.RegLab2CernerBkrORMLIOsn" target="HL7.O.CrRgnsLabBeakerOru"></send>
<return></return>
</when>
</rule>
<rule name="NA from Cerner" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="HL7.{ORCgrp(1).ORC:1}=&quot;NA&quot;">
<send transform="GC.RegLab2CernerBkrORMLIOna,GC.Cerner2RegLabBkrORMgenlab" target="HL7.O.RgnsLabAdtOrmBeaker"></send>
<return></return>
</when>
</rule>
<rule name="SC Inprocess for LIO" disabled="false">
<constraint name="docCategory" value="251.Regions"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="((HL7.{ORCgrp(1).ORC:1}=&quot;SC&quot;)&amp;&amp;(HL7.{ORCgrp(1).OBRuniongrp.OBRunion.OBR:2.1}=HL7.{ORCgrp(1).OBRuniongrp.OBRunion.OBR:3.1}))">
<send transform="" target="RgnsLab.P.boBeakerHang"></send>
<return></return>
</when>
</rule>
<rule name="ORM status from Regions" disabled="false">
<constraint name="docCategory" value="251.Regions"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="1">
<send transform="GC.RegLab2CernerBkrORM" target="HL7.O.CrRgnsLabBeakerOru"></send>
<return></return>
</when>
</rule>
<rule name="Pathology ORM TO Regions" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="HL7.{ORCgrp(1).OBRgrp.OBR:24}=&quot;AP&quot;">
<send transform="GC.Cerner2RegLabBkrORMpath" target="HL7.O.RgnsLabAdtOrmBeaker"></send>
<return></return>
</when>
</rule>
<rule name="Micro ORM TO Regions" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="HL7.{ORCgrp(1).OBRgrp.OBR:24}=&quot;Micro&quot;">
<send transform="GC.Cerner2RegLabBkrORMmicro" target="HL7.O.RgnsLabAdtOrmBeaker"></send>
<return></return>
</when>
</rule>
<rule name="GenLab ORM TO Regions" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="1">
<send transform="GC.Cerner2RegLabBkrORMgenlab" target="HL7.O.RgnsLabAdtOrmBeaker"></send>
</when>
</rule>
<rule name="Panel Result From Regions - OBR 50.1 value" disabled="true">
<constraint name="docCategory" value="251.Regions"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="HL7.{PIDgrpgrp(1).ORCgrp(1).OBR:50.1}!=&quot;&quot;">
<send transform="GC.RegLab2CernerBkrORUPanel" target="HL7.O.CrRgnsLabBeakerOru"></send>
</when>
</rule>
<rule name="RegLab ORU Cancel change to ORM Cancel" disabled="true">
<constraint name="docCategory" value="251.Regions"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="HL7.{PIDgrpgrp(1).ORCgrp(1).OBR:25}=&quot;X&quot;">
<send transform="GC.RegLab2CernerBkrORUCancel" target="HL7.O.CrRgnsLabBeakerOru"></send>
<return></return>
</when>
</rule>
<rule name="micro 2.5.1" disabled="false">
<constraint name="docCategory" value="251.Regions"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="(Contains(HL7.{PIDgrpgrp(1).ORCgrp(1).OBR:24},&quot;MB&quot;))">
<send transform="GC.RegLab2CernerBkrORUmb" target="HL7.O.CrRgnsLabBeakerOru"></send>
<return></return>
</when>
</rule>
<rule name="copath result 2.5.1" disabled="false">
<constraint name="docCategory" value="251.Regions"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="(Contains(HL7.{PIDgrpgrp(1).ORCgrp(1).OBR:24},&quot;COPATH&quot;))">
<send transform="GC.RegLab2CernerBkrORUCoPath" target="HL7.O.CrRgnsLabBeakerOru"></send>
<return></return>
</when>
</rule>
<rule name="SendOut" disabled="false">
<constraint name="docCategory" value="251.Regions"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="(Contains(HL7.{PIDgrpgrp(1).ORCgrp(1).OBR:24},&quot;SO&quot;))">
<send transform="GC.RegLab2CernerBkrORUSendOut" target="HL7.O.CrRgnsLabBeakerOru"></send>
<return></return>
</when>
</rule>
<rule name="Specific Tests thru SendOut Logic 2.5.1" disabled="false">
<constraint name="docCategory" value="251.Regions"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="HL7.{PIDgrpgrp(1).ORCgrp(1).OBR:4.1} In &quot;QFT4&quot;">
<send transform="GC.RegLab2CernerBkrORUQFT4" target="HL7.O.CrRgnsLabBeakerOru"></send>
<return></return>
</when>
</rule>
<rule name="GenLab 2.5.1" disabled="false">
<constraint name="docCategory" value="251.Regions"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="1">
<send transform="GC.RegLab2CernerBkrORUGenlab" target="HL7.O.CrRgnsLabBeakerOru"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.RgnsLabBoRuleBeakerAdt">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65960,39092.147685</TimeChanged>
<TimeCreated>63901,52869.534497</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Outpatient from Cerner" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A03,ADT_A04,ADT_A05,ADT_A06,ADT_A07,ADT_A08,ADT_A09,ADT_A10,ADT_A11,ADT_A12,ADT_A13,ADT_A14,ADT_A15,ADT_A16,ADT_A17,ADT_A21,ADT_A22,ADT_A23,ADT_A24,ADT_A25,ADT_A26,ADT_A28,ADT_A29,ADT_A31,ADT_A34,ADT_A38,ADT_A35,ADT_A44,ADT_ADSC"></constraint>
<when condition="Document.{PV1:18}=&quot;InfusionTherapy&quot;">
<send transform="" target="HL7.O.RgnsLabAdtOrmBeaker"></send>
<return></return>
</when>
</rule>
<rule name="ADTs from Cerner" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A02,ADT_A03,ADT_A04,ADT_A05,ADT_A06,ADT_A07,ADT_A08,ADT_A09,ADT_A10,ADT_A11,ADT_A12,ADT_A13,ADT_A14,ADT_A15,ADT_A16,ADT_A17,ADT_A21,ADT_A22,ADT_A23,ADT_A24,ADT_A25,ADT_A26,ADT_A28,ADT_A29,ADT_A31,ADT_ADSC,ADT_A44,ADT_A38,ADT_A35,ADT_A34"></constraint>
<when condition="Document.{PV1:2}=&quot;I&quot;">
<send transform="" target="HL7.O.RgnsLabAdtOrmBeaker"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.RgnsLabBoRuleBeakerHang">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65904,53376.064345</TimeChanged>
<TimeCreated>63901,52869.534497</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="SC Inprocess for LIO" disabled="false">
<constraint name="docCategory" value="251.Regions"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="((HL7.{ORCgrp(1).ORC:1}=&quot;SC&quot;)&amp;&amp;(HL7.{ORCgrp(1).OBRuniongrp.OBRunion.OBR:2.1}=HL7.{ORCgrp(1).OBRuniongrp.OBRunion.OBR:3.1}))">
<send transform="GC.RegLab2CernerBkrORMLIOsc" target="HL7.O.CrRgnsLabBeakerOru"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.RgnsLabBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65102,3188.514955</TimeChanged>
<TimeCreated>63901,52869.534497</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="RemoveTestPatients" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="(Substring(HL7.{PID:PatientIdentifierList(1).ID},2,7) In &quot;507424,515173,600000,600001,613174&quot;)">
<return></return>
</when>
</rule>
<rule name="stop adt to sunquest" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A02,ADT_A03,ADT_A04,ADT_A05,ADT_A06,ADT_A07,ADT_A08,ADT_A09,ADT_A10,ADT_A11,ADT_A12,ADT_A13,ADT_A14,ADT_A15,ADT_A16,ADT_A17,ADT_A21,ADT_A22,ADT_A23,ADT_A24,ADT_A25,ADT_A26,ADT_A28,ADT_A29,ADT_A31,ADT_A34,ADT_A35,ADT_A38,ADT_A44"></constraint>
<when condition="1">
<return></return>
</when>
</rule>
<rule name="stop beaker orders" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="(HL7.{ORCgrp(1).OBRgrp.OBR:20}=&quot;&quot;)||(HL7.{ORCgrp(1).OBRgrp.OBR:20}!=&quot;&quot;)&amp;&amp;(Substring(HL7.{ORCgrp(1).OBRgrp.OBR:20},1,1) NotIn &quot;A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z&quot;)">
<return></return>
</when>
</rule>
<rule name="A34,35,44 Missing MRG Segment" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34,ADT_A35,ADT_A44"></constraint>
<when condition="DoesNotContain(HL7.{MRG})">
<return></return>
</when>
</rule>
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="RgnsLab.P.bo"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="22.RegLab"></constraint>
<when condition="1">
<send transform="" target="RgnsLab.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.RgnsLabBsRuleBeaker">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>66592,54514.05883</TimeChanged>
<TimeCreated>63901,52869.534497</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Block Test Patients - ADT and ORM" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="Block Test Patients - ORM" disabled="false">
<constraint name="docCategory" value="251.Regions"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PIDgrp.PID:PatientIdentifierList(1).IDNumber})">
<return></return>
</when>
</rule>
<rule name="Block Test Patients - ORU" disabled="false">
<constraint name="docCategory" value="251.Regions"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PIDgrpgrp(1).PIDgrp.PID:PatientIdentifierList(1).IDNumber})">
<return></return>
</when>
</rule>
<rule name="A34,35,44 Missing MRG Segment" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34,ADT_A35,ADT_A44"></constraint>
<when condition="DoesNotContain(HL7.{MRG})">
<return></return>
</when>
</rule>
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="Schema 231 From Cerner" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="RgnsLab.P.boBeaker"></send>
<return></return>
</when>
</rule>
<rule name="Schema 251 From Regions" disabled="false">
<constraint name="docCategory" value="251.Regions"></constraint>
<when condition="1">
<send transform="" target="RgnsLab.P.boBeaker"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.RgnsLabBsoHoldRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64330,64896.634296</TimeChanged>
<TimeCreated>63901,52869.534497</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="QCPR Order Nbrs" disabled="false">
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="1">
<send transform="" target="File.O.ArchiveStopped"></send>
<send transform="" target="zzRegLab.O.Qmint02OrmOru"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.RgnsLabBsoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64735,42470.430291</TimeChanged>
<TimeCreated>63901,52869.534497</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="Hold QCPR Nbrs" disabled="false">
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="ORU_R01,ORM_O01,ORM_O02"></constraint>
<when condition="LENGTH(HL7.{OBR:2.1})=7">
<send transform="" target="Bso.P.RgnsHOLDORU"></send>
<return></return>
</when>
</rule>
<rule name="RemoveTestPatients" disabled="false">
<constraint name="source" value="Bs.P.RgnsLab"></constraint>
<when condition="(Substring(HL7.{PID:PatientIdentifierList(1).ID},2,7) In &quot;507424,515173,600000,600001&quot;)">
<return></return>
</when>
</rule>
<rule name="micro result" disabled="false">
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="(Contains(HL7.{OBR:24},&quot;MB&quot;))">
<send transform="GC.RegLab2CernerORUmb" target="HL7.O.CrRgnsLabOrmOru"></send>
<return></return>
</when>
</rule>
<rule name="copath result" disabled="false">
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="(Contains(HL7.{OBR:24},&quot;CoPath&quot;))">
<send transform="GC.RegLab2CernerORUCoPath" target="HL7.O.CrRgnsLabOrmOru"></send>
<return></return>
</when>
</rule>
<rule name="blood bank" disabled="false">
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="(Contains(HL7.{OBR:24},&quot;BB&quot;))">
<send transform="GC.RegLab2CernerORUbb" target="HL7.O.CrRgnsLabOrmOru"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="(Contains(HL7.{OBR:24},&quot;SO&quot;))">
<send transform="GC.RegLab2CernerORUSendOut" target="HL7.O.CrRgnsLabOrmOru"></send>
<return></return>
</when>
</rule>
<rule name="Specific Tests thru SendOut Logic" disabled="false">
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="HL7.{OBR:4.2}=&quot;TBGLD&quot;">
<send transform="GC.RegLab2CernerORUSendOut" target="HL7.O.CrRgnsLabOrmOru"></send>
<return></return>
</when>
</rule>
<rule name="GenLab" disabled="false">
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="1">
<send transform="GC.RegLab2CernerORUGenlab" target="HL7.O.CrRgnsLabOrmOru"></send>
<return></return>
</when>
</rule>
<rule name="PreReg from Cerner" disabled="false">
<constraint name="source" value="Bs.P.RgnsLab"></constraint>
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A02,ADT_A03,ADT_A04,ADT_A06,ADT_A05,ADT_A07,ADT_A08,ADT_A09,ADT_A10,ADT_A11,ADT_A12,ADT_A13,ADT_A15,ADT_A14,ADT_A16,ADT_A17,ADT_A21,ADT_A22,ADT_A24,ADT_A23,ADT_A25,ADT_A26,ADT_A28,ADT_A29,ADT_A31,ADT_A34,ADT_A35,ADT_A38,ADT_A44,ADT_ADSC"></constraint>
<when condition="(Document.{PV1:PatientType} StartsWith &quot;Pre&quot;)">
<return></return>
</when>
</rule>
<rule name="ADTs from Cerner" disabled="false">
<constraint name="source" value="Bs.P.RgnsLab"></constraint>
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A02,ADT_A03,ADT_A04,ADT_A05,ADT_A06,ADT_A07,ADT_A08,ADT_A09,ADT_A10,ADT_A11,ADT_A12,ADT_A13,ADT_A14,ADT_A15,ADT_A16,ADT_A17,ADT_A21,ADT_A22,ADT_A23,ADT_A24,ADT_A25,ADT_A26,ADT_A28,ADT_A29,ADT_A31,ADT_ADSC,ADT_A44,ADT_A38,ADT_A35,ADT_A34"></constraint>
<when condition="1">
<send transform="GC.Cerner2RegionsLabADT" target="HL7.O.RgnsLabAdtOrm"></send>
<return></return>
</when>
</rule>
<rule name="Pathology ORM TO Regions" disabled="false">
<constraint name="source" value="Bs.P.RgnsLab"></constraint>
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="HL7.{ORCgrp(1).OBRgrp.OBR:24}=&quot;AP&quot;">
<send transform="GC.Cerner2RegLabORMpath" target="HL7.O.RgnsLabAdtOrm"></send>
<return></return>
</when>
</rule>
<rule name="Micro ORM TO Regions" disabled="false">
<constraint name="source" value="Bs.P.RgnsLab"></constraint>
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="HL7.{ORCgrp(1).OBRgrp.OBR:24}=&quot;Micro&quot;">
<send transform="GC.Cerner2RegLabORMmicro" target="HL7.O.RgnsLabAdtOrm"></send>
<return></return>
</when>
</rule>
<rule name="Blood Bank ORM TO Regions" disabled="false">
<constraint name="source" value="Bs.P.RgnsLab"></constraint>
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="HL7.{ORCgrp(1).OBRgrp.OBR:24}=&quot;BB&quot;">
<send transform="GC.Cerner2RegLabORMblood" target="HL7.O.RgnsLabAdtOrm"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="source" value="Bs.P.RgnsLab"></constraint>
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORM_O01"></constraint>
<when condition="HL7.{ORCgrp(1).OBRgrp.OBR:4.2}=&quot;RMTST&quot;">
<send transform="GC.Cerner2RegLabORMProcRMTST" target="HL7.O.RgnsLabAdtOrm"></send>
<return></return>
</when>
</rule>
<rule name="GenLab ORM TO Regions" disabled="false">
<constraint name="source" value="Bs.P.RgnsLab"></constraint>
<when condition="1">
<send transform="GC.Cerner2RegLabORMgenlab" target="HL7.O.RgnsLabAdtOrm"></send>
</when>
</rule>
<rule name="LabInitialedORM or results FROM Regions" disabled="false">
<constraint name="source" value="HL7.S.RgnsLabOrmOru"></constraint>
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="ORM_O01,ORM_O02"></constraint>
<when condition="(Document.{OBR:DiagnosticservicesectionID}!=&quot;Z&quot;)||(Document.{OBR:4.2} In &quot;BFT,CSFT&quot;)">
<send transform="GC.RegLab2CernerORM" target="HL7.O.CrRgnsLabOrmOru"></send>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.RsnaBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64055,44880.447407</TimeChanged>
<TimeCreated>62946,44254.199427</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="CERT.CERT">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="(HL7.{PID:PatientIdentifierList(1).ID}&gt;399999)&amp;&amp;(HL7.{PID:PatientIdentifierList(1).ID}&lt;600000)">
<send transform="" target="File.O.ArchiveStopped"></send>
<return></return>
</when>
</rule>
<rule name="Orm Oru" disabled="false">
<constraint name="source" value="HL7.S.CrRsnaOrmOru"></constraint>
<when condition="1">
<send transform="" target="HL7.O.RsnaAdtOrmOru"></send>
<return></return>
</when>
</rule>
<rule name="ADT A18 ORM ORU from CrRsna" disabled="false">
<constraint name="source" value="HL7.S.CrRsnaOrmOru"></constraint>
<constraint name="docCategory" value="23.RSNA"></constraint>
<constraint name="docName" value="ADT_A18,ORM_O01,ORU_R01"></constraint>
<when condition="1">
<send transform="" target="HL7.O.RsnaAdtOrmOru"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.Shared.Delimited">
<Description><![CDATA[
Base class for user-defined delimited file handling classes<br>

v1.0 apc 08/2009 Birth of class, based on code from DRL<br><br>

TODO:<br>
- test output code<br>
removed  , %XML.Adaptor]]></Description>
<Super>Ens.Request</Super>
<TimeChanged>63964,56358.812024</TimeChanged>
<TimeCreated>61247,74636.838284</TimeCreated>

<Parameter name="Delimiter">
<Description>
This specifies the default delimiter to be used in breaking apart each record</Description>
<Type>%String</Type>
<Default>|</Default>
</Parameter>

<Method name="ParseLine">
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec>pLine:%String</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[
	//build an array of property names subscripted by COLNUM
	//if properties have the default parameter of COLNUM=0, they will go at the end.
   	
   	set tClassName=%class.Name
   	do %code.WriteLine(" set oref=##class("_tClassName_").%New()")
    do %code.WriteLine(" set tLine=pLine")

	set tError=$$$OK
   	For n = 1:1:%compiledclass.Properties.Count() {
        Set tProp = %compiledclass.Properties.GetAt(n)
        if (tProp.Type="GC.Shared.DelimitedColumn") //necessary?
        	{
	        	set tName=tProp.Name
        		set tColNum=tProp.Parameters.GetAt("COLNUM")
	        	if tColNum=0 
	        		{ set tError="No COLNUM value set for property '"_tName_"'" quit}    //you need a value for COLNUM!!
	        	if '$data(tCols(tColNum)) 
	        		{set tCols(tColNum)=""}
	        	else
	        		{set tError="Duplicate column number:"_tColNum quit}
	        	
	        	//set tArray(tColNum,"Name")=tName
	        	Do %code.WriteLine(" set oref."_tName_"=$p(tLine,"""_..#Delimiter_""","_tColNum_")")
        	}
	   	}
   	
	Do %code.WriteLine(" quit oref")	
	if $$$ISERR(tError) {set tError=$$$ERROR($$$GeneralError,tError)}
	quit tError
]]></Implementation>
</Method>

<Method name="OutputLine">
<Description><![CDATA[
TO BE TESTED!!!<br>
For output to a file or stream]]></Description>
<CodeMode>objectgenerator</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    do %code.WriteLine(" set tLine=""""")
    For n = 1:1:%compiledclass.Properties.Count() {
        Set tProp = %compiledclass.Properties.GetAt(n)

        if (tProp.Type="GC.Shared.DelimitedColumn")   //necessary?
        	{
	        	set tName=tProp.Name
	        	set tColNum=tProp.Parameters.GetAt("COLNUM")
	        		        	
	        	//Need to fix this line.			
	        	Do %code.WriteLine(" set $piece(tLine,"""_..#Delimiter_""","_tColNum_")=.."_tName)
	    	}
	   	}
        
	Do %code.WriteLine(" quit tLine")	
	quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="GC.Shared.DelimitedColumn">
<Description><![CDATA[
General datatype base class for use with delimited text files <br><br>
v1.0 apc 08/2009 Birth of class, based on code from DRL<br><br>
]]></Description>
<Super>%String</Super>
<TimeChanged>63858,28390.68452</TimeChanged>
<TimeCreated>61247,84341.418429</TimeCreated>

<Parameter name="COLNUM">
<Description>
This is the piece within the text file record</Description>
<Type>INTEGER</Type>
<Default>0</Default>
</Parameter>
</Class>


<Class name="GC.Shared.FileOutboundAdapter">
<ClassType/>
<IncludeCode>%sySystem</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.OutboundAdapter,Ens.Util.File</Super>
<System>3</System>
<TimeChanged>64378,49828.136478</TimeChanged>
<TimeCreated>59286,33056.196</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="FilePath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="Overwrite">
<Description>
Overwrite file if it exists, instead of appending</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="Charset">
<Description>
Use this Character Set to translate output to the file. For binary output, use 'Binary'.</Description>
<Type>%String</Type>
<InitialExpression>"Default"</InitialExpression>
</Property>

<Property name="OpenTimeout">
<Description>
Number of seconds to wait on each attempt to open the output file.</Description>
<Type>%Numeric</Type>
<InitialExpression>5</InitialExpression>
<Parameter name="MINVAL" value="0"/>
</Property>

<Parameter name="SETTINGS">
<Default>FilePath,Overwrite,Charset,OpenTimeout</Default>
</Parameter>

<Property name="OldIO">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="Device">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="LineTerminator">
<Type>%String</Type>
<InitialExpression>$C(10)</InitialExpression>
<Parameter name="MAXLEN" value="10"/>
</Property>

<Property name="Filename">
<Type>%String</Type>
</Property>

<Method name="OnInit">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ..OldIO = $IO  Do ##class(Ens.Util.Trace).SetTraceDevice(..OldIO)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="open">
<FormalSpec>pFilename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK
	Do {
		$$$ASSERT(""=..Device)
		If ""=..FilePath Set tSC=$$$ERROR($$$EnsErrGeneral,"No file path specified; can't access file")  Quit

		Set ..Device = ..fixPath(..FilePath)_pFilename
		If ""'=..Charset&&("default"'=$ZCVT(..Charset,"L")) {
			Set tTable = ##class(%IO.I.TranslationDevice).GetCharEncodingTable(..Charset)
			Set tMode = $S(..Overwrite:"NWUK\",1:"AWUK\")_tTable_"\"
		} Else {
			Set tMode = $S(..Overwrite:"NWU",1:"AWU")
		}
		$$$catTRACE("file","Trying to open for "_$S(..Overwrite:"(over)write",1:"append")_" '"_..Device_"' with timeout="_..OpenTimeout)
		Open ..Device:(tMode):..OpenTimeout  Set:'$Test tSC=$$$ERROR($$$FileCanNotOpen,..Device)

		If $$$ISERR(tSC) Set ..Device = ""
		Else  $$$catTRACE("file","Opened for "_$S(..Overwrite:"(over)write",1:"append")_" '"_..Device_"'")

	} While 0
	If $$$ISERR(tSC) If $$$StatusEquals(tSC,$$$FileCanNotOpen) { Set ..BusinessHost.Retry = 1 } else { $$$LOGSTATUS(tSC) }
Exit
	Quit tSC
Trap
 	Set $ZT=""
 	If $ZE["<NOTOPEN>" { Set tSC=$$$ERROR($$$EnsErrGeneral,"Failed to open for "_$S(..Overwrite:"(over)write",1:"append")_" '"_..Device_" : "_$ZE) }
 	Else {
	 	Set tSC=$$$SystemError
	 	Close:..Device'="" ..Device
 	}
 	Set ..Device = ""
	Goto Exit
]]></Implementation>
</Method>

<Method name="openRead">
<FormalSpec>pFilename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK
	Do {
		$$$ASSERT(""=..Device)

		Set ..Device = ..fixPath(..FilePath)_pFilename
		If ""'=..Charset&&("default"'=$ZCVT(..Charset,"L")) {
			Set tTable = ##class(%IO.I.TranslationDevice).GetCharEncodingTable(..Charset)
			Set tMode = "RUK\"_tTable_"\"
		} Else {
			Set tMode ="RU"
		}
		$$$catTRACE("file","Trying to open for read '"_..Device_"' with timeout="_..OpenTimeout)
		Open ..Device:(tMode):..OpenTimeout  Set:'$Test tSC=$$$ERROR($$$FileCanNotOpen,..Device)

		If $$$ISERR(tSC) Set ..Device = ""
		Else  $$$catTRACE("file","Opened for read '"_..Device_"'")

	} While 0
	If $$$ISERR(tSC) If $$$StatusEquals(tSC,$$$FileCanNotOpen) { Set ..BusinessHost.Retry = 1 } else { $$$LOGSTATUS(tSC) }
Exit
	Quit tSC
Trap
 	Set $ZT="",tSC=$$$SystemError
 	Close:..Device'="" ..Device
 	Set ..Device = ""
	Goto Exit
]]></Implementation>
</Method>

<Method name="close">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if ""'=..Device {
		if $IO=..Device Use ..OldIO
		Close ..Device
		Set ..Device = ""
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Exists">
<FormalSpec>pFilename:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	$$$ASSERT(""=..Device)
	Set tFullname =..fixPath(..FilePath)_pFilename
	Quit ##class(%File).Exists(tFullname)
]]></Implementation>
</Method>

<Method name="Delete">
<FormalSpec>pFilename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	$$$ASSERT(""=..Device)
	Set tFullname =..fixPath(..FilePath)_pFilename
	Set tOK = ##class(%File).Delete(tFullname)
	if 'tOK Quit $$$EnsError($$$FileCanNotDelete,tFullname)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Rename">
<FormalSpec>pFilename:%String,pNewFilename:%String,pNewPath:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	$$$ASSERT(""=..Device)
	Set tFullname =..fixPath(..FilePath)_pFilename
	Set tNewFullname =$S(""=pNewPath:..fixPath(..FilePath)_pNewFilename,1:..fixPath(pNewPath)_pNewFilename)
	Set tOK = ##class(%File).Rename(tFullname, tNewFullname)
	if 'tOK Quit $$$EnsError($$$FileCanNotRename,tFullname_" -> "_tNewFullname)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="PutLine">
<CodeMode>expression</CodeMode>
<FormalSpec>pFilename:%String,pLine:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[..PutString(pFilename, $g(pLine)_..LineTerminator)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// added by Ellen 11/04/2009

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// this method expect the complete path and file name in the pFilename property

]]></Content>
</UDLText>

<Method name="openCustom">
<FormalSpec>pFilename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK
	Do {
		$$$ASSERT(""=..Device)
		If ""=..FilePath Set tSC=$$$ERROR($$$EnsErrGeneral,"No file path specified; can't access file")  Quit

		//Set ..Device = ..fixPath(..FilePath)_pFilename
		Set ..Device = pFilename
		If ""'=..Charset&&("default"'=$ZCVT(..Charset,"L")) {
			Set tTable = ##class(%IO.I.TranslationDevice).GetCharEncodingTable(..Charset)
			Set tMode = $S(..Overwrite:"NWUK\",1:"AWUK\")_tTable_"\"
		} Else {
			Set tMode = $S(..Overwrite:"NWU",1:"AWU")
		}
		$$$catTRACE("file","Trying to open for "_$S(..Overwrite:"(over)write",1:"append")_" '"_..Device_"' with timeout="_..OpenTimeout)
		Open ..Device:(tMode):..OpenTimeout  Set:'$Test tSC=$$$ERROR($$$FileCanNotOpen,..Device)

		If $$$ISERR(tSC) Set ..Device = ""
		Else  $$$catTRACE("file","Opened for "_$S(..Overwrite:"(over)write",1:"append")_" '"_..Device_"'")

	} While 0
	If $$$ISERR(tSC) If $$$StatusEquals(tSC,$$$FileCanNotOpen) { Set ..BusinessHost.Retry = 1 } else { $$$LOGSTATUS(tSC) }
Exit
	Quit tSC
Trap
 	Set $ZT=""
 	If $ZE["<NOTOPEN>" { Set tSC=$$$ERROR($$$EnsErrGeneral,"Failed to open for "_$S(..Overwrite:"(over)write",1:"append")_" '"_..Device_" : "_$ZE) }
 	Else {
	 	Set tSC=$$$SystemError
	 	Close:..Device'="" ..Device
 	}
 	Set ..Device = ""
	Goto Exit
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// added by Ellen 11/04/2009

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// added existscustom Al 04/04/2017

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// this method expect the complete path and file name in the pFilename property

]]></Content>
</UDLText>

<Method name="ExistsCustom">
<FormalSpec>pFilename:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	// returns 0 if file does not exist, returns 1 if file exists
	$$$ASSERT(""=..Device)
	Set tFullname = pFilename
	Quit ##class(%File).Exists(tFullname)
]]></Implementation>
</Method>

<Method name="PutLineCustom">
<CodeMode>expression</CodeMode>
<FormalSpec>pFilename:%String,pLine:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[..PutStringCustom(pFilename, $g(pLine)_..LineTerminator)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// added by Ellen 11/04/2009

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// this method expect the complete path and file name in the pFilename property

]]></Content>
</UDLText>

<Method name="PutStringCustom">
<FormalSpec>pFilename:%String,pData:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = ..openCustom(pFilename) Quit:$$$ISERR(tSC) tSC
	Set $ZT="Trap",tSC=$$$OK
	Use ..Device write pData Use ..OldIO
	Set $ZT=""
Exit
	Quit ..close()
	Quit tSC
Trap
	Set $ZT="",tSC=$$$SystemError
	Goto Exit
]]></Implementation>
</Method>

<Method name="PutString">
<FormalSpec>pFilename:%String,pData:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = ..open(pFilename) Quit:$$$ISERR(tSC) tSC
	Set $ZT="Trap",tSC=$$$OK
	Use ..Device write pData Use ..OldIO
	Set $ZT=""
Exit
	Quit ..close()
	Quit tSC
Trap
	Set $ZT="",tSC=$$$SystemError
	Goto Exit
]]></Implementation>
</Method>

<Method name="PutStream">
<FormalSpec><![CDATA[pFilename:%String,pStream:%Stream,&pLen:%Integer=-1]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; If a raw temp stream, just rename rather than copying.
	If pStream.%Extends("%Library.FileStreamAdaptor")&&..Overwrite&&..isTemp(pStream) {
		Set tTable = ##class(%IO.I.TranslationDevice).GetCharEncodingTable(..Charset)
		If $S(pStream.%IsA("%Library.FileCharacterStream")&&(0'=pStream.TranslateTable):(tTable=pStream.TranslateTable), 1:("RAW"=tTable)) {
			Set tFilename=pStream.Filename
			Set tSC=pStream.SaveStream()  Quit:$$$ISERR(tSC) tSC
			Set pStream.Filename=..fixPath(..FilePath)_pFilename
			$$$catTRACE("adapter","Optimization: Renaming file stream from '"_tFilename_"' to '"_pStream.Filename_"'")
			Set tOK=##class(%File).Rename(tFilename,..fixPath(..FilePath)_pFilename)
			Set:tOK<0 tSC=$$$ERROR($$$EnsErrGeneral,"PutStream() Rename failed with code "_tOK)
			Quit tSC
		}
	}
	Set tSC = ..open(pFilename) Quit:$$$ISERR(tSC) tSC
	Set $ZT="Trap",tSC=$$$OK
	Use ..Device Set tSC=pStream.OutputToDevice(.pLen) Use ..OldIO
	Set $ZT=""
Exit
	Quit ..close()
Trap
	Set $ZT="",tSC=$$$SystemError
	Goto Exit
]]></Implementation>
</Method>

<Method name="isTemp">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>pStream</FormalSpec>
<Implementation><![CDATA[($$$SYSTempDir=$E(pStream.Filename,1,$L($$$SYSTempDir)))
]]></Implementation>
</Method>

<Method name="GetStream">
<FormalSpec><![CDATA[pFilename:%String,&pStream:%Stream.Object=$$$NULLOREF]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If '$IsObject(pStream) {
		If "binary"'=$ZCVT(..Charset,"L") { Set pStream=##class(%GlobalCharacterStream).%New() } Else { Set Stream=##class(%GlobalBinaryStream).%New() }
	}
	Set tSC = ..openRead(pFilename) Quit:$$$ISERR(tSC) tSC
	Set $ZT="Trap",tSC=$$$OK
	Use ..Device Set pLen=##class(%File).GetFileSize(..fixPath(..FilePath)_pFilename), tSC=pStream.InputFromDevice(.pLen) Use ..OldIO
	$$$catTRACE("file","Read "_pStream.Size_" characters from '"_..fixPath(..FilePath)_pFilename_"'")
	Set $ZT=""
Exit
	Quit ..close()
Trap
	Set $ZT="",tSC=$$$SystemError
	Goto Exit
]]></Implementation>
</Method>

<Method name="NameList">
<Description>
Get a list of files in the directory configured by FilePath.
The filenames are returned in a %ListOfDataTypes object. Each entry in the list is
a semicolon-separated string containing: Filename;Type;Size;DateCreated;DateModified;FullPathName</Description>
<FormalSpec>*pFileList:%ListOfDataTypes,pWildcards:%String="*",pIncludeDirs:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; ={$Select($$$isVMS:"*.*",1:"*")}
	Set $ZT="Trap",tSC=$$$OK
	do {
		Kill pFileList Set pFileList=##class(%ListOfDataTypes).%New()
		$$$catTRACE("file","Getting list of filenames for "_..fixPath(..FilePath))
		Set tResultSet=##class(%ResultSet).%New("%File:FileSet")
		Set tSC=tResultSet.Execute(..FilePath,pWildcards,"Type",pIncludeDirs)  Quit:$$$ISERR(tSC)
		While 0'=tResultSet.Next() {
			#; PathName;Type;Size;DateCreated;DateModified;Name
			Set tSC = pFileList.Insert(tResultSet.GetData(6)_";="_tResultSet.GetData(2)_";"_tResultSet.GetData(3)_";created="_tResultSet.GetData(4)_";modified="_tResultSet.GetData(5)_";"_tResultSet.GetData(1))  Quit:$$$ISERR(tSC)
		}
	} while (0)
	If $$$ISERR(tSC) $$$LOGSTATUS(tSC)
Exit
	Quit tSC
Trap
	Set $ZT="",tSC=$$$SystemError
	Goto Exit
]]></Implementation>
</Method>
</Class>


<Class name="GC.SprBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65441,35965.997915</TimeChanged>
<TimeCreated>63901,53817.930811</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Result To Cerner Invalid Radiologist" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="(HL7.{MSH:MessageControlID} DoesNotStartWith &quot;Q&quot;)&amp;&amp;(Length(HL7.{ORCgrp(1).OBR:32.1.1})!=3)">
<send transform="" target="Email.O.AlertEmailSprORU"></send>
<return></return>
</when>
</rule>
<rule name="FROM Cerner" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="(HL7.{MSH:MessageControlID} StartsWith &quot;Q&quot;)">
<send transform="" target="HL7.O.SprOrmOru"></send>
<return></return>
</when>
</rule>
<rule name="TO Cerner" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="(HL7.{MSH:MessageControlID} DoesNotStartWith &quot;Q&quot;)">
<send transform="" target="HL7.O.CrSprOru"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.SprBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>67012,42201.561369</TimeChanged>
<TimeCreated>63873,39817.970464</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="Cerner ORM ORU forSPR" effectiveBegin="" effectiveEnd="">
<rule name="Block Test Patients - ORM and ORU)" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="Spr.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.SprBsoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64581,31038.237029</TimeChanged>
<TimeCreated>63901,53817.930811</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="source" value="Bs.P.Spr"></constraint>
<when condition="1">
<send transform="" target="HL7.O.SprOrmOru"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="source" value="HL7.S.SprOru"></constraint>
<when condition="1">
<send transform="" target="HL7.O.CrSprOru"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.UhsBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64918,55834.243073</TimeChanged>
<TimeCreated>63873,39817.970464</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="CernerAdtsforUhs" effectiveBegin="" effectiveEnd="">
<rule name="Cerner Adt to Uhs" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="GC.Cerner2UhsADT" target="HL7.O.UhsAdt"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.UhsBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65440,50155.093271</TimeChanged>
<TimeCreated>63873,39817.970464</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="CernerAdtsforUhs" effectiveBegin="" effectiveEnd="">
<rule name="Block Test Patients - ADT" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="Uhs.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.Utils.CustomEmailAlert">
<Super>EnsLib.EMail.AlertOperation</Super>
<TimeChanged>63874,34197.536361</TimeChanged>
<TimeCreated>61762,46208.04188</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/* **********************************************************************
  Created by Ellen Leichtman
  Created 02/08/2013 EJL           
  	replacing gtwy.GCSH.Utils.CustomEmailAlert
	remove sending non PHI only send 1 email now
  Modified 08/01/2013 EJl
    Removed check for PHI in //if (($FIND(custSubject,"-PHI-") > 0) ) 
  Modified 03/13/2013 EJl
          Sent the non HL7 email. Switched code. 
  -- from original code
  Modified 04/26/2010 EJl
          Fixed email body not sending HL7message
  Modified 04/28/2010 EJl
  Modified 05/11/2010 EJl add text for testing
  Modified 05/12/2010 EJl add TextData.Clear
          Added code to search for message ID when in a different format.
  Modified 10/26/2010 EJl add Specific Setting called "SearchKeywords"
           and replaced individual searches with a method "CheckforKeyWord"
************************************************************************** */
]]></Content>
</UDLText>

<Property name="SearchKeywords">
<Description>
 Identicle to EnsLib.EMail.AlertOperation 
        except we parse out the key word and put it into the message subject
        and We look up the message and put it into the body.  

Enter keywords; delimit with pipe |</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
<Parameter name="MINLEN" value="0"/>
</Property>

<Parameter name="SETTINGS">
<Default>SearchKeywords</Default>
</Parameter>

<Parameter name="emailSubject">
<Default>ZZZZ</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// not using this

]]></Content>
</UDLText>

<Parameter name="ADAPTER">
<Default>EnsLib.EMail.OutboundAdapter</Default>
</Parameter>

<Method name="OnMessage">
<FormalSpec>pRequest:Ens.AlertRequest,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK

	Set ^a.GCSH.Debug1("LastStep")  = "CustomEmailAlert..OnMessage"
	Set hl7Content =""
	Set hl7MsgID =""
	Set hl7MsgID =  $piece(pRequest.AlertText,"message body Id=",2)
	Set hl7MsgID =  $piece(hl7MsgID,",",1)
	Set sessionID = $piece(pRequest.AlertText,"SessionId=",2)
	Set sessionID =  $piece(sessionID," ",1)
	// some messages come in a different format.
	if (hl7MsgID = "") {
	Set hl7MsgID =  $piece(pRequest.AlertText,"HL7.Message / ",2)
	Set hl7MsgID =  $piece(hl7MsgID," ",1)
	}
	Set msgBody = ""
	set productionName = $zu(5)_" "  //Per Andre returns the current namespace
	Set NL = $char(13,10)
	//Set custSubject = productionName_": "
	Set ^a.GCSH.Debug1("LastStep")  = "CustomEmailAlert..OnMessage2"
	//$$$TRACE("Before Do")
	do {
		Set tMailMessage=##class(%Net.MailMessage).%New()
		// set the email subject
		Set keyword = ""
	    Set keyword = $piece(pRequest.AlertText,"|",2) 	// key word
	    If (keyword = ""){
		    Set keyword = ": Alert: "
	    } 
	    Set msg = pRequest.AlertText  //$piece(pRequest.AlertText,"|",3)
	    Set keyword = keyword_..CheckforKeyWord(msg,..SearchKeywords) 
	   
	  
		    	
	    // Set custSubject = productionName_keyword
		// set the email body
		Set ^a.GCSH.Debug1("LastStep")  = "CustomEmailAlert..OnMessage3"
		//Set tMailMessage.Subject=custSubject_"  "_$$$SystemName_":"_pRequest.SourceConfigName
		//Set tMailMessage.Charset="iso-8859-1"
		Set hl7Content = "No HL7 message available"
		if (hl7MsgID '= "") {
			Set hl7 = ##class(EnsLib.HL7.Message).%OpenId(hl7MsgID)
			// check if it returned a referece. 
			If $ISOBJECT(hl7) = 1 { 
		    	Set ^a.GCSH.Debug1("LastStep")  = "CustomEmailAlert..OnMessage4"
				Set hl7Content = hl7.RawContent
				Set keyword= "HL7-PHI- "_keyword
			}
		}
		Set custSubject = productionName_keyword
		Set tMailMessage.Subject=custSubject_"  "_$$$SystemName_":"_pRequest.SourceConfigName
		Set tMailMessage.Charset="iso-8859-1"

		Set ^a.GCSH.Debug1("LastStep")  = "CustomEmailAlert..OnMessage5"
		//$$$TRACE("step2")	
		// --------- Send email             -----------------------
		Set msgBody = $translate(pRequest.AlertText,"|","") // remove pipes
		//$$$TRACE("step3")
		Set ^a.GCSH.Debug1("LastStep")  = "CustomEmailAlert..OnMessage6"
		//Removed 08/01/2013 EJL was stopping some messages.
		//if (($FIND(custSubject,"-PHI-") > 0) ){
			// Because of PHI send another copy without the message-for the cell phones
			Set tSC=tMailMessage.TextData.Clear(1)
			//$$$TRACE("Before send")
			Set tMailMessage.Subject=custSubject_"  "_$$$SystemName_":"_pRequest.SourceConfigName
			Set tSC=tMailMessage.TextData.Write(productionName_NL_NL_msgBody_NL_NL_"Session ID: "_sessionID_NL_NL_"Msg Body ID: "_hl7MsgID_NL_NL_hl7Content) Quit:$$$ISERR(tSC)
	        Set tSC=..Adapter.SendMail(tMailMessage)
	        Set hl7Content = ""  // clear because we will resend below
	        
		//}
		
		/* remove sending second email without HL7 Per Mary S. 02/07/2013
		Set custSubject =$REPLACE(custSubject,"-PHI-","*")
		Set tSC=tMailMessage.TextData.Clear(1)
		Set tMailMessage.Subject=custSubject_"  "_$$$SystemName_":"_pRequest.SourceConfigName
		Set tSC=tMailMessage.TextData.Write(productionName_NL_NL_msgBody_NL_NL_"Session ID: "_sessionID_NL_NL_"Msg Body ID: "_hl7MsgID) Quit:$$$ISERR(tSC)
		Set tSC=..Adapter.SendMail(tMailMessage)
		*/
	} while (0)
Exit
	Quit tSC
Trap
	Set $ZT="",tSC=$$$EnsSystemError
	Goto Exit
]]></Implementation>
</Method>

<Method name="CheckforKeyWord">
<FormalSpec>msg:%String,searchkeyWords:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	SET keyword = ""
	SET delim = "|"
	SET countdown=$LENGTH(searchkeyWords,delim)
    SET countup=1
    FOR reps=countdown:-1:1 {
      SET searchText=$PIECE(searchkeyWords,delim,countup)
	  if ($FIND(msg, searchText) > 0){
		    Set keyword= keyword_searchText
	    }
      SET countup=countup+1
    } // end for
	
	Quit keyword
]]></Implementation>
</Method>
</Class>


<Class name="GC.Utils.CustomEmailHL7">
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>63874,34215.290618</TimeChanged>
<TimeCreated>62593,30664.998044</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
//  Created by Ellen Leichtman

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//  Created 05/15/2012

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//  Email body  sending HL7message

]]></Content>
</UDLText>

<Property name="SearchKeywords">
<Description>
 Identicle to EnsLib.EMail.AlertOperation 
        except we parse out the key word and put it into the message subject
        and We look up the message and put it into the body.  

Enter keywords; delimit with pipe |</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
<Parameter name="MINLEN" value="0"/>
</Property>

<Property name="CustomSubject">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
<Parameter name="MINLEN" value="0"/>
</Property>

<Parameter name="SETTINGS">
<Default>SearchKeywords, CustomSubject</Default>
</Parameter>

<Parameter name="emailSubject">
<Default>ZZZZ</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// not using this

]]></Content>
</UDLText>

<Parameter name="ADAPTER">
<Default>EnsLib.EMail.OutboundAdapter</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
//  EnsLib.HL7.Message

]]></Content>
</UDLText>

<Method name="OnMessage">
<FormalSpec>pRequest:EnsLib.HL7.Message,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK
     
	//Set ^a.GCSH.Debug1("LastStep")  = "CustomEmailHl7..OnMessage"
	//Set MsgSourceConfigName = EnsLib.HL7.Message
	//Set MsgTypeCat = pRequest.Message.MessageTypeCategory
	//Set MsgMSH10 = pRequest.Message.Identifier  //MSH:10
	//Set MsgName = pRequest.Message.Name //MSH:9
	//Set MsgVersion = pRequest.TypeVersion   //MSH:12
	//set hl7MsgID = ""
	//Set hl7Content = ""
	
	Set msg = pRequest.RawContentGet()  
	Set msgBody = ""
	set productionName = $zu(5)_" "  //Per Andre returns the current namespace
			//Set tMailMessage.Subject=custSubject_"  "_$$$SystemName_":"_pRequest.SourceConfigName
			// _":"_pRequest.SourceConfigName
	Set NL = $char(13,10)
	Set custSubject = productionName_": "_..CustomSubject
	do {
		Set tMailMessage=##class(%Net.MailMessage).%New()

		Set keyword = "" 
	    Set keyword = keyword_..CheckforKeyWord(msg,..SearchKeywords) //*********************
	    Set custSubject = custSubject_": "_keyword
		Set tMailMessage.Subject= custSubject
		$$$TRACE("custSubject ")
		Set tMailMessage.Charset="iso-8859-1"	
		// --------- Send email             -----------------------
		Set msgBody = msg
		Set tSC=tMailMessage.TextData.Clear(1)
		Set tMailMessage.Subject=custSubject            //_"  "_$$$SystemName   
		//Set tSC=tMailMessage.TextData.Write(productionName_NL_NL_msgBody_NL_NL_"Session ID: "_sessionID_NL_NL_"Msg Body ID: "_hl7MsgID) Quit:$$$ISERR(tSC)
	    Set tSC=tMailMessage.TextData.Write(productionName_NL_NL_msgBody) Quit:$$$ISERR(tSC)
	    Set tSC=..Adapter.SendMail(tMailMessage)
	} while (0)
Exit
	Quit tSC
Trap
	Set $ZT="",tSC=$$$EnsSystemError
	Goto Exit
]]></Implementation>
</Method>

<Method name="CheckforKeyWord">
<FormalSpec>msg:%String,searchkeyWords:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	SET keyword = ""
	SET delim = "|"
	SET countdown=$LENGTH(searchkeyWords,delim)
    SET countup=1
    FOR reps=countdown:-1:1 {
      SET searchText=$PIECE(searchkeyWords,delim,countup)
      SET searchText= $ZCONVERT(searchText,"U")
      SET msg= $ZCONVERT(msg,"U")
	  if ($FIND(msg, searchText) > 0){
		    Set keyword= keyword_searchText
	    }
      SET countup=countup+1
    } // end for
	
	Quit keyword
]]></Implementation>
</Method>
</Class>


<Class name="GC.Utils.CustomEmailRegDfAttachment">
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>64372,58669.880775</TimeChanged>
<TimeCreated>61762,46208.04188</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
//  Created by Al Johnson

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//  Created 03/29/2017

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//  Email Regions Charge File as Attachment

]]></Content>
</UDLText>

<Property name="SearchKeywords">
<Description>
 Identicle to EnsLib.EMail.AlertOperation 
        except we parse out the key word and put it into the message subject
        and We look up the message and put it into the body.  

Enter keywords; delimit with pipe |</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
<Parameter name="MINLEN" value="0"/>
</Property>

<Property name="CustomSubject">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
<Parameter name="MINLEN" value="0"/>
</Property>

<Parameter name="SETTINGS">
<Default>SearchKeywords, CustomSubject</Default>
</Parameter>

<Parameter name="emailSubject">
<Default>ZZZZ</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// Parameter ADAPTER = "EnsLib.EMail.OutboundAdapter";

]]></Content>
</UDLText>

<Parameter name="ADAPTER">
<Default>EnsLib.EMail.OutboundAdapter</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
//  EnsLib.HL7.Message

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Method OnMessage(pRequest As GC.Regions.DFT.ChargeDFT, Output pResponse As Ens.Response) As %Status

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Method OnMessage(pRequest As Ens.StreamContainer, Output pResponse As %Persistent) As %Status

]]></Content>
</UDLText>

<Method name="OnMessage">
<FormalSpec>pRequest:Ens.StreamContainer,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
    Quit:'$IsObject(pRequest.Stream) $$$ERROR($$$EnsErrGeneral,"No Stream contained in StreamContainer Request")

	//Set tFilename=pRequest.OriginalFilename

	Set $ZT="Trap",tSC=$$$OK

    // rawcontentget property does not exit
	// Set msg = pRequest.RawContentGet()

	Set msgBody = ""
	//set productionName = $zu(5)_" "  //Per Andre returns the current namespace
			//Set tMailMessage.Subject=custSubject_"  "_$$$SystemName_":"_pRequest.SourceConfigName
			// _":"_pRequest.SourceConfigName
	//Set NL = $char(13,10)
	//Set custSubject = productionName_": "_..CustomSubject
	set zWorkdate=$ZDATE($HOROLOG)
	
	Set custSubject = ..CustomSubject_" "_zWorkdate
	//do {
		// create the email message %Net.MailMessage (class extends %Net.MailMessagePart)
		Set tMailMessage=##class(%Net.MailMessage).%New()

		Set keyword = "" 
	    //  alj-092216   Set keyword = keyword_..CheckforKeyWord(msg,..SearchKeywords) //*********************
	    //  Set custSubject = custSubject_": "_keyword
		Set tMailMessage.Subject= custSubject
		// $$$TRACE("custSubject ")
	    //$$$LOGINFO("filename="_..Filename)
		Set tMailMessage.Charset="iso-8859-1"
		// --------- Send email             -----------------------

		Set tSC=tMailMessage.TextData.Clear(1)
		Set tMailMessage.Subject=custSubject            //_"  "_$$$SystemName   

	    Set zAttachedName = "Live Charges - "_zWorkdate_".csv"
	    Set tMailMessage.IsBinary=1
	    Set tMailMessage.IsHTML=0
	    //AttachFile vs AttachStream needs directory and file name
	    //Set status=tMailMessage.AttachFile("\\hlthshrdv01\Files\Dir_Cert\Working\", zAttachedName)
	    // zAttached is the name on the email but it is leaving the working directory file
	    //  if the attachment is the working directory file, then it removes it
	    Set status=tMailMessage.AttachStream(pRequest.StreamGet(), zAttachedName)

	    Set tSC=..Adapter.SendMail(tMailMessage)

	//} while (0)
Exit
	Quit tSC
Trap
	Set $ZT="",tSC=$$$EnsSystemError
	Goto Exit
]]></Implementation>
</Method>

<Method name="CheckforKeyWord">
<FormalSpec>msg:%String,searchkeyWords:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	SET keyword = ""
	SET delim = "|"
	SET countdown=$LENGTH(searchkeyWords,delim)
    SET countup=1
    FOR reps=countdown:-1:1 {
      SET searchText=$PIECE(searchkeyWords,delim,countup)
      SET searchText= $ZCONVERT(searchText,"U")
      SET msg= $ZCONVERT(msg,"U")
	  if ($FIND(msg, searchText) > 0){
		    Set keyword= keyword_", "_searchText
	    }
      SET countup=countup+1
    } // end for
	
	Quit keyword
]]></Implementation>
</Method>
</Class>


<Class name="GC.Utils.CustomEmailRegDftXML">
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>64324,64004.009628</TimeChanged>
<TimeCreated>61762,46208.04188</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
//  Created by Al Johnson

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//  Created 09/23/2016

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//  Email XML fields on Regions Charge Credits

]]></Content>
</UDLText>

<Property name="SearchKeywords">
<Description>
 Identicle to EnsLib.EMail.AlertOperation 
        except we parse out the key word and put it into the message subject
        and We look up the message and put it into the body.  

Enter keywords; delimit with pipe |</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
<Parameter name="MINLEN" value="0"/>
</Property>

<Property name="CustomSubject">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
<Parameter name="MINLEN" value="0"/>
</Property>

<Parameter name="SETTINGS">
<Default>SearchKeywords, CustomSubject</Default>
</Parameter>

<Parameter name="emailSubject">
<Default>ZZZZ</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// not using this

]]></Content>
</UDLText>

<Parameter name="ADAPTER">
<Default>EnsLib.EMail.OutboundAdapter</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
//  EnsLib.HL7.Message

]]></Content>
</UDLText>

<Method name="OnMessage">
<FormalSpec>pRequest:GC.Regions.DFT.CreditDFT,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK

    // rawcontentget property does not exit
	// Set msg = pRequest.RawContentGet()

	Set msgBody = ""
	set productionName = $zu(5)_" "  //Per Andre returns the current namespace
			//Set tMailMessage.Subject=custSubject_"  "_$$$SystemName_":"_pRequest.SourceConfigName
			// _":"_pRequest.SourceConfigName
	Set NL = $char(13,10)
	Set custSubject = productionName_": "_..CustomSubject
	do {
		Set tMailMessage=##class(%Net.MailMessage).%New()

		Set keyword = "" 
	    //  alj-092216   Set keyword = keyword_..CheckforKeyWord(msg,..SearchKeywords) //*********************
	    //  Set custSubject = custSubject_": "_keyword
		Set tMailMessage.Subject= custSubject
		// $$$TRACE("custSubject ")
		Set tMailMessage.Charset="iso-8859-1"
		// --------- Send email             -----------------------
		// Set msgBody = msg
		// alj Set tMailMessage.TextData = "MRN="_pRequest.MRN
		Set tSC=tMailMessage.TextData.Clear(1)
		Set tMailMessage.Subject=custSubject            //_"  "_$$$SystemName   

	    Set tSC=tMailMessage.TextData.Write(productionName_NL_NL_"CDM Credit "_pRequest.CDM) Quit:$$$ISERR(tSC)
	    Set tSC=tMailMessage.TextData.Write(NL_"CPT "_pRequest.CPT_"     Modifiers "_pRequest.CPTModifiers) Quit:$$$ISERR(tSC)
	    Set tSC=tMailMessage.TextData.Write(NL_"MRN "_pRequest.MRN_"   "_pRequest.Name) Quit:$$$ISERR(tSC)
	    Set tSC=tMailMessage.TextData.Write(NL_"Account "_pRequest.Account) Quit:$$$ISERR(tSC)
	    Set tSC=tMailMessage.TextData.Write(NL_"HL7 Date of Credit "_pRequest.HL7MessageDate) Quit:$$$ISERR(tSC)
	    Set tSC=tMailMessage.TextData.Write(NL_"Date of Service "_pRequest.DateOfService) Quit:$$$ISERR(tSC)
	    Set tSC=tMailMessage.TextData.Write(NL_"Quantity "_pRequest.Quantity_"  Amount "_pRequest.Amount) Quit:$$$ISERR(tSC)
	    Set tSC=..Adapter.SendMail(tMailMessage)
	} while (0)
Exit
	Quit tSC
Trap
	Set $ZT="",tSC=$$$EnsSystemError
	Goto Exit
]]></Implementation>
</Method>

<Method name="CheckforKeyWord">
<FormalSpec>msg:%String,searchkeyWords:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	SET keyword = ""
	SET delim = "|"
	SET countdown=$LENGTH(searchkeyWords,delim)
    SET countup=1
    FOR reps=countdown:-1:1 {
      SET searchText=$PIECE(searchkeyWords,delim,countup)
      SET searchText= $ZCONVERT(searchText,"U")
      SET msg= $ZCONVERT(msg,"U")
	  if ($FIND(msg, searchText) > 0){
		    Set keyword= keyword_", "_searchText
	    }
      SET countup=countup+1
    } // end for
	
	Quit keyword
]]></Implementation>
</Method>
</Class>


<Class name="GC.Xltek.BO">
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>64272,41978.80739</TimeChanged>
<TimeCreated>61619,39942.146998</TimeCreated>

<Parameter name="ADAPTER">
<Default>GC.Shared.FileOutboundAdapter</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// "EnsLib.OutboundFileAdapter";

]]></Content>
</UDLText>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// my custom BO properties

]]></Content>
</UDLText>

<Property name="TargetFilePath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Property name="ArchiveFilePath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// http://172.25.50.144:57773/csp/docbook/DocBook.UI.Page.cls?KEY=EFIL_EnsLib.File.OutboundAdapter

]]></Content>
</UDLText>

<Parameter name="SETTINGS">
<Type>%String</Type>
<Default>TargetFilePath,ArchiveFilePath</Default>
</Parameter>

<Method name="OutPutXML">
<FormalSpec>pRequest:GC.Xltek.ORMXML,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   $$$LOGINFO("OutPutXML")
   set tSC = $$$OK
   set writer=##class(%XML.Writer).%New()
   set writer.Indent=0 // for flattened file
   //set writer.Indent=0
   set writer.ReferencesInline = 1
   set targetFilePath=(..TargetFilePath)
   set archivePath=(..ArchiveFilePath)
   //if $$$ISERR(status) do $System.Status.DisplayError(status) quit $$$ERROR() 
   Do writer.OutputToString()
   Do writer.RootObject(pRequest)
   
   set xmlmsgOrig = writer.GetXMLString() 
  
   // added to flatten out file remove if you want it the other way.
   set xmlmsg = $Translate(xmlmsgOrig,$char(13,10),"") // take out nl
   set xmlmsg = xmlmsg_$char(10) // add back in the last nl
   //file name format XMLIn_0004.txt
   //..Pad(source.Code,8,"0")
   //set oFilename = "XMLIn_"_..Pad($PIECE($HOROLOG,",",2),4,"0")_".msg"
   set xmlCounter = "0000"_$INCREMENT(^GC.XltekCounter,1)
   set xmlCounter = $Extract( xmlCounter, $Length(xmlCounter)-3, $Length(xmlCounter))
   set ifilename = "XMLArchive_"_xmlCounter_".xml" 
   set oFilename = "XMLIn_"_xmlCounter_".txt"
   $$$TRACE("Target"_targetFilePath_oFilename)
   $$$TRACE("Archive"_targetFilePath_oFilename)
     set tSC=..Adapter.PutLineCustom(targetFilePath_oFilename,xmlmsg)
   set tSC=..Adapter.PutLineCustom(archivePath_oFilename,xmlmsg)
   set tSC=..Adapter.PutLineCustom(archivePath_ifilename,xmlmsgOrig)
   //set tSC=..Adapter.PutLineCustom(^GC.XltekBOPath_oFilename,xmlmsg)
   //set tSC=..Adapter.PutLineCustom(^GC.XltekBOPathArchive_oFilename,xmlmsg)
   //set tSC=..Adapter.PutLineCustom(^GC.XltekBOPathArchive_ifilename,xmlmsgOrig)

   Quit tSC
   //Quit:$$$ISERR(tSC) tSC
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
  <MapItem MessageType="GC.Xltek.ORMXML">
    <Method>OutPutXML</Method>
  </MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="GC.Xltek.HL7Message">
<ClassType>persistent</ClassType>
<Super>%Persistent,%Populate,%XML.Adaptor,Ens.Response</Super>
<TimeChanged>64271,63161.994688</TimeChanged>
<TimeCreated>61647,47376.028822</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="MSH">
<Type>GC.Xltek.MSH</Type>
</Property>

<Property name="PID">
<Type>GC.Xltek.PID</Type>
</Property>

<Property name="PV1">
<Type>GC.Xltek.PV1</Type>
</Property>

<Property name="ORC">
<Type>%String</Type>
</Property>

<Property name="OBR">
<Type>%String</Type>
</Property>

<Property name="OBX">
<Type>GC.Xltek.OBX</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^GC.Xltek.HL7MessageD</DataLocation>
<DefaultData>HL7MessageDefaultData</DefaultData>
<IdLocation>^GC.Xltek.HL7MessageD</IdLocation>
<IndexLocation>^GC.Xltek.HL7MessageI</IndexLocation>
<StreamLocation>^GC.Xltek.HL7MessageS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="HL7MessageDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>MSH</Value>
</Value>
<Value name="3">
<Value>PID</Value>
</Value>
<Value name="4">
<Value>PV1</Value>
</Value>
<Value name="5">
<Value>ORC</Value>
</Value>
<Value name="6">
<Value>OBR</Value>
</Value>
<Value name="7">
<Value>OBX</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="GC.Xltek.MSH">
<ClassType>persistent</ClassType>
<Super>%Persistent,%Populate,%XML.Adaptor,Ens.Response</Super>
<TimeChanged>63889,52054.843594</TimeChanged>
<TimeCreated>61647,47376.028822</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="MessageTypeID">
<Type>%String</Type>
</Property>

<Property name="TriggerEventID">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^GC.Xltek.MSHD</DataLocation>
<DefaultData>MSHDefaultData</DefaultData>
<IdLocation>^GC.Xltek.MSHD</IdLocation>
<IndexLocation>^GC.Xltek.MSHI</IndexLocation>
<StreamLocation>^GC.Xltek.MSHS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="MSHDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>MessageTypeID</Value>
</Value>
<Value name="3">
<Value>TriggerEventID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="GC.Xltek.OBX">
<ClassType>persistent</ClassType>
<Super>%Persistent,%Populate,%XML.Adaptor,Ens.Response</Super>
<TimeChanged>63889,52038.639789</TimeChanged>
<TimeCreated>61647,47376.028822</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="ObservationValue">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^GC.Xltek.OBXD</DataLocation>
<DefaultData>OBXDefaultData</DefaultData>
<IdLocation>^GC.Xltek.OBXD</IdLocation>
<IndexLocation>^GC.Xltek.OBXI</IndexLocation>
<StreamLocation>^GC.Xltek.OBXS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="OBXDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ObservationValue</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="GC.Xltek.ORMXML">
<ClassType>persistent</ClassType>
<Super>%Persistent,%Populate,%XML.Adaptor,Ens.Request</Super>
<TimeChanged>64271,63106.463112</TimeChanged>
<TimeCreated>61635,34358.372421</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="XMLNAME">
<Type>%String</Type>
<Default>HL7</Default>
</Parameter>

<Property name="HL7Message">
<Type>GC.Xltek.HL7Message</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^GC.Xltek.ORMXMLD</DataLocation>
<DefaultData>ORMXMLDefaultData</DefaultData>
<IdLocation>^GC.Xltek.ORMXMLD</IdLocation>
<IndexLocation>^GC.Xltek.ORMXMLI</IndexLocation>
<StreamLocation>^GC.Xltek.ORMXMLS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="ORMXMLDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>HL7Message</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="GC.Xltek.PID">
<ClassType>persistent</ClassType>
<Super>%Persistent,%Populate,%XML.Adaptor,Ens.Response</Super>
<TimeChanged>63889,51974.039379</TimeChanged>
<TimeCreated>61647,47376.028822</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="PatientIDInternal">
<Type>%String</Type>
</Property>

<Property name="PatientLastName">
<Type>%String</Type>
</Property>

<Property name="PatientFirstName">
<Type>%String</Type>
</Property>

<Property name="PatientDateTimeofBirth">
<Type>%String</Type>
</Property>

<Property name="PatientSex">
<Type>%String</Type>
</Property>

<Property name="PatientStreetAddress">
<Type>%String</Type>
</Property>

<Property name="PatientCity">
<Type>%String</Type>
</Property>

<Property name="PatientStateorProvince">
<Type>%String</Type>
</Property>

<Property name="PatientZiporPostalCode">
<Type>%String</Type>
</Property>

<Property name="PatientCountry">
<Type>%String</Type>
</Property>

<Property name="PatientHomePhone">
<Type>%String</Type>
</Property>

<Property name="BillingID">
<Type>%String</Type>
</Property>

<Property name="ChartNo">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^GC.Xltek.PIDD</DataLocation>
<DefaultData>PIDDefaultData</DefaultData>
<IdLocation>^GC.Xltek.PIDD</IdLocation>
<IndexLocation>^GC.Xltek.PIDI</IndexLocation>
<StreamLocation>^GC.Xltek.PIDS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="PIDDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>PatientIDInternal</Value>
</Value>
<Value name="3">
<Value>PatientLastName</Value>
</Value>
<Value name="4">
<Value>PatientFirstName</Value>
</Value>
<Value name="5">
<Value>PatientDateTimeofBirth</Value>
</Value>
<Value name="6">
<Value>PatientSex</Value>
</Value>
<Value name="7">
<Value>PatientStreetAddress</Value>
</Value>
<Value name="8">
<Value>PatientCity</Value>
</Value>
<Value name="9">
<Value>PatientStateorProvince</Value>
</Value>
<Value name="10">
<Value>PatientZiporPostalCode</Value>
</Value>
<Value name="11">
<Value>PatientCountry</Value>
</Value>
<Value name="12">
<Value>PatientHomePhone</Value>
</Value>
<Value name="13">
<Value>BillingID</Value>
</Value>
<Value name="14">
<Value>ChartNo</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="GC.Xltek.PV1">
<ClassType>persistent</ClassType>
<Super>%Persistent,%Populate,%XML.Adaptor,Ens.Response</Super>
<TimeChanged>63889,51978.637338</TimeChanged>
<TimeCreated>61647,47376.028822</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="ReferringPhysicianFirstName">
<Type>%String</Type>
</Property>

<Property name="ReferringPhysicianLastName">
<Type>%String</Type>
</Property>

<Property name="VisitNumber">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^GC.Xltek.PV1D</DataLocation>
<DefaultData>PV1DefaultData</DefaultData>
<IdLocation>^GC.Xltek.PV1D</IdLocation>
<IndexLocation>^GC.Xltek.PV1I</IndexLocation>
<StreamLocation>^GC.Xltek.PV1S</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="PV1DefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ReferringPhysicianFirstName</Value>
</Value>
<Value name="3">
<Value>ReferringPhysicianLastName</Value>
</Value>
<Value name="4">
<Value>VisitNumber</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="GC.XltekBoRule">
<Description>
Use orm to get patient informaton for Xltek sleep study. Format as XML</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64765,53517.264178</TimeChanged>
<TimeCreated>62723,4707.722947</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssistCompatible</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="ORM and Cancel to A03" disabled="false">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="GC.Cerner2XltekORM" target="File.O.XltekAdtOrm"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.XltekBsRule">
<Description>
Use orm to get patient informaton for Xltek sleep study. Format as XML</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65506,46729.173748</TimeChanged>
<TimeCreated>62723,4707.722947</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssistCompatible</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Stop Interface 5-7-20" disabled="false">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<return></return>
</when>
</rule>
<rule name="Stop &amp; Archive Orders w/CM or XO" disabled="true">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="(HL7.{ORCgrp(1).ORC:OrderControl}=&quot;CM&quot;)||(HL7.{ORCgrp(1).ORC:OrderControl}=&quot;XO&quot;)">
<send transform="" target="File.O.ArchiveStopped"></send>
<return></return>
</when>
</rule>
<rule name="Block Test Patients - ORM" disabled="true">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="Archive" disabled="true">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="Send to BO" disabled="true">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="Xltek.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.XltekBsoRule">
<Description>
Use orm to get patient informaton for Xltek sleep study. Format as XML</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64555,44023.228491</TimeChanged>
<TimeCreated>62723,4707.722947</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssistCompatible</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Stop &amp; Archive Orders w/CM or XO" disabled="false">
<constraint name="source" value="HL7.S.CrXltekOrm"></constraint>
<when condition="(HL7.{ORCgrp(1).ORC:OrderControl}=&quot;CM&quot;)||(HL7.{ORCgrp(1).ORC:OrderControl}=&quot;XO&quot;)">
<send transform="" target="File.O.ArchiveStopped"></send>
<return></return>
</when>
</rule>
<rule name="Archive" disabled="false">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="ORM and Cancel to A03" disabled="false">
<constraint name="source" value="HL7.S.CrXltekOrm"></constraint>
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<when condition="1">
<send transform="GC.Cerner2XltekORM" target="File.O.XltekAdtOrm"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.aljEdocsNuanceBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65470,39671.760368</TimeChanged>
<TimeCreated>63901,50070.329867</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Block Test Patients - ORU" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="Block Mass Mailing" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="(Document.{ORCgrp(1).OBR:4(1).1}=&quot;21&quot;)&amp;&amp;(Document.{ORCgrp(1).OBR:4(1).5}=&quot;Health Maintenance Reminder&quot;)">
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="Exists(&quot;T_eDOCS_ClinicalDocs&quot;,Document.{ORCgrp(1).OBR:4(1).1})&amp;&amp;(Document.{ORCgrp(1).OBXgrp(1).OBX:5(1).3}=&quot;RTF&quot;)">
<send transform="GC.Nuance2eDOCSTagRevCalj" target="zALJ.O.eDOCShl7"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.eDOCS.NuanceCreateTagDocBO">
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>64243,37815.488092</TimeChanged>
<TimeCreated>61619,39942.146998</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// Last Updated: 

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Moved to Prod - xx/xx/xxxx

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// copied from Dev 02/16/2016 last update in Dev 02/09/2015

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Create: 07/29/2016 Al Johnson

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    Description: Final signed Nuance results for Edocs

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//                 Covert Fields from the DTL into Doc and Tag file for eDOCS

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    using GCH.eDOCS.TAGDelimitedFileImaging

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    Properties starting with z and COLNUM => 400 are not used in TAG file; used for the Word doc 

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    using Global for counters

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    File name created in dtl.

]]></Content>
</UDLText>

<Parameter name="ADAPTER">
<Default>GC.eDOCS.NuanceFileOutboundAdapter</Default>
</Parameter>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// Path of template

]]></Content>
</UDLText>

<Property name="eDocsTextOut">
<Type>%FileCharacterStream</Type>
</Property>

<Property name="eDocsTextTmp">
<Type>%FileCharacterStream</Type>
</Property>

<Property name="TmpString">
<Type>%String</Type>
</Property>

<Property name="Filename">
<Type>%String</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// my custom BO properties

]]></Content>
</UDLText>

<Property name="TargetFilePath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Property name="ArchiveFilePath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// http://172.25.50.143:57773/csp/docbook/DocBook.UI.Page.cls?KEY=EGDV_prog#EGDV_prog_settings

]]></Content>
</UDLText>

<Parameter name="SETTINGS">
<Type>%String</Type>
<Default>TargetFilePath,ArchiveFilePath</Default>
</Parameter>

<Method name="writeFlatMessage">
<FormalSpec>pRequest:GC.eDOCS.TAGDelimitedFileNuance,*pResponse:Ens.StringResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  // $$$TRACE("ALJ called writeFlatMessag")
  Set $ZT="Trap",tSC=$$$OK
  // get acession for tag name img_1013114801_43638.tag
  // set accession = pRequest.DocumentInternalID
  // set accession =$PIECE(accession,"=",2)
  // set accession =$Extract(accession,1,10)
  // Create archive path and name
  //  11-21-2016 get filename from input created by concatenating msh10 uniqueid and msh7 datetime
  set filename = pRequest.zMSH10andMSH7
  set targetFilePath=(..TargetFilePath)
  set archivePath=(..ArchiveFilePath)
  // Use global for counter
  //set filename = "img_"_accession_"_"_$INCREMENT(^GCH.eDOCSCounterIMG,1)
  // set filename = pRequest.zTagfilename
  // set filename = "ALJTEST1"
  set TagfileName = targetFilePath_filename_".tag"
  set TagfileNameArchive  = archivePath_filename_".tag"
  set DocfileName = targetFilePath_filename_".doc"
  set DocfileNameArchive  = archivePath_filename_".doc"
  //
  // Open a stream for Prod and Archive for final doc 
  //
  set streamout = ""
  set idOut=##class(%FileCharacterStream).GetStreamIdForFile(DocfileName) 
  set idOutArchive=##class(%FileCharacterStream).GetStreamIdForFile(DocfileNameArchive)  
  set streamout=##class(%FileCharacterStream).%Open(idOut) 
  set streamoutArchive=##class(%FileCharacterStream).%Open(idOutArchive)
  
  // $$$TRACE("tagfile="_TagfileName)
  //
  //  Can only use this if zOBX51 is defined as a stream
  //  copy zOBX51 to output stream
  //  http://172.25.50.143:57773/csp/docbook/DocBook.UI.Page.cls?KEY=GOBJ_streams#GOBJ_streams_interface_readwrite
  //  Set tmpStream = ##class(%Stream.GlobalCharacter).%New()
  //  DO streamoutArchive.CopyFrom(tmpstream) // testing

  Set tmpOBX = pRequest.zFindingsComb
  Set tStatus = streamout.Write(pRequest.zFindingsComb)
  //  $$$TRACE("ALJ After tstatus")
  // Set tStatus = streamoutArchive.Write(pRequest.zFindingsComb)
  DO streamout.%Save()
  //   $$$TRACE("ALJ After streamout")
  // DO streamoutArchive.%Save()
  //clear temp variables Do we need to do this?
  set streamout = ""
  set streamoutArchive = ""
  set streamin = ""
  set finalDoc = ""

  // write the tag file out using global with complete path and file name
  // using custome method that calls openCustom(
  set st=..Adapter.PutLineCustom(TagfileName,pRequest.OutputLine())
  // set st=..Adapter.PutLineCustom(TagfileNameArchive,pRequest.OutputLine())
  //  $$$TRACE("ALJ After PutLineCustom")
  set eDocsTextOut = ""
Exit
	Quit tSC
Trap
 	Set $ZT=""
 	set streamout = ""
 	set streamoutArchive = ""
  	set streamin = ""
 	set finalDoc = ""
    set eDocsTextOut = ""
	Goto Exit
]]></Implementation>
</Method>

<Method name="OnMessage">
<FormalSpec>pRequest:GC.eDOCS.TAGDelimitedFileNuance,*pResponse:%Persistent</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tFilename=..Adapter.CreateTimestamp(##class(%File).GetFilename(pRequest.Stream.Attributes("Filename")),..Filename)
	Set tSC=..Adapter.PutStream(tFilename, pRequest.Stream)
	Do pRequest.%Save() ; re-save in case PutStream() optimization changed the Stream filename
	Quit tSC
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="GC.eDOCS.TAGDelimitedFileNuance"> 
		<Method>writeFlatMessage</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="GC.eDOCS.NuanceFileOutboundAdapter">
<ClassType/>
<IncludeCode>%sySystem</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.OutboundAdapter,Ens.Util.File</Super>
<System>3</System>
<TimeChanged>64128,58128.874889</TimeChanged>
<TimeCreated>59286,33056.196</TimeCreated>
<Inheritance>right</Inheritance>

<UDLText name="T">
<Content><![CDATA[
// Last Updated: 02/16/2016 ALJ 

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Moved to Prod - xx/xx/xxxx

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Create: 09/03/2014 Mary Schopfer - copied GCH.Cyberdocs.FileOutboundAdapter class

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Copied from Dev to Cert 02/16/2016 - last update DEV 09/03/2014

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Description: Used in interface to send files to eDOCS

]]></Content>
</UDLText>

<Property name="FilePath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="Overwrite">
<Description>
Overwrite file if it exists, instead of appending</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="Charset">
<Description>
Use this Character Set to translate output to the file. For binary output, use 'Binary'.</Description>
<Type>%String</Type>
<InitialExpression>"Default"</InitialExpression>
</Property>

<Property name="OpenTimeout">
<Description>
Number of seconds to wait on each attempt to open the output file.</Description>
<Type>%Numeric</Type>
<InitialExpression>5</InitialExpression>
<Parameter name="MINVAL" value="0"/>
</Property>

<Parameter name="SETTINGS">
<Default>FilePath,Overwrite,Charset,OpenTimeout</Default>
</Parameter>

<Property name="OldIO">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="Device">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="LineTerminator">
<Type>%String</Type>
<InitialExpression>$C(10)</InitialExpression>
<Parameter name="MAXLEN" value="10"/>
</Property>

<Property name="Filename">
<Type>%String</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// LF

]]></Content>
</UDLText>

<Method name="OnInit">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ..OldIO = $IO  Do ##class(Ens.Util.Trace).SetTraceDevice(..OldIO)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="open">
<FormalSpec>pFilename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK
	Do {
		$$$ASSERT(""=..Device)
		If ""=..FilePath Set tSC=$$$ERROR($$$EnsErrGeneral,"No file path specified; can't access file")  Quit

		Set ..Device = ..fixPath(..FilePath)_pFilename
		If ""'=..Charset&&("default"'=$ZCVT(..Charset,"L")) {
			Set tTable = ##class(%IO.I.TranslationDevice).GetCharEncodingTable(..Charset)
			Set tMode = $S(..Overwrite:"NWUK\",1:"AWUK\")_tTable_"\"
		} Else {
			Set tMode = $S(..Overwrite:"NWU",1:"AWU")
		}
		$$$catTRACE("file","Trying to open for "_$S(..Overwrite:"(over)write",1:"append")_" '"_..Device_"' with timeout="_..OpenTimeout)
		Open ..Device:(tMode):..OpenTimeout  Set:'$Test tSC=$$$ERROR($$$FileCanNotOpen,..Device)

		If $$$ISERR(tSC) Set ..Device = ""
		Else  $$$catTRACE("file","Opened for "_$S(..Overwrite:"(over)write",1:"append")_" '"_..Device_"'")

	} While 0
	If $$$ISERR(tSC) If $$$StatusEquals(tSC,$$$FileCanNotOpen) { Set ..BusinessHost.Retry = 1 } else { $$$LOGSTATUS(tSC) }
Exit
	Quit tSC
Trap
 	Set $ZT=""
 	If $ZE["<NOTOPEN>" { Set tSC=$$$ERROR($$$EnsErrGeneral,"Failed to open for "_$S(..Overwrite:"(over)write",1:"append")_" '"_..Device_" : "_$ZE) }
 	Else {
	 	Set tSC=$$$SystemError
	 	Close:..Device'="" ..Device
 	}
 	Set ..Device = ""
	Goto Exit
]]></Implementation>
</Method>

<Method name="openRead">
<FormalSpec>pFilename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK
	Do {
		$$$ASSERT(""=..Device)

		Set ..Device = ..fixPath(..FilePath)_pFilename
		If ""'=..Charset&&("default"'=$ZCVT(..Charset,"L")) {
			Set tTable = ##class(%IO.I.TranslationDevice).GetCharEncodingTable(..Charset)
			Set tMode = "RUK\"_tTable_"\"
		} Else {
			Set tMode ="RU"
		}
		$$$catTRACE("file","Trying to open for read '"_..Device_"' with timeout="_..OpenTimeout)
		Open ..Device:(tMode):..OpenTimeout  Set:'$Test tSC=$$$ERROR($$$FileCanNotOpen,..Device)

		If $$$ISERR(tSC) Set ..Device = ""
		Else  $$$catTRACE("file","Opened for read '"_..Device_"'")

	} While 0
	If $$$ISERR(tSC) If $$$StatusEquals(tSC,$$$FileCanNotOpen) { Set ..BusinessHost.Retry = 1 } else { $$$LOGSTATUS(tSC) }
Exit
	Quit tSC
Trap
 	Set $ZT="",tSC=$$$SystemError
 	Close:..Device'="" ..Device
 	Set ..Device = ""
	Goto Exit
]]></Implementation>
</Method>

<Method name="close">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if ""'=..Device {
		if $IO=..Device Use ..OldIO
		Close ..Device
		Set ..Device = ""
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Exists">
<FormalSpec>pFilename:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	$$$ASSERT(""=..Device)
	Set tFullname =..fixPath(..FilePath)_pFilename
	Quit ##class(%File).Exists(tFullname)
]]></Implementation>
</Method>

<Method name="Delete">
<FormalSpec>pFilename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	$$$ASSERT(""=..Device)
	Set tFullname =..fixPath(..FilePath)_pFilename
	Set tOK = ##class(%File).Delete(tFullname)
	if 'tOK Quit $$$EnsError($$$FileCanNotDelete,tFullname)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Rename">
<FormalSpec>pFilename:%String,pNewFilename:%String,pNewPath:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	$$$ASSERT(""=..Device)
	Set tFullname =..fixPath(..FilePath)_pFilename
	Set tNewFullname =$S(""=pNewPath:..fixPath(..FilePath)_pNewFilename,1:..fixPath(pNewPath)_pNewFilename)
	Set tOK = ##class(%File).Rename(tFullname, tNewFullname)
	if 'tOK Quit $$$EnsError($$$FileCanNotRename,tFullname_" -> "_tNewFullname)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="PutLine">
<CodeMode>expression</CodeMode>
<FormalSpec>pFilename:%String,pLine:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[..PutString(pFilename, $g(pLine)_..LineTerminator)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// this method expect the complete path and file name in the pFilename property

]]></Content>
</UDLText>

<Method name="openCustom">
<FormalSpec>pFilename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK
	Do {
		$$$ASSERT(""=..Device)
		If ""=..FilePath Set tSC=$$$ERROR($$$EnsErrGeneral,"No file path specified; can't access file")  Quit

		//Set ..Device = ..fixPath(..FilePath)_pFilename
		Set ..Device = pFilename
		If ""'=..Charset&&("default"'=$ZCVT(..Charset,"L")) {
			Set tTable = ##class(%IO.I.TranslationDevice).GetCharEncodingTable(..Charset)
			Set tMode = $S(..Overwrite:"NWUK\",1:"AWUK\")_tTable_"\"
		} Else {
			Set tMode = $S(..Overwrite:"NWU",1:"AWU")
		}
		$$$catTRACE("file","Trying to open for "_$S(..Overwrite:"(over)write",1:"append")_" '"_..Device_"' with timeout="_..OpenTimeout)
		Open ..Device:(tMode):..OpenTimeout  Set:'$Test tSC=$$$ERROR($$$FileCanNotOpen,..Device)

		If $$$ISERR(tSC) Set ..Device = ""
		Else  $$$catTRACE("file","Opened for "_$S(..Overwrite:"(over)write",1:"append")_" '"_..Device_"'")

	} While 0
	If $$$ISERR(tSC) If $$$StatusEquals(tSC,$$$FileCanNotOpen) { Set ..BusinessHost.Retry = 1 } else { $$$LOGSTATUS(tSC) }
Exit
	Quit tSC
Trap
 	Set $ZT=""
 	If $ZE["<NOTOPEN>" { Set tSC=$$$ERROR($$$EnsErrGeneral,"Failed to open for "_$S(..Overwrite:"(over)write",1:"append")_" '"_..Device_" : "_$ZE) }
 	Else {
	 	Set tSC=$$$SystemError
	 	Close:..Device'="" ..Device
 	}
 	Set ..Device = ""
	Goto Exit
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// this method expect the complete path and file name in the pFilename property

]]></Content>
</UDLText>

<Method name="PutLineCustom">
<CodeMode>expression</CodeMode>
<FormalSpec>pFilename:%String,pLine:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[..PutStringCustom(pFilename, $g(pLine)_..LineTerminator)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// this method expect the complete path and file name in the pFilename property

]]></Content>
</UDLText>

<Method name="PutStringCustom">
<FormalSpec>pFilename:%String,pData:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = ..openCustom(pFilename) Quit:$$$ISERR(tSC) tSC
	Set $ZT="Trap",tSC=$$$OK
	Use ..Device write pData Use ..OldIO
	Set $ZT=""
Exit
	Quit ..close()
	Quit tSC
Trap
	Set $ZT="",tSC=$$$SystemError
	Goto Exit
]]></Implementation>
</Method>

<Method name="PutString">
<FormalSpec>pFilename:%String,pData:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = ..open(pFilename) Quit:$$$ISERR(tSC) tSC
	Set $ZT="Trap",tSC=$$$OK
	Use ..Device write pData Use ..OldIO
	Set $ZT=""
Exit
	Quit ..close()
	Quit tSC
Trap
	Set $ZT="",tSC=$$$SystemError
	Goto Exit
]]></Implementation>
</Method>

<Method name="PutStream">
<FormalSpec><![CDATA[pFilename:%String,pStream:%Stream,&pLen:%Integer=-1]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; If a raw temp stream, just rename rather than copying.
	If pStream.%Extends("%Library.FileStreamAdaptor")&&..Overwrite&&..isTemp(pStream) {
		Set tTable = ##class(%IO.I.TranslationDevice).GetCharEncodingTable(..Charset)
		If $S(pStream.%IsA("%Library.FileCharacterStream")&&(0'=pStream.TranslateTable):(tTable=pStream.TranslateTable), 1:("RAW"=tTable)) {
			Set tFilename=pStream.Filename
			Set tSC=pStream.SaveStream()  Quit:$$$ISERR(tSC) tSC
			Set pStream.Filename=..fixPath(..FilePath)_pFilename
			$$$catTRACE("adapter","Optimization: Renaming file stream from '"_tFilename_"' to '"_pStream.Filename_"'")
			Set tOK=##class(%File).Rename(tFilename,..fixPath(..FilePath)_pFilename)
			Set:tOK<0 tSC=$$$ERROR($$$EnsErrGeneral,"PutStream() Rename failed with code "_tOK)
			Quit tSC
		}
	}
	Set tSC = ..open(pFilename) Quit:$$$ISERR(tSC) tSC
	Set $ZT="Trap",tSC=$$$OK
	Use ..Device Set tSC=pStream.OutputToDevice(.pLen) Use ..OldIO
	Set $ZT=""
Exit
	Quit ..close()
Trap
	Set $ZT="",tSC=$$$SystemError
	Goto Exit
]]></Implementation>
</Method>

<Method name="isTemp">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>pStream</FormalSpec>
<Implementation><![CDATA[($$$SYSTempDir=$E(pStream.Filename,1,$L($$$SYSTempDir)))
]]></Implementation>
</Method>

<Method name="GetStream">
<FormalSpec><![CDATA[pFilename:%String,&pStream:%Stream.Object=$$$NULLOREF]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If '$IsObject(pStream) {
		If "binary"'=$ZCVT(..Charset,"L") { Set pStream=##class(%GlobalCharacterStream).%New() } Else { Set Stream=##class(%GlobalBinaryStream).%New() }
	}
	Set tSC = ..openRead(pFilename) Quit:$$$ISERR(tSC) tSC
	Set $ZT="Trap",tSC=$$$OK
	Use ..Device Set pLen=##class(%File).GetFileSize(..fixPath(..FilePath)_pFilename), tSC=pStream.InputFromDevice(.pLen) Use ..OldIO
	$$$catTRACE("file","Read "_pStream.Size_" characters from '"_..fixPath(..FilePath)_pFilename_"'")
	Set $ZT=""
Exit
	Quit ..close()
Trap
	Set $ZT="",tSC=$$$SystemError
	Goto Exit
]]></Implementation>
</Method>

<Method name="NameList">
<Description>
Get a list of files in the directory configured by FilePath.
The filenames are returned in a %ListOfDataTypes object. Each entry in the list is
a semicolon-separated string containing: Filename;Type;Size;DateCreated;DateModified;FullPathName</Description>
<FormalSpec>*pFileList:%ListOfDataTypes,pWildcards:%String="*",pIncludeDirs:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; ={$Select($$$isVMS:"*.*",1:"*")}
	Set $ZT="Trap",tSC=$$$OK
	do {
		Kill pFileList Set pFileList=##class(%ListOfDataTypes).%New()
		$$$catTRACE("file","Getting list of filenames for "_..fixPath(..FilePath))
		Set tResultSet=##class(%ResultSet).%New("%File:FileSet")
		Set tSC=tResultSet.Execute(..FilePath,pWildcards,"Type",pIncludeDirs)  Quit:$$$ISERR(tSC)
		While 0'=tResultSet.Next() {
			#; PathName;Type;Size;DateCreated;DateModified;Name
			Set tSC = pFileList.Insert(tResultSet.GetData(6)_";="_tResultSet.GetData(2)_";"_tResultSet.GetData(3)_";created="_tResultSet.GetData(4)_";modified="_tResultSet.GetData(5)_";"_tResultSet.GetData(1))  Quit:$$$ISERR(tSC)
		}
	} while (0)
	If $$$ISERR(tSC) $$$LOGSTATUS(tSC)
Exit
	Quit tSC
Trap
	Set $ZT="",tSC=$$$SystemError
	Goto Exit
]]></Implementation>
</Method>
</Class>


<Class name="GC.eDOCS.RadCreateTagDocBO">
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>64298,40062.469272</TimeChanged>
<TimeCreated>61619,39942.146998</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// Last Updated: 

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Moved to Prod - xx/xx/xxxx

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// copied from Dev 02/16/2016 last update in Dev 02/09/2015

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Create: 07/28/2016 Ellen Leichtman

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    Description: Final signed Rafiology results for Edocs

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//                 Covert Fields from the DTL into Doc and Tag file for eDOCS

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    using GC.eDOCS.RadTagDelimitedFile

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    Properties starting with z and COLNUM => 400 are not used in TAG file; used for the Word doc 

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    using Msg control id with date

]]></Content>
</UDLText>

<Parameter name="ADAPTER">
<Default>GC.eDOCS.RadFileOutboundAdapter</Default>
</Parameter>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// Path of template

]]></Content>
</UDLText>

<Property name="eDocsTextOut">
<Type>%FileCharacterStream</Type>
</Property>

<Property name="eDocsTextTmp">
<Type>%FileCharacterStream</Type>
</Property>

<Property name="TmpString">
<Type>%String</Type>
</Property>

<Property name="Filename">
<Type>%String</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// my custom BO properties

]]></Content>
</UDLText>

<Property name="TemplateFilePath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Property name="TargetFilePath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Property name="ArchiveFilePath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// http://172.25.50.143:57773/csp/docbook/DocBook.UI.Page.cls?KEY=EGDV_prog#EGDV_prog_settings

]]></Content>
</UDLText>

<Parameter name="SETTINGS">
<Type>%String</Type>
<Default>TemplateFilePath,TargetFilePath,ArchiveFilePath</Default>
</Parameter>

<Method name="writeFlatMessage">
<FormalSpec>pRequest:GC.eDOCS.RadTagDelimitedFile,*pResponse:Ens.StringResponse</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  $$$TRACE("EJL called writeFlatMessag")
  Set $ZT="Trap",tSC=$$$OK
  // get acession for tag name img_1013114801_43638.tag
  set accession = pRequest.ExtSourceDocumentID
  set accession =$PIECE(accession,"=",*) ; returns  the last substring
  //set accession =$Replace(accession," ","")
  set accession =$Extract(accession,1,13)
  $$$TRACE("accession"_accession)
  // Create archive path and name
  // set accession ="EllenTest"  //10XR160000571
  set templateFilePath=(..TemplateFilePath)
  set targetFilePath=(..TargetFilePath)
  set archivePath=(..ArchiveFilePath)
  // Use YYMMDDHHMMmmm for counter see z_filename
  set filename = "img_"_accession_"_"_pRequest.zTagfilename
  set TagfileName = targetFilePath_filename_".tag"
  set TagfileNameArchive  = archivePath_filename_".tag"
  set DocfileName = targetFilePath_filename_".doc"
  set DocfileNameArchive  = archivePath_filename_".doc"
  //  create doc file by reading in template and replacing place holders with data.
  set streamin = ""
  set DocName = templateFilePath
  //set DocName = ^GCH.eDOCSPathTemplateIMG  // see Global for path "D:\Files\Dir_Dev\Resources\IMG_eDOCS_V2.template"
  set id=##class(%FileCharacterStream).GetStreamIdForFile(DocName ) 
  set streamin=##class(%FileCharacterStream).%Open(id) 
  //  create and open the output files
  //
  // Open a stream for Prod and Archive for final doc 
  //
  set streamout = ""
  set idOut=##class(%FileCharacterStream).GetStreamIdForFile(DocfileName) 
  set idOutArchive=##class(%FileCharacterStream).GetStreamIdForFile(DocfileNameArchive)  
  set streamout=##class(%FileCharacterStream).%Open(idOut) 
  set streamoutArchive=##class(%FileCharacterStream).%Open(idOutArchive) 
  Set finalDoc = ""
  // $$$LOGINFO("start read in eDOCS template")
  While 'streamin.AtEnd {
 	set tmpDoc = streamin.Read(5000)
 	 set finalDoc = tmpDoc
 	 set finalDoc = $Replace(finalDoc,"zPatientNameLast", pRequest.zPatientNameLast)
     set finalDoc = $Replace(finalDoc,"zPatientNameFirst", pRequest.zPatientNameFirst)
	 set finalDoc = $Replace(finalDoc,"zPatientNameMI", pRequest.zPatientNameMI)
	 set finalDoc = $Replace(finalDoc,"zPatientMrn", pRequest.zPatientMrn)
	 set finalDoc = $Replace(finalDoc,"zPatientDob", pRequest.zPatientDob)
	 set finalDoc = $Replace(finalDoc,"zPatientHospSrvCode", pRequest.zPatientHospSrvCode)
	 set finalDoc = $Replace(finalDoc,"zObservationEndDate", pRequest.zObservationEndDate)
	 set finalDoc = $Replace(finalDoc,"zAmmendedLabel", pRequest.zAmmendedLabel)
	 set finalDoc = $Replace(finalDoc,"zOrderingDoctorName", pRequest.zOrderingDoctorName)
	 set finalDoc = $Replace(finalDoc,"zFindings", pRequest.zFindings)
	//set finalDoc = ReplaceVars(tmpDoc, pRequest)
	DO streamout.Write(finalDoc)
	 // $$$LOGINFO("stream out fina ldoc")
	DO streamoutArchive.Write(finalDoc)
	// $$$LOGINFO("archive stream out final doc") 
  }
  DO streamout.%Save()
  DO streamoutArchive.%Save()
  //clear temp variables Do we need to do this?
  set streamout = ""
  set streamoutArchive = ""
  set streamin = ""
  set finalDoc = ""
  //$$$TRACE("EJL after streamout")
  // write the tag file with complete path and file name
  // using custome method that calls openCustom(
  set st=..Adapter.PutLineCustom(TagfileName,pRequest.OutputLine())
  set st=..Adapter.PutLineCustom(TagfileNameArchive,pRequest.OutputLine())
  //$$$TRACE("EJL After PutLineCustom")
  set eDocsTextOut = ""
Exit
	Quit tSC
Trap
 	Set $ZT=""
 	set streamout = ""
 	set streamoutArchive = ""
  	set streamin = ""
 	set finalDoc = ""
    set eDocsTextOut = ""
	Goto Exit
]]></Implementation>
</Method>

<Method name="OnMessage">
<FormalSpec>pRequest:GC.eDOCS.RadTagDelimitedFile,*pResponse:%Persistent</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tFilename=..Adapter.CreateTimestamp(##class(%File).GetFilename(pRequest.Stream.Attributes("Filename")),..Filename)
	Set tSC=..Adapter.PutStream(tFilename, pRequest.Stream)
	Do pRequest.%Save() ; re-save in case PutStream() optimization changed the Stream filename
	Quit tSC
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="GC.eDOCS.RadTagDelimitedFile"> 
		<Method>writeFlatMessage</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="GC.eDOCS.RadFileOutboundAdapter">
<ClassType/>
<IncludeCode>%sySystem</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.OutboundAdapter,Ens.Util.File</Super>
<System>3</System>
<TimeChanged>64260,37294.934175</TimeChanged>
<TimeCreated>59286,33056.196</TimeCreated>
<Inheritance>right</Inheritance>

<UDLText name="T">
<Content><![CDATA[
// Last Updated: 02/16/2016 ALJ 

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Moved to Prod - xx/xx/xxxx

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Create: 09/03/2014 Mary Schopfer - copied GCH.Cyberdocs.FileOutboundAdapter class

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Copied from Dev to Cert 02/16/2016 - last update DEV 09/03/2014

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Description: Used in interface to send radiology files to eDOCS

]]></Content>
</UDLText>

<Property name="FilePath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="Overwrite">
<Description>
Overwrite file if it exists, instead of appending</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="Charset">
<Description>
Use this Character Set to translate output to the file. For binary output, use 'Binary'.</Description>
<Type>%String</Type>
<InitialExpression>"Default"</InitialExpression>
</Property>

<Property name="OpenTimeout">
<Description>
Number of seconds to wait on each attempt to open the output file.</Description>
<Type>%Numeric</Type>
<InitialExpression>5</InitialExpression>
<Parameter name="MINVAL" value="0"/>
</Property>

<Parameter name="SETTINGS">
<Default>FilePath,Overwrite,Charset,OpenTimeout</Default>
</Parameter>

<Property name="OldIO">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="Device">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="LineTerminator">
<Type>%String</Type>
<InitialExpression>$C(10)</InitialExpression>
<Parameter name="MAXLEN" value="10"/>
</Property>

<Property name="Filename">
<Type>%String</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// LF

]]></Content>
</UDLText>

<Method name="OnInit">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set ..OldIO = $IO  Do ##class(Ens.Util.Trace).SetTraceDevice(..OldIO)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="open">
<FormalSpec>pFilename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK
	Do {
		$$$ASSERT(""=..Device)
		If ""=..FilePath Set tSC=$$$ERROR($$$EnsErrGeneral,"No file path specified; can't access file")  Quit

		Set ..Device = ..fixPath(..FilePath)_pFilename
		If ""'=..Charset&&("default"'=$ZCVT(..Charset,"L")) {
			Set tTable = ##class(%IO.I.TranslationDevice).GetCharEncodingTable(..Charset)
			Set tMode = $S(..Overwrite:"NWUK\",1:"AWUK\")_tTable_"\"
		} Else {
			Set tMode = $S(..Overwrite:"NWU",1:"AWU")
		}
		$$$catTRACE("file","Trying to open for "_$S(..Overwrite:"(over)write",1:"append")_" '"_..Device_"' with timeout="_..OpenTimeout)
		Open ..Device:(tMode):..OpenTimeout  Set:'$Test tSC=$$$ERROR($$$FileCanNotOpen,..Device)

		If $$$ISERR(tSC) Set ..Device = ""
		Else  $$$catTRACE("file","Opened for "_$S(..Overwrite:"(over)write",1:"append")_" '"_..Device_"'")

	} While 0
	If $$$ISERR(tSC) If $$$StatusEquals(tSC,$$$FileCanNotOpen) { Set ..BusinessHost.Retry = 1 } else { $$$LOGSTATUS(tSC) }
Exit
	Quit tSC
Trap
 	Set $ZT=""
 	If $ZE["<NOTOPEN>" { Set tSC=$$$ERROR($$$EnsErrGeneral,"Failed to open for "_$S(..Overwrite:"(over)write",1:"append")_" '"_..Device_" : "_$ZE) }
 	Else {
	 	Set tSC=$$$SystemError
	 	Close:..Device'="" ..Device
 	}
 	Set ..Device = ""
	Goto Exit
]]></Implementation>
</Method>

<Method name="openRead">
<FormalSpec>pFilename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK
	Do {
		$$$ASSERT(""=..Device)

		Set ..Device = ..fixPath(..FilePath)_pFilename
		If ""'=..Charset&&("default"'=$ZCVT(..Charset,"L")) {
			Set tTable = ##class(%IO.I.TranslationDevice).GetCharEncodingTable(..Charset)
			Set tMode = "RUK\"_tTable_"\"
		} Else {
			Set tMode ="RU"
		}
		$$$catTRACE("file","Trying to open for read '"_..Device_"' with timeout="_..OpenTimeout)
		Open ..Device:(tMode):..OpenTimeout  Set:'$Test tSC=$$$ERROR($$$FileCanNotOpen,..Device)

		If $$$ISERR(tSC) Set ..Device = ""
		Else  $$$catTRACE("file","Opened for read '"_..Device_"'")

	} While 0
	If $$$ISERR(tSC) If $$$StatusEquals(tSC,$$$FileCanNotOpen) { Set ..BusinessHost.Retry = 1 } else { $$$LOGSTATUS(tSC) }
Exit
	Quit tSC
Trap
 	Set $ZT="",tSC=$$$SystemError
 	Close:..Device'="" ..Device
 	Set ..Device = ""
	Goto Exit
]]></Implementation>
</Method>

<Method name="close">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if ""'=..Device {
		if $IO=..Device Use ..OldIO
		Close ..Device
		Set ..Device = ""
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Exists">
<FormalSpec>pFilename:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	$$$ASSERT(""=..Device)
	Set tFullname =..fixPath(..FilePath)_pFilename
	Quit ##class(%File).Exists(tFullname)
]]></Implementation>
</Method>

<Method name="Delete">
<FormalSpec>pFilename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	$$$ASSERT(""=..Device)
	Set tFullname =..fixPath(..FilePath)_pFilename
	Set tOK = ##class(%File).Delete(tFullname)
	if 'tOK Quit $$$EnsError($$$FileCanNotDelete,tFullname)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Rename">
<FormalSpec>pFilename:%String,pNewFilename:%String,pNewPath:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	$$$ASSERT(""=..Device)
	Set tFullname =..fixPath(..FilePath)_pFilename
	Set tNewFullname =$S(""=pNewPath:..fixPath(..FilePath)_pNewFilename,1:..fixPath(pNewPath)_pNewFilename)
	Set tOK = ##class(%File).Rename(tFullname, tNewFullname)
	if 'tOK Quit $$$EnsError($$$FileCanNotRename,tFullname_" -> "_tNewFullname)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="PutLine">
<CodeMode>expression</CodeMode>
<FormalSpec>pFilename:%String,pLine:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[..PutString(pFilename, $g(pLine)_..LineTerminator)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// this method expect the complete path and file name in the pFilename property

]]></Content>
</UDLText>

<Method name="openCustom">
<FormalSpec>pFilename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set $ZT="Trap",tSC=$$$OK
	Do {
		$$$ASSERT(""=..Device)
		If ""=..FilePath Set tSC=$$$ERROR($$$EnsErrGeneral,"No file path specified; can't access file")  Quit

		//Set ..Device = ..fixPath(..FilePath)_pFilename
		Set ..Device = pFilename
		If ""'=..Charset&&("default"'=$ZCVT(..Charset,"L")) {
			Set tTable = ##class(%IO.I.TranslationDevice).GetCharEncodingTable(..Charset)
			Set tMode = $S(..Overwrite:"NWUK\",1:"AWUK\")_tTable_"\"
		} Else {
			Set tMode = $S(..Overwrite:"NWU",1:"AWU")
		}
		$$$catTRACE("file","Trying to open for "_$S(..Overwrite:"(over)write",1:"append")_" '"_..Device_"' with timeout="_..OpenTimeout)
		Open ..Device:(tMode):..OpenTimeout  Set:'$Test tSC=$$$ERROR($$$FileCanNotOpen,..Device)

		If $$$ISERR(tSC) Set ..Device = ""
		Else  $$$catTRACE("file","Opened for "_$S(..Overwrite:"(over)write",1:"append")_" '"_..Device_"'")

	} While 0
	If $$$ISERR(tSC) If $$$StatusEquals(tSC,$$$FileCanNotOpen) { Set ..BusinessHost.Retry = 1 } else { $$$LOGSTATUS(tSC) }
Exit
	Quit tSC
Trap
 	Set $ZT=""
 	If $ZE["<NOTOPEN>" { Set tSC=$$$ERROR($$$EnsErrGeneral,"Failed to open for "_$S(..Overwrite:"(over)write",1:"append")_" '"_..Device_" : "_$ZE) }
 	Else {
	 	Set tSC=$$$SystemError
	 	Close:..Device'="" ..Device
 	}
 	Set ..Device = ""
	Goto Exit
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// this method expect the complete path and file name in the pFilename property

]]></Content>
</UDLText>

<Method name="PutLineCustom">
<CodeMode>expression</CodeMode>
<FormalSpec>pFilename:%String,pLine:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[..PutStringCustom(pFilename, $g(pLine)_..LineTerminator)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// this method expect the complete path and file name in the pFilename property

]]></Content>
</UDLText>

<Method name="PutStringCustom">
<FormalSpec>pFilename:%String,pData:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = ..openCustom(pFilename) Quit:$$$ISERR(tSC) tSC
	Set $ZT="Trap",tSC=$$$OK
	Use ..Device write pData Use ..OldIO
	Set $ZT=""
Exit
	Quit ..close()
	Quit tSC
Trap
	Set $ZT="",tSC=$$$SystemError
	Goto Exit
]]></Implementation>
</Method>

<Method name="PutString">
<FormalSpec>pFilename:%String,pData:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = ..open(pFilename) Quit:$$$ISERR(tSC) tSC
	Set $ZT="Trap",tSC=$$$OK
	Use ..Device write pData Use ..OldIO
	Set $ZT=""
Exit
	Quit ..close()
	Quit tSC
Trap
	Set $ZT="",tSC=$$$SystemError
	Goto Exit
]]></Implementation>
</Method>

<Method name="PutStream">
<FormalSpec><![CDATA[pFilename:%String,pStream:%Stream,&pLen:%Integer=-1]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; If a raw temp stream, just rename rather than copying.
	If pStream.%Extends("%Library.FileStreamAdaptor")&&..Overwrite&&..isTemp(pStream) {
		Set tTable = ##class(%IO.I.TranslationDevice).GetCharEncodingTable(..Charset)
		If $S(pStream.%IsA("%Library.FileCharacterStream")&&(0'=pStream.TranslateTable):(tTable=pStream.TranslateTable), 1:("RAW"=tTable)) {
			Set tFilename=pStream.Filename
			Set tSC=pStream.SaveStream()  Quit:$$$ISERR(tSC) tSC
			Set pStream.Filename=..fixPath(..FilePath)_pFilename
			$$$catTRACE("adapter","Optimization: Renaming file stream from '"_tFilename_"' to '"_pStream.Filename_"'")
			Set tOK=##class(%File).Rename(tFilename,..fixPath(..FilePath)_pFilename)
			Set:tOK<0 tSC=$$$ERROR($$$EnsErrGeneral,"PutStream() Rename failed with code "_tOK)
			Quit tSC
		}
	}
	Set tSC = ..open(pFilename) Quit:$$$ISERR(tSC) tSC
	Set $ZT="Trap",tSC=$$$OK
	Use ..Device Set tSC=pStream.OutputToDevice(.pLen) Use ..OldIO
	Set $ZT=""
Exit
	Quit ..close()
Trap
	Set $ZT="",tSC=$$$SystemError
	Goto Exit
]]></Implementation>
</Method>

<Method name="isTemp">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>pStream</FormalSpec>
<Implementation><![CDATA[($$$SYSTempDir=$E(pStream.Filename,1,$L($$$SYSTempDir)))
]]></Implementation>
</Method>

<Method name="GetStream">
<FormalSpec><![CDATA[pFilename:%String,&pStream:%Stream.Object=$$$NULLOREF]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If '$IsObject(pStream) {
		If "binary"'=$ZCVT(..Charset,"L") { Set pStream=##class(%GlobalCharacterStream).%New() } Else { Set Stream=##class(%GlobalBinaryStream).%New() }
	}
	Set tSC = ..openRead(pFilename) Quit:$$$ISERR(tSC) tSC
	Set $ZT="Trap",tSC=$$$OK
	Use ..Device Set pLen=##class(%File).GetFileSize(..fixPath(..FilePath)_pFilename), tSC=pStream.InputFromDevice(.pLen) Use ..OldIO
	$$$catTRACE("file","Read "_pStream.Size_" characters from '"_..fixPath(..FilePath)_pFilename_"'")
	Set $ZT=""
Exit
	Quit ..close()
Trap
	Set $ZT="",tSC=$$$SystemError
	Goto Exit
]]></Implementation>
</Method>

<Method name="NameList">
<Description>
Get a list of files in the directory configured by FilePath.
The filenames are returned in a %ListOfDataTypes object. Each entry in the list is
a semicolon-separated string containing: Filename;Type;Size;DateCreated;DateModified;FullPathName</Description>
<FormalSpec>*pFileList:%ListOfDataTypes,pWildcards:%String="*",pIncludeDirs:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; ={$Select($$$isVMS:"*.*",1:"*")}
	Set $ZT="Trap",tSC=$$$OK
	do {
		Kill pFileList Set pFileList=##class(%ListOfDataTypes).%New()
		$$$catTRACE("file","Getting list of filenames for "_..fixPath(..FilePath))
		Set tResultSet=##class(%ResultSet).%New("%File:FileSet")
		Set tSC=tResultSet.Execute(..FilePath,pWildcards,"Type",pIncludeDirs)  Quit:$$$ISERR(tSC)
		While 0'=tResultSet.Next() {
			#; PathName;Type;Size;DateCreated;DateModified;Name
			Set tSC = pFileList.Insert(tResultSet.GetData(6)_";="_tResultSet.GetData(2)_";"_tResultSet.GetData(3)_";created="_tResultSet.GetData(4)_";modified="_tResultSet.GetData(5)_";"_tResultSet.GetData(1))  Quit:$$$ISERR(tSC)
		}
	} while (0)
	If $$$ISERR(tSC) $$$LOGSTATUS(tSC)
Exit
	Quit tSC
Trap
	Set $ZT="",tSC=$$$SystemError
	Goto Exit
]]></Implementation>
</Method>
</Class>


<Class name="GC.eDOCS.RadTagDelimitedFile">
<Super>GC.Shared.Delimited</Super>
<TimeChanged>64298,39580.194496</TimeChanged>
<TimeCreated>61247,74636.838284</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// Description: Properties are used for both the eDOCS Tag and Word Doc

]]></Content>
</UDLText>

<Property name="PatientMRN">
<Description><![CDATA[
Last Updated: 10/24/2014 Mary Schopfer 
Moved to Prod - Never
Created: 10/24/2014 Mary Schopfer
       Properties starting with z and COLNUM =>400 are filtered out when creating the tag file
       Use for the Word doc, file name and other uses
Note the inherited Delimiter parameter, defaults to "|". Override here to change this
Parameter Delimiter As %String = "|";
Define the names of the pieces in each record, specifying the 
piece using the COLNUM dataype parameter. Make sure they are unique and > 0]]></Description>
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="1"/>
<Parameter name="MAXLEN" value="30"/>
</Property>

<Property name="PatientLastName">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="2"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="PatientFirstName">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="3"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="PatientMiddleInitial">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="4"/>
</Property>

<Property name="PatientDOB">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="5"/>
</Property>

<Property name="EncounterID">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="6"/>
</Property>

<Property name="DateOfService">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="7"/>
</Property>

<Property name="CernerDocumentID">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="8"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="SourceSystem">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="9"/>
</Property>

<Property name="AuthorID">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="10"/>
</Property>

<Property name="AuthorLastName">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="11"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="AuthorFirstName">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="12"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DocumentType">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="13"/>
</Property>

<Property name="TranscriptionistID">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="14"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="TranscriptionistLastName">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="15"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="TranscriptionistFirstName">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="16"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="ExtSourceDocumentID">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="17"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="RevisionCount">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="18"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="VersionComment">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="19"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="LastModifiedTime">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="20"/>
</Property>

<Property name="zPatientNameFirst">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="400"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="zPatientNameMI">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="401"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="zPatientNameLast">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="402"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="zPatientMrn">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="403"/>
</Property>

<Property name="zPatientDob">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="404"/>
</Property>

<Property name="zPatientHospSrvCode">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="405"/>
</Property>

<Property name="zObservationEndDate">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="406"/>
</Property>

<Property name="zAmmendedLabel">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="407"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="zOrderingDoctorName">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="408"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="zFindings">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="409"/>
<Parameter name="MAXLEN" value="2000000"/>
</Property>

<Property name="zTagfilename">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="410"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="zTagfilepath">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="411"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="zNTESign">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="412"/>
<Parameter name="MAXLEN" value="800"/>
</Property>

<Property name="zOBX51">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="413"/>
<Parameter name="MAXLEN" value="2000000"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// 07/28/2016 used Stream but changed to string as we now have long strings enabled

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Property zOBX51 As %Stream.GlobalCharacter;

]]></Content>
</UDLText>

<Method name="OutputLine">
<CodeMode>objectgenerator</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
   

 set strEmpty = ""
    set NewlineChar = $char(13,10)
    do %code.WriteLine(" set tLine=""""")
    For n = 1:1:%compiledclass.Properties.Count() {
		 Set tProp = %compiledclass.Properties.GetAt(n)
         if (tProp.Type="GC.Shared.DelimitedColumn" )& (tProp.Parameters.GetAt("COLNUM") < 400 ) //necessary?
        	{
	        	set tName=tProp.Name  //value in the array or line
	        	set tColNum=tProp.Parameters.GetAt("COLNUM")
	        	// replace  the nth piece of TLine with the value in tName
	            Do %code.WriteLine(" set $piece(tLine,"""_..#Delimiter_""","_tColNum_")=.."_tName)
	    	}
	   	}
   //  finally replace the |
     Do %code.WriteLine(" set tLine = $Translate(tLine,""|"") ")  
    	Do %code.WriteLine(" quit tLine") //return tLine	
	    quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>RadTagDelimitedFileDefaultData</DefaultData>
<Data name="RadTagDelimitedFileDefaultData">
<Subscript>"RadTagDelimitedFile"</Subscript>
<Value name="1">
<Value>PatientMRN</Value>
</Value>
<Value name="2">
<Value>PatientLastName</Value>
</Value>
<Value name="3">
<Value>PatientFirstName</Value>
</Value>
<Value name="4">
<Value>PatientMiddleInitial</Value>
</Value>
<Value name="5">
<Value>PatientDOB</Value>
</Value>
<Value name="6">
<Value>EncounterID</Value>
</Value>
<Value name="7">
<Value>DateOfService</Value>
</Value>
<Value name="8">
<Value>CernerDocumentID</Value>
</Value>
<Value name="9">
<Value>SourceSystem</Value>
</Value>
<Value name="10">
<Value>AuthorID</Value>
</Value>
<Value name="11">
<Value>AuthorLastName</Value>
</Value>
<Value name="12">
<Value>AuthorFirstName</Value>
</Value>
<Value name="13">
<Value>DocumentType</Value>
</Value>
<Value name="14">
<Value>TranscriptionistID</Value>
</Value>
<Value name="15">
<Value>TranscriptionistLastName</Value>
</Value>
<Value name="16">
<Value>TranscriptionistFirstName</Value>
</Value>
<Value name="17">
<Value>ExtSourceDocumentID</Value>
</Value>
<Value name="18">
<Value>RevisionCount</Value>
</Value>
<Value name="19">
<Value>VersionComment</Value>
</Value>
<Value name="20">
<Value>LastModifiedTime</Value>
</Value>
<Value name="21">
<Value>zPatientNameFirst</Value>
</Value>
<Value name="22">
<Value>zPatientNameMI</Value>
</Value>
<Value name="23">
<Value>zPatientNameLast</Value>
</Value>
<Value name="24">
<Value>zPatientMrn</Value>
</Value>
<Value name="25">
<Value>zPatientDob</Value>
</Value>
<Value name="26">
<Value>zPatientHospSrvCode</Value>
</Value>
<Value name="27">
<Value>zObservationEndDate</Value>
</Value>
<Value name="28">
<Value>zAmmendedLabel</Value>
</Value>
<Value name="29">
<Value>zOrderingDoctorName</Value>
</Value>
<Value name="30">
<Value>zFindings</Value>
</Value>
<Value name="31">
<Value>zTagfilename</Value>
</Value>
<Value name="32">
<Value>zTagfilepath</Value>
</Value>
<Value name="33">
<Value>zNTESign</Value>
</Value>
<Value name="34">
<Value>zOBX51</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="GC.eDOCS.TAGDelimitedFileNuance">
<Super>GC.Shared.Delimited</Super>
<TimeChanged>64323,30653.950958</TimeChanged>
<TimeCreated>61247,74636.838284</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// Description: Properties are used for the eDOCS Tag; zFindings has rtf for Word Doc

]]></Content>
</UDLText>

<Property name="PatientMRN">
<Description><![CDATA[
Last Updated: 07/28/2016 Al Johnson 
Moved to Prod: xx/xx/xxxx
Created: July 2016 Al Johnson
       Properties starting with z and COLNUM =>400 are filtered out when creating the tag file
       Use for the Word doc, file name and other uses
Note the inherited Delimiter parameter, defaults to "|". Override here to change this
Parameter Delimiter As %String = "|";
Define the names of the pieces in each record, specifying the 
piece using the COLNUM dataype parameter. Make sure they are unique and > 0]]></Description>
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="1"/>
<Parameter name="MAXLEN" value="30"/>
</Property>

<Property name="PatientLastName">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="2"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="PatientFirstName">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="3"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="PatientMiddleInitial">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="4"/>
</Property>

<Property name="PatientDOB">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="5"/>
</Property>

<Property name="EncounterID">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="6"/>
</Property>

<Property name="DateOfService">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="7"/>
</Property>

<Property name="CernerDocumentID">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="8"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="SourceSystem">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="9"/>
</Property>

<Property name="AuthorID">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="10"/>
</Property>

<Property name="AuthorLastName">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="11"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="AuthorFirstName">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="12"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="DocumentType">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="13"/>
</Property>

<Property name="TranscriptionistID">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="14"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="TranscriptionistLastName">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="15"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="TranscriptionistFirstName">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="16"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="ExtSourceDocumentID">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="17"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="RevisionCount">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="18"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="VersionComment">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="19"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="LastModifiedTime">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="20"/>
</Property>

<Property name="zFindings">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="401"/>
<Parameter name="MAXLEN" value="2000000"/>
</Property>

<Property name="zTagfilename">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="402"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="zNTESign">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="403"/>
<Parameter name="MAXLEN" value="800"/>
</Property>

<Property name="zFindingsComb">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="404"/>
<Parameter name="MAXLEN" value="2000000"/>
</Property>

<Property name="zTroubleShooting">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="405"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Property name="zMSH10andMSH7">
<Type>GC.Shared.DelimitedColumn</Type>
<Parameter name="COLNUM" value="406"/>
<Parameter name="MAXLEN" value="200"/>
</Property>

<Method name="OutputLine">
<CodeMode>objectgenerator</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
   
    set strEmpty = ""
    set NewlineChar = $char(13,10)
    do %code.WriteLine(" set tLine=""""")
    For n = 1:1:%compiledclass.Properties.Count() {
		 Set tProp = %compiledclass.Properties.GetAt(n)
         if (tProp.Type="GC.Shared.DelimitedColumn" )& (tProp.Parameters.GetAt("COLNUM") < 400 ) //necessary?
        	{
	        	set tName=tProp.Name  //value in the array or line
	        	set tColNum=tProp.Parameters.GetAt("COLNUM")
	        	// replace  the nth piece of TLine with the value in tName
	            Do %code.WriteLine(" set $piece(tLine,"""_..#Delimiter_""","_tColNum_")=.."_tName)
	    	}
	   	}
   //  finally replace the |
     Do %code.WriteLine(" set tLine = $Translate(tLine,""|"") ")  
    	Do %code.WriteLine(" quit tLine") //return tLine	
	    quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>TAGDelimitedFileNuanceDefaultData</DefaultData>
<Data name="TAGDelimitedFileNuanceDefaultData">
<Subscript>"TAGDelimitedFileNuance"</Subscript>
<Value name="1">
<Value>PatientMRN</Value>
</Value>
<Value name="2">
<Value>PatientLastName</Value>
</Value>
<Value name="3">
<Value>PatientFirstName</Value>
</Value>
<Value name="4">
<Value>PatientMiddleInitial</Value>
</Value>
<Value name="5">
<Value>PatientDOB</Value>
</Value>
<Value name="6">
<Value>EncounterID</Value>
</Value>
<Value name="7">
<Value>DateOfService</Value>
</Value>
<Value name="8">
<Value>CernerDocumentID</Value>
</Value>
<Value name="9">
<Value>SourceSystem</Value>
</Value>
<Value name="10">
<Value>AuthorID</Value>
</Value>
<Value name="11">
<Value>AuthorLastName</Value>
</Value>
<Value name="12">
<Value>AuthorFirstName</Value>
</Value>
<Value name="13">
<Value>DocumentType</Value>
</Value>
<Value name="14">
<Value>TranscriptionistID</Value>
</Value>
<Value name="15">
<Value>TranscriptionistLastName</Value>
</Value>
<Value name="16">
<Value>TranscriptionistFirstName</Value>
</Value>
<Value name="17">
<Value>ExtSourceDocumentID</Value>
</Value>
<Value name="18">
<Value>RevisionCount</Value>
</Value>
<Value name="19">
<Value>VersionComment</Value>
</Value>
<Value name="20">
<Value>LastModifiedTime</Value>
</Value>
<Value name="21">
<Value>zFindings</Value>
</Value>
<Value name="22">
<Value>zTagfilename</Value>
</Value>
<Value name="23">
<Value>zNTESign</Value>
</Value>
<Value name="24">
<Value>zFindingsComb</Value>
</Value>
<Value name="25">
<Value>zTroubleShooting</Value>
</Value>
<Value name="26">
<Value>zMSH10andMSH7</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="GC.eDOCS.TildeReplace2">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64250,48558.622822</TimeChanged>
<TimeCreated>64126,43461.612489</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORU_R01' targetDocType='231.Cerner:ORU_R01' create='copy' language='objectscript' >
<foreach property='target.{ORCgrp(1).OBXgrp()}' key='k1'>
<assign value='$REPLACE(target.{ORCgrp(1).OBXgrp(k1).OBX:5},"~","/")' property='target.{ORCgrp(1).OBXgrp(k1).OBX:5}' action='set' />
<assign value='$REPLACE(target.{ORCgrp(1).OBXgrp(k1).OBX:5},"/^^RTF^^","/")' property='target.{ORCgrp(1).OBXgrp(k1).OBX:5}' action='set' />
<assign value='$REPLACE(target.{ORCgrp(1).OBXgrp(k1).OBX:5},"/.br/","/ ")' property='target.{ORCgrp(1).OBXgrp(k1).OBX:5}' action='set' />
</foreach>
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.eDOCS.TildeReplace3">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64345,49070.569711</TimeChanged>
<TimeCreated>64126,43461.612489</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORU_R01' targetDocType='231.Cerner:ORU_R01' create='copy' language='objectscript' >
<foreach property='target.{ORCgrp(1).OBXgrp()}' key='k1'>
<code>
<![CDATA[
     // extract the obx into 3 pieces delimited by '{\rtf1\' and '}|'
     //  perform actions on middle
     //  add back delimiters when recreating obx segment
     ]]]]><![CDATA[></code>

<assign value='""' property='holdobxseg' action='set' />
<assign value='target.{ORCgrp(1).OBXgrp(k1).OBX}' property='holdobxseg' action='set' />

<assign value='""' property='holdobxseg1' action='set' />
<assign value='""' property='holdobxseg1a' action='set' />
<assign value='""' property='holdobxseg2' action='set' />
<assign value='""' property='holdobxseg3' action='set' />

<assign value='$PIECE(holdobxseg,"{\rtf1\",1)' property='holdobxseg1' action='set' />
<assign value='$PIECE(holdobxseg,"{\rtf1\",2)' property='holdobxseg1a' action='set' />

<assign value='$PIECE(holdobxseg1a,"}|",1)' property='holdobxseg2' action='set' />
<assign value='$PIECE(holdobxseg1a,"}|",2)' property='holdobxseg3' action='set' />

<assign value='$REPLACE(holdobxseg2,"|"," ")' property='holdobxseg2' action='set' />
<assign value='$REPLACE(holdobxseg2,"~","/")' property='holdobxseg2' action='set' />
<assign value='$REPLACE(holdobxseg2,"/^^RTF^^","/")' property='holdobxseg2' action='set' />
<assign value='$REPLACE(holdobxseg2,"/.br/","/ ")' property='holdobxseg2' action='set' />

<assign value='(holdobxseg1_"{\rtf1\"_holdobxseg2_"}|"_holdobxseg3)' property='target.{ORCgrp(1).OBXgrp(k1).OBX}' action='set' />

</foreach>
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.eDOCSsql.ADTParameters">
<Super>Ens.Request</Super>
<TimeChanged>63872,45329.527104</TimeChanged>
<TimeCreated>63872,45269.060886</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// --------------------------------------------------------------

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Create By: Ellen Leichtman on 07/28/2014

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//  Last Updated DEV 09/02/2014

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//  Last Updated PROD : not in Prod

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//  Modified BY: None

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//  Modified Date: None

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//  ModifiedDesc: None

]]></Content>
</UDLText>

<Property name="MSHf10msgControlID">
<Description>
Last Updated in Prod - never
Description: Send ADT eDoc ( was cyberdocs)      
PROD:  SQLDATA06\PRODSQL04
DEV SQL  server: (SQLDATA06\PRODSQL04).
Database: EHRDev
Stored:  proc will be called EHRDev.docsadm.sp_hl7_event
Table: NA, handled by Vendors
</Description>
<Type>%String</Type>
<Parameter name="EXTERNALSQLTYPE" value="12"/>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="EVNf1transactionType">
<Type>%String</Type>
<Parameter name="EXTERNALSQLTYPE" value="12"/>
<Parameter name="MAXLEN" value="6"/>
</Property>

<Property name="MRGf1mrNumber">
<Type>%String</Type>
<Parameter name="EXTERNALSQLTYPE" value="12"/>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PIDf3mergeToMRNumber">
<Type>%String</Type>
<Parameter name="EXTERNALSQLTYPE" value="12"/>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Pidf5s1patientName">
<Type>%String</Type>
<Parameter name="EXTERNALSQLTYPE" value="12"/>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PIDf7DOB">
<Type>%String</Type>
<Parameter name="EXTERNALSQLTYPE" value="12"/>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Property name="PIDf8sex">
<Type>%String</Type>
<Parameter name="EXTERNALSQLTYPE" value="12"/>
<Parameter name="MAXLEN" value="1"/>
</Property>

<Property name="PIDf18visitID">
<Type>%String</Type>
<Parameter name="EXTERNALSQLTYPE" value="12"/>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="PV1f2visitType">
<Type>%String</Type>
<Parameter name="EXTERNALSQLTYPE" value="12"/>
<Parameter name="MAXLEN" value="15"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// sample 20140724093757

]]></Content>
</UDLText>

<Property name="PV1f44admitDate">
<Type>%String</Type>
<Parameter name="EXTERNALSQLTYPE" value="12"/>
<Parameter name="MAXLEN" value="20"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// sample 20140724235959

]]></Content>
</UDLText>

<Property name="PV1F45dischargeDate">
<Type>%String</Type>
<Parameter name="EXTERNALSQLTYPE" value="12"/>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ADTParametersDefaultData</DefaultData>
<Data name="ADTParametersDefaultData">
<Subscript>"ADTParameters"</Subscript>
<Value name="1">
<Value>EVNf1transactionType</Value>
</Value>
<Value name="2">
<Value>MSHf10msgControlID</Value>
</Value>
<Value name="3">
<Value>MRGf1mrNumber</Value>
</Value>
<Value name="4">
<Value>PIDf3mergeToMRNumber</Value>
</Value>
<Value name="5">
<Value>Pidf5s1patientName</Value>
</Value>
<Value name="6">
<Value>PIDf7DOB</Value>
</Value>
<Value name="7">
<Value>PIDf8sex</Value>
</Value>
<Value name="8">
<Value>PIDf18visitID</Value>
</Value>
<Value name="9">
<Value>PV1f2visitType</Value>
</Value>
<Value name="10">
<Value>PV1f44admitDate</Value>
</Value>
<Value name="11">
<Value>PV1F45dischargeDate</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="GC.eDocsBoRule">
<Description>
Created 10/01/2014
Created By Ellen Leichtman
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65409,57930.849373</TimeChanged>
<TimeCreated>63903,32998.330838</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Remove Test Patients" disabled="true">
<when condition="(HL7.{PID:PatientIdentifierList(1).ID} In &quot;507424,515173,600000,600001&quot;)">
<return></return>
</when>
</rule>
<rule name="Merge MRN to SameMRN" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34"></constraint>
<when condition="HL7.{PID:3(1).1}=HL7.{MRG:1(1).1}">
<send transform="" target="File.O.ArchiveStopped"></send>
<return></return>
</when>
</rule>
<rule name="Merge" disabled="false">
<constraint name="docName" value="ADT_A34"></constraint>
<when condition="1">
<send transform="GC.Cerner2eDocsSqlADT40" target="SQL.O.eDocsAdt2Prod2019"></send>
<return></return>
</when>
</rule>
<rule name="A01,A03,A04,A08,A11,A13,A28,A31" disabled="false">
<constraint name="docName" value="ADT_A01,ADT_A03,ADT_A04,ADT_A08,ADT_A11,ADT_A13,ADT_A28,ADT_A31"></constraint>
<when condition="1">
<send transform="GC.Cerner2eDocsSqlADT" target="SQL.O.eDocsAdt2Prod2019"></send>
<return></return>
</when>
</rule>
<rule name="Radiology Results to Edocs" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="(HL7.{ORCgrp(1).OBR:25} DoesNotContain &quot;P&quot;) DoesNotContain &quot;P&quot;">
<send transform="GC.Cerner2eDOCSRadTag" target="File.O.eDOCSRad"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.eDocsBsoRule">
<Description>
Created 10/01/2014
Created By Ellen Leichtman
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64428,44727.500347</TimeChanged>
<TimeCreated>63903,32998.330838</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="" disabled="true">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34"></constraint>
<when condition="DoesNotContain(HL7.{MRG})">
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<when condition="(HL7.{PID:PatientIdentifierList(1).ID} In &quot;507424,515173,600000,600001&quot;)">
<return></return>
</when>
</rule>
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="Merge MRN to SameMRN" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34"></constraint>
<when condition="HL7.{PID:3(1).1}=HL7.{MRG:1(1).1}">
<send transform="" target="File.O.ArchiveStopped"></send>
<return></return>
</when>
</rule>
<rule name="Merge" disabled="false">
<constraint name="docName" value="ADT_A34"></constraint>
<when condition="1">
<send transform="GC.Cerner2eDocsSqlADT40" target="SQL.O.eDocsAdtVer2"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A34"></constraint>
<when condition="1">
<send transform="" target="File.O.ArchiveStopped"></send>
<return></return>
</when>
</rule>
<rule name="A01,A03,A04,A08,A11,A13,A28,A31" disabled="false">
<constraint name="docName" value="ADT_A01,ADT_A03,ADT_A04,ADT_A08,ADT_A11,ADT_A13,ADT_A28,ADT_A31"></constraint>
<when condition="1">
<send transform="GC.Cerner2eDocsSqlADT" target="SQL.O.eDocsAdtVer2"></send>
<return></return>
</when>
</rule>
<rule name="Radiology Results to Edocs" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="(HL7.{ORCgrp(1).OBR:25} DoesNotContain &quot;P&quot;) DoesNotContain &quot;P&quot;">
<send transform="GC.Cerner2eDOCSRadTag" target="File.O.eDOCSRad"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.eDocsRadBsRule">
<Description>
Created 10/01/2014
Created By Ellen Leichtman
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>66973,31952.179746</TimeChanged>
<TimeCreated>63903,32998.330838</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Block Test Patients - ORU" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="Exists(&quot;T_CernerProd_TestPatients&quot;,HL7.{PID:PatientIdentifierList(1).ID})">
<return></return>
</when>
</rule>
<rule name="Archive">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="Radiology Results to Edocs" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="1">
<send transform="" target="eDocs.P.bo"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.eDocsScan.BSeDOCS">
<Description>
put new records from eDocs and send URL to Cener </Description>
<Super>Ens.BusinessService</Super>
<TimeChanged>64257,45774.480589</TimeChanged>
<TimeCreated>64209,53649.842193</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.InboundAdapter</Default>
</Parameter>

<Parameter name="REQUESTCLASSES">
<Type>%String</Type>
<Default>EnsLib.SQL.Snapshot</Default>
</Parameter>

<Property name="TargetConfigName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// http://172.25.50.143:57773/csp/docbook/DocBook.UI.Page.cls?KEY=EGDV_prog#EGDV_prog_settings

]]></Content>
</UDLText>

<Parameter name="SETTINGS">
<Type>%String</Type>
<Default>TargetConfigName</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:EnsLib.SQL.Snapshot,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 set req=##class(GC.eDocsScan.eDocRecordDef).%New()
 set req.rank=pInput.Get("rank")
 set req.systemID=pInput.Get("systemID")
 set req.creationDate=pInput.Get("creationDate")
 set req.mrn=pInput.Get("mrn")
 set req.account=pInput.Get("account")
 set req.firstName=pInput.Get("firstName")
 set req.lastName=pInput.Get("lastName")
 set req.DOB=pInput.Get("DOB")
 set req.documentTypeID=pInput.Get("documentTypeID")
 set req.documentType=pInput.Get("documentType")
 set req.docDescription=pInput.Get("docDescription")
 set req.admitDate=pInput.Get("admitDate")
 set req.dischargeDate=pInput.Get("dischargeDate")
 set req.linkUrl=pInput.Get("linkUrl")
 set req.versionNbr=pInput.Get("versionNbr")
 set req.msgID=pInput.Get("msgID")
 set sc=..SendRequestAsync(..TargetConfigName,req)
 Quit sc
]]></Implementation>
</Method>
</Class>


<Class name="GC.eDocsScan.EDocs2ORU">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64449,36103.456811</TimeChanged>
<TimeCreated>64210,34891.435791</TimeCreated>
<DependsOn>GC.eDocsScan.eDocRecordDef,EnsLib.HL7.Message</DependsOn>

<UDLText name="T">
<Content><![CDATA[
// Last Updated: 

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Moved to Prod - xx/xx/xxxx

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// copied from Dev 

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// last update in Dev 06/14/2017

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Create: 12/14/2016 Ellen Leichtman

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    Description: Scanned documnet that are sent to Cerner as ORU 

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//                 Send pointer/ URL

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// 

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    Remove c/r (hex 0D) l/f (hex 0A) from OBR-4.5  Al Johnson 06/14/2017

]]></Content>
</UDLText>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='GC.eDocsScan.eDocRecordDef' targetClass='EnsLib.HL7.Message' targetDocType='231.Cerner:ORU_R01' create='new' language='objectscript' >
<assign value='source.DOB' property='target.{PID:DateTimeOfBirth}' action='set' />
<assign value='"ORU"' property='target.{MSH:MessageType.messagetype}' action='set' />
<assign value='"R01"' property='target.{MSH:MessageType.triggerevent}' action='set' />
<assign value='source.account' property='target.{PV1:VisitNumber}' action='set' />
<assign value='"RP"' property='target.{ORCgrp(1).OBXgrp(1).OBX:ValueType(1) }' action='set' />
<assign value='source.firstName' property='target.{PID:PatientName(1).givenname}' action='set' />
<assign value='""' property='target.{ORCgrp(1).ORC:OrderControl}' action='set' />
<assign value='source.lastName' property='target.{PID:PatientName(1).familylastname.familyname}' action='set' />
<assign value='source.creationDate' property='target.{ORCgrp(1).OBR:ObservationDateTime}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBR:SetIDOBR}' action='set' />
<assign value='source.mrn' property='target.{PID:PatientIdentifierList(1)}' action='set' />
<assign value='source.linkUrl' property='tmpUrl' action='set' />
<assign value='"&lt;"' property='tmpLT' action='set' />
<assign value='"&gt;"' property='tmpGT' action='set' />
<assign value='"&amp;"' property='tmpAND' action='set' />
<assign value='$REPLACE(tmpUrl,tmpAND,"&amp;")' property='tmpUrl' action='set' />
<assign value='$REPLACE(tmpUrl,tmpLT,"&lt;")' property='tmpUrl' action='set' />
<assign value='$REPLACE(tmpUrl,tmpGT,"&gt;")' property='tmpUrl' action='set' />
<assign value='tmpUrl_"^URL^URL"' property='tmpUrl' action='set' />
<assign value='tmpUrl' property='target.{ORCgrp(1).OBXgrp(1).OBX:5}' action='set' />
<assign value='$REPLACE(target.{ORCgrp(1).OBXgrp(1).OBX:5},"gcshdmedocsde01","gcshdmedocspr01")' property='target.{ORCgrp(1).OBXgrp(1).OBX:5}' action='set' />

<assign value='"GCSH"' property='target.{MSH:SendingFacility}' action='set' />
<assign value='"GCHS"' property='target.{MSH:ReceivingApplication}' action='set' />
<assign value='"GCSH"' property='target.{MSH:ReceivingFacility}' action='set' />
<assign value='"EDOCSSCAN"' property='target.{MSH:SendingApplication}' action='set' />
<assign value='source.msgID' property='target.{MSH:MessageControlID}' action='set' />
<assign value='source.documentType' property='target.{ORCgrp(1).OBR:UniversalServiceID.text}' action='set' />
<assign value='source.documentTypeID' property='target.{ORCgrp(1).OBR:UniversalServiceID.identifier}' action='set' />
<assign value='source.documentTypeID' property='target.{ORCgrp(1).OBXgrp(1).OBX:ObservationIdentifier}' action='set' />
<code>
<![CDATA[ 
	/* *********************************************************************************
	12/14/2016 EJL we do not need this as the pointer is alway pointing to the current doc in edocs.
	               Currently the C is not working with Cerner. Must have F before a C.
	               Joel is looking to see how to send corrections if needed
 	<if condition='source.versionNbr = 1' >
	<true>
	<assign value='"F"' property='target.{ORCgrp(1).OBR:ResultStatus}' action='set' />
	<assign value='"F"' property='target.{ORCgrp(1).OBXgrp(1).OBX:ObservationResultStatus}' action='set' />
	</true>
	<false>
	<assign value='"C"' property='target.{ORCgrp(1).OBR:ResultStatus}' action='set' />
	<assign value='"C"' property='target.{ORCgrp(1).OBXgrp(1).OBX:ObservationResultStatus}' action='set' />
	</false>
	</if>
	****************************************************************************************  */
]]]]><![CDATA[></code>
<assign value='"F"' property='target.{ORCgrp(1).OBR:ResultStatus}' action='set' />
<assign value='"F"' property='target.{ORCgrp(1).OBXgrp(1).OBX:ObservationResultStatus}' action='set' />
<assign value='"MDOC"' property='target.{ORCgrp(1).OBR:DiagnosticServSectID}' action='set' />
<assign value='"EDOCSSCAN"' property='target.{ORCgrp(1).OBR:FillerField1}' action='set' />
<assign value='source.systemID' property='target.{ORCgrp(1).OBR:FillerField2}' action='set' />
<assign value='source.systemID' property='target.{ORCgrp().OBR:FillerOrderNumber}' action='set' />
<assign value='2.3' property='target.{MSH:VersionID}' action='set' />
<assign value='source.creationDate' property='target.{ORCgrp(1).OBXgrp(1).OBX:DateTimeoftheObservation.timeofanevent}' action='set' />

<assign value='source.documentType' property='target.{ORCgrp().OBXgrp(1).OBX:ObservationIdentifier.text}' action='set' />
<code>
<![CDATA[ 
	/* ************************************************
	12/14/2016 EJL Issue with weird ascii character
	06/14/2017 source.docDescription containing cr/lf embedded - remove if found ALJ 
	original -
	 <if condition='$LENGTH(source.docDescription) &gt; 2' >
     <true>
     <assign value='source.docDescription' property='target.{ORCgrp(1).OBR:UniversalServiceID.alternatetext}' action='set' />
     </true>
     </if>
     06/15/2017 if no source.docDescription OBR-4 format must be |0111-006^Addendum to Preop Physician Order|||
     06/15/2017  and not |0111-006^Addendum to Preop Physician Order^^^|
	***************************************************  */
]]]]><![CDATA[></code>
<assign value='source.docDescription' property='tempaltid' action='set' />
<assign value='$REPLACE(tempaltid,$Char(10),"")' property='tempaltid' action='set' />
<assign value='$REPLACE(tempaltid,$Char(13),"")' property='tempaltid' action='set' />

<if condition='$LENGTH(tempaltid) &gt; 2' >
<true>
<assign value='tempaltid' property='target.{ORCgrp(1).OBR:UniversalServiceID.alternatetext}' action='set' />
</true>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.eDocsScan.EDocs2ORUb4chg061517">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64449,33131.270735</TimeChanged>
<TimeCreated>64210,34891.435791</TimeCreated>
<DependsOn>GC.eDocsScan.eDocRecordDef,EnsLib.HL7.Message</DependsOn>

<UDLText name="T">
<Content><![CDATA[
// Last Updated: 

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Moved to Prod - xx/xx/xxxx

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// copied from Dev 

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// last update in Dev 02/09/2015

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Create: 12/14/2016 Ellen Leichtman

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    Description: Scanned documnet that are sent to Cerner as ORU 

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//                 Send pointer/ URL

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// 

]]></Content>
</UDLText>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='GC.eDocsScan.eDocRecordDef' targetClass='EnsLib.HL7.Message' targetDocType='231.Cerner:ORU_R01' create='new' language='objectscript' >
<assign value='source.DOB' property='target.{PID:DateTimeOfBirth}' action='set' />
<assign value='"ORU"' property='target.{MSH:MessageType.messagetype}' action='set' />
<assign value='"R01"' property='target.{MSH:MessageType.triggerevent}' action='set' />
<assign value='source.account' property='target.{PV1:VisitNumber}' action='set' />
<assign value='"RP"' property='target.{ORCgrp(1).OBXgrp(1).OBX:ValueType(1) }' action='set' />
<assign value='source.firstName' property='target.{PID:PatientName(1).givenname}' action='set' />
<assign value='""' property='target.{ORCgrp(1).ORC:OrderControl}' action='set' />
<assign value='source.lastName' property='target.{PID:PatientName(1).familylastname.familyname}' action='set' />
<assign value='source.creationDate' property='target.{ORCgrp(1).OBR:ObservationDateTime}' action='set' />
<assign value='""' property='target.{ORCgrp(1).OBR:SetIDOBR}' action='set' />
<assign value='source.mrn' property='target.{PID:PatientIdentifierList(1)}' action='set' />
<assign value='source.linkUrl' property='tmpUrl' action='set' />
<assign value='"&lt;"' property='tmpLT' action='set' />
<assign value='"&gt;"' property='tmpGT' action='set' />
<assign value='"&amp;"' property='tmpAND' action='set' />
<assign value='$REPLACE(tmpUrl,tmpAND,"&amp;")' property='tmpUrl' action='set' />
<assign value='$REPLACE(tmpUrl,tmpLT,"&lt;")' property='tmpUrl' action='set' />
<assign value='$REPLACE(tmpUrl,tmpGT,"&gt;")' property='tmpUrl' action='set' />

<assign value='tmpUrl_"^URL^URL"' property='tmpUrl' action='set' />
<assign value='tmpUrl' property='target.{ORCgrp(1).OBXgrp(1).OBX:5}' action='set' />
<assign value='$REPLACE(target.{ORCgrp(1).OBXgrp(1).OBX:5},"gcshdmedocsde01","gcshdmedocspr01")' property='target.{ORCgrp(1).OBXgrp(1).OBX:5}' action='set' />

<assign value='"GCSH"' property='target.{MSH:SendingFacility}' action='set' />
<assign value='"GCHS"' property='target.{MSH:ReceivingApplication}' action='set' />
<assign value='"GCSH"' property='target.{MSH:ReceivingFacility}' action='set' />
<assign value='"EDOCSSCAN"' property='target.{MSH:SendingApplication}' action='set' />
<assign value='source.msgID' property='target.{MSH:MessageControlID}' action='set' />
<assign value='source.documentType' property='target.{ORCgrp(1).OBR:UniversalServiceID.text}' action='set' />
<assign value='source.documentTypeID' property='target.{ORCgrp(1).OBR:UniversalServiceID.identifier}' action='set' />
<assign value='source.documentTypeID' property='target.{ORCgrp(1).OBXgrp(1).OBX:ObservationIdentifier}' action='set' />
<code>
<![CDATA[ 
	/* *********************************************************************************
	12/14/2016 EJL we do not need this as the pointer is alway pointing to the current doc in edocs.
	               Currently the C is not working with Cerner. Must have F before a C.
	               Joel is looking to see how to send corrections if needed
 	<if condition='source.versionNbr = 1' >
	<true>
	<assign value='"F"' property='target.{ORCgrp(1).OBR:ResultStatus}' action='set' />
	<assign value='"F"' property='target.{ORCgrp(1).OBXgrp(1).OBX:ObservationResultStatus}' action='set' />
	</true>
	<false>
	<assign value='"C"' property='target.{ORCgrp(1).OBR:ResultStatus}' action='set' />
	<assign value='"C"' property='target.{ORCgrp(1).OBXgrp(1).OBX:ObservationResultStatus}' action='set' />
	</false>
	</if>
	****************************************************************************************  */
]]]]><![CDATA[></code>
<assign value='"F"' property='target.{ORCgrp(1).OBR:ResultStatus}' action='set' />
<assign value='"F"' property='target.{ORCgrp(1).OBXgrp(1).OBX:ObservationResultStatus}' action='set' />
<assign value='"MDOC"' property='target.{ORCgrp(1).OBR:DiagnosticServSectID}' action='set' />
<assign value='"EDOCSSCAN"' property='target.{ORCgrp(1).OBR:FillerField1}' action='set' />
<assign value='source.systemID' property='target.{ORCgrp(1).OBR:FillerField2}' action='set' />
<assign value='source.systemID' property='target.{ORCgrp().OBR:FillerOrderNumber}' action='set' />
<assign value='2.3' property='target.{MSH:VersionID}' action='set' />
<assign value='source.creationDate' property='target.{ORCgrp(1).OBXgrp(1).OBX:DateTimeoftheObservation.timeofanevent}' action='set' />

<assign value='source.documentType' property='target.{ORCgrp().OBXgrp(1).OBX:ObservationIdentifier.text}' action='set' />
<code>
<![CDATA[ 
	/* ************************************************
	12/14/2016 EJL Issue with weird ascii character  
	***************************************************  */
]]]]><![CDATA[></code>
<if condition='$LENGTH(source.docDescription) &gt; 2' >
<true>
<assign value='source.docDescription' property='target.{ORCgrp(1).OBR:UniversalServiceID.alternatetext}' action='set' />
</true>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.eDocsScan.EDocs2OruUrlCorrectionBp">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64328,52712.939406</TimeChanged>
<TimeCreated>64210,34891.435791</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<UDLText name="T">
<Content><![CDATA[
// Last Updated: 

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Moved to Prod - xx/xx/xxxx

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// copied from Dev 

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// last update in Dev 02/14/2017 

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Create: 02/14/2017 Ellen Leichtman

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    Description: Used for Resend to Cerner

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    Make all corrections and fix URL form Dev to PROd  

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// 

]]></Content>
</UDLText>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORU_R01' targetDocType='231.Cerner:ORU_R01' create='copy' language='objectscript' >
<assign value='$REPLACE(target.{ORCgrp(1).OBXgrp(1).OBX:5},"gcshdmedocsde01","gcshdmedocspr01")' property='target.{ORCgrp(1).OBXgrp(1).OBX:5}' action='set' />
<assign value='"C"' property='target.{ORCgrp(1).OBR:ResultStatus}' action='set' />
<assign value='"C"' property='target.{ORCgrp(1).OBXgrp(1).OBX:ObservationResultStatus}' action='set' />

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.eDocsScan.EDocs2OruUrlToProdBpResend">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>64355,38607.700259</TimeChanged>
<TimeCreated>64210,34891.435791</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<UDLText name="T">
<Content><![CDATA[
// Last Updated: 

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Moved to Prod - xx/xx/xxxx

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// copied from Dev 

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// last update in Dev 02/14/2017 

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// Create: 02/14/2017 Ellen Leichtman

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    Description: Used for Resend to Cerner

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    Make all corrections and fix URL form Dev to PROd  

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// 

]]></Content>
</UDLText>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ORU_R01' targetDocType='231.Cerner:ORU_R01' create='copy' language='objectscript' >
<assign value='$REPLACE(target.{ORCgrp(1).OBXgrp(1).OBX:5},"gcshdmedocsde01","gcshdmedocspr01")' property='target.{ORCgrp(1).OBXgrp(1).OBX:5}' action='set' />
</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.eDocsScan.eDocRecordDef">
<Super>Ens.Request</Super>
<TimeChanged>64257,36061.666556</TimeChanged>
<TimeCreated>64209,55161.922946</TimeCreated>

<Property name="rank">
<Type>%String</Type>
</Property>

<Property name="systemID">
<Type>%String</Type>
</Property>

<Property name="creationDate">
<Type>%String</Type>
</Property>

<Property name="mrn">
<Type>%String</Type>
</Property>

<Property name="account">
<Type>%String</Type>
</Property>

<Property name="firstName">
<Type>%String</Type>
</Property>

<Property name="lastName">
<Type>%String</Type>
</Property>

<Property name="DOB">
<Type>%String</Type>
</Property>

<Property name="documentTypeID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="documentType">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="docDescription">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="admitDate">
<Type>%String</Type>
</Property>

<Property name="dischargeDate">
<Type>%String</Type>
</Property>

<Property name="linkUrl">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Property name="versionNbr">
<Type>%String</Type>
</Property>

<Property name="msgID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>eDocRecordDefDefaultData</DefaultData>
<Data name="eDocRecordDefDefaultData">
<Structure>listnode</Structure>
<Subscript>"eDocRecordDef"</Subscript>
<Value name="1">
<Value>rank</Value>
</Value>
<Value name="2">
<Value>systemID</Value>
</Value>
<Value name="3">
<Value>creationDate</Value>
</Value>
<Value name="4">
<Value>mrn</Value>
</Value>
<Value name="5">
<Value>account</Value>
</Value>
<Value name="6">
<Value>firstName</Value>
</Value>
<Value name="7">
<Value>lastName</Value>
</Value>
<Value name="8">
<Value>DOB</Value>
</Value>
<Value name="9">
<Value>documentTypeID</Value>
</Value>
<Value name="10">
<Value>documentType</Value>
</Value>
<Value name="11">
<Value>docDescription</Value>
</Value>
<Value name="12">
<Value>admitDate</Value>
</Value>
<Value name="13">
<Value>dischargeDate</Value>
</Value>
<Value name="14">
<Value>linkUrl</Value>
</Value>
<Value name="15">
<Value>versionNbr</Value>
</Value>
<Value name="16">
<Value>msgID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="GC.eDocsScanBoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64770,36927.988109</TimeChanged>
<TimeCreated>64209,58131.897772</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
</rule>
<send transform="" target="HL7.O.CrEdocsScanORU"></send>
<return></return>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.eDocsScanBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65037,35185.245397</TimeChanged>
<TimeCreated>64209,58131.897772</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.MsgRouter.VDocRoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Resend for reports that Libby aliased" disabled="true">
<constraint name="source" value="Bso.P.eDocsScan"></constraint>
<when condition="1">
<send transform="GC.eDocsScan.EDocs2OruUrlToProdBpResend" target="HL7.O.CrEdocsScanORU"></send>
<return></return>
</when>
</rule>
<rule name="Resent to fix incorrect URL" disabled="true">
<constraint name="source" value="Bso.P.eDocsScan"></constraint>
<when condition="1">
<send transform="GC.eDocsScan.EDocs2OruUrlCorrectionBp" target="HL7.O.CrEdocsScanORU"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="source" value="SQL.S.eDocsScans"></constraint>
</rule>
<send transform="GC.eDocsScan.EDocs2ORU" target="HL7.O.CrEdocsScanORU,File.O.ArchiveEdocsScan"></send>
<return></return>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.eDocsScanBsoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64513,47536.389739</TimeChanged>
<TimeCreated>64209,58131.897772</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.MsgRouter.VDocRoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Resend for reports that Libby aliased" disabled="true">
<constraint name="source" value="Bso.P.eDocsScan"></constraint>
<when condition="1">
<send transform="GC.eDocsScan.EDocs2OruUrlToProdBpResend" target="HL7.O.CrEdocsScanORU"></send>
<return></return>
</when>
</rule>
<rule name="Resent to fix incorrect URL" disabled="true">
<constraint name="source" value="Bso.P.eDocsScan"></constraint>
<when condition="1">
<send transform="GC.eDocsScan.EDocs2OruUrlCorrectionBp" target="HL7.O.CrEdocsScanORU"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="source" value="SQL.S.eDocsScans"></constraint>
</rule>
<send transform="GC.eDocsScan.EDocs2ORU" target="HL7.O.CrEdocsScanORU,File.O.ArchiveEdocsScan"></send>
<return></return>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.zzImageStreamBoRule">
<Description>
Route ADT to ImageStream from Affinity
updated June 2 - stop all messages as there is not a test enviroment. </Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64288,58467.928816</TimeChanged>
<TimeCreated>62706,62587.26044</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssistCompatible</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="QCPR ADT Feed ImageStream" disabled="false">
<constraint name="source" value="zzQmint02.S.ImageStreamAdt"></constraint>
<when condition="1">
<send transform="" target="HL7.O.ImageStreamAdt"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="msgClass" value="EnsLib.HL7.Message"></constraint>
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="" disabled="true">
<constraint name="docCategory" value="231.Cerner"></constraint>
<when condition="(HL7.{PID:PatientIdentifierList(1).ID}&gt;399999)&amp;&amp;(HL7.{PID:PatientIdentifierList(1).ID}&lt;600000)">
<send transform="" target="File.O.ArchiveStopped"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="source" value="HL7.S.CrImageSteamAdt"></constraint>
<when condition="1">
<send transform="" target="HL7.O.ImageStreamAdt"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.zzMultiAdt2CertBsRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64288,38942.606856</TimeChanged>
<TimeCreated>63844,26825.658005</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Archive" disabled="false">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="" disabled="false">
<when condition="1">
<send transform="" target="zzCerner.O.CertMultiAdt"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.zzNuanceEscriptionBsoHold1Rule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64345,50020.266003</TimeChanged>
<TimeCreated>63901,50070.329867</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Archive" disabled="true">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="ReProcess Valid Addendums" disabled="true">
<constraint name="source" value="HL7.S.CrEdocsNuanceOru"></constraint>
<when condition="Exists(&quot;T_eDOCS_ClinicalDocs&quot;,Document.{ORCgrp(1).OBR:4(1).1})&amp;&amp;(Document.{ORCgrp(1).OBXgrp(2).OBX:5(1).3}=&quot;RTF&quot;)">
<send transform="GC.eDOCS.TildeReplace3,GC.Nuance2eDOCSTagRevBFix" target="zzFile.O.eDOCSNuance"></send>
<return></return>
</when>
</rule>
<rule name="ReProcess type 62 reports" disabled="false">
<constraint name="source" value="HL7.S.CrEdocsNuanceOru"></constraint>
<when condition="Exists(&quot;T_eDOCS_ClinicalDocs&quot;,Document.{ORCgrp(1).OBR:4(1).1})&amp;&amp;(Document.{ORCgrp(1).OBXgrp(1).OBX:5(1).3}=&quot;RTF&quot;)">
<send transform="GC.eDOCS.TildeReplace3,GC.Nuance2eDOCSTagRevBFix" target="zzFile.O.eDOCSNuance"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.zzNuanceEscriptionBsoHold2Rule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64336,56008.383005</TimeChanged>
<TimeCreated>63901,50070.329867</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Archive" disabled="true">
<when condition="1">
<send transform="" target="File.O.ArchiveInbound"></send>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="source" value="zzBso.P.eDocsNuanceHold1"></constraint>
<when condition="1">
<send transform="" target="zzFile.O.eDOCSNuance"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.zzRgnsLabBsoHold1Rule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64334,59081.64373</TimeChanged>
<TimeCreated>63901,52869.534497</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="QCPR Order Nbrs" disabled="false">
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="ORU_R01,ORM_O01,ORM_O02"></constraint>
<when condition="LENGTH(HL7.{OBR:2.1})=7">
<send transform="" target="zzBso.P.RgnsHold2ORU"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.zzRgnsLabBsoHold2Rule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64334,54919.98768</TimeChanged>
<TimeCreated>63901,52869.534497</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="QCPR Order Nbrs" disabled="false">
<constraint name="docCategory" value="22.RegLab"></constraint>
<constraint name="docName" value="ORU_R01"></constraint>
<when condition="1">
<send transform="" target="File.O.ArchiveStopped"></send>
<send transform="" target="zzRegLab.O.Qmint02OrmOru"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.zzSprBsoRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64288,58486.003919</TimeChanged>
<TimeCreated>63901,53817.930811</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="" disabled="false">
<constraint name="source" value="zzQmint02.S.SPROrmOru"></constraint>
<when condition="1">
<send transform="" target="zzHL7.O.SprOrmOru"></send>
<return></return>
</when>
</rule>
<rule name="" disabled="false">
<constraint name="source" value="zzSPR.S.oruCarestream2Qmint02"></constraint>
<when condition="1">
<send transform="" target="zzSPR.O.oruCarestream2Qmint02"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.zzSprBsoRuleRoutingRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>64274,40931.911926</TimeChanged>
<TimeCreated>64274,40931.909276</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="">
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.zzalj2RgnsLabBoRuleBeakerAdt">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65100,35669.24365</TimeChanged>
<TimeCreated>63901,52869.534497</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Outpatient from Cerner" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A02,ADT_A03,ADT_A04,ADT_A05,ADT_A06,ADT_A07,ADT_A08,ADT_A09,ADT_A10,ADT_A11,ADT_A12,ADT_A13,ADT_A14,ADT_A15,ADT_A16,ADT_A17,ADT_A21,ADT_A22,ADT_A23,ADT_A24,ADT_A25,ADT_A26,ADT_A28,ADT_A29,ADT_A31,ADT_A34,ADT_A38,ADT_A35,ADT_A44,ADT_ADSC"></constraint>
<when condition="Document.{PV1:2}!=&quot;I&quot;">
<return></return>
</when>
</rule>
<rule name="ADTs from Cerner" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A02,ADT_A03,ADT_A04,ADT_A05,ADT_A06,ADT_A07,ADT_A08,ADT_A09,ADT_A10,ADT_A11,ADT_A12,ADT_A13,ADT_A14,ADT_A15,ADT_A16,ADT_A17,ADT_A21,ADT_A22,ADT_A23,ADT_A24,ADT_A25,ADT_A26,ADT_A28,ADT_A29,ADT_A31,ADT_ADSC,ADT_A44,ADT_A38,ADT_A35,ADT_A34"></constraint>
<when condition="Document.{PV1:2}=&quot;I&quot;">
<send transform="" target="HL7.O.RgnsLabAdtOrmBeaker"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="GC.zzaljCerner2RegLabBkrADT">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>65099,57166.442082</TimeChanged>
<TimeCreated>63949,42579.646118</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>

<Parameter name="TREATEMPTYREPEATINGFIELDASNULL">
<Default>0</Default>
</Parameter>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='231.Cerner:ADT_A01' targetDocType='231.Cerner:ADT_A01' create='copy' language='objectscript' >
<code>
<![CDATA[ 
  //    Last Updated 03/27/2019 Al Johnson
  //    Moved to Prod 03/27/2019 Al Johnson
  // Create: 03/27/2019 Al Johnson
  // Description:
  //   Convert to A01 for conversion
]]]]><![CDATA[></code>


<if condition='(source.{EVN:EventTypeCode}="A08")' >
<true>
<assign value='"A01"' property='target.{MSH:9.2}' action='set' />
<assign value='"A01"' property='target.{EVN:EventTypeCode}' action='set' />
</true>
</if>

</transform>
]]></Data>
</XData>
</Class>


<Class name="GC.zzaljRgnsLabBoRuleBeakerAdt">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65100,35875.539636</TimeChanged>
<TimeCreated>63901,52869.534497</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.HL7.MsgRouter.RuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="EnsLib.HL7.MsgRouter.RoutingEngine" production="PROD.PROD">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="Outpatient from Cerner" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A02,ADT_A03,ADT_A04,ADT_A05,ADT_A06,ADT_A07,ADT_A08,ADT_A09,ADT_A10,ADT_A11,ADT_A12,ADT_A13,ADT_A14,ADT_A15,ADT_A16,ADT_A17,ADT_A21,ADT_A22,ADT_A23,ADT_A24,ADT_A25,ADT_A26,ADT_A28,ADT_A29,ADT_A31,ADT_A34,ADT_A38,ADT_A35,ADT_A44,ADT_ADSC"></constraint>
<when condition="Document.{PV1:2}!=&quot;I&quot;">
<return></return>
</when>
</rule>
<rule name="ADTs from Cerner" disabled="false">
<constraint name="docCategory" value="231.Cerner"></constraint>
<constraint name="docName" value="ADT_A01,ADT_A02,ADT_A03,ADT_A04,ADT_A05,ADT_A06,ADT_A07,ADT_A08,ADT_A09,ADT_A10,ADT_A11,ADT_A12,ADT_A13,ADT_A14,ADT_A15,ADT_A16,ADT_A17,ADT_A21,ADT_A22,ADT_A23,ADT_A24,ADT_A25,ADT_A26,ADT_A28,ADT_A29,ADT_A31,ADT_ADSC,ADT_A44,ADT_A38,ADT_A35,ADT_A34"></constraint>
<when condition="Document.{PV1:2}=&quot;I&quot;">
<send transform="" target="zzALJ2RgnsLab.P.boBeakerAdt"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="IIBAENSEMBLE.AlertRule">
<Description>
</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>62655,46880.599957</TimeChanged>
<TimeCreated>62655,46880.593392</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>EnsLib.MsgRouter.VDocRuleAssistCompatible</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="IIBAENSEMBLE.Context" production="">
<ruleSet name="" effectiveBegin="" effectiveEnd="">
<rule name="">
<constraint name="source" value="BenTest.Bsvc.TCP"></constraint>
<constraint name="msgClass" value="Ens.AlertRequest"></constraint>
<when condition="1">
<send transform="NorthIdahoMt.Transforms.ErrorAlert" target="IIBAENSEMBLE.Bop.SendEmail"></send>
<return></return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Class name="IIBAENSEMBLE.Bop.ClassToCSV">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>61066,35265.682876</TimeChanged>
<TimeCreated>60918,48360.606776</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.File.OutboundAdapter</Default>
</Parameter>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Property name="FileName">
<Type>%String</Type>
</Property>

<Property name="ClassName">
<Type>%String</Type>
</Property>

<Parameter name="SETTINGS">
<Type>%String</Type>
<Default>FileName,ClassName</Default>
</Parameter>

<Method name="OnMessage">
<FormalSpec>pRequest:%Persistent,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	$$$TRACE("Getting sp/message class parameters: "_"Select Name, InitialExpression from %Dictionary.PropertyDefinition where parent = '"_..ClassName_"' Order by SequenceNumber")
	Set rs = ##class(%ResultSet).%New()
	Do rs.Prepare("Select Name, InitialExpression from %Dictionary.PropertyDefinition where parent = '"_..ClassName_"' Order by SequenceNumber")
	set tSC = rs.Execute() Quit:$$$ISERR(tSC) tSC
	
	$$$TRACE("putting together the parameters")
	
	Set Separator=","
	set propertyname = "", propertyvalue = "", tTextLine = "", count = 1
	set HeaderList="",tHeaderLine=""
	
	While (rs.Next()) {
		
		set propertyname = rs.Get("Name") 
		
		set propertyvalue = $ZOBJPROPERTY(pRequest,propertyname)
		
		$$$TRACE(propertyname_": "_propertyvalue)
		
		set $LIST(tPropList,count) = $C(34)_$LTS($LFS(propertyvalue,$C(34)),$C(34)_$C(34))_$C(34)
		set $LIST(HeaderList,count) = $C(34)_propertyname_$C(34)
		
		set count = count + 1
	
	}
	
	if $LISTDATA(tPropList,1) = 1 { set tTextLine = $LTS(tPropList,Separator) }
	if $LISTDATA(HeaderList,1) = 1 { set tHeaderLine = $LTS(HeaderList,Separator) }
	
	s CurFileName=##class(Ens.Util.File).CreateTimestamp("",..FileName)
	
	$$$TRACE("Write Header? "_tHeaderLine)
	If ( '..Adapter.Exists(CurFileName) ) {
		$$$TRACE("Printing Header: "_tHeaderLine)
		Set tSC=..Adapter.PutLine(CurFileName, tHeaderLine)
	}

	$$$TRACE("write data to "_CurFileName_": "_tTextLine)
	Set tSC=..Adapter.PutLine(CurFileName, tTextLine)
	
	
	
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Bop.FileCopy">
<Description>
</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>61959,44742.203817</TimeChanged>
<TimeCreated>61250,53257.95533</TimeCreated>

<Property name="FilePath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1000"/>
</Property>

<Property name="Overwrite">
<Description>
Overwrite file if it exists</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="RemoveOriginalNoArchive">
<Description>
If no archive path is specified in the file delivery message, the original file remains in place, use this setting to remove it.</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Parameter name="ADAPTER">
</Parameter>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Parameter name="SETTINGS">
<Default>FilePath,Overwrite,RemoveOriginalNoArchive</Default>
</Parameter>

<XData name="MessageMap">
<Data><![CDATA[
<MapItem MessageType="IIBAENSEMBLE.msg.FileDelivery">
<Method>FileCopy</Method>
</MapItem>
]]></Data>
</XData>

<Method name="FileCopy">
<FormalSpec>pRequest:IIBAENSEMBLE.msg.FileDelivery,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	$$$TRACE("Files to Copy: "_pRequest.FilePath_" "_pRequest.FileSpec)
	set tSC = $$$OK
	// Get a list of files
	Set rset=##class(%ResultSet).%New()
	Set rset.ClassName="%File"
	Set rset.QueryName="FileSet"
	Do rset.Execute(pRequest.FilePath,pRequest.FileSpec)
	While(rset.Next()) {
		
		$$$TRACE("getting ready to handle: "_rset.Data("Name"))
		if ($ZB(##class(%File).Attributes(rset.Data("Name")),16,1)=0) {
			// Copy the File to a new folder
			s Filename=##class(%File).GetFilename(rset.Data("Name"))
			set NewFilename = ..FilePath_"\"_Filename
			$$$TRACE("New File: "_NewFilename)
			s tSC=##class(%File).CopyFile(rset.Data("Name"),NewFilename)
			if $$$ISERR(tSC) Quit
			$$$TRACE("File Copy return code: "_tSC)
			// Archive the file after the Copy is successful
			If ( tSC = 1 && (pRequest.ArchivePath'="")) {
				Set ArchiveFileName=pRequest.ArchivePath_"\"_Filename
				$$$TRACE("Archive File Name: "_ArchiveFileName)
				set tSC = ##class(%File).Rename(rset.Data("Name"),ArchiveFileName)
				$$$TRACE("Archive return code: "_tSC)
				If ( 'tSC ) {
					Set tSC = ##class(%File).Rename(rset.Data("Name"),rset.Data("Name")_".ArchiveFailed")
					$$$LOGWARNING("File In working folder that could not be archived: "_rset.Data("Name")_".ArchiveFailed")
				}
				if 'tSC Quit
			} else {
				
				$$$LOGERROR("File Copy ( "_rset.Data("Name")_" to "_NewFilename_" ) failed. Return code: "_tSC)
			}
	
			If (..RemoveOriginalNoArchive &&  (pRequest.ArchivePath="")){
				s tSC = ##class(%File).Delete(rset.Data("Name"))
				if $$$ISERR(tSC) Quit
			}
	
		}
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Bop.FileToFTP">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>61269,53677</TimeChanged>
<TimeCreated>60841,42429.489292</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.FTP.OutboundAdapter</Default>
</Parameter>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<XData name="MessageMap">
<Data><![CDATA[
<MapItem MessageType="IIBAENSEMBLE.msg.FileToFTP">
<Method>SendFTP</Method>
</MapItem>
]]></Data>
</XData>

<Method name="SendFTP">
<FormalSpec>pRequest:IIBAENSEMBLE.msg.FileToFTP,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	$$$TRACE("Files to FTP: "_pRequest.FilePath_" "_pRequest.FileSpec)
	// Get a list of files
	Set rset=##class(%ResultSet).%New()
	Set rset.ClassName="%File"
	Set rset.QueryName="FileSet"
	Do rset.Execute(pRequest.FilePath,pRequest.FileSpec)
	While(rset.Next()) {
		
		$$$TRACE("getting ready to handle: "_rset.Data("Name"))
		if ($ZB(##class(%File).Attributes(rset.Data("Name")),16,1)=0) {
			// s tSC=""
			set Filename = ##class(%File).GetFilename(rset.Data("Name"))

			set fstream = ##class(%FileCharacterStream).%New()
			Set fstream.Filename=rset.Data("Name")
			do ..Adapter.FTP.Status(.tSC)
			$$$TRACE("ftp connected: "_..Adapter.Connected_"|Status: "_tSC)
			
			Set tSC=..Adapter.PutStream(Filename, fstream) Quit:$$$ISERR(tSC)
			$$$TRACE("FTP Operation Complete: "_##class(%SYSTEM.OBJ).DisplayError(tSC)_"Last Error: "_##class(%SYSTEM.OBJ).DisplayError()_"|ReturnCode: "_..Adapter.FTP.ReturnCode)
			
			// Archive the file after the FTP is successful
			If tSC = 1 {
				Set NewFileName=pRequest.ArchivePath_"\"_Filename
				set FileRename = ##class(%File).Rename(rset.Data("Name"),NewFileName)
				$$$TRACE("FTP Operation Complete: "_##class(%SYSTEM.OBJ).DisplayError(tSC)_"Last Error: "_##class(%SYSTEM.OBJ).DisplayError()_"|ReturnCode: "_..Adapter.FTP.ReturnCode)
			}
	
			
	
		}
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Bop.SQLStoredProcedure">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>61570,48862.735032</TimeChanged>
<TimeCreated>60689,38622.775452</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.OutboundAdapter</Default>
</Parameter>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Property name="SpMessageClass">
<Type>%String</Type>
</Property>

<Property name="StoredProcName">
<Type>%String</Type>
</Property>

<Parameter name="SETTINGS">
<Type>%String</Type>
<Default>SpMessageClass,StoredProcName</Default>
</Parameter>

<Method name="OnMessage">
<FormalSpec>pRequest:%Persistent,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	$$$TRACE("Processing a message.../"_..SpMessageClass_"/"_..StoredProcName)
	
	set snap = ##class(%ListOfObjects).%New()
	set Output = ##class(%ListOfDataTypes).%New()
	
	$$$TRACE("Getting sp/message class parameters: "_"Select Name, InitialExpression from %Dictionary.PropertyDefinition where parent = "_..SpMessageClass_" Order by SequenceNumber")
	Set rs = ##class(%ResultSet).%New()
	Do rs.Prepare("Select Name, InitialExpression from %Dictionary.PropertyDefinition where parent = '"_..SpMessageClass_"' Order by SequenceNumber")
	set tSC = rs.Execute() Quit:$$$ISERR(tSC) tSC
	
	set count = 1
	Set spValueList=""
	
	$$$TRACE("putting together the parameters")
	
	While (rs.Next()) {
		
		set propertyname = rs.Get("Name") 
		
		Set InitialExpression = rs.Get("InitialExpression")
		set pIOParms(count) = $ZOBJPROPERTY(pRequest,propertyname)
		if pIOParms(count) = "" { 
			set pIOParms(count) = $E(InitialExpression,2,$L(InitialExpression)-1) 
		}
		$$$TRACE(propertyname_"/"_pIOParms(count)_"/"_$LENGTH(pIOParms(count))_"/"_InitialExpression_"/"_count)
		Set spValueList=spValueList_",'"_pIOParms(count)_"'"
		set count = count + 1
		
		
	
	}
	
	
	set $P(xcall,",?",count)=""
	set $P(xcall,"?",1)=""
	set $P(xio,"i",count)=""


	set tStoredProc = "{ call "_..StoredProcName_"("_xcall_")}"
	$$$TRACE(tStoredProc_"/"_xio)
	$$$TRACE("Values: "_spValueList)
	Set status = ..Adapter.ExecuteProcedureParmArray(.snap,.Output,tStoredProc,xio,.pIOParms) 
	//Set status = ..Adapter.ExecuteProcedure(.snap,.Output,tStoredProc,xio,"123456","00409","Smith","Smith","Jim","HF","2007-01-01 01:01:01","F","XCHES","HFMR","00409","","","123456") 
	
	If $$$ISERR(status){Quit status}
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Bop.SQLStoredProcedureParam">
<Description><![CDATA[
Copyright 2014 Nuvodia, LLC
Outbound for SQL Stored Procedure indentified in the <PROPERTY>StoredProcName</PROPERTY>.
It Maps the parameters to a Cache' Object defined by  <PROPERTY>SpMessageClass</PROPERTY>.
In this class the Properties parameters must define the the <PARAMETER>EXTERNALSQLTYPE</PARAMETER> and <PARAMETER>MAX_LEN</PARAMETER> if necessary.
See the EnsSQLTypes.INC to find definitions, but here are the commonly used  <PARAMETER>EXTERNALSQLTYPE</PARAMETER>s:
#; *** SQL.H ***
#; SQL data type codes 
#define SqlUnknownType     0 /* SqlTypeNull */
#define SqlChar            1
#define SqlNumeric         2
#define SqlDecimal         3
#define SqlInteger         4
#define SqlSmallint        5
#define SqlFloat           6
#define SqlReal            7
#define SqlDouble          8
#define SqlDateTime        9
#define SqlVarchar         12
#; One-parameter shortcuts for date/time data types 
#define SqlTypeDate        91
#define SqlTypeTime        92
#define SqlTypeTimestamp   93
#; *** SQLUCODE.H ***
#define SqlWChar           (-8)
#define SqlWVarchar        (-9)
#define SqlWLongVarchar    (-10) = %Stream.GlobalCharacter  (cache' object script type) 
#define SqlCWChar          $$$SqlWChar
#; *** SQLEXT.H ***
#; SQL extended datatypes
#define SqlDate            9
#define SqlInterval        10
#define SqlTime            10
#define SqlTimestamp       11
#define SqlLongVarchar     (-1) = %Stream.GlobalCharacter  (cache' object script type)
#define SqlBinary          (-2)
#define SqlVarBinary       (-3)
#define SqlLongVarBinary   (-4) = %Stream.GlobalBinary  (cache' object script type) 
#define SqlBigint          (-5)
#define SqlTinyint         (-6)
#define SqlBit             (-7)
#define SqlGuid            (-11)
Documentation: http://localhost:57773/csp/docbook/DocBook.UI.Page.cls?KEY=ESQL_adapter_methods_creating#ESQL_parameter_in_multidim_sqltype_ctype]]></Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>63270,37500.926407</TimeChanged>
<TimeCreated>60689,38622.775452</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.OutboundAdapter</Default>
</Parameter>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Property name="SpMessageClass">
<Description><![CDATA[
The request Message Class Name.  It must extend form <CLASS>%Persistent</CLASS> class]]></Description>
<Type>%String</Type>
</Property>

<Property name="StoredProcName">
<Description>
The name of the Stored Procedure to execute on the DSN data source.</Description>
<Type>%String</Type>
</Property>

<Property name="IOParameters">
<Description>
Multidimensional Array populated by this process.</Description>
<Type>%String</Type>
<MultiDimensional>1</MultiDimensional>
</Property>

<Parameter name="SETTINGS">
<Type>%String</Type>
<Default>SpMessageClass,StoredProcName</Default>
</Parameter>

<Method name="OnMessage">
<FormalSpec>pRequest:%Persistent,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	$$$TRACE("Processing a message.../"_..SpMessageClass_"/"_..StoredProcName)
	#dim tSC = $$$OK
	
	// used in inline &sql statement as parameter.
	set msgClass = ..SpMessageClass
	set ParmCount = 0
	
	&sql(
		Select Count(*) into:ParmCount 
		from %Dictionary.PropertyDefinition 
		where parent =:msgClass
	)
	
	set pIOParameters = ParmCount
	
	$$$TRACE("Getting sp/message class parameters: "_"Select Name, InitialExpression, Parameters, Type from %Dictionary.PropertyDefinition where parent = '"_..SpMessageClass_"' Order by SequenceNumber")
	Set rs = ##class(%ResultSet).%New()
	Do rs.Prepare("Select Name, InitialExpression, Parameters, Type from %Dictionary.PropertyDefinition where parent = '"_..SpMessageClass_"' Order by SequenceNumber")
	set tSC = rs.Execute() 
	Quit:$$$ISERR(tSC) tSC
	
	set count = 1
	
	#DIM xIO as %String = ""
	#Dim spValueList as %String = ""
	#DIM xcall as %String = ""
	
	/*
	//set initial return value as parameter:
	set pIOParameters = pIOParameters + 1
	set pIOParameters(count,"SqlType") = 4
	set pIOParameters(count,"IOType") = 4
	set pIOParameters(count,"LOB") = 0
	set pIOParameters(count,"Bin") = 0
	set count = count + 1
	*/
	
	$$$TRACE("putting together the parameters")
	
	While (rs.Next()) {
		//get property definitions from result set:
		set propertyname = rs.Get("Name") 
		Set InitialExpression = rs.Get("InitialExpression")
		set parameters = rs.Get("Parameters")
		set type = rs.Get("Type")
		
		set pIOParameters(count) = $PROPERTY(pRequest,propertyname)
		
		Set tSC = ..GetParmProperties(pIOParameters(count), parameters, type, .SqlType, .Precision, .IsBlob,.IsBinary)
		quit:$$$ISERR(tSC)
		
		/* Set other parameter values */
		set pIOParameters(count,"SqlType") = SqlType
		if (Precision'=""){		
			set pIOParameters(count,"Prec") = Precision
		}
		set pIOParameters(count,"IOType") = 1
		set pIOParameters(count,"LOB") = IsBlob
		set pIOParameters(count,"Bin") = IsBinary
		if (IsBlob){
			set pIOParameters(count,"UseLOBLen")=1 
		}
		//QUIT:$$$ISERR(tSC)
		
		set xIO = xIO_"i"
		//set xcall = xcall_",@"_propertyname_"=?"
			
		if pIOParameters(count) = "" { 
			if ( InitialExpression["$" ){
				// handle for expressions in the initial expression field.
				set ie = " " 
				set exp = "(out) set out = "_InitialExpression
				Xecute (exp, .ie)
				set pIOParameters(count) = ie	
			}
			else{
				set pIOParameters(count) = $E(InitialExpression,2,$L(InitialExpression)-1) 
			}
		}
		//set value list except ignore blobs
		if (IsBlob) {
			set value="[%Stream] "_$Length(pIOParameters(count))}
		else {
			set value= pIOParameters(count)}
		set spValueList = spValueList_value_","	
		
		$$$TRACE(propertyname_":"_pIOParameters(count)_" Prec:"_Precision_" SqlType: "_SqlType_" isBlob: "_IsBlob_" ItemNo: "_count)

		set count = count + 1
	
	}
	
	set $P(xcall,",?",count)=""
	set $P(xcall,"?",1)=""
	
	//set xIO = "o"_xIO
	//set tStoredProc = "{ ? = call "_..StoredProcName_"("_xcall_")}"
	set tStoredProc = "{ call "_..StoredProcName_"("_xcall_")}"
	
	$$$TRACE(tStoredProc_"/"_xIO)
	$$$TRACE("Values: "_spValueList)
	Set tSC = ..Adapter.ExecuteProcedureParmArray(.snap,.Output,tStoredProc,xIO,.pIOParameters) 
	$$$TRACE("Status: "_tSC)
	$$$TRACE("Output: "_Output)
	QUIT tSC
]]></Implementation>
</Method>

<Method name="GetParmProperties">
<FormalSpec>pPropertyValue:%DataType,pParameters:%String,pType:%String,*pSqlType:%Integer,*pPrecision:%Integer,*pIsBlob:%Boolean,*pIsBinary:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	// Piece out Parameters
	// example:  	",EXTERNALSQLTYPE = 12,MAXLEN = 20"
	//$$$TRACE("pParameters: "_pParameters)
	set pSqlType = "12"
	set pPrecision = ""
	
	Try
	{
	set paramList = $LFS(pParameters,",")
	
	for count=1:1:$LL(paramList)
	{
		set param = $LI(paramList,count)
		// pSqlType
		if ($P(param,"=",1)="EXTERNALSQLTYPE"){
			set pSqlType = $P(param,"=",2)
			if (pSqlType = 93){
				set pPrecision = 1
			}
		}
		// pPrecision (Max Length)
		if ($P(param,"=",1)="MAXLEN"){
			set pPrecision = $P(param,"=",2)
		}
	}
	
	} Catch errVar {
		set tSC = "0: CODE:"_errVar.Code_" Name:"_errVar.Name	
	}
	QUIT:$$$ISERR(tSC) tSC
	
	set pIsBlob = ..GetIsBlob(pPropertyValue, pType, .pIsBinary)
   	
   	quit tSC
]]></Implementation>
</Method>

<Method name="GetIsBlob">
<FormalSpec>pPropertyValue:%DataType,pType:%String,*pIsBinary:%Boolean</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	//Figure out if property pIsBlob and is it BinaryOrText blob.  Blob are extended by %Stream so let's figure that out...
	//check that cls extends %Stream.Object
   
   	// Do Binary (Blob) check first
    set pIsBinary =(pType = "%Stream.GlobalBinary")
    Try {
	    if (pIsBinary=0){
	   		Set pIsBinary=$classmethod($classname(pPropertyValue),"%Extends","%Stream.FileBinary")}
	   	if (pIsBinary=0){
	   		Set pIsBinary=$classmethod($classname(pPropertyValue),"%Extends","%Stream.GblBinCompress")}
	   	if (pIsBinary=0){
	   		Set pIsBinary=$classmethod($classname(pPropertyValue),"%Extends","%Stream.GlobalBinary")}
	  	if (pIsBinary=0){
	   		Set pIsBinary=$classmethod($classname(pPropertyValue),"%Extends","%Stream.NullBinary")}
	   	if (pIsBinary=0){
	   		Set pIsBinary=$classmethod($classname(pPropertyValue),"%Extends","%Stream.TmpBinary")}
    } Catch {
         Set pIsBinary=0
    }
    
    // Do Text blob check next       
    set isBlobText = (pType = "%Stream.GlobalCharacter")
    Try {
	   if (isBlobText=0){
       		Set isBlobText=$classmethod($classname(pPropertyValue),"%Extends","%Stream.FileCharacter")}
       if (isBlobText=0){
       		Set isBlobText=$classmethod($classname(pPropertyValue),"%Extends","%Stream.GblChrCompress")}
       if (isBlobText=0){
       		Set isBlobText=$classmethod($classname(pPropertyValue),"%Extends","%Stream.GlobalCharacter")}
       if (isBlobText=0){
       		Set isBlobText=$classmethod($classname(pPropertyValue),"%Extends","%Stream.NullCharacter")}
       if (isBlobText=0){
       		Set isBlobText=$classmethod($classname(pPropertyValue),"%Extends","%Stream.TmpCharacter")}
       } Catch {
           Set isBlobText=0
           }
    //if either were set then it is a blob       
   	set pIsBlob = (pIsBinary=1 || isBlobText=1)	
   	
   	quit pIsBlob
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Bop.SQLStoredProcedureParamRev2">
<Description><![CDATA[
SQLStoredProcedureParamRev2 copy of SQLStoredProcedureParamTestConn 07/22/2015 By: Al Johnson
Does a GetDate and quits if error on connection so detail not lost
Last Modified: 05/11/2015 By:Ellen Leichtma
Add and testing ..Adapter.TestConnection(0)  
Will need to Deploy to PROD and TRAIN  

Last Modified: 8/14/2014 By: Paul Hegel to include changes to property definitions class.  
SqlType and Precission were getting defaults and not actual values.  
Will need to Deploy to PROD and TRAIN after Ensemble 2014 upgrade.

Last Modified: 7/24/2014 By: Paul Hegel For Ensemble 2012 only (TESTTRAIN and PROD) <br/>
Last Updated in Prod:  Don't deploy this to Ensemble 2014 (DEV needs orginal cls)<br/>
Copyright 2014 Nuvodia, LLC<br/>
Outbound for SQL Stored Procedure indentified in the <PROPERTY>StoredProcName</PROPERTY>.<br/>
It Maps the parameters to a Cache' Object defined by  <PROPERTY>SpMessageClass</PROPERTY>.<br/>
In this class the Properties parameters must define the the <PARAMETER>EXTERNALSQLTYPE</PARAMETER> and <PARAMETER>MAX_LEN</PARAMETER> if necessary.<br/>
See the EnsSQLTypes.INC to find definitions, but here are the commonly used  <PARAMETER>EXTERNALSQLTYPE</PARAMETER>s:<br/>
#; *** SQL.H ***<br/>
#; SQL data type codes 
#define SqlUnknownType     0 /* SqlTypeNull */<br/>
#define SqlChar            1<br/>
#define SqlNumeric         2<br/>
#define SqlDecimal         3<br/>
#define SqlInteger         4<br/>
#define SqlSmallint        5<br/>
#define SqlFloat           6<br/>
#define SqlReal            7<br/>
#define SqlDouble          8<br/>
#define SqlDateTime        9<br/>
#define SqlVarchar         12<br/>
#; One-parameter shortcuts for date/time data types <br/>
#define SqlTypeDate        91<br/>
#define SqlTypeTime        92<br/>
#define SqlTypeTimestamp   93<br/>
#; *** SQLUCODE.H ***
#define SqlWChar           (-8)
#define SqlWVarchar        (-9)
#define SqlWLongVarchar    (-10) = %Stream.GlobalCharacter  (cache' object script type) 
#define SqlCWChar          $$$SqlWChar
#; *** SQLEXT.H ***
#; SQL extended datatypes
#define SqlDate            9
#define SqlInterval        10
#define SqlTime            10
#define SqlTimestamp       11
#define SqlLongVarchar     (-1) = %Stream.GlobalCharacter  (cache' object script type)
#define SqlBinary          (-2)
#define SqlVarBinary       (-3)
#define SqlLongVarBinary   (-4) = %Stream.GlobalBinary  (cache' object script type) 
#define SqlBigint          (-5)
#define SqlTinyint         (-6)
#define SqlBit             (-7)
#define SqlGuid            (-11)
Documentation: http://localhost:57773/csp/docbook/DocBook.UI.Page.cls?KEY=ESQL_adapter_methods_creating#ESQL_parameter_in_multidim_sqltype_ctype]]></Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>64326,13547.891779</TimeChanged>
<TimeCreated>60689,38622.775452</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.OutboundAdapter</Default>
</Parameter>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Property name="SpMessageClass">
<Description><![CDATA[
The request Message Class Name.  It must extend form <CLASS>%Persistent</CLASS> class]]></Description>
<Type>%String</Type>
</Property>

<Property name="StoredProcName">
<Description>
The name of the Stored Procedure to execute on the DSN data source.</Description>
<Type>%String</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
/*
/// Do Workaround code when using new ODBC Driver.
Property UseWorkaround As %Boolean;
*/
]]></Content>
</UDLText>

<Property name="IOParameters">
<Description>
Multidimensional Array populated by this process.</Description>
<Type>%String</Type>
<MultiDimensional>1</MultiDimensional>
</Property>

<Parameter name="SETTINGS">
<Type>%String</Type>
<Default>SpMessageClass,StoredProcName</Default>
</Parameter>

<Method name="OnMessage">
<FormalSpec>pRequest:%Persistent,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// $$$TRACE("Processing a message.../"_..SpMessageClass_"/"_..StoredProcName)
	#dim tSC = $$$OK
	#dim Output as %ListOfDataTypes
	set tSC = ..Adapter.ExecuteQuery("","Select GetDate()","")
    // $$$TRACE("tSC after Getdate with Quit if error "_tSC)
    quit:$$$ISERR(tSC) tSC  //Added by ellen 06/25/2016
	// used in inline &sql statement as parameter.
	set msgClass = ..SpMessageClass
	set ParmCount = 0
	//set Output = ""
	
	&sql(
		Select Count(*) into:ParmCount 
		from %Dictionary.PropertyDefinition 
		where parent =:msgClass
	)
	
	set pIOParameters = ParmCount +1
	
	// $$$TRACE("Getting sp/message class parameters: "_"Select Name, InitialExpression, Parameters, Type from %Dictionary.PropertyDefinition where parent = '"_..SpMessageClass_"' Order by SequenceNumber")
	Set rs = ##class(%ResultSet).%New()
	Do rs.Prepare("Select ID, Name, InitialExpression, Parameters, Type from %Dictionary.PropertyDefinition where parent = '"_..SpMessageClass_"' Order by SequenceNumber")
	set tSC = rs.Execute() 
	Quit:$$$ISERR(tSC) tSC
	
	
	#DIM xIO as %String = ""
	#Dim spValueList as %String = ""
	#DIM xcall as %String = ""
	
	set count = 1
	
	//set initial return value as parameter:
	/**/
	set pIOParameters(count,"IOType") = 4
	set pIOParameters(count,"SqlType") = 4
	set pIOParameters(count,"LOB") = 0
	set pIOParameters(count,"Bin") = 0
	
	set count = count + 1
	
	
	
    $$$TRACE("putting together the parameters")
	
	While (rs.Next()) {
		//get property definitions from result set:
		set propertyname = rs.Get("Name") 
		Set InitialExpression = rs.Get("InitialExpression")
		set propObject = ##class(%Dictionary.PropertyDefinition).%OpenId(rs.Get("ID"))
		//set parameters = propObject.Parameters
		set SqlType = propObject.Parameters.GetAt("EXTERNALSQLTYPE")
		set Precision = propObject.Parameters.GetAt("MAXLEN")
		set type = rs.Get("Type")

		set pIOParameters(count) = $PROPERTY(pRequest,propertyname)
		
		//Set tSC = ..GetParmProperties(pIOParameters(count), parameters, type, .SqlType, .Precision, .IsBlob,.IsBinary)
		set IsBlob = ..GetIsBlob(pIOParameters(count), type, .IsBinary)

		/* Set other parameter values */
		set pIOParameters(count,"SqlType") = SqlType
		if (Precision'=""){		
			set pIOParameters(count,"Prec") = Precision
		}
		set pIOParameters(count,"IOType") = 1
		if (IsBlob=1){
			set pIOParameters(count,"LOB") = IsBlob
			if (IsBinary=1) {
				set pIOParameters(count,"Bin") = IsBinary
			}
			set pIOParameters(count,"UseLOBLen")=1 
			s pIOParameters(count,"CType")=-2 
		}
		//QUIT:$$$ISERR(tSC)
		
		set xIO = xIO_"i"
			
		if pIOParameters(count) = "" { 
			if ( InitialExpression["$" ){
				// handle for expressions in the initial expression field.
				set ie = " " 
				set exp = "(out) set out = "_InitialExpression
				Xecute (exp, .ie)
				set pIOParameters(count) = ie	
			}
			else{
				set pIOParameters(count) = $E(InitialExpression,2,$L(InitialExpression)-1) 
			}
		}

		//set value list except ignore blobs
		if (IsBlob) {
			set value="[%Stream] "_$Length(pIOParameters(count))}
		else {
			set value= pIOParameters(count)}
		set spValueList = spValueList_value_","	
		
		  // $$$TRACE(propertyname_":"_pIOParameters(count)_" Prec:"_Precision_" SqlType: "_SqlType_" isBlob: "_IsBlob_" ItemNo: "_count)

		set count = count + 1
	
	}
	
	set $P(xcall,",?",count-1)=""
	set $P(xcall,"?",1)=""
	
	set xIO = "o"_xIO // _"*"
	//set xIO =""
	set tStoredProc = "{ ?= CALL "_..StoredProcName_"("_xcall_") }"
	
    $$$TRACE(tStoredProc_"/"_xIO)
    $$$TRACE("Values: "_spValueList)

	Set tSC = ..Adapter.ExecuteProcedureParmArray(.snap,.Output,tStoredProc,xIO,.pIOParameters) 
    $$$TRACE("Status after Exec: "_tSC)
	set tSC = ..Adapter.Connected
	// $$$TRACE("Connected status after Exec: "_tSC)
	// $$$TRACE("Output: "_Output)
	quit:$$$ISERR(tSC) tSC

	s pResponse = snap

	QUIT tSC
]]></Implementation>
</Method>

<Method name="GetIsBlob">
<FormalSpec>pPropertyValue:%DataType,pType:%String,*pIsBinary:%Boolean</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	//Figure out if property pIsBlob and is it BinaryOrText blob.  Blob are extended by %Stream so let's figure that out...
	//check that cls extends %Stream.Object
   
   	// Do Binary (Blob) check first
    set pIsBinary =(pType = "%Stream.GlobalBinary")
    Try {
	    if (pIsBinary=0){
	   		Set pIsBinary=$classmethod($classname(pPropertyValue),"%Extends","%Stream.FileBinary")}
	   	if (pIsBinary=0){
	   		Set pIsBinary=$classmethod($classname(pPropertyValue),"%Extends","%Stream.GblBinCompress")}
	   	if (pIsBinary=0){
	   		Set pIsBinary=$classmethod($classname(pPropertyValue),"%Extends","%Stream.GlobalBinary")}
	  	if (pIsBinary=0){
	   		Set pIsBinary=$classmethod($classname(pPropertyValue),"%Extends","%Stream.NullBinary")}
	   	if (pIsBinary=0){
	   		Set pIsBinary=$classmethod($classname(pPropertyValue),"%Extends","%Stream.TmpBinary")}
    } Catch {
         Set pIsBinary=0
    }
    
    // Do Text blob check next       
    set isBlobText = (pType = "%Stream.GlobalCharacter")
    Try {
	   if (isBlobText=0){
       		Set isBlobText=$classmethod($classname(pPropertyValue),"%Extends","%Stream.FileCharacter")}
       if (isBlobText=0){
       		Set isBlobText=$classmethod($classname(pPropertyValue),"%Extends","%Stream.GblChrCompress")}
       if (isBlobText=0){
       		Set isBlobText=$classmethod($classname(pPropertyValue),"%Extends","%Stream.GlobalCharacter")}
       if (isBlobText=0){
       		Set isBlobText=$classmethod($classname(pPropertyValue),"%Extends","%Stream.NullCharacter")}
       if (isBlobText=0){
       		Set isBlobText=$classmethod($classname(pPropertyValue),"%Extends","%Stream.TmpCharacter")}
       } Catch {
           Set isBlobText=0
           }
    //if either were set then it is a blob       
   	set pIsBlob = (pIsBinary=1 || isBlobText=1)	
   	
   	quit pIsBlob
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Bop.SendEmail">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessOperation</Super>
<TimeChanged>61416,27562.082398</TimeChanged>
<TimeCreated>60488,45585.536534</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.EMail.OutboundAdapter</Default>
</Parameter>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="EmailSend">
<FormalSpec>pRequest:IIBAENSEMBLE.msg.EmailSendRequest,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	If pRequest.Destination="" $$$TRACE("no email address.") Quit $$$OK
	$$$TRACE("send email to "_pRequest.Destination)
	Set tMailMessage=##class(%Net.MailMessage).%New()
	for i = 1:1:$L(pRequest.Destination,",") {
		Do tMailMessage.To.Insert($P(pRequest.Destination,",",i))
	}
	Set tMailMessage.Subject=pRequest.Subject
	set tMailMessage.Charset="iso-8859-1"
	Set tSC=tMailMessage.TextData.Write(pRequest.Text)  Quit:$$$ISERR(tSC) tSC
	If ((pRequest.AttDir '= "")&&(pRequest.AttFile '= "")){
		set tSC = tMailMessage.AttachFile(pRequest.AttDir, pRequest.AttFile,0,"iso-8859-1",.count) Quit:$$$ISERR(tSC)
	}
	
	if pRequest.From '= "" {
		set tMailMessage.From = pRequest.From
	}
	
	
	Set tSC=..Adapter.SendMail(tMailMessage)
	
	If ((pRequest.AttDir '= "")&&(pRequest.AttFile '= "")){
		set tDelete = ##class(%File).Delete(pRequest.AttDir_"\"_pRequest.AttFile)
		if tDelete '= 1 { $$$LOGERROR("Email File Delete failed for: "_pRequest.AttDir_"\"_pRequest.AttFile) }
	}
	
	Quit tSC
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="IIBAENSEMBLE.msg.EmailSendRequest"> 
		<Method>EmailSend</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="IIBAENSEMBLE.Bproc.xRefImport">
<Description>
</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>61459,38211.29302</TimeChanged>
<TimeCreated>61226,39640.772989</TimeCreated>

<Method name="OnRequest">
<FormalSpec>pRequest:IIBAENSEMBLE.msg.xRefImport,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	d ##class(IIBAENSEMBLE.csp.Reference).initImportData(pRequest.SessionId)
	
	set pFileStream = ##class(%FileCharacterStream).%New()
	Set pFileStream.Filename = pRequest.filename
	
	set count = 0
	
	while 'pFileStream.AtEnd {
		d ##class(IIBAENSEMBLE.csp.Reference).collectImportData(pFileStream.ReadLine(),pRequest.SessionId) 
		set count = count+1
	}
	
	if pRequest.importType = "Replace" { d ##class(IIBAENSEMBLE.csp.Reference).removeExisting(pRequest.SessionId) }
	
	kill pFileStream
	
	set ^CacheTempImportStatus(pRequest.SessionId,"totalcount") = count
	
	set tSC = ..processImportData(pRequest.SessionId)
	
	if tSC {
		set ^CacheTempImportStatus(pRequest.SessionId,"status") = "Complete"
		//set tSC = ##class(%File).Delete(pRequest.filename)
	}
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="processImportData">
<FormalSpec>SessionId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ^CacheTempImportStatus(SessionId,"status") = "Processing..."
	set RVCount = 0
	set tSC = 1
	set sPTName=""
	For  { Set sPTName=$O(^CacheTempaImport(SessionId,sPTName)) Q:sPTName=""
 	
		set oPT = ##class(IIBAENSEMBLE.csp.Reference).getPTobj(sPTName,^CacheTempaPTAttr(SessionId,sPTName,"PrincipalRole"),^CacheTempaPTAttr(SessionId,sPTName,"System"),.tSC)
		set sPTID=oPT.%Id()
 
		set sPV=""
		For  { Set sPV=$O(^CacheTempaImport(SessionId,sPTName,sPV)) Q:sPV=""

 			set oPV = ##class(IIBAENSEMBLE.csp.Reference).getPVobj(sPV, sPTID,.tSC)
			set sPVID=oPV.%Id()
 
			set sRTSystem=""
			For  { Set sRTSystem=$O(^CacheTempaImport(SessionId,sPTName,sPV,sRTSystem)) Q:sRTSystem=""
			
				set oRT = ##class(IIBAENSEMBLE.csp.Reference).getRTobj(sRTSystem, sPTID,.tSC)
				set sRTID=oRT.%Id()
 				set sRV=""
				For  { Set sRV=$O(^CacheTempaImport(SessionId,sPTName,sPV,sRTSystem,sRV)) Q:sRV=""
 					
 					set RVCount = RVCount + 1
 					set ^CacheTempImportStatus(SessionId,"rvcount") = RVCount
 					
 					set sRVID=##class(IIBAENSEMBLE.csp.Reference).getRVID(sRV, sPVID, sRTID)
					
					if sRVID="" {
						set tSC = ##class(IIBAENSEMBLE.csp.Reference).doRVUpSert(oPT, oRT, oPV, sRV,.tSC)
					}
				}	
			}
		}
	}
	
	Quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.Bsvc.DelimitedFTPFile">
<Description><![CDATA[
Copyright 2007 by Inland Imaging Business Associates<p>
	For creating Ensemble messages from delimited text files located at an FTP location
	with each field separated by a delimiter and each message on a new line.<P>
	Usage:<br>
	<UL>
	<LI>Create a Message Class in Studio containing properties that match the fields in the text file.</LI>
		<UL>
	<LI>File -&gt; New</LI>
		<li>Cache Class Definition</li>
		<li>Extends Ens.Request</li>
		<li>Add a new property for each delimited field.</li>
		</ul>
	<LI>Add a Service to the production and select "Other" or "All Services" and select the Service Class as "IIBAENEMBLE.Bsvc.DelimitedFile".</li>
<LI>Specify the delimiter, the message class, and the target item in the settings as well as the file path and spec.</li>
<LI>Add a business process of class EnsLib.MsgRouter.RoutingEngine or a custom class to the production to transform the message class to HL7 or other format as needed.</li>
	</ul>]]></Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessService</Super>
<TimeChanged>63704,60782.412705</TimeChanged>
<TimeCreated>60633,39320.457071</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.FTP.InboundAdapter</Default>
</Parameter>

<Property name="Delimiter">
<Description>
Use "\t" for tab, "csv" for csv, and "%20" for space, otherwise, use the actual character that is the delimiter.</Description>
<Type>%String</Type>
<InitialExpression>","</InitialExpression>
</Property>

<Property name="MessageClass">
<Description>
Use the name of the message class that has been created with properties that match the fields in the delimited file.</Description>
<Type>%String</Type>
</Property>

<Property name="TargetConfigName">
<Type>%String</Type>
</Property>

<Parameter name="SETTINGS">
<Default>Delimiter,MessageClass,TargetConfigName</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:%RegisteredObject,pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	$$$TRACE("Input: "_pInput)
		
	#DIM FieldDelimiter as %String
	#DIM tMessageList as %List
	#DIM tMessage as %String
	
	Set FieldDelimiter=..Delimiter
	
	if (FieldDelimiter="\t") {
		s FieldDelimiter=$C(9)
	} elseif ($E(FieldDelimiter,1,2)="\x") {
		s FieldDelimiter=$C($ZH($E(FieldDelimiter,3,$L(FieldDelimiter))_"H"))
	} elseif FieldDelimiter = "%20" {
		s FieldDelimiter = $C(32)
	} elseif ( $ZCONVERT(FieldDelimiter,"L")="csv") {
		s FieldDelimiter="csv"
	}
	
	$$$TRACE("The Field Delimiter is: "_FieldDelimiter_" ("_$A(FieldDelimiter)_")")
	
	while 'pInput.AtEnd {
		
		Set tMessage=pInput.ReadLine()
		$$$TRACE(tMessage)
		if tMessage '= "" {
			$$$TRACE("Split the line into a list")
			if (FieldDelimiter="csv") {
				s tMessageList=##class(IIBAENSEMBLE.Functions).ParseCSV(tMessage)
			} else {
				s tMessageList=$LFS(tMessage,FieldDelimiter)
			}
			$$$TRACE("Field Count: "_$LL(tMessageList))
			$$$TRACE("Create a instance of the message class")
			s pRequest=$ZOBJCLASSMETHOD(..MessageClass,"%New")
			
			Set rs = ##class(%ResultSet).%New()
			Do rs.Prepare("Select Name, InitialExpression from %Dictionary.PropertyDefinition where parent = '"_..MessageClass_"' Order by SequenceNumber")
			set tSC = rs.Execute()
			//Quit:$$$ISERR(tSC) tSC
			
			Set FieldNum=0
			While (rs.Next()) {
				s FieldNum=FieldNum+1
				$$$TRACE("Field Number "_FieldNum_"Property: "_rs.Get("Name")_", Value: "_$LIST(tMessageList,FieldNum))
				set propertyname = rs.Get("Name")
				Set $ZOBJPROPERTY(pRequest,propertyname)=$LIST(tMessageList,FieldNum)
			}
		
			
		}


		Set tSC=..SendRequestAsync(..TargetConfigName,pRequest)
		
		// individual session per line
		Set ..%SessionId=""  
		Kill $$$JobSessionId
	}

	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnGetConnections">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pArray:%String,item:Ens.Config.Item</FormalSpec>
<Implementation><![CDATA[
	Set (tValue,tIndex)="" 
	For { 
		Set tIndex = item.Settings.Next(tIndex) Quit:tIndex=""
		Set tSetting = item.Settings.GetAt(tIndex)
		If tSetting.Name="TargetConfigName" {
			Set tValue=tSetting.Value
		}
	}
	
	For i=1:1:$L(tValue,",") { 
		Set tOne=$P(tValue,",",i)
		If (tOne '= "" ) {
			Set pArray(tOne)=""
		}
	}
	Quit
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Bsvc.DelimitedFile">
<Description><![CDATA[
Copyright 2007 by Inland Imaging Business Associates<p>
	For creating Ensemble messages from delimited text files with each field separated by a delimiter and each message on a new line.<P>
	Usage:<br>
	<UL>
	<LI>Create a Message Class in Studio containing properties that match the fields in the text file.</LI>
		<UL>
	<LI>File -&gt; New</LI>
		<li>Cache Class Definition</li>
		<li>Extends Ens.Request</li>
		<li>Add a new property for each delimited field.</li>
		</ul>
	<LI>Add a Service to the production and select "Other" or "All Services" and select the Service Class as "IIBAENEMBLE.Bsvc.DelimitedFile".</li>
<LI>Specify the delimiter, the message class, and the target item in the settings as well as the file path and spec.</li>
<LI>Add a business process of class EnsLib.MsgRouter.RoutingEngine or a custom class to the production to transform the message class to HL7 or other format as needed.</li>
	</ul>]]></Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessService</Super>
<TimeChanged>62000,33086.545281</TimeChanged>
<TimeCreated>60633,39320.457071</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.File.InboundAdapter</Default>
</Parameter>

<Property name="Delimiter">
<Description>
Use "\t" for tab, "csv" for csv, and "%20" for space, otherwise, use the actual character that is the delimiter.</Description>
<Type>%String</Type>
<InitialExpression>","</InitialExpression>
</Property>

<Property name="MessageClass">
<Description>
Use the name of the message class that has been created with properties that match the fields in the delimited file.</Description>
<Type>%String</Type>
</Property>

<Property name="TargetConfigName">
<Type>%String</Type>
</Property>

<Parameter name="SETTINGS">
<Default>Delimiter,MessageClass,TargetConfigName</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:%RegisteredObject,pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
		
	#DIM FieldDelimiter as %String
	#DIM tMessageList as %List
	#DIM tMessage as %String
	
	Set FieldDelimiter=..Delimiter
	
	if (FieldDelimiter="\t") {
		s FieldDelimiter=$C(9)
	} elseif ($E(FieldDelimiter,1,2)="\x") {
		s FieldDelimiter=$C($ZH($E(FieldDelimiter,3,$L(FieldDelimiter))_"H"))
	} elseif FieldDelimiter = "%20" {
		s FieldDelimiter = $C(32)
	} elseif ( $ZCONVERT(FieldDelimiter,"L")="csv") {
		s FieldDelimiter="csv"
	}
	
	$$$TRACE("The Field Delimiter is: "_FieldDelimiter_" ("_$A(FieldDelimiter)_")")
	
	while 'pInput.AtEnd {
		
		Set tMessage=pInput.ReadLine()
		$$$TRACE(tMessage)
		if tMessage '= "" {

			if (FieldDelimiter="csv") {
				s tMessageList=##class(IIBAENSEMBLE.Functions).ParseCSV(tMessage)
			} else {
				s tMessageList=$LFS(tMessage,FieldDelimiter)
			}
			
			s pRequest=$ZOBJCLASSMETHOD(..MessageClass,"%New")
			
			Set rs = ##class(%ResultSet).%New()
			Do rs.Prepare("Select Name, InitialExpression from %Dictionary.PropertyDefinition where parent = '"_..MessageClass_"' Order by SequenceNumber")
			set tSC = rs.Execute()
			//Quit:$$$ISERR(tSC) tSC
			
			Set FieldNum=0
			While (rs.Next()) {
				s FieldNum=FieldNum+1
				set propertyname = rs.Get("Name")
				Set $ZOBJPROPERTY(pRequest,propertyname)=$LIST(tMessageList,FieldNum)
			}
		
			
		}


		Set tSC=..SendRequestAsync(..TargetConfigName,pRequest)
		
		// individual session per line
		Set ..%SessionId=""  
		Kill $$$JobSessionId
	}

	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnGetConnections">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pArray:%String,item:Ens.Config.Item</FormalSpec>
<Implementation><![CDATA[
	Set (tValue,tIndex)="" 
	For { 
		Set tIndex = item.Settings.Next(tIndex) Quit:tIndex=""
		Set tSetting = item.Settings.GetAt(tIndex)
		If tSetting.Name="TargetConfigName" {
			Set tValue=tSetting.Value
		}
	}
	
	For i=1:1:$L(tValue,",") { 
		Set tOne=$P(tValue,",",i)
		If (tOne '= "" ) {
			Set pArray(tOne)=""
		}
	}
	Quit
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Bsvc.FileDelivery">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessService</Super>
<TimeChanged>61261,47455.55783</TimeChanged>
<TimeCreated>61250,51089.501485</TimeCreated>

<Property name="TargetConfigNames">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="FilePath">
<Type>%String</Type>
</Property>

<Property name="FileName">
<Type>%String</Type>
</Property>

<Property name="AppendTimeStamp">
<Description>
Append a timestamp to the filename. Reduces the possibility of duplicate files.</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="WorkingPath">
<Type>%String</Type>
</Property>

<Property name="ReprocessWorkingFolder">
<Description>
Deliver files in the working folder that were not previously sent.</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="ArchivePath">
<Type>%String</Type>
</Property>

<Property name="ArchiveDays">
<Type>%Integer</Type>
<InitialExpression>"30"</InitialExpression>
</Property>

<Property name="CustomProcessingClass">
<Type>%String</Type>
</Property>

<Property name="CustomProcessingMethod">
<Type>%String</Type>
</Property>

<Property name="FileModifyWaitTime">
<Type>%Integer</Type>
<InitialExpression>120</InitialExpression>
</Property>

<Parameter name="SETTINGS">
<Type>%String</Type>
<Default>TargetConfigNames,FilePath,FileName,FileModifyWaitTime,AppendTimeStamp,WorkingPath,ReprocessWorkingFolder,CustomProcessingClass,CustomProcessingMethod,ArchivePath,ArchiveDays</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:%RegisteredObject,pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	// Clean out Archive files older than 'ArchiveDays' days
	Set rset = ##class(%ResultSet).%New()
	set rset.ClassName = "%File"
	set rset.QueryName = "FileSet"
	Do rset.Execute(..ArchivePath,..FileName)
	Set FileDelete = 1
	While (rset.Next()) {
		// $$$LOGINFO("ZB: "_$ZB(##class(%File).Attributes(rset.Data("Name")),16,1))
		if ($ZB(##class(%File).Attributes(rset.Data("Name")),16,1)=0) {
			// only delete files - skip directories
			If $PIECE($HOROLOG,",") - $PIECE($ZDATETIMEH(rset.Data("DateCreated"),3,1),",") > ..ArchiveDays {
				Set FileDelete = ##class(%File).Delete(rset.Data("Name"))
				If FileDelete = 0 {
					$$$LOGERROR("File delete Failed: "_rset.Data("Name"))
				}
			}
		}
	}
	
	Do rset.Close()
	
		
	// Done - Clean out FTP Archive files older than 'ArchiveDays' days
	//
	//
	// Resend files in working directory
	
	if ( ..ReprocessWorkingFolder && (..WorkingPath '= "" ) ) {
		Set rset = ##class(%ResultSet).%New()
		set rset.ClassName = "%File"
		set rset.QueryName = "FileSet"
		Do rset.Execute(..WorkingPath,..FileName)
		While (rset.Next()) {
			$$$TRACE("Send a request to each of the targets")
			
			If ($F(rset.Data("Name"),".ArchiveFailed")=0) {
				For i=1:1:$L(..TargetConfigNames,",") {
					
					Set newRequest = ##class(IIBAENSEMBLE.msg.FileDelivery).%New()
					Set newRequest.FileSpec = ##class(%File).GetFilename(rset.Data("Name"))
					Set newRequest.FilePath= ##class(%File).GetDirectory(rset.Data("Name"))
					Set newRequest.ArchivePath=..ArchivePath
					Set newRequest.ArchiveDays=..ArchiveDays

					S target=$P(..TargetConfigNames,",",i)
					$$$TRACE("Target #"_i_": "_target)
					If ( target '= "" ) {
						$$$TRACE("Sending request to "_target)
						Set tSC = ..SendRequestAsync(target,newRequest)
					}
				}
			} else {
				$$$LOGWARNING("File In working folder that could not be archived: "_rset.Data("Name"))
			}
			
		}
		
		
	}
	
	Do rset.Close()
	
	// Done - Resend of files in working directory
	//
	//
	// Begin Processing of current Files
	
	
	set file = ""
	set FileRename = 0
	Set rset = ##class(%ResultSet).%New()
	set rset.ClassName = "%File"
	set rset.QueryName = "FileSet"
	Do rset.Execute(..FilePath,..FileName)
	While (rset.Next()) {
		if ($ZB(##class(%File).Attributes(rset.Data("Name")),16,1)=0) {
			$$$TRACE("Processing file: "_rset.Data("Name"))
			
			set NewFilename = ##class(%File).GetFilename(rset.Data("Name"))
			
			Set LastModified=$ZUTIL(140,2,rset.Data("Name"))
			
			S ElapsedTime=($P($H,",",1)-$P(LastModified,",",1))*86400+$P($H,",",2)-$P(LastModified,",",2)
			$$$TRACE("File was modified "_ElapsedTime_" Ago...(File: >"_rset.Data("Name")_"< Last Modified="_LastModified)
			
			// process the file if it was last modified more than FileModifyWaitTime seconds ago
			if ( ($P(LastModified,",",1)>0 ) && (ElapsedTime>..FileModifyWaitTime)) {
				
				if (..AppendTimeStamp) {
					S FileNameList=$LFS(NewFilename,".")
					S FtpTime=$TR($ZDT($H,8,1)," :")
					s NewFilename=$LTS($LIST(FileNameList,1,$LISTLENGTH(FileNameList)-1),".")_"."_FtpTime_"."_$LIST(FileNameList,-1)
				}
				
				
				set tfilename = ..WorkingPath_"\"_NewFilename
						
				set FileRename = ##class(%File).Rename(rset.Data("Name"),tfilename)
				$$$TRACE("Rename to "_tfilename_ "  returned: "_FileRename)
				If FileRename = 1 {
				
					$$$TRACE("Continueing processing of: "_tfilename)
					if ( ..CustomProcessingMethod '= "" ) {
						$$$TRACE("Custom processing method: "_..CustomProcessingClass_"/"_..CustomProcessingMethod)
					
						s tSC=$ZOBJCLASSMETHOD(..CustomProcessingClass,..CustomProcessingMethod,.tfilename)
					
						$$$TRACE("Custom Method complete: "_..CustomProcessingClass_"/"_..CustomProcessingMethod_" returned: "_tSC)
					
						if (tSC) {
							$$$LOGERROR("Custom Method processing failed for: "_tfilename)
							Q
						}
					
					}
				
				
					$$$TRACE("Send a request to each of the targets")
					For i=1:1:$L(..TargetConfigNames,",") {
					
						Set newRequest = ##class(IIBAENSEMBLE.msg.FileDelivery).%New()
						Set newRequest.FileSpec = ##class(%File).GetFilename(tfilename)
						Set newRequest.FilePath= ##class(%File).GetDirectory(tfilename)
						Set newRequest.ArchivePath=..ArchivePath
						Set newRequest.ArchiveDays=..ArchiveDays

						S target=$P(..TargetConfigNames,",",i)
						$$$TRACE("Target #"_i_": "_target)
						If ( target '= "" ) {
							$$$TRACE("Sending request to "_target)
							Set tSC = ..SendRequestAsync(target,newRequest)
						}
					}
				
				} Else {
					$$$LOGINFO("Failed to rename file : "_rset.Data("Name"))
				}
			} Else {
				$$$TRACE("File "_NewFilename_" because it was modified "_ElapsedTime_" seconds ago, which is less then 120 seconds")
			}
		}
	}
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnGetConnections">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pArray:%String,item:Ens.Config.Item</FormalSpec>
<Implementation><![CDATA[
	Set (tValue,tIndex)="" 
	For { 
		Set tIndex = item.Settings.Next(tIndex) Quit:tIndex=""
		Set tSetting = item.Settings.GetAt(tIndex)
		If tSetting.Name="TargetConfigNames" {
			Set tValue=tSetting.Value
		}
	}
	
	For i=1:1:$L(tValue,",") { 
		Set tOne=$P(tValue,",",i)
		If (tOne '= "" ) {
			Set pArray(tOne)=""
		}
	}
	Quit
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Bsvc.FileDeliveryPolling">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessService</Super>
<TimeChanged>61802,52994.041487</TimeChanged>
<TimeCreated>61250,51089.501485</TimeCreated>

<Parameter name="ADAPTER">
<Type>%String</Type>
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Property name="TargetConfigNames">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="FilePath">
<Type>%String</Type>
</Property>

<Property name="FileName">
<Type>%String</Type>
</Property>

<Property name="AppendTimeStamp">
<Description>
Append a timestamp to the filename. Reduces the possibility of duplicate files.</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="WorkingPath">
<Type>%String</Type>
</Property>

<Property name="ReprocessWorkingFolder">
<Description>
Deliver files in the working folder that were not previously sent.</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="ArchivePath">
<Type>%String</Type>
</Property>

<Property name="ArchiveDays">
<Type>%Integer</Type>
<InitialExpression>"30"</InitialExpression>
</Property>

<UDLText name="T">
<Content><![CDATA[
// Used to limit the archive clean up to once a day (and/or when interface is started up)

]]></Content>
</UDLText>

<Property name="ArchiveFolderDate">
<Type>%TimeStamp</Type>
</Property>

<Property name="CustomProcessingClass">
<Type>%String</Type>
</Property>

<Property name="CustomProcessingMethod">
<Type>%String</Type>
</Property>

<Property name="FileModifyWaitTime">
<Type>%Integer</Type>
<InitialExpression>120</InitialExpression>
</Property>

<Parameter name="SETTINGS">
<Type>%String</Type>
<Default>TargetConfigNames,FilePath,FileName,FileModifyWaitTime,AppendTimeStamp,WorkingPath,ReprocessWorkingFolder,CustomProcessingClass,CustomProcessingMethod,ArchivePath,ArchiveDays</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:%RegisteredObject,pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	// Clean out Archive files older than 'ArchiveDays' days
	// ...Clean up is done once a day, and/or on startup.
	
	if ( $P(..ArchiveFolderDate,",",1)'=$P($H,",",1) ) {
		Set ..ArchiveFolderDate=$H
		$$$TRACE("Archive Folder Cleanup:"_..ArchiveFolderDate_"| "_$H)
		Set rset = ##class(%ResultSet).%New()
		set rset.ClassName = "%File"
		set rset.QueryName = "FileSet"
		Do rset.Execute(..ArchivePath,..FileName)
		Set FileDelete = 1
		While (rset.Next()) {
			// $$$LOGINFO("ZB: "_$ZB(##class(%File).Attributes(rset.Data("Name")),16,1))
			if ($ZB(##class(%File).Attributes(rset.Data("Name")),16,1)=0) {
				// only delete files - skip directories
				If $PIECE($HOROLOG,",") - $PIECE($ZDATETIMEH(rset.Data("DateCreated"),3,1),",") > ..ArchiveDays {
					Set FileDelete = ##class(%File).Delete(rset.Data("Name"))
					If FileDelete = 0 {
						$$$LOGERROR("File delete Failed: "_rset.Data("Name"))
					}
				}
			}
		}
	
		Do rset.Close()
	}
		
	// Done - Clean out FTP Archive files older than 'ArchiveDays' days
	//
	//
	// Resend files in working directory
	
	if ( ..ReprocessWorkingFolder && (..WorkingPath '= "" ) ) {
		Set rset = ##class(%ResultSet).%New()
		set rset.ClassName = "%File"
		set rset.QueryName = "FileSet"
		Do rset.Execute(..WorkingPath,..FileName)
		While (rset.Next()) {
			$$$TRACE("Send a request to each of the targets")
			
			If ($F(rset.Data("Name"),".ArchiveFailed")=0) {
				For i=1:1:$L(..TargetConfigNames,",") {
					
					Set newRequest = ##class(IIBAENSEMBLE.msg.FileDelivery).%New()
					Set newRequest.FileSpec = ##class(%File).GetFilename(rset.Data("Name"))
					Set newRequest.FilePath= ##class(%File).GetDirectory(rset.Data("Name"))
					Set newRequest.ArchivePath=..ArchivePath
					Set newRequest.ArchiveDays=..ArchiveDays

					S target=$P(..TargetConfigNames,",",i)
					$$$TRACE("Target #"_i_": "_target)
					If ( target '= "" ) {
						$$$TRACE("Sending request to "_target)
						Set tSC = ..SendRequestAsync(target,newRequest)
					}
				}
			} else {
				$$$LOGWARNING("File In working folder that could not be archived: "_rset.Data("Name"))
			}
			
		}
		
		
	}
	
	Do rset.Close()
	
	// Done - Resend of files in working directory
	//
	//
	// Begin Processing of current Files
	
	
	set file = ""
	set FileRename = 0
	Set rset = ##class(%ResultSet).%New()
	set rset.ClassName = "%File"
	set rset.QueryName = "FileSet"
	Do rset.Execute(..FilePath,..FileName)
	While (rset.Next()) {
		if ($ZB(##class(%File).Attributes(rset.Data("Name")),16,1)=0) {
			$$$TRACE("Processing file: "_rset.Data("Name"))
			
			set NewFilename = ##class(%File).GetFilename(rset.Data("Name"))
			
			Set LastModified=$ZUTIL(140,2,rset.Data("Name"))
			
			S ElapsedTime=($P($H,",",1)-$P(LastModified,",",1))*86400+$P($H,",",2)-$P(LastModified,",",2)
			$$$TRACE("File was modified "_ElapsedTime_" Ago...(File: >"_rset.Data("Name")_"< Last Modified="_LastModified)
			
			// process the file if it was last modified more than FileModifyWaitTime seconds ago
			if ( ($P(LastModified,",",1)>0 ) && (ElapsedTime>..FileModifyWaitTime)) {
				
				if (..AppendTimeStamp) {
					S FileNameList=$LFS(NewFilename,".")
					S FtpTime=$TR($ZDT($H,8,1)," :")
					s NewFilename=$LTS($LIST(FileNameList,1,$LISTLENGTH(FileNameList)-1),".")_"."_FtpTime_"."_$LIST(FileNameList,-1)
				}
				
				
				set tfilename = ..WorkingPath_"\"_NewFilename
						
				set FileRename = ##class(%File).Rename(rset.Data("Name"),tfilename)
				$$$TRACE("Rename to "_tfilename_ "  returned: "_FileRename)
				If FileRename = 1 {
				
					$$$TRACE("Continueing processing of: "_tfilename)
					if ( ..CustomProcessingMethod '= "" ) {
						$$$TRACE("Custom processing method: "_..CustomProcessingClass_"/"_..CustomProcessingMethod)
					
						s tSC=$ZOBJCLASSMETHOD(..CustomProcessingClass,..CustomProcessingMethod,.tfilename)
					
						$$$TRACE("Custom Method complete: "_..CustomProcessingClass_"/"_..CustomProcessingMethod_" returned: "_tSC)
					
						if (tSC) {
							$$$LOGERROR("Custom Method processing failed for: "_tfilename)
							Q
						}
					
					}
				
				
					$$$TRACE("Send a request to each of the targets")
					For i=1:1:$L(..TargetConfigNames,",") {
					
						Set newRequest = ##class(IIBAENSEMBLE.msg.FileDelivery).%New()
						Set newRequest.FileSpec = ##class(%File).GetFilename(tfilename)
						Set newRequest.FilePath= ##class(%File).GetDirectory(tfilename)
						Set newRequest.ArchivePath=..ArchivePath
						Set newRequest.ArchiveDays=..ArchiveDays

						S target=$P(..TargetConfigNames,",",i)
						$$$TRACE("Target #"_i_": "_target)
						If ( target '= "" ) {
							$$$TRACE("Sending request to "_target)
							Set tSC = ..SendRequestAsync(target,newRequest)
						}
					}
				
				} Else {
					$$$LOGINFO("Failed to rename file : "_rset.Data("Name"))
				}
			} Else {
				$$$TRACE("File "_NewFilename_" because it was modified "_ElapsedTime_" seconds ago, which is less then 120 seconds")
			}
		}
	}
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnGetConnections">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pArray:%String,item:Ens.Config.Item</FormalSpec>
<Implementation><![CDATA[
	Set (tValue,tIndex)="" 
	For { 
		Set tIndex = item.Settings.Next(tIndex) Quit:tIndex=""
		Set tSetting = item.Settings.GetAt(tIndex)
		If tSetting.Name="TargetConfigNames" {
			Set tValue=tSetting.Value
		}
	}
	
	For i=1:1:$L(tValue,",") { 
		Set tOne=$P(tValue,",",i)
		If (tOne '= "" ) {
			Set pArray(tOne)=""
		}
	}
	Quit
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Bsvc.FileToEmail">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessService</Super>
<TimeChanged>61066,35338.688438</TimeChanged>
<TimeCreated>60836,42071.642128</TimeCreated>

<Property name="TargetConfigName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ToAddress">
<Type>%String</Type>
</Property>

<Property name="AttachmentPath">
<Type>%String</Type>
</Property>

<Property name="AttachmentName">
<Type>%String</Type>
</Property>

<Property name="Subject">
<Type>%String</Type>
</Property>

<Property name="Body">
<Type>%String</Type>
</Property>

<Property name="ArchivePath">
<Description>
If a value is provided the attachment is archived to this location</Description>
<Type>%String</Type>
</Property>

<Property name="ArchiveDays">
<Type>%Integer</Type>
<InitialExpression>"30"</InitialExpression>
</Property>

<Property name="CustomProcessingClass">
<Type>%String</Type>
</Property>

<Property name="CustomProcessingMethod">
<Type>%String</Type>
</Property>

<Property name="WorkingPath">
<Type>%String</Type>
</Property>

<Parameter name="SETTINGS">
<Type>%String</Type>
<Default>TargetConfigName,ToAddress,AttachmentPath,AttachmentName,Subject,Body,WorkingPath,CustomProcessingClass,CustomProcessingMethod,ArchivePath,ArchiveDays</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:%RegisteredObject,pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	set tSC = 1
	
	// Clean out Archive files older than 'ArchiveDays' days
	
	if ..ArchivePath '= "" {
	
		do ##class(IIBAENSEMBLE.Utilities).PurgeArchivedFiles(..ArchivePath,"*.*",..ArchiveDays)
		
	}
			
	// Done - Clean out FTP Archive files older than 'ArchiveDays' days
	//
	//
	// Begin Processing of current Files
	
	
	Set rset = ##class(%ResultSet).%New()
	set rset.ClassName = "%File"
	set rset.QueryName = "FileSet"
	Do rset.Execute(..AttachmentPath,..AttachmentName)
	While (rset.Next()) {
		if ($ZB(##class(%File).Attributes(rset.Data("Name")),16,1)=0) {
			$$$TRACE("Processing file: "_rset.Data("Name"))
			
			set tfilefullname = rset.Data("Name")
			set tname = ##class(%File).GetFilename(rset.Data("Name"))
			
			if ..ArchivePath '= "" {
				
					
				set NewFileFullname = ..ArchivePath_"\"_tname
						
				set FileCopy = ##class(%File).CopyFile(rset.Data("Name"),NewFileFullname)
				$$$TRACE("File Copy to "_NewFileFullname_ "  returned: "_FileCopy)
				
				if FileCopy '= 1 { $$$LOGERROR("Email Archive File Rename failed for: "_tfilefullname) }
			
			}
			
			
			if ..WorkingPath '="" {
				set NewFileFullname = ..WorkingPath_"\"_tname
				set tSC = ##class(%File).Rename(tfilefullname,NewFileFullname)
				
				if (tSC '= 1) {
					$$$LOGERROR("Could not move file "_tname_" to the working directory "_..WorkingPath)
					Q
				}
				
				s tfilefullname=NewFileFullname
			}
			
			$$$TRACE("Continueing processing of: "_tfilefullname)
			if ( ..CustomProcessingMethod '= "" ) {
				$$$TRACE("Custom processing method: "_..CustomProcessingClass_"/"_..CustomProcessingMethod)
					
				s tSC=$ZOBJCLASSMETHOD(..CustomProcessingClass,..CustomProcessingMethod,.tfilefullname)
					
				$$$TRACE("Custom Method complete: "_..CustomProcessingClass_"/"_..CustomProcessingMethod_" returned: "_tSC)
					
				if (tSC '= 1) {
					$$$LOGERROR("Custom Method: "_..CustomProcessingClass_"."_..CustomProcessingMethod_" processing failed for: "_tfilefullname_" with status: "_tSC)
					Q
				}
					
			}
			
			set tname = ##class(%File).GetFilename(tfilefullname)
			set tpath = ##class(%File).GetDirectory(tfilefullname)
			
			set pRequest = ##class(IIBAENSEMBLE.msg.EmailSendRequest).%New()
			set pRequest.Destination = ..ToAddress
			set pRequest.Subject = ..Subject
			set pRequest.Text = ..Body
			set pRequest.AttFile = tname
			set pRequest.AttDir = tpath
			
				
			Set tSC = ..SendRequestAsync(..TargetConfigName,pRequest)
				
			
			
		}		
	}		
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="OnGetConnections">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pArray:%String,item:Ens.Config.Item</FormalSpec>
<Implementation><![CDATA[
	Set (tValue,tIndex)="" 
	For { 
		Set tIndex = item.Settings.Next(tIndex) Quit:tIndex=""
		Set tSetting = item.Settings.GetAt(tIndex)
		If tSetting.Name="TargetConfigName" {
			Set tValue=tSetting.Value
		}
	}
	
	For i=1:1:$L(tValue,",") { 
		Set tOne=$P(tValue,",",i)
		If (tOne '= "" ) {
			Set pArray(tOne)=""
		}
	}
	Quit
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Bsvc.FileToFtp">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessService</Super>
<TimeChanged>61066,43689.617258</TimeChanged>
<TimeCreated>60836,42071.642128</TimeCreated>

<Property name="TargetConfigNames">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="FilePath">
<Type>%String</Type>
</Property>

<Property name="FileName">
<Type>%String</Type>
</Property>

<Property name="WorkingPath">
<Type>%String</Type>
</Property>

<Property name="ArchivePath">
<Type>%String</Type>
</Property>

<Property name="ArchiveDays">
<Type>%Integer</Type>
<InitialExpression>"30"</InitialExpression>
</Property>

<Property name="CustomProcessingClass">
<Type>%String</Type>
</Property>

<Property name="CustomProcessingMethod">
<Type>%String</Type>
</Property>

<Parameter name="SETTINGS">
<Type>%String</Type>
<Default>TargetConfigNames,FilePath,FileName,WorkingPath,CustomProcessingClass,CustomProcessingMethod,ArchivePath,ArchiveDays</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:%RegisteredObject,pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	// Clean out Archive files older than 'ArchiveDays' days
	Set rset = ##class(%ResultSet).%New()
	set rset.ClassName = "%File"
	set rset.QueryName = "FileSet"
	Do rset.Execute(..ArchivePath,"*.*")
	Set FileDelete = 1
	While (rset.Next()) {
		// $$$LOGINFO("ZB: "_$ZB(##class(%File).Attributes(rset.Data("Name")),16,1))
		if ($ZB(##class(%File).Attributes(rset.Data("Name")),16,1)=0) {
			// only delete files - skip directories
			If $PIECE($HOROLOG,",") - $PIECE($ZDATETIMEH(rset.Data("DateCreated"),3,1),",") > ..ArchiveDays {
				Set FileDelete = ##class(%File).Delete(rset.Data("Name"))
				If FileDelete = 0 {
					$$$LOGERROR("File delete Failed: "_rset.Data("Name"))
				}
			}
		}
	}
	
	Do rset.Close()
	
		
	// Done - Clean out FTP Archive files older than 'ArchiveDays' days
	//
	//
	// Begin Processing of current Files
	
	
	set file = ""
	set FileRename = 0
	Set rset = ##class(%ResultSet).%New()
	set rset.ClassName = "%File"
	set rset.QueryName = "FileSet"
	Do rset.Execute(..FilePath,..FileName)
	While (rset.Next()) {
		if ($ZB(##class(%File).Attributes(rset.Data("Name")),16,1)=0) {
			$$$TRACE("Processing file: "_rset.Data("Name"))
			
			set NewFilename = ##class(%File).GetFilename(rset.Data("Name"))
			
			Set LastModified=$ZUTIL(140,2,rset.Data("Name"))
			
			S ElapsedTime=($P($H,",",1)-$P(LastModified,",",1))*86400+$P($H,",",2)-$P(LastModified,",",2)
			$$$TRACE("File was modified "_ElapsedTime_" Ago...(File: >"_rset.Data("Name")_"< Last Modified="_LastModified)
			
			// process the file if it was last modified more than 120 seconds ago
			if ( ($P(LastModified,",",1)>0 ) && (ElapsedTime>120)) {
				
				S FileNameList=$LFS(NewFilename,".")
				S FtpTime=$TR($ZDT($H,8,1)," :")
				s NewFilename=$LTS($LIST(FileNameList,1,$LISTLENGTH(FileNameList)-1),".")_"."_FtpTime_"."_$LIST(FileNameList,-1)
				
				
				set tfilename = ..WorkingPath_"\"_NewFilename
						
				set FileRename = ##class(%File).Rename(rset.Data("Name"),tfilename)
				$$$TRACE("Rename to "_tfilename_ "  returned: "_FileRename)
				If FileRename = 1 {
				
					$$$TRACE("Continueing processing of: "_tfilename)
					if ( ..CustomProcessingMethod '= "" ) {
						$$$TRACE("Custom processing method: "_..CustomProcessingClass_"/"_..CustomProcessingMethod)
					
						s tSC=$ZOBJCLASSMETHOD(..CustomProcessingClass,..CustomProcessingMethod,.tfilename)
					
						$$$TRACE("Custom Method complete: "_..CustomProcessingClass_"/"_..CustomProcessingMethod_" returned: "_tSC)
					
						if (tSC) {
							$$$LOGERROR("Custom Method processing failed for: "_tfilename)
							Q
						}
					
					}
				
				
					$$$TRACE("Send a request to each of the targets")
					For i=1:1:$L(..TargetConfigNames,",") {
					
						Set newRequest = ##class(IIBAENSEMBLE.msg.FileToFTP).%New()
						Set newRequest.FileSpec = ##class(%File).GetFilename(tfilename)
						Set newRequest.FilePath= ##class(%File).GetDirectory(tfilename)
						Set newRequest.ArchivePath=..ArchivePath
						Set newRequest.ArchiveDays=..ArchiveDays

						S target=$P(..TargetConfigNames,",",i)
						$$$TRACE("Target #"_i_": "_target)
						If ( target '= "" ) {
							$$$TRACE("Sending request to "_target)
							Set tSC = ..SendRequestAsync(target,newRequest)
						}
					}
				
				} Else {
					$$$LOGINFO("Failed to rename file : "_rset.Data("Name"))
				}
			} Else {
				$$$LOGWARNING("File "_NewFilename_" because it was modified "_ElapsedTime_" seconds ago, which is less then 120 seconds")
			}
		}
	}
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnGetConnections">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pArray:%String,item:Ens.Config.Item</FormalSpec>
<Implementation><![CDATA[
	Set (tValue,tIndex)="" 
	For { 
		Set tIndex = item.Settings.Next(tIndex) Quit:tIndex=""
		Set tSetting = item.Settings.GetAt(tIndex)
		If tSetting.Name="TargetConfigNames" {
			Set tValue=tSetting.Value
		}
	}
	
	For i=1:1:$L(tValue,",") { 
		Set tOne=$P(tValue,",",i)
		If (tOne '= "" ) {
			Set pArray(tOne)=""
		}
	}
	Quit
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Bsvc.FileToMsgs">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessService</Super>
<TimeChanged>61087,46050.092415</TimeChanged>
<TimeCreated>60836,42071.642128</TimeCreated>

<Property name="TargetConfigName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="FilePath">
<Type>%String</Type>
</Property>

<Property name="FileName">
<Type>%String</Type>
</Property>

<Property name="UNCPath">
<Type>%String</Type>
</Property>

<Property name="UNCDriveLetter">
<Type>%String</Type>
</Property>

<Property name="UNCUser">
<Type>%String</Type>
</Property>

<Property name="UNCPWord">
<Type>%String</Type>
</Property>

<Property name="ArchivePath">
<Description>
If a value is provided the attachment is archived to this location</Description>
<Type>%String</Type>
</Property>

<Property name="ArchiveDays">
<Type>%Integer</Type>
<InitialExpression>"30"</InitialExpression>
</Property>

<Property name="CustomProcessingClass">
<Type>%String</Type>
</Property>

<Property name="CustomProcessingMethod">
<Type>%String</Type>
</Property>

<Property name="WorkingPath">
<Type>%String</Type>
</Property>

<Parameter name="SETTINGS">
<Type>%String</Type>
<Default>TargetConfigName,FilePath,FileName,WorkingPath,CustomProcessingClass,CustomProcessingMethod,ArchivePath,ArchiveDays</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:%RegisteredObject,pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	$$$TRACE("OnProcessInput")
	
	set tSC = 1
	
	// Clean out Archive files older than 'ArchiveDays' days
	
	if ..ArchivePath '= "" {
	
		do ##class(IIBAENSEMBLE.Utilities).PurgeArchivedFiles(..ArchivePath,"*.*",..ArchiveDays)
		
	}
			
	// Done - Clean out FTP Archive files older than 'ArchiveDays' days
	//
	//
	// Begin Processing of current Files
	
	
	Set rset = ##class(%ResultSet).%New()
	set rset.ClassName = "%File"
	set rset.QueryName = "FileSet"
	Do rset.Execute(..FilePath,..FileName)
	While (rset.Next()) {
		if ($ZB(##class(%File).Attributes(rset.Data("Name")),16,1)=0) {
			$$$TRACE("Processing file: "_rset.Data("Name"))
			
			set tfilefullname = rset.Data("Name")
			set tname = ##class(%File).GetFilename(rset.Data("Name"))
			
			if ..ArchivePath '= "" {
				
					
				set NewFileFullname = ..ArchivePath_"\"_tname
						
				set FileCopy = ##class(%File).CopyFile(rset.Data("Name"),NewFileFullname)
				$$$TRACE("File Copy to "_NewFileFullname_ "  returned: "_FileCopy)
				
				if FileCopy '= 1 { $$$LOGERROR("File Rename failed for: "_tfilefullname) }
			
			}
			
			
			if ..WorkingPath '="" {
				set NewFileFullname = ..WorkingPath_"\"_tname
				set tSC = ##class(%File).Rename(tfilefullname,NewFileFullname)
				
				if (tSC '= 1) {
					$$$LOGERROR("Could not move file "_tname_" to the working directory "_..WorkingPath)
					Q
				}
				
				s tfilefullname=NewFileFullname
			}
			
			
			if ( ..CustomProcessingMethod '= "" ) {
				$$$TRACE("Custom processing method: "_..CustomProcessingClass_"/"_..CustomProcessingMethod)
				
				
				
				set pFileStream = ##class(%FileCharacterStream).%New()
				Set pFileStream.Filename = tfilefullname
	
				$$$TRACE("stream: "_pFileStream.Filename)
		
				while 'pFileStream.AtEnd {
		
					Set tLine = pFileStream.ReadLine()
					
					
 					
 					if tLine '= "" {
 						s pRequest=$ZOBJCLASSMETHOD(..CustomProcessingClass,..CustomProcessingMethod,tLine,.tSC)
 						$$$TRACE("Custom Method complete: "_..CustomProcessingClass_"/"_..CustomProcessingMethod_" returned: "_tSC)
					
 						if (($ISOBJECT(pRequest) = 0)||(tSC '= 1)) {
							$$$LOGERROR("Custom Method: "_..CustomProcessingClass_"."_..CustomProcessingMethod_" processing failed for: "_tfilefullname_" with status: "_$System.OBJ.DisplayError(tSC))
							Q
						} else {
							Set tSC = ..SendRequestAsync(..TargetConfigName,pRequest)
						}
						
						s pRequest = ""
					
					}
		
					if tSC'=1 { 
						Q
					}
					
				}		
			}			
		}		
	}		
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="OnGetConnections">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pArray:%String,item:Ens.Config.Item</FormalSpec>
<Implementation><![CDATA[
	Set (tValue,tIndex)="" 
	For { 
		Set tIndex = item.Settings.Next(tIndex) Quit:tIndex=""
		Set tSetting = item.Settings.GetAt(tIndex)
		If tSetting.Name="TargetConfigName" {
			Set tValue=tSetting.Value
		}
	}
	
	For i=1:1:$L(tValue,",") { 
		Set tOne=$P(tValue,",",i)
		If (tOne '= "" ) {
			Set pArray(tOne)=""
		}
	}
	Quit
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Bsvc.SQLInbound">
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessService</Super>
<TimeChanged>63265,53392.365312</TimeChanged>
<TimeCreated>63214,58492.160811</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.InboundAdapter</Default>
</Parameter>

<Property name="MessageClass">
<Type>%String</Type>
</Property>

<Property name="TargetConfigNames">
<Type>%String</Type>
</Property>

<Property name="MessageCount">
<Type>%String</Type>
</Property>

<Parameter name="SETTINGS">
<Type>%String</Type>
<Default>MessageClass,MessageCount,TargetConfigNames</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:EnsLib.SQL.Snapshot,pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	$$$TRACE("Processing message.../"_..MessageClass)
	#dim propertyDef as %String
	
	Set tSC  = ..GetClassProperties(..MessageClass, .propertyDef)                                                              
	Quit:$$$ISERR(tSC) tSC
	
	$$$TRACE("Transform results into Message Class")
	
	
	//Create class from MessageClass Property
	set reg = $CLASSMETHOD(..MessageClass,"%New")
	
	#Dim propertyName as %String = ""
	#dim propertyTrace as %String = ""
	

	//iterate through the Message class properties and set to the value we get from the pInput/SnapShot using $PROPERTY
	For count = 1:1:propertyDef {
		//get the property information
		set propertyName = propertyDef("propertyName",count)
		Set InitialExpression = propertyDef("InitialExpression",count)
		
		if (propertyName '="") 
		{
			set propertyValue = pInput.Get(propertyName)
			
			/**/
			s propertyTrace = propertyTrace_"|"_propertyName_"^"_propertyValue_"^"_count		
			
			//IF the value from the pInput is NULL then use the initial expression
			if ($a(propertyValue) '= -1)
			{
				s $PROPERTY(reg,propertyName) = propertyValue
			}
			elseif (1=0) 
			{
				s $PROPERTY(reg,propertyName) = InitialExpression
			}
	
			//capture the key value based on the Adapter's KeyFieldName
			if (propertyName = ..Adapter.KeyFieldName)
			{
				set regKey = propertyValue
				
			}	
						
						
		}
		
	}
	$$$TRACE("Properties: " _ propertyName)
						
	s reg.OriginalFilename =  ..%ConfigName _"."_..Adapter.KeyFieldName _ ".xml"
	
	s tSC = ..WriteClassToStream(reg,.tStream)
	s reg.Stream = tStream

	// Send to each Target Configuration Name
	For i=1:1:$L(..TargetConfigNames,",") {
		//get the target cofiguration name using $PIECE
		S target=$PIECE(..TargetConfigNames,",",i)
		$$$TRACE("Sending KeyFieldName: '"_..Adapter.KeyFieldName_" with KeyValue: "_regKey_"' To '"_target_"'.")

		//send to target syncrhonously
		set tSC=..SendRequestSync(target,reg,.pOutput)
		
		
		Q:$$$ISERR(tSC) 
		
	}	
	//Create Delete method to override current 
	//Call new delete method to allow transactions while still processing current message. 	
	QUIT tSC
]]></Implementation>
</Method>

<Method name="OnGetConnections">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pArray:%String,item:Ens.Config.Item</FormalSpec>
<Implementation><![CDATA[
	Set (tValue,tIndex)="" 
	For { 
		Set tIndex = item.Settings.Next(tIndex) Quit:tIndex=""
		Set tSetting = item.Settings.GetAt(tIndex)
		If tSetting.Name="TargetConfigNames" {
			Set tValue=tSetting.Value
		}
	}
	
	For i=1:1:$L(tValue,",") { 
		Set tOne=$P(tValue,",",i)
		If (tOne '= "" ) {
			Set pArray(tOne)=""
		}
	}
	Quit
]]></Implementation>
</Method>

<Method name="OnInit">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   #; initialize persistent last key value
   Do ..Adapter.InitializePersistentValue(..%ConfigName,,0)

   Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetClassProperties">
<Description><![CDATA[
Use to get the Message Class <b>pClassName</b> properties into a MulitDimensional Array <b>pPropertyDefinition</b>]]></Description>
<FormalSpec>pClassName:%String,*pPropertyDefinition:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	$$$TRACE("Getting message class properties: "_"Select Name, InitialExpression from %Dictionary.PropertyDefinition where parent = "_pClassName_" Order by SequenceNumber")
	Set rs = ##class(%ResultSet).%New()
	Do rs.Prepare("Select Name, InitialExpression from %Dictionary.PropertyDefinition where parent = '"_pClassName_"' Order by SequenceNumber")
	set tSC = rs.Execute() Quit:$$$ISERR(tSC) tSC
	

	set count = 1
		
	
	While (rs.Next()) {
		//get the property information
		set pPropertyDefinition("propertyName",count) = rs.Get("Name") 
		Set pPropertyDefinition("InitialExpression",count) = rs.Get("InitialExpression")
		set count = count + 1	
	}
	
	set pPropertyDefinition = rs.%ROWCOUNT
		
	QUIT tSC
]]></Implementation>
</Method>

<Method name="OnResponse">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	$$$TRACE("In OnResponse")
	QUIT $$$OK
]]></Implementation>
</Method>

<Method name="WriteClassToStream">
<FormalSpec>cls:%XML.Adaptor,*pStream:%FileCharacterStream</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    //check that cls extends %XML.Adaptor
    Set check=1
    set tSC = $$$OK
    
    Try {
       Set check=$classmethod($classname(cls),"%Extends","%XML.Adaptor")
       } Catch {
           Set check=0
           }

    If (check'=1) {
        $$$TRACE("Class does not extend %XML.Adaptor or is not compiled")
        quit tSC
        }
	
    Set filename=..%ConfigName _"."_..Adapter.KeyFieldName _ ".xml"
        
    Set writer=##class(%XML.Writer).%New()
    Set writer.Indent=1
    Set tSC=writer.OutputToStream(.pStream)
    Q:$$$ISERR(tSC) tSC
    
    Set tSC=writer.RootElement(..%ConfigName)
    Q:$$$ISERR(tSC) tSC
	
    Set tSC=writer.Object(cls)
    Q:$$$ISERR(tSC) tSC
        
    Do writer.EndRootElement()
    Do writer.EndDocument()
    
    q tSC
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
Method ExecuteUpdate(Output pNumRowsAffected As %Integer, pUpdateStatement As %String, pParms...) As %Status
{
	Quit $$$OK
}
*/
]]></Content>
</UDLText>
</Class>


<Class name="IIBAENSEMBLE.Bsvc.xRefImport">
<Description>
</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessService</Super>
<TimeChanged>61227,37104.448916</TimeChanged>
<TimeCreated>61226,37295.953416</TimeCreated>

<Parameter name="ADAPTER">
<Type>%String</Type>
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Property name="TargetConfigNames">
<Description>
Not using the adapter at this point in order to provide flexibility, but will need to use the task manager to initiate the ProcessInput
Parameter ADAPTER = "EnsLib.File.InboundAdapter";</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Parameter name="SETTINGS">
<Type>%String</Type>
<Default>TargetConfigNames</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:%RegisteredObject,pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s EnsSysDir = ##class(%File).ParentDirectoryName(##class(%File).ManagerDirectory())
	s xRefImportDir = EnsSysDir_"xRefImports\new\"
	s xRefWorkingDir = EnsSysDir_"xRefImports\working\"
	
	set tSC = 1
	
	Set rset = ##class(%ResultSet).%New()
	set rset.ClassName = "%File"
	set rset.QueryName = "FileSet"
	Do rset.Execute(xRefImportDir,"*","",0)
	While (rset.Next()) {
		
		if ($ZB(##class(%File).Attributes(rset.Data("Name")),16,1)=0) {
		
			set tfilefullname = rset.Data("Name")
			set tname = ##class(%File).GetFilename(rset.Data("Name"))
			
			set NewFileFullname = xRefWorkingDir_tname
			set tSC = ##class(%File).Rename(tfilefullname,NewFileFullname)
			
			if (tSC '= 1) {
				$$$LOGERROR("Could not move file "_tname_" to the working directory "_xRefWorkingDir)
				set tSC = 1
				Q
			}
			
			set tSC = ..SendMsg(tname,NewFileFullname)
		
		}
	}

	Quit tSC
]]></Implementation>
</Method>

<Method name="OnGetConnections">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pArray:%String,item:Ens.Config.Item</FormalSpec>
<Implementation><![CDATA[
	Set (tValue,tIndex)="" 
	For { 
		Set tIndex = item.Settings.Next(tIndex) Quit:tIndex=""
		Set tSetting = item.Settings.GetAt(tIndex)
		If tSetting.Name="TargetConfigNames" {
			Set tValue=tSetting.Value
		}
	}
	
	For i=1:1:$L(tValue,",") { 
		Set tOne=$P(tValue,",",i)
		If (tOne '= "" ) {
			Set pArray(tOne)=""
		}
	}
	Quit
]]></Implementation>
</Method>

<Method name="SendMsg">
<FormalSpec>tname:%String,NewFileFullname:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set pRequest = ##class(IIBAENSEMBLE.msg.xRefImport).%New()
	set pRequest.importType = $P($P(tname,".",1),"_",1)
	set pRequest.SessionId = $P($P(tname,".",1),"_",2)
	set pRequest.filetimestamp = $P($P(tname,".",1),"_",3)
	set pRequest.filename = NewFileFullname
		
	For i=1:1:$L(..TargetConfigNames,",") {
					
		S target=$P(..TargetConfigNames,",",i)
		$$$TRACE("Target #"_i_": "_target)
		If ( target '= "" ) {
			$$$TRACE("Sending request to "_target)
			Set tSC = ..SendRequestAsync(target,pRequest)
		}
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Datatype.FixedWidthString">
<ClassType>datatype</ClassType>
<ClientDataType>VARCHAR</ClientDataType>
<OdbcType>VARCHAR</OdbcType>
<SqlCategory>STRING</SqlCategory>
<TimeChanged>62073,53446.93888</TimeChanged>
<TimeCreated>62073,53291.049663</TimeCreated>

<Parameter name="MAXLEN">
<Description>
MAXLEN determines the width of the field</Description>
<Default>250</Default>
</Parameter>

<Parameter name="JUSTIFIED">
<Description>
JUSTIFIED determines whether the value in the field is justified to the left or right.  The default is "L" for left.</Description>
<Type>STRING</Type>
<Default>L</Default>
</Parameter>

<Parameter name="FILLER">
<Description>
FILLER determines the value that is used to make up the full width of the field.  The default is space.</Description>
<Type>STRING</Type>
<Default> </Default>
</Parameter>
</Class>


<Class name="IIBAENSEMBLE.EnsMsgTracePane">
<Super>%CSP.Util.Pane</Super>
<TimeChanged>62061,42559.133619</TimeChanged>
<TimeCreated>60724,34551.068693</TimeCreated>

<Parameter name="DOMAIN">
<Description>
Use our own domain for localization</Description>
<Default>Ensemble</Default>
</Parameter>

<Method name="DrawHEAD">
<FormalSpec>pInstance:%CSP.Util.PageInstance</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// override table style
	&html<
<style>
TABLE.LayoutMain TD.LayoutContentCol {
	background: #EEFFFF;
	padding-left: 0px;
	vertical-align: top;
}
</style>>

	&html<
	
<!-- detect svg -->
<script language="JavaScript" src="svgcheck.js"></script>
<script language="VBScript" src="svgcheck.vbs"></script>
	
<script language="javascript">

// display popup-legend window
function showLegend()
{
	var wid = 300;
	var hgt = 400;
	var top = 100;
	var left = 100;

  	var url = "enstracelegend.html";
	self.autopagePopupWindow = window.open(url,'autopagePopup','left='+left+',top='+top+',width='+wid+',height='+hgt+',resizable');
	self.autopagePopupWindow.focus();
}

</script>
	>
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawBODY">
<Description>
Draw the BODY of the detail pane</Description>
<FormalSpec>pInstance:%CSP.Util.PageInstance</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If (%request.UserAgent '[ "MSIE") {
		Write "<div style=""padding-left:20px;"">",$$$TextHTML("At this time, this page is only visible with Internet Explorer."),"</div>"
		Quit $$$OK
	}

	// get page ID values
	Merge tID = pInstance.IDValues

	// If this is a search submit,get request parms via object
	If ($G(%request.Data("$SUBMITBTN",1)) = "$AUTOFORM_SEARCH" ) {
		Set tRequest = ##class(CSPX.EnsMsgTraceFilterForm).ProcessSubmit(%request, .tID)
		Set sessionId = tRequest.SessionId
		Set startTime = tRequest.StartTime
		Set endTime = tRequest.EndTime
		Set startId = tRequest.StartId
		Set endId = tRequest.EndId
		Set query = "&$SUBMITBTN=$AUTOFORM_SEARCH&SessionId=" _ sessionId _ 
						"&StartTime=" _ startTime _
						"&EndTime=" _ endTime _
						"&StartId=" _ startId _
						"&EndId=" _ endId
		
	}
	Else {
		Set tMsgId=$G(tID(1)), sessionId=""
		If ""'=tMsgId {
			&sql(SELECT SessionId INTO :tSessionId FROM Ens.MessageHeader WHERE %ID = :tMsgId)
			Set:'SQLCODE sessionId=tSessionId
		}
		Set startTime = ""
		Set endTime = ""
		Set startId = ""
		Set endId = ""
		Set query = ""
	}
	Set showId=$G(tID(1))

	// if not a goto button, reset page
	If ('$D(%request.Data("$GOTO",1))) {
		Kill tID(2)
	}
	// find dimensions of canvas
	//Do ##class(EnsMsgTraceSVG).FindElementCount(sessionId, startTime, endTime, startId, endId, .rowCount, .colCount)
	Set rowCount = ##class(CSPX.EnsMsgTraceSVG).BuildTraceInfo(sessionId,startTime,endTime,startId,endId,.showId)
	Set msgCount = $p(rowCount, "#", 1)
	Set rowCount = $p(rowCount, "#", 2)
	&html<	
		<!-- detect svg -->
		<script language="JavaScript">
		checkAndGetSVGViewer();

function gotoMsgPage(n)
{
	self.top.location = '#(##class(%CSP.Page).Link("IIBAUtilEnsMsgTrace.csp",,1))#' + '$ID1=#($G(tID(1)))#&$ID2=' + n + '&$GOTO=1' + '#($ZCVT(query,"O","JS"))#';
}

function showDetails(msgId,type)
{
	// update the info pane
	if (msgId && msgId != '') {
		if (type=="ack") { 
			var msgClass = msgId[0];
			var msgOnlyId = msgId[1];
			self.top.frames['Info'].document.location = '#(##class(%CSP.Page).Link("IIBAUtilEnsMsgDetails.csp",,1))#' + '$FRAME=Info&$ID1=' + escape(msgClass) + '&ACKID=' + escape(msgOnlyId) + '&ACK=1' ;
		}
		else {
			self.top.frames['Info'].document.location = '#(##class(%CSP.Page).Link("IIBAUtilEnsMsgDetails.csp",,1))#' + '$FRAME=Info&$ID1=' + escape(msgId) + (('event'==type) ? '&EVENT=1' : '') + (('ioEntry'==type) ? '&IOENTRY=1' : '');
		}
	}
	else {
		// show search page
		self.top.frames['Info'].document.location = '#(##class(%CSP.Page).Link("IIBAUtilEnsMsgTrace.csp",,1))#' + '$FRAME=Info&$ID1=#($G(tID(1)))#' + '#($ZCVT(query,"O","JS"))#';
	}
}

function showContents(msgId,type)
{
	// update the info pane
	if (msgId && msgId != '') {
		if (type=='ack') {
			var msgClass = msgId[0];
			var msgOnlyId = msgId[1];
			self.top.frames['Info'].document.location = '#(##class(%CSP.Page).Link("CSPX.EnsMsgContentsPane.cls",,1))#' + '$FRAME=Info&$ID1=Body:' + escape(msgClass) + '&$ID2=' + escape(msgOnlyId);
		}
		else if (type=='ioEntry') {
			self.top.frames['Info'].document.location = '#(##class(%CSP.Page).Link("CSPX.EnsMsgContentsPane.cls",,1))#' + '$FRAME=Info&$ID1=Body:Ens.Util.IOLog' + '&$ID2=' + escape(msgId);
		}
		else {
			self.top.frames['Info'].document.location = '#(##class(%CSP.Page).Link("CSPX.EnsMsgContentsPane.cls",,1))#' + '$FRAME=Info&$ID1=' + escape(msgId) + (('ioEntry'==type) ? '&IOENTRY=1' : '');
		}
	}
}

		</script>
	>

	// find dimensions of canvas
	//Do ##class(EnsMsgTraceSVG).FindElementCount(sessionid, startTime, endTime, startId, endId, .rowCount, .colCount)
	
	Set rowCount = ##class(CSPX.EnsMsgTraceSVG).BuildTraceInfo(sessionId,startTime,endTime,startId,endId)
	
	If (rowCount = 0) {
		// No data to show
		Set svgWidth = 400
		Set svgHeight = 100
		
		&html<<div class="Text1">#(..LocalizeText("@Ensemble:NoMatch@No messages match the search criteria."))#</div>>
	}
	Else {
		// !!!
		If (msgCount > ##class(CSPX.EnsMsgTraceSVG).MessagesPerPage()) {
			Set msgCount = ##class(CSPX.EnsMsgTraceSVG).MessagesPerPage()
		}
		
		Set colCount = $G(^CacheTempMsgTrace(%session.SessionId,0,"columns"))
		
		Set hostWidth = 170 // must match value in MsgTraceSVG
		Set svgWidth = (colCount * hostWidth)
		Set svgHeight = ((rowCount * 40) + 70 + 50)

		Set zoom = 100
		Set embWidth = svgWidth * (zoom / 100)
		Set embHeight = svgHeight * (zoom / 100)
		
		Set currPage = $G(tID(2),1)
	
		// loading message
		&html<<div id='loading' style='background: white; color: blue; font-size: 14pt; font-family: courier new'>Generating Message Trace...</div>>

		&html<<embed id="SVGEmbed" name="SVGEmbed" type="image/svg-xml" 
			src="#(##class(%CSP.Page).Link("CSPX.EnsMsgTraceSVG.cls?SESSIONID="_sessionId_"&STARTID="_startId))#&ENDID=#(endId)#&STARTTIME=#(startTime)#&ENDTIME=#(endTime)#&PAGE=#(currPage)#&WIDTH=#(svgWidth)#&HEIGHT=#(svgHeight)#&SHOW=#(showId)#" 
			height="#(embHeight)#" width="#(embWidth)#">>
		
		//Write "<br>&nbsp;<span style='font-size:0.8em;'>",$$$TextHTML("Click on canvas to change search criteria"),"</span>"

	}
	
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.EnsTitlePane">
<Description>
This is a specialized title pane used by the Ensemble Portal.</Description>
<Super>%CSP.Util.Pane</Super>
<TimeChanged>62621,50235</TimeChanged>
<TimeCreated>60724,24660.109986</TimeCreated>

<Parameter name="DOMAIN">
<Description>
Use our own domain for localization</Description>
<Default>Ensemble</Default>
</Parameter>

<Property name="Locator">
<Description>
A collection of Links used to draw the locator within the title pane.</Description>
<Type>Link</Type>
<Collection>list</Collection>
</Property>

<Property name="ShowUsrNsp">
<Description>
Control whether or not User/Namespace is displayed or not.</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Method name="DrawBODY">
<Description>
Draw the HTML to display a title pane for this object.</Description>
<FormalSpec>pInstance:PageInstance</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tColSpan = 2

	&html<<tr><td colspan="#(tColSpan)#" class="Title" width="100%">>

	Write "<div class=""TitleText"">&nbsp;" , ..LocalizeText(..Text), "</div>"
	
	&html<<table width="100%" border="0" cellpadding="0" cellspacing="0"><tr>>

	Set tCount = ..Locator.Count()
	Merge tID =  pInstance.IDValues
	
	
	If (tCount > 0) {
		&html<<td align="LEFT" ><div align="LEFT" class="Locator">>
		For i = 1:1:tCount {
			/*
			If (i > 1) {
				&html<&nbsp;&gt;&nbsp;>
			}
			*/

			Set tLink = ..Locator.GetAt(i)
			//Merge tID =  tLink.IDValues
			//&html<[<a target="_top" href="#(pInstance.MakeLink(tLink.HREF,.tID))#">#(..LocalizeText(tLink.Caption))#</A>]>
			Write "&nbsp;&lt;&nbsp;"
			Write ..LocalizeText(tLink.Caption)
			Write "&nbsp;&gt;&nbsp;"

		} 
		&html<&nbsp[<a target="_top" href="/default.htm">IIBA Ensemble Home</A>]&nbsp>
		&html<</div></td>>
	}
	
	
	
	&html<<td align="RIGHT"><div class="Locator" align="RIGHT">>
	//Set defaultNS = $G(%session.Data("$NAMESPACE"))
	//If defaultNS = "" Set defaultNS = ..GetDefaultNamespace()
	
	Set nsHelp = ..LocalizeText("Name of current Ensemble namespace")
	Set usrHelp = ..LocalizeText("Name of current user")

	&html<&nbsp;<span title="#(nsHelp)#">#(..LocalizeText("Namespace"))#:</span>>
	Set tCurrNS = $ZU(5)
	W "<B>",tCurrNS,"</B>"
	&html<&nbsp;<span title="#(usrHelp)#">#(..LocalizeText("User"))#:</span> <B>#($UserName)#</B>&nbsp;>


	/*
	if (..ShowUsrNsp) {

		#; show combo box for namespaces
		// Set nsHelp = ..LocalizeText("Use this to switch to a different Ensemble namespace")
		// Set usrHelp = ..LocalizeText("Name of current user")

		&html<&nbsp;<span title="#(nsHelp)#">#(..LocalizeText("Namespace"))#:</span>>
		Set tCurrNS = $ZU(5)
		W "<B>",tCurrNS,"</B>"
		/*
		&html<<select id="nscombo" style="font-size: 0.8em; color: darkblue; font-weight: bold;" onchange="self.document.location=this.value;">>
		Set tNS = $O(^%SYS("Ensemble","InstalledNamespace",""))
		While (tNS '= "") {
			Set tSel = $S(tNS=tCurrNS:"selected",1:"")
			Set tURL = ##class(%CSP.Page).Link("/csp/" _ $ZCVT(tNS,"L") _ "/UtilEnsHome.csp")_"&CSPCHD="_%session.CSPSessionCookie_"&CSPSHARE=1"
			&html<<option value="#(tURL)#" #(tSel)#>#($ZCVT(tNS,"O","HTML"))#>
			Set tNS = $O(^%SYS("Ensemble","InstalledNamespace",tNS))
		}
		&html<</select>>
		*  /

		//If (defaultNS '= "") {
		//	&html<&nbsp;#(..LocalizeText("Namespace"))#: <B>#(defaultNS)#</B>&nbsp;>
		//}

		//Set %session.Data("$NAMESPACE") = defaultNS
		&html<&nbsp;<span title="#(usrHelp)#">#(..LocalizeText("User"))#:</span> <B>#($UserName)#</B>&nbsp;>
	}
	else {
		// Use SERVER and Instance otherwise
		set defaultServer = $G(%session.Data("SERVER"))
		// set:defaultServer="" defaultServer = $System.Server.HostName(),%session.Data("SERVER") = defaultServer 
		&html<&nbsp;#(..LocalizeText("Server"))#: <B>#(defaultServer)#</B>&nbsp;>

		set defaultCfg = $G(%session.Data("CONFIG"))
		set:defaultCfg="" defaultCfg = $p($zu(86),"*",2),%session.Data("CONFIG") = defaultCfg
		&html<&nbsp;#(..LocalizeText("Instance"))#: <B>#(defaultCfg)#</B>&nbsp;>

	}
	*/
	
	&html<</div></td></tr>>
	&html<<tr><td colspan=2>>
	//w %request.URL
	if $F(%request.URL,"IIBAUtilEnsQList.csp") {
		s Name=%request.Get("$ID1")
		
		&sql(Select Enabled
			into :Enabled
			from Ens_config.Item
			where Name=:Name)
			
		I (Enabled=1) {
			&html<<tr><td colspan=2 >>
			W "<Table border=0 style='color:red;font-size:15'><tr><td>Note:</td>"
			W "<td>The first transaction is in memory and will not appear on this page.</td>"
			W "</tr>"
			W "<tr><td></td><td>To view this transaction, disable the interface</td>"
			W "</tr></table>"
			&html<</td></tr>>
		}
	}
	
	
	&html<</td></tr>>		
	&html<</table>>

	&html<</td></tr>>
	
	
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnGenerateCode">
<Description>
Handle ShowUsrNsp</Description>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set code = ""

	// ShowUsrNsp
	If (..ShowUsrNsp '= "") {
		Set code = code _ " Set tPane.ShowUsrNsp = " _ +..ShowUsrNsp _ $$$EOL
	}

	Quit code
]]></Implementation>
</Method>

<Method name="GetDefaultNamespace">
<Description><![CDATA[
Get default namespace for this session:<br>
<ul>
<li> If NAMESPACE is passed in that means user has changed namespace from
the drop-down. Update the session data $NAMESPACE.</li>
<li> Else If this is not a new session, then use the previous saved session NAMESPACE</li>
<li>      Else this is a new new session, but it is Ensemble, then use the current namespace</li>
<li>      Else this is a new new session, and it is CSP GUI Utility, then return the first available namespace from namespace list. </li>
</ul>]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set defaultNS = $G(%request.Data("$NAMESPACE",1))
	If defaultNS '= "" {
		Set %session.Data("$NAMESPACE") = defaultNS
	} Else {
		Set defaultNS = $G(%session.Data("$NAMESPACE"))
		If defaultNS = "" {
			If $zu(5) '= "%SYS" Set defaultNS = $zu(5)  // for Ensemble
			//Load the first available local namespace
			If defaultNS = "" {
				Do List^%SYS.NAMESPACE(.NspList,0)
				Set defaultNS = $O(NspList(""))	
			}
			Set %session.Data("$NAMESPACE") = defaultNS
		}
	}
	Quit defaultNS
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.EventTriggerFilter">
<Description>
  Provides a filter of HL7 messages based off of the accession and the trigger event, allowing the
blocking of transactions when there are multiple messages for the same accession/trigger within a time threshold.
</Description>
<Super>%Persistent,Ens.Rule.FunctionSet</Super>
<TimeChanged>63358,43103</TimeChanged>
<TimeCreated>61480,33020.355925</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="OrgAccessionTrigger">
<Type>%String</Type>
</Property>

<Property name="CreatedOn">
<Type>%TimeStamp</Type>
</Property>

<Property name="ModifiedOn">
<Type>%TimeStamp</Type>
</Property>

<Index name="IDIndex">
<IdKey>1</IdKey>
<Properties>OrgAccessionTrigger</Properties>
<Unique>1</Unique>
</Index>

<Method name="EventTriggerTimeCheck">
<Description>
Checks to see if this accession and trigger were reported within the time threshold (in minutes)
  (The default time threshold is 30 minutes)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Org:%String,Accession:%String,Trigger:%String,TimeThreshold:%String=30</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	S ModifyFlag="Recent"
	
	//$$$TRACE("Calling EventTriggerModifyCheck with: "_Org_"."_Accession_"."_Trigger)
	
	s oref=##class(IIBAENSEMBLE.EventTriggerFilter).%OpenId(Org_"."_Accession_"."_Trigger)
	if $ISOBJECT(oref) {
		
		//w "Modified On: ",oref.ModifiedOn,!
		//W "Now: ",$H,"  ",$ZDT($H,3),!
		//W "Threshold: ",TimeThreshold,!
		
		S TimeDiff=##class(Ens.DataType.UTC).timeDiff($ZDT($H,3),oref.ModifiedOn)
		//w "Time Diff: ",TimeDiff," (",TimeDiff\60,")",!
		If ( (TimeDiff>0) && ((TimeDiff\60)>TimeThreshold) ) {
			S ModifyFlag=TimeDiff
		}
	} else {
		s ModifyFlag="New"
	}
	
	Quit ModifyFlag
]]></Implementation>
</Method>

<Method name="EventTriggerInsertOrUpdate">
<ClassMethod>1</ClassMethod>
<FormalSpec>Org:%String,Accession:%String,Trigger:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	S oref=##class(IIBAENSEMBLE.EventTriggerFilter).%OpenId(Org_"."_Accession_"."_Trigger)
	if $ISOBJECT(oref) {
		s oref.ModifiedOn=$ZDT($H,3)
		s tSC=oref.%Save()
		
	} else {
		s oref=##class(IIBAENSEMBLE.EventTriggerFilter).%New()
		s oref.OrgAccessionTrigger=Org_"."_Accession_"."_Trigger
		s oref.CreatedOn=$ZDT($H,3)
		s oref.ModifiedOn=$ZDT($H,3)
		s tSC=oref.%Save()
	}
	
	Quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^IIBAENSEMBLE.EventTrigge6718D</DataLocation>
<DefaultData>EventTriggerFilterDefaultData</DefaultData>
<IdLocation>^IIBAENSEMBLE.EventTrigge6718D</IdLocation>
<IndexLocation>^IIBAENSEMBLE.EventTrigge6718I</IndexLocation>
<StreamLocation>^IIBAENSEMBLE.EventTrigge6718S</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="EventTriggerFilterDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>CreatedOn</Value>
</Value>
<Value name="3">
<Value>ModifiedOn</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.FTP.InboundAdapter">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>EnsLib.FTP.InboundAdapter</Super>
<TimeChanged>63335,36709</TimeChanged>
<TimeCreated>60771,51178.023366</TimeCreated>

<Property name="FileModifyWaitTime">
<Type>%Integer</Type>
<InitialExpression>300</InitialExpression>
</Property>

<Property name="MinRetryInterval">
<Type>%Integer</Type>
<InitialExpression>2</InitialExpression>
</Property>

<Parameter name="SETTINGS">
<Default>FileModifyWaitTime,MinRetryInterval</Default>
</Parameter>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
#define ErrorFileTable(%filename) $$$EnsRuntimeAppData(..BusinessHost.%ConfigName,"adapter.ftp",%filename)
#define DoneFileTable(%filename) $$$EnsStaticAppData(..BusinessHost.%ConfigName,"adapter.ftp",%filename)
	Set $ZT="Trap", tSC=$$$OK, tOneFilename=""
	Do {
		If ""=..%NextLine && '..FileListStream.Size {
			Set tSC=..Connect(..ConnectTimeout,1)
			If $$$ISERR(tSC) { $$$ASSERT('..Connected) Quit }
			Else { $$$ASSERT(..Connected)
				#; get file list
				Set tSC = $S(..FTP.List(..FileSpec,..FileListStream):$$$OK,
							 ..FTP.ReturnMessage["file not found":$$$OK, ; VMS
							 ..FTP.ReturnMessage["cannot find the file":$$$OK, ; IIS non-wildcard spec
							 1:$$$ERROR($$$EnsErrFTPListFailed,..FileSpec,..FTP.ReturnMessage,..FTP.ReturnCode))
				Quit:$$$ISERR(tSC)
				$$$catTRACE("connwait","got FileListStream("_..FileListStream.Size_")")
				Kill ^||Ens.FileInbound.Found
			}
		}
		Set tFilename="" For {
			If $L(..%NextLine) {
				Set tOneFilename=..%NextLine, tLen=$L(..%NextLine), ..%NextLine=""
			} Else {
				Kill tLen  Set tOneFilename=..FileListStream.ReadLine(.tLen)
			}
			If tLen=-1 {
				#; Done with this FileList now
				Do ..FileListStream.Clear()
				Do:'..StayConnected ..Disconnect(1)
				#; Remove errored files from the Error global if they no longer exist, and remove processed files from the Done global if they no longer exist
				Set f="" For  Set f=$O($$$DoneFileTable(f)) Quit:f=""   If '$G(^||Ens.FileInbound.Found(f)) $$$sysTRACE("Removed absent file '"_f_"' from processed list")  Kill $$$DoneFileTable(f)
				Set f="" For  Set f=$O($$$ErrorFileTable(f)) Quit:f=""  If '$G(^||Ens.FileInbound.Found(f)) If ""'=$G($$$ErrorFileTable(f)) { $$$sysTRACE("Removed absent file '"_f_"' from errored list") } If $D($$$DoneFileTable(f)) { Set $$$ErrorFileTable(f)="" } Else { Kill $$$ErrorFileTable(f) }
				Quit
			}
			#; If VMS server, check lookahead buffer for possible multi-line directory listing
			If ($E(..%Syst,1,$L("VMS "))="VMS ") {
				#; A line starting with a space denotes continuation of the previous line in the listing
				For {
					Kill tLen1 Set ..%NextLine=..FileListStream.ReadLine(.tLen1)
					Quit:$E(..%NextLine)'=" "
					Set tOneFilename=tOneFilename_..%NextLine, tLen=tLen+tLen1, ..%NextLine=""
				}				
		 		$$$sysTRACE("got full VMS List() line '"_tOneFilename_"' and NextLine buffer = '"_..%NextLine_"'")
			}
			Continue:tLen<40||("VMS "=$E(..%Syst,1,$L("VMS "))&&("Directory "=$E(tOneFilename,1,$L("Directory "))))
			Continue:'..ParseFilename(.tOneFilename,.tModified,.tSize)

			$$$TRACE("File: "_tOneFilename_" Modified: "_tModified)
			
			// skip if modified within the last 5 minutes
			s zbgdate=##class(IIBAENSEMBLE.Functions).date2digitexpr($TR($P(tModified,"_",1),"-","/"))
			s zbgtime=$P(tModified,"_",2)
			s zbgdh=$ZDTH(zbgdate_" "_zbgtime,1,3)
			s zbgh=$H
			s zbgModified=($P(zbgh,",",1)-$P(zbgdh,",",1))*86400+$P(zbgh,",",2)-$P(zbgdh,",",2)
			$$$TRACE(tOneFilename_" Modified "_zbgModified_" Seconds ago")
			
			if ( zbgModified > ..FileModifyWaitTime ) {
				Set ^||Ens.FileInbound.Found(tOneFilename)=1

				Lock +$$$ErrorFileTable(tOneFilename):0 Else  $$$LOGINFO("Skipping locked file '"_tOneFilename_"'") Continue
				#; Skip the files we have already processed except if they are modified
				If $G($$$DoneFileTable(tOneFilename))=tModified If '$G(^(tOneFilename,"done"_$E($G($$$ErrorFileTable(tOneFilename)),-1))) { Set ^("done")=1 $$$LOGINFO("Skipping previously processed file '"_tOneFilename_"'") } Lock -$$$ErrorFileTable(tOneFilename) Continue
				If $G($$$ErrorFileTable(tOneFilename))=tModified If $G(^(tOneFilename,"wrn")) { Kill ^("wrn") $$$LOGWARNING("Skipping previously errored file '"_tOneFilename_"'") } Lock -$$$ErrorFileTable(tOneFilename) Continue
				If ..VMSLatestVersionOnly && ("VMS "=$E(..%Syst,1,$L("VMS "))) && ('..IsVMSLatestVersion(.tOneFilename)) {
					If '..DeleteFromServer {
						If '$G(^(tOneFilename,"ver"_$E($G($$$ErrorFileTable(tOneFilename)),-1))) { set ^("ver")=1 $$$sysTRACE("Skipping not-latest version of file '"_tOneFilename_"'") } 
					} Else {
						If '..FTP.Delete(tOneFilename) {
							If '$G(^(tOneFilename,"ver"_$E($G($$$ErrorFileTable(tOneFilename)),-1))) { set ^("ver")=1 $$$LOGWARNING("Failed to delete not-latest version of file '"_tOneFilename_"' - "_..FTP.ReturnCode_":"_..FTP.ReturnMessage) }
						} Else {
							$$$LOGINFO("Deleted non-latest version of file "_tOneFilename)
							Kill $$$ErrorFileTable(tOneFilename)					
						}
					}
					Lock -$$$ErrorFileTable(tOneFilename) Continue
				}
				Set $$$ErrorFileTable(tOneFilename)=tModified, ^(tOneFilename,"wrn")=1
				Lock -$$$ErrorFileTable(tOneFilename)

				Set tFilename=tOneFilename, tOneFilename=""  $$$sysTRACE("About to process file '"_tFilename_"'")
				Quit ; found a good one
			}
		}
		If tFilename="" Quit

		#; now process this file
		Set tSaveAsFile=(""'=..ArchivePath||..BusinessHost.ArchiveIO)
		If "binary"=$ZCVT(..Charset,"L") {
			If tSaveAsFile {
				Set tStream=##class(%FileBinaryStream).%New() $$$ASSERT($IsObject(tStream))
				Set:""'=..ArchivePath tStream.Filename=..getArchiveFilename(tFilename)
			} Else {
				Set tStream=##class(%GlobalBinaryStream).%New() $$$ASSERT($IsObject(tStream))
			}
		} Else {
			If tSaveAsFile {
				Set tStream=##class(%FileCharacterStream).%New() $$$ASSERT($IsObject(tStream))
				Set:""'=..ArchivePath tStream.Filename=..getArchiveFilename(tFilename)
			} Else {
				Set tStream=##class(%GlobalCharacterStream).%New() $$$ASSERT($IsObject(tStream))
			}
		}
		#; Get the file
		Set tDone=0, tFirst=1, tWarned=0
		For { ; loop getting chunks
			Set tStart=$ZH
			If tFirst {
				Set tFirst =0
				If '..FTP.Retrieve(tFilename,tStream) {
					Set tSC=$$$ERROR($$$EnsErrFTPGetFailed,tFilename,..FTP.ReturnMessage,..FTP.ReturnCode)
					Quit
				}
			} Else {
				If '..FTP.RetryRetrieve(tFilename,tStream) {
					Set tSC=$$$ERROR($$$EnsErrFTPGetFailed,tFilename_"+"_tStream.Size,..FTP.ReturnMessage,..FTP.ReturnCode)
					Quit
				}
			}
			Set tNewFilename=tFilename, tNewSize=$S(+tSize'=tSize||'(..ConfirmComplete#2):tSize,1:..getSize(tFilename))
			If +tSize'=tSize && (..ConfirmComplete#2) { $$$LOGWARNING("Unable to verify ConfirmComplete=1 size because initial SizeExpression result = '"_tSize_"'") }
			If tNewSize=tSize {
				Set tPartLen=$L($E($P(tFilename,"."),1,12))  Set:tPartLen<8 tPartLen=8
				If ..ConfirmComplete\2#2 {
					Set tNewFilename=$E($TR("X"_$ZH_"000000","."),1,tPartLen)_"."_$P(tFilename,".",2,999)
					If ..FTP.Rename(tFilename,tNewFilename) {
						$$$sysTRACE("Confirmed complete "_tFilename_" via rename to "_tNewFilename_"; renaming back again")
						Set:..FTP.Rename(tNewFilename,tFilename) tNewFilename=tFilename
						Set tDone=1
					} Else {
						If +tSize'=tSize {
							$$$sysTRACE("Got "_tFilename_"("_tStream.Size_") but can't rename it yet; trying for more data")
						} Else {
							$$$LOGWARNING("Failed to confirm complete "_tFilename_"("_tStream.Size_") listed as size "_tSize_" by renaming to "_tNewFilename_": FTP code "_..FTP.ReturnCode_" - "_..FTP.ReturnMessage)
							Set tWarned=1
						}
					}
				} Else {
					Set tDone=1
				}
			} ElseIf tNewSize<tSize {
				#; Assume we got the old file and this is a new copy of the file we should process later
				$$$sysTRACE("Accepting "_tFilename_"("_tStream.Size_") that was listed as size "_tSize_" and now shows "_tNewSize)
				Set tDone=1
			} Else {
				$$$sysTRACE("Got partial "_tFilename_"("_tStream.Size_") that was listed as size "_tSize_" and now shows "_tNewSize)
			}
			If tDone {
				Set tTxt="Retrieved file '"_tFilename_"' of size "_tStream.Size_$S(tSaveAsFile:", archived as file '"_tStream.Filename_"'",1:"")
				If ..%logTransfers||tWarned { $$$LOGINFO(tTxt) } Else { $$$sysTRACE(tTxt) }
				Set tStream.Attributes("Filename")=tFilename
				If tSaveAsFile { Set tSC1=tStream.SaveStream() If $$$ISERR(tSC1) $$$LOGERROR("Failed to save retrieved file '"_tFilename_"' of size "_tStream.Size_" to archive file '"_tStream.Filename_"'; Status: "_$$$StatusDisplayString(tSC1)) }
				Set tSC = ..BusinessHost.ProcessInput(tStream) Quit:$$$ISERR(tSC)
				Kill tStream
				If ..DeleteFromServer {
					#; delete the file, and remove the file from do-not-process list if it is deleted
					If ..FTP.Delete(tNewFilename) {
						$$$sysTRACE("Deleted "_tFilename_$S(tFilename=tNewFilename:"",1:" / "_tNewFilename)_" from FTP server after successful processing")
						If ..VMSLatestVersionOnly { Set $$$ErrorFileTable(tFilename)="" } Else { Kill $$$ErrorFileTable(tFilename) }
					} Else {
						$$$LOGWARNING("failed to delete '"_tFilename_"' - "_..FTP.ReturnCode_":"_..FTP.ReturnMessage)
					}
				} Else {
					$$$sysTRACE("Not Deleting "_tFilename_$S(tFilename=tNewFilename:"",1:" / "_tNewFilename)_" from FTP server after successful processing")
				}
				#; mark the file as done if not deleted, whether or not we tried
				Kill $$$ErrorFileTable(tFilename)
				Set $$$DoneFileTable(tFilename)=tModified
				Quit
			}
			#; don't retry more often than every ..#MinRetryInterval seconds
			Set tWaitTime=tStart+..MinRetryInterval-$ZH  Set:tWaitTime<0 tWaitTime=0
			Set tSC1=##class(Ens.Queue).DeQueue("SystemSignal:"_$Job,,tWaitTime,,0)  Quit:$$$ISERR(tSC1)
			If ##class(Ens.Job).ShouldBeQuiescent() || ##class(Ens.Job).ShouldTerminate() {
				$$$LOGWARNING("Abandoning partial download of "_tFilename_" because of shutdown request")
				Quit
			}
			Set tWaitTime=tStart+..MinRetryInterval-$ZH  Hang:tWaitTime>0 tWaitTime
			Set tSize=tNewSize
		}
		#; Don't count it as a file error if it was a network error
		Kill:$$$ISERR(tSC)&&'..FTP.Connected&&(""'=tFilename) $$$ErrorFileTable(tFilename)
	} while (0)
Exit

	Quit tSC
Trap
 	Set $ZT="",tSC=$$$EnsSystemError
	Lock:""'=tOneFilename -$$$ErrorFileTable(tOneFilename)
	Goto Exit
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.FTP.MultiFolderInboundAdapter">
<Super>EnsLib.FTP.InboundAdapter</Super>
<TimeChanged>63335,36746.058882</TimeChanged>
<TimeCreated>62060,34455.150092</TimeCreated>

<Property name="DirListTable">
<Type>%String</Type>
</Property>

<Property name="MinRetryInterval">
<Type>%Integer</Type>
<InitialExpression>2</InitialExpression>
</Property>

<Parameter name="SETTINGS">
<Default>DirListTable,MinRetryInterval</Default>
</Parameter>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
#define ErrorFileTable(%filename) $$$EnsRuntimeAppData(..BusinessHost.%ConfigName,"adapter.ftp",%filename)
#define DoneFileTable(%filename) $$$EnsStaticAppData(..BusinessHost.%ConfigName,"adapter.ftp",%filename)
	Set $ZT="Trap", tSC=$$$OK, tOneFilename="", tFilename=""
	Do {
		
		#;Check for files in each directory in the list
		
		s DirRs=##class(%ResultSet).%New()
		s DirQry="select LeftId1 as Source, LeftId2 as Comment, RightId as Archive from IIBAENSEMBLE.LookupTable "
		S DirQry=DirQry_"Where LookupID='"_..DirListTable_"'"
		$$$TRACE("Directory Query: "_DirQry)
		d DirRs.Prepare(DirQry)
		s tSC=DirRs.Execute()
		If $$$ISERR(tSC) { $$$LOGERROR('..Connected) Quit }
		#; Change directories
				
				
		While (DirRs.Next()) {
			If DirRs.GetDataByName("Comment")="IgnoreThisRow" Continue
			s NextFilePath=DirRs.GetDataByName("Source")
			S NextFileArchive=DirRs.GetDataByName("Archive")
			//s tFilename=""
			S:""'=..ArchivePath NextFileArchive=..ArchivePath_"\"_NextFileArchive
			S NextFileArchive=##class(Ens.Util.File).NormalizeDirectory(NextFileArchive_"\")
			$$$TRACE("Next directory: "_NextFilePath_", Archive: "_NextFileArchive)
		
			//If ""=..%NextLine && '..FileListStream.Size {
				Set tSC=..Connect(..ConnectTimeout,1)
				If $$$ISERR(tSC) { $$$ASSERT('..Connected) Quit }
				Else { $$$ASSERT(..Connected)
			
				
				
					
					$$$TRACE("Checking ftp directory "_NextFilePath_". Archive directory is: "_NextFileArchive)
					Set NextFilePath=..fixSvrPath(..FilePath_"\"_NextFilePath,0)
					$$$TRACE("Looking at folder: "_NextFilePath)
					if ..FTP.SetDirectory(NextFilePath) {
						$$$catTRACE("connwait","Set FTP working directory to "_NextFilePath)
					} else {
						set tSC=$$$ERROR($$$EnsErrFTPDirectoryChangeFailed,NextFilePath,..FTP.ReturnMessage,..FTP.ReturnCode)
						Quit
					}
				
					#; get file list
					Set tSC = $S(..FTP.List(..FileSpec,..FileListStream):$$$OK,
								 ..FTP.ReturnMessage["file not found":$$$OK, ; VMS
								 ..FTP.ReturnMessage["cannot find the file":$$$OK, ; IIS non-wildcard spec
								 1:$$$ERROR($$$EnsErrFTPListFailed,..FileSpec,..FTP.ReturnMessage,..FTP.ReturnCode))
					Quit:$$$ISERR(tSC)
					$$$catTRACE("connwait","got FileListStream("_..FileListStream.Size_")")
					Kill ^||Ens.FileInbound.Found
				  
				}
			//}
			For {
				If $L(..%NextLine) {
					Set tLine=..%NextLine, tLen=$L(..%NextLine), ..%NextLine=""
				} Else {
					Kill tLen  Set tLine=..FileListStream.ReadLine(.tLen)
				}
				If tLen=-1 {
					#; Done with this FileList now
					Do ..FileListStream.Clear()
					Do:'..StayConnected ..Disconnect(1)
					#; Remove errored files from the Error global if they no longer exist, and remove processed files from the Done global if they no longer exist
					Set f="" For  Set f=$O($$$DoneFileTable(f)) Quit:f=""   If '$G(^||Ens.FileInbound.Found(f)) $$$sysTRACE("Removed absent file '"_f_"' from processed list")  Kill $$$DoneFileTable(f)
					Set f="" For  Set f=$O($$$ErrorFileTable(f)) Quit:f=""  If '$G(^||Ens.FileInbound.Found(f)) If ""'=$G($$$ErrorFileTable(f)) { $$$sysTRACE("Removed absent file '"_f_"' from errored list") } If $D($$$DoneFileTable(f)) { Set $$$ErrorFileTable(f)="" } Else { Kill $$$ErrorFileTable(f) }
					Quit
				}
				#; If VMS server, check lookahead buffer for possible multi-line directory listing
				If ($E(..%Syst,1,$L("VMS "))="VMS ") {
					#; A line starting with a space denotes continuation of the previous line in the listing
					For {
						Kill tLen1 Set ..%NextLine=..FileListStream.ReadLine(.tLen1)
						Quit:$E(..%NextLine)'=" "
						Set tLine=tLine_..%NextLine, tLen=tLen+tLen1, ..%NextLine=""
					}				
			 		$$$sysTRACE("got full VMS List() line '"_tLine_"' and NextLine buffer = '"_..%NextLine_"'")
				}
				Continue:tLen<40||("VMS "=$E(..%Syst,1,$L("VMS "))&&("Directory "=$E(tLine,1,$L("Directory "))))
				Set tOneFilename=tLine, tStyle = $ZSTRIP($ZCVT(..ServerListStyle,"L"),"*W","-_,;:/")
				Set tOK=..ParseFilename(.tOneFilename,.tModified,.tSize)
				If 'tOK {
					If tStyle="as400" && ("*MEM"=$ZCVT(tSize,"U")) && ("*FILE"=$E(..%PrevMod,*+1-$L("*FILE"),*)) {
						Set tOneFilename=$P(tModified,tSize_"_",2), tSize=..%PrevSize, tModified=$Replace(..%PrevMod,"*FILE","*MEM"), ..%LastErr=$$$OK
						Continue:..%PrevFile_"."_..%PrevFile=tOneFilename ; if the member is the same as the file, then we already tried to get it
					} Else {
						Continue
					}
				} ElseIf tStyle="as400" {
					If $$$ISERR(..%LastErr) Set tSC=..%LastErr, ..%LastErr=$$$OK, ..%NextLine=tLine, ..BusinessHost.%WaitForNextCallInterval=0  Quit
					Set ..%PrevFile=tOneFilename, ..%PrevSize=tSize, ..%PrevMod=$ZCVT(tModified,"U")
				}
				Set ^||Ens.FileInbound.Found(tOneFilename)=1

				Lock +$$$ErrorFileTable(tOneFilename):0 Else  $$$LOGINFO("Skipping locked file '"_tOneFilename_"'") Continue
				#; Skip the files we have already processed except if they are modified
				If $G($$$DoneFileTable(tOneFilename))=tModified If '$G(^(tOneFilename,"done"_$E($G($$$ErrorFileTable(tOneFilename)),-1))) { Set ^("done")=1 $$$LOGINFO("Skipping previously processed file '"_tOneFilename_"'") } Lock -$$$ErrorFileTable(tOneFilename) Continue
				If $G($$$ErrorFileTable(tOneFilename))=tModified If $G(^(tOneFilename,"wrn")) { Kill ^("wrn") $$$LOGWARNING("Skipping previously errored file '"_tOneFilename_"'") } Lock -$$$ErrorFileTable(tOneFilename) Continue
				If ..VMSLatestVersionOnly && ("VMS "=$E(..%Syst,1,$L("VMS "))) && ('..IsVMSLatestVersion(.tOneFilename)) {
					If '..DeleteFromServer {
						If '$G(^(tOneFilename,"ver"_$E($G($$$ErrorFileTable(tOneFilename)),-1))) { set ^("ver")=1 $$$sysTRACE("Skipping not-latest version of file '"_tOneFilename_"'") } 
					} Else {
						If '..FTP.Delete(tOneFilename) {
							If '$G(^(tOneFilename,"ver"_$E($G($$$ErrorFileTable(tOneFilename)),-1))) { set ^("ver")=1 $$$LOGWARNING("Failed to delete not-latest version of file '"_tOneFilename_"' - "_..FTP.ReturnCode_":"_..FTP.ReturnMessage) }
						} Else {
							$$$LOGINFO("Deleted non-latest version of file "_tOneFilename)
							Kill $$$ErrorFileTable(tOneFilename)					
						}
					}
					Lock -$$$ErrorFileTable(tOneFilename) Continue
				}
				Set $$$ErrorFileTable(tOneFilename)=tModified, ^(tOneFilename,"wrn")=1
				Lock -$$$ErrorFileTable(tOneFilename)

				Set tFilename=tOneFilename, tOneFilename=""  $$$sysTRACE("About to process file '"_tFilename_"' (size '"_tSize_"') with ConfirmComplete="_..ConfirmComplete)
				Quit ; found a good one
			}
			//If tFilename="" Quit
			If tFilename="" Continue
		
		
			#; now process this file
			//Set tSaveAsFile=(""'=..ArchivePath||..BusinessHost.ArchiveIO)
			$$$TRACE("Processing file: "_tFilename_", in folder: "_NextFilePath)
			$$$TRACE("Archive is: "_..getArchiveFilename(tFilename,NextFileArchive))
			Set tSaveAsFile=(""'=NextFileArchive||..BusinessHost.ArchiveIO)
			If "binary"=$ZCVT(..Charset,"L") {
				If tSaveAsFile {
					Set tStream=##class(%FileBinaryStream).%New() $$$ASSERT($IsObject(tStream))
					Set:""'=NextFileArchive tStream.Filename=..getArchiveFilename(tFilename,NextFileArchive)
				
				} Else {
					Set tStream=##class(%GlobalBinaryStream).%New() $$$ASSERT($IsObject(tStream))
				}
			} Else {
				If tSaveAsFile {
					Set tStream=##class(%FileCharacterStream).%New() $$$ASSERT($IsObject(tStream))
					Set:""'=NextFileArchive tStream.Filename=..getArchiveFilename(tFilename,NextFileArchive)
				} Else {
					Set tStream=##class(%GlobalCharacterStream).%New() $$$ASSERT($IsObject(tStream))
				}
			}
			#; Get the file
			$$$TRACE("Get the file")
			Set tNewSize=tSize, tFirst=1, tDone=0, tEverSize=0, tSizeTargTime=""
			For { ; loop getting chunks
				$$$TRACE("start of for - loop getting chunks")
				Set:..ConfirmComplete&&(""=tSizeTargTime) tSizeTargTime = $ZH+..FileAccessTimeout
				If tFirst {
					Set tFirst =0
					$$$TRACE("if tFirst: "_tFilename_", "_NextFilePath)
					
					If '..retrieveFile(tFilename,tStream,NextFilePath,1) {
					
						$$$TRACE("After Get File and first retrieve")
						Set tSC=$$$ERROR($$$EnsErrFTPGetFailed,tFilename,..FTP.ReturnMessage,..FTP.ReturnCode)
						#; If it was an AS/400 *FILE, quit OK but save the error - we will only return it later if no *MEM members are found.
						#; Don't count it as a file error if it was a network error
						Set:tStyle="as400"&&("*FILE"=$E(tModified,*+1-$L("*FILE"),*))&&..FTP.Connected ..%LastErr=tSC, tSC=$$$OK, ..BusinessHost.%WaitForNextCallInterval=0
						Quit
					}
				} ElseIf tNewSize>tSize {
					If '..retrieveFile(tFilename,tStream,NextFilePath,1) {
						$$$TRACE("After Get File and retryretrieve")
						Set tSC=$$$ERROR($$$EnsErrFTPGetFailed,tFilename_"+"_tStream.Size,..FTP.ReturnMessage,..FTP.ReturnCode)
						Quit
					}
				}
				$$$TRACE("Get Size: "_tFilename_", "_NextFileArchive)
				Set tNewFilename=tFilename, tNewSize=$S(+tSize'=tSize||'(..ConfirmComplete#2):tSize,1:..getSize(tFilename,NextFilePath))
				If +tSize'=tSize && (..ConfirmComplete#2) {
					Set tSC=$$$ERROR($$$EnsErrGeneral,"Unable to verify ConfirmComplete=Size size because initial SizeExpression result = '"_tSize_"'")
					Quit
				} ElseIf tNewSize>tSize {
					Set tNow=$ZH
					$$$sysTRACE("Got partial "_tFilename_"("_tStream.Size_") that was listed as size "_tSize_" and now shows "_tNewSize)
				} ElseIf tNewSize<tSize && (tNewSize'="") {
					#; Assume we got the old file and this is a new copy of the file we should process later
					$$$sysTRACE("Accepting "_tFilename_"("_tStream.Size_") that was listed as size "_tSize_" and now shows "_tNewSize)
					Set tDone=1
					Quit
				} Else {
					#; Size is empty or same - if ConfirmComplete keep trying for a new size until ..MinRetryInterval
					Set tNow=$ZH
					If ..ConfirmComplete#2 {
 						If 'tEverSize {
	 						If tNewSize'="" {
		 						Set tEverSize=1
								$$$sysTRACE("Got same size "_tSize_" for "_tFilename_" with ConfirmComplete=Size; waiting for new size or MinRetryInterval("_..MinRetryInterval_")")
 							} Else {
								$$$sysTRACE("Unable to obtain ConfirmComplete=Size ; waiting for new size or MinRetryInterval("_..MinRetryInterval_")")
	 						}
 						}
					}
					If '(..ConfirmComplete#2) || (tNow>=tSizeTargTime) || (tNewSize=tSize) {
 						If ..ConfirmComplete#2 && (tNewSize="") && (tNow>=tSizeTargTime) {
							Set tSC=$$$ERROR($$$EnsErrGeneral,"Could not get "_$S(tEverSize:"",1:"any ")_"size for "_tFilename_" ConfirmComplete=Size verification within MinRetryInterval("_..MinRetryInterval_")")
							Quit
	 					}
						If '(..ConfirmComplete\2#2) {
							#; not trying rename
							Set tDone=1
							Quit
						} Else {
							#; try rename
							$$$TRACE("Try rename")
							Set tPartLen=$L($E($P(tFilename,"."),1,12))  Set:tPartLen<8 tPartLen=8
							Set tNewFilename=$E($TR("X"_$ZH_"000000","."),1,tPartLen)_"."_$P(tFilename,".",2,999)
							$$$TRACE("Trying to rename "_tFilename_" to "_tNewFilename)
							If ..FTP.Rename(tFilename,tNewFilename,NextFilePath) {
								$$$sysTRACE("Confirmed complete "_tFilename_" via rename to "_tNewFilename_"; renaming back again")
								Set:..FTP.Rename(tNewFilename,tFilename,NextFilePath) tNewFilename=tFilename
								Set tDone=1
								Quit
							} Else {
								If tNow>=tSizeTargTime {
									Set tSC=$$$ERROR($$$EnsErrGeneral,"Failed to confirm complete "_tFilename_"("_tStream.Size_") listed as size "_tSize_" by renaming to "_tNewFilename_" within MinRetryInterval("_..MinRetryInterval_") : FTP code "_..FTP.ReturnCode_" - "_..FTP.ReturnMessage)
									Quit
								} Else {
									$$$sysTRACE("Got "_tFilename_"("_tStream.Size_") but can't rename it yet : FTP code "_..FTP.ReturnCode_" - "_..FTP.ReturnMessage_"; trying for more data")
								}
							}
						}
					}
				}
				#; don't retry more often than every ..MinRetryInterval seconds
				Set tWaitTime=tSizeTargTime-tNow  Set:tWaitTime<0 tWaitTime=0
				Set tSC1=##class(Ens.Queue).DeQueue("SystemSignal:"_$Job,,tWaitTime,,0)  Quit:$$$ISERR(tSC1)
				If ##class(Ens.Job).ShouldBeQuiescent() || ##class(Ens.Job).ShouldTerminate() {
					$$$LOGWARNING("Abandoning partial download of "_tFilename_" because of shutdown request")
					Quit
				}
				Set tWaitTime=tSizeTargTime-$ZH  Hang:tWaitTime>0 tWaitTime ; finish the delay in case DeQueue() returned early
				Set:tNewSize>tSize tSizeTargTime="" ; restart the clock
				Set:""'=tNewSize tSize=tNewSize ; re-base the size
			}
			If tDone {
				Set tTxt="Retrieved file '"_tFilename_"' of size "_tStream.Size_$S(tSaveAsFile:", archived as file '"_tStream.Filename_"'",1:"")
				If ..%logTransfers { $$$LOGINFO(tTxt) } Else { $$$sysTRACE(tTxt) }
				Set tStream.Attributes("Filename")=tFilename
				If tSaveAsFile { Set tSC1=tStream.SaveStream() If $$$ISERR(tSC1) $$$LOGERROR("Failed to save retrieved file '"_tFilename_"' of size "_tStream.Size_" to archive file '"_tStream.Filename_"'; Status: "_$$$StatusDisplayString(tSC1)) }
				Set tSC = ..BusinessHost.ProcessInput(tStream) Quit:$$$ISERR(tSC)
				Kill tStream
				If ..DeleteFromServer {
					#; delete the file, and remove the file from do-not-process list if it is deleted
					If ..delete(tNewFilename,NextFilePath) {
						$$$sysTRACE("Deleted "_tFilename_$S(tFilename=tNewFilename:"",1:" / "_tNewFilename)_" from FTP server after successful processing")
						If ..VMSLatestVersionOnly { Set $$$ErrorFileTable(tFilename)="" } Else { Kill $$$ErrorFileTable(tFilename) }
					} Else {
						$$$LOGWARNING("failed to delete '"_tFilename_"' - "_..FTP.ReturnCode_":"_..FTP.ReturnMessage)
					}
				} Else {
					$$$sysTRACE("Not Deleting "_tFilename_$S(tFilename=tNewFilename:"",1:" / "_tNewFilename)_" from FTP server after successful processing")
				}
				#; mark the file as done if not deleted, whether or not we tried
				Kill $$$ErrorFileTable(tFilename)
				Set $$$DoneFileTable(tFilename)=tModified
			}
			#; End of While dir list
			#;    Only process one file in each iteration
			Quit
		
		} 
	} While 0
Exit
	If $$$ISERR(tSC) {
		Set tErrText=$$$StatusText(tSC)
		Set tNetErr=('$IsObject(..FTP)||'..FTP.Connected||(tErrText["<READ>")||(tErrText["<WRITE>")||(tErrText["<NOTOPEN>")||(tErrText["=425")||(tErrText["=529"))
		Do:tNetErr&&..Connected ..Disconnect(1)
		#; Don't count it as a file error if it was a network error or retryable
		If ""'=tFilename && (tNetErr || $$$StatusEquals(tSC,$$$EnsErrOutConnectExpired,$$$EnsErrOutConnectFailed)
		 					|| ($$$StatusDisplayString(tSC)["<Ens>ErrFTP" && (tErrText?.E1"="1(1"52"1N,1"4"2N)1PC.E))) { ; retry on timeouts also
			Kill $$$ErrorFileTable(tFilename)
		}
	}
	Quit tSC
Trap
 	Set $ZT="",tSC=$$$EnsSystemError
	Lock:""'=tOneFilename -$$$ErrorFileTable(tOneFilename)
	Goto Exit
]]></Implementation>
</Method>

<Method name="getArchiveFilename">
<Internal>1</Internal>
<CodeMode>expression</CodeMode>
<FormalSpec>pFTPFilename:%String,pArchivePath:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[##class(Ens.Util.File).CreateTimestamp(##class(%File).GetFilename(pFTPFilename),$Case(..AppendTimestamp,"":"%f",0:"%f",1:"%f_%Q",:..AppendTimestamp),,##class(Ens.Util.File).NormalizeDirectory(pArchivePath))
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.FTP.MultiFolderPassThroughService">
<Super>EnsLib.FTP.PassthroughService</Super>
<TimeChanged>62060,34790.339844</TimeChanged>
<TimeCreated>62060,34790.339844</TimeCreated>

<Parameter name="ADAPTER">
<Default>IIBAENSEMBLE.FTP.MultiFolderInboundAdapter</Default>
</Parameter>
</Class>


<Class name="IIBAENSEMBLE.FTP.PassthroughOperation">
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessOperation</Super>
<System>4</System>
<TimeChanged>62650,51071.521712</TimeChanged>
<TimeCreated>60793,79087.57046</TimeCreated>

<Parameter name="ADAPTER">
<Default>EnsLib.FTP.OutboundAdapter</Default>
</Parameter>

<Property name="Filename">
<Description><![CDATA[
Name of file to output the document(s) to. May include timestamp specifiers. The %f specifier if present will be 
replaced with the name of the document's original source filename (stripped of characters illegal in filenames).<p>
See the method Ens.Util.File.CreateTimestamp() for documentation of timestamping options.]]></Description>
<Type>%String</Type>
<InitialExpression>"%f_%Q"</InitialExpression>
<Required>1</Required>
<Parameter name="MAXLEN" value="1000"/>
<Parameter name="MINLEN" value="1"/>
</Property>

<Parameter name="SETTINGS">
<Type>%String</Type>
<Default>Filename</Default>
</Parameter>

<UDLText name="T">
<Content><![CDATA[
// Modified OnMessage to include the path from the stream filename in the filename that is passed to the adapter.

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//   This allows for a 'dynamic' path for the file place on the ftp target.

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//

]]></Content>
</UDLText>

<Method name="OnMessage">
<FormalSpec>pRequest:Ens.StreamContainer,*pResponse:%Persistent</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tFullFilename=pRequest.Stream.Attributes("Filename")
	Set tFilename=..Adapter.CreateTimestamp(##class(%File).GetFilename(tFullFilename),..Filename)
	//Quit ..Adapter.PutStream(tFilename, pRequest.Stream)
	//s tDirname=$TR($E(tFullFilename,1,$L(tFullFilename)-$L(##class(%File).GetFilename(tFullFilename))),"\","/")
	s tDirname=..Adapter.fixSvrPath($E(tFullFilename,1,$L(tFullFilename)-$L(##class(%File).GetFilename(tFullFilename))))
	Quit ..Adapter.PutStream(tDirname_tFilename, pRequest.Stream)
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.FTP.WinBsvcOneSegPerLine">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>IIBAENSEMBLE.FTP.WindowsFTPService</Super>
<TimeChanged>61066,35596.686219</TimeChanged>
<TimeCreated>60736,36692.800837</TimeCreated>

<Parameter name="ADAPTER">
<Default>IIBAENSEMBLE.FTP.InboundAdapter</Default>
</Parameter>

<Property name="SegTerminator">
<Description>
End-Segment marker character(s)</Description>
<Type>%String</Type>
<InitialExpression>$C(10)</InitialExpression>
</Property>

<UDLText name="T">
<Content><![CDATA[
//Property SegTerminator As %String [ InitialExpression = {$C(13,10)} ];

]]></Content>
</UDLText>
</Class>


<Class name="IIBAENSEMBLE.FTP.WindowsFTPService">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>EnsLib.HL7.Service.FTPService</Super>
<TimeChanged>61066,35603.318992</TimeChanged>
<TimeCreated>60598,32507.079155</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// Parameter ADAPTER As %String = "EnsLib.FTP.InboundAdapter";

]]></Content>
</UDLText>

<Parameter name="ADAPTER">
<Type>%String</Type>
<Default>IIBAENSEMBLE.FTP.InboundAdapter</Default>
</Parameter>
</Class>


<Class name="IIBAENSEMBLE.File.InboundAdapter">
<Description>
</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>EnsLib.File.InboundAdapter</Super>
<TimeChanged>63335,36709</TimeChanged>
<TimeCreated>61261,28728.763822</TimeCreated>

<Property name="FileModifyWaitTime">
<Type>%Integer</Type>
<InitialExpression>300</InitialExpression>
</Property>

<Parameter name="SETTINGS">
<Default>FileModifyWaitTime</Default>
</Parameter>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
#define FileTable(%filename) $$$EnsRuntimeAppData(..BusinessHost.%ConfigName,"adapter.file",%filename)

	Set $ZT="Trap",tSC=$$$OK,tFilename="" 
	do {
		Quit:(""=..FilePath)||(""=..FileSpec)
		If '$D(..%CurrResultSet.Data) {
			#; get file list
			$$$catTRACE("connwait","Looking for files '"_..FileSpec_"' in path '"_..FilePath_"'")
			Set tSC=..%CurrResultSet.Execute(..FilePath,..FileSpec,"DateModified",0)  Quit:$$$ISERR(tSC)
			Kill ^||Ens.FileInbound.Found
		}
		#; find the next one that can be processed
		While 1 {
			If 0=..%CurrResultSet.Next() {
				#; Done iterating the ResultSet for the current query execution - clean it up
				Do ..%CurrResultSet.Close()
				Kill ..%CurrResultSet.Data ; clean it out so next loop iteration will re-Execute the query
				#; Remove errored files from global if they no longer exist
				Set f="" For  Set f=$Order($$$FileTable(f)) Quit:f=""  if '$Get(^||Ens.FileInbound.Found(f),0) Kill $$$FileTable(f) $$$sysTRACE("Removed absent file '"_f_"' from errored list")
				Quit
			}
			Continue:"D"=..%CurrResultSet.Data("Type") ; skip directories
			Set tOneFilename = ..%CurrResultSet.Data("Name"), tModified = ..%CurrResultSet.Data("DateModified")  $$$ASSERT(""'=tOneFilename)
			
			/// Skip if modified within last ??? minutes
			s zbgdate=##class(IIBAENSEMBLE.Functions).date2digitexpr($TR($P(tModified,"_",1),"-","/"))
			s zbgtime=$P(tModified,"_",2)
			s zbgdh=$ZDTH(zbgdate_" "_zbgtime,1,3)
			s zbgh=$H
			s zbgModified=($P(zbgh,",",1)-$P(zbgdh,",",1))*86400+$P(zbgh,",",2)-$P(zbgdh,",",2)
			$$$TRACE(tOneFilename_" Modified "_zbgModified_" Seconds ago")
			
			if ( zbgModified > ..FileModifyWaitTime ) {
				Set ^||Ens.FileInbound.Found(tOneFilename)=1
				if ""=tFilename {
					Lock +$$$FileTable(tOneFilename):0 Else  $$$LOGINFO("Skipping locked file '"_tOneFilename_"'") Continue
					If $get($$$FileTable(tOneFilename))=tModified if $get(^(tOneFilename,"wrn")) { Kill ^("wrn") $$$LOGWARNING("Skipping previously errored file '"_tOneFilename_"' with timestamp '"_tModified_"'") } Lock -$$$FileTable(tOneFilename) Continue
					Set $$$FileTable(tOneFilename) = tModified, ^(tOneFilename,"wrn") = 1
					Set tFilename=tOneFilename
					Quit ; found a good one
				}
			}
		}
		If tFilename="" Quit
		
		
		
 		$$$LOGINFO("Processing file '"_tFilename_"' with timestamp '"_tModified_"'")
	
		Set tTimeoutStart = $ZH, tTimeElapsed=0
		if (""'=..WorkPath)&&(..WorkPath'=..FilePath) {
			// Rename file with date etc. (loop waiting for it to become accessible)
			Set tWorkFilename = ..getWorkFilename(tFilename)
			Do {
				Set tOK = ##class(%File).Rename(tFilename,tWorkFilename)
				if 'tOK Hang 0.1  Set tTimeElapsed = $ZH - tTimeoutStart
			} while 'tOK && (tTimeElapsed < ..FileAccessTimeout)
			If 'tOK {
				$$$LOGERROR("Could not move '"_tFilename_"' to '"_tWorkFilename_"' within "_..FileAccessTimeout_" seconds")
				Quit
			}
			#; Release the file right away now that we've moved it
			Kill $$$FileTable(tFilename)
			Lock -$$$FileTable(tFilename)
			Set tFilename=""
		}
		else {
			// Open the file (loop waiting for it to become accessible)
			Set tWorkFilename = tFilename
			Do {
				Set tF = ##class(%File).%New(tWorkFilename) $$$ASSERT($IsObject(tF))
				Set tSC = tF.Open("R")
				if $$$ISERR(tSC) Hang 0.1  Set tTimeElapsed = $ZH - tTimeoutStart
			} while $$$ISERR(tSC) && (tTimeElapsed < ..FileAccessTimeout)
			If $$$ISERR(tSC) $$$LOGERROR("Could not open '"_tWorkFilename_"' within "_..FileAccessTimeout_" seconds") Set tSC = $$$OK Quit
			Kill tF ; We were just testing...
		}
		Set tSC=..processFile(tWorkFilename)  Quit:$$$ISERR(tSC)
		
		#; archive or delete the file, and remove the file from do-not-process list if successful
		Set tOK=1
		If ##class(%File).Exists(tWorkFilename) {
			if ""'=..ArchivePath {
				Set tArchiveFilename = ..getArchiveFilename(tWorkFilename,tFilename)
				if tWorkFilename '= tArchiveFilename {
					Set tOK = ##class(%File).Rename(tWorkFilename,tArchiveFilename)
					if 'tOK $$$LOGERROR("Failed to move '"_tWorkFilename_"' to Archive file '"_tArchiveFilename_"'")
					else  $$$sysTRACE("Moved '"_tWorkFilename_"' to Archive file '"_tArchiveFilename_"'")
				}
				Set:tFilename=tArchiveFilename tOK=0
			} else {
				Set tOK = ##Class(%File).Delete(tWorkFilename)
				if 'tOK $$$LOGERROR("Failed to delete '"_tWorkFilename_"'")
			}
		}
		Kill:""'=tFilename&&tOK $$$FileTable(tFilename)
	} while (0)
Exit
	Lock:""'=tFilename -$$$FileTable(tFilename)
	Quit tSC
Trap
 	Set $ZT="",tSC=$$$EnsSystemError
	Goto Exit
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.File.WindowsFileService">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>EnsLib.HL7.Service.FileService</Super>
<TimeChanged>61261,28955.701414</TimeChanged>
<TimeCreated>61261,28955.701414</TimeCreated>

<Parameter name="ADAPTER">
<Type>%String</Type>
<Default>IIBAENSEMBLE.File.InboundAdapter</Default>
</Parameter>
</Class>


<Class name="IIBAENSEMBLE.Functions">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>Ens.Rule.FunctionSet</Super>
<TimeChanged>63655,39053.32091</TimeChanged>
<TimeCreated>60470,41316.682795</TimeCreated>

<Method name="xRef">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec><![CDATA[sPTName:%String,sRTSystem:%String,refValue:%String,returnDefault:%Boolean=1,&RVId:%Integer=0]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[..xRefFunct(..StringReplace(.sPTName,"'","''"), ..StringReplace(.sRTSystem,"'","''") , ..StringReplace(.refValue,"'","''"), returnDefault, .RVId)
]]></Implementation>
</Method>

<Method name="xRefFunct">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[sPTName:%String,sRTSystem:%String,refValue:%String,returnDefault:%Boolean,&RVId:%Integer]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set sPTID="", sPTPrincipalRole="", sReturnValue=""
	
	&sql(SELECT ID, PrincipalRole INTO :sPTID, :sPTPrincipalRole FROM IIBAENSEMBLE_Reference.PrincipalType WHERE Name = :sPTName)
	if SQLCODE '= 0 Quit sReturnValue
	
	if sPTPrincipalRole = "source" {
		&sql(SELECT ID, RValue INTO :RVId, :sReturnValue FROM IIBAENSEMBLE_Reference.RelatedValue WHERE PrincipalValue->PrincipalType = :sPTID AND RelatedType->System = :sRTSystem AND PrincipalValue->PValue = :refValue)
		if SQLCODE '= 0 set sReturnValue = "", RVId = 0
	}
	
	if sPTPrincipalRole = "target" {
		&sql(SELECT ID, PrincipalValue->PValue INTO :RVId, :sReturnValue FROM IIBAENSEMBLE_Reference.RelatedValue WHERE PrincipalValue->PrincipalType = :sPTID AND RelatedType->System = :sRTSystem AND RValue = :refValue)
		if SQLCODE '= 0 set sReturnValue = "", RVId = 0
	}
	
	if (sReturnValue="")&&(returnDefault) { 
		&sql(SELECT DefaultValue INTO :sReturnValue FROM IIBAENSEMBLE_Reference.RelatedType WHERE PrincipalType = :sPTID AND System = :sRTSystem)
		if SQLCODE '= 0 set sReturnValue = ""
	}
	
	Quit sReturnValue
]]></Implementation>
</Method>

<Method name="xRefR">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>sPTName:%String,sRTSystem:%String,refValue:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[..xRefFunctR(..StringReplace(.sPTName,"'","''"), ..StringReplace(.sRTSystem,"'","''") , ..StringReplace(.refValue,"'","''"))
]]></Implementation>
</Method>

<Method name="xRefFunctR">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>sPTName:%String,sRTSystem:%String,refValue:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set sPTID="", sPTPrincipalRole="", sReturnValue=""
	
	&sql(SELECT ID, PrincipalRole INTO :sPTID, :sPTPrincipalRole FROM IIBAENSEMBLE_Reference.PrincipalType WHERE Name = :sPTName)
	if SQLCODE '= 0 Quit sReturnValue
	
	if sPTPrincipalRole = "source" {
		&sql(SELECT ID, PrincipalValue->PValue INTO :RVId, :sReturnValue FROM IIBAENSEMBLE_Reference.RelatedValue WHERE PrincipalValue->PrincipalType = :sPTID AND RelatedType->System = :sRTSystem AND RValue = :refValue)
		if SQLCODE '= 0 set sReturnValue = "", RVId = 0
	}
	
	if sPTPrincipalRole = "target" {
		&sql(SELECT TOP 1 ID, RValue INTO :RVId, :sReturnValue FROM IIBAENSEMBLE_Reference.RelatedValue WHERE PrincipalValue->PrincipalType = :sPTID AND RelatedType->System = :sRTSystem AND PrincipalValue->PValue = :refValue)
		if SQLCODE '= 0 set sReturnValue = "", RVId = 0
	}
	
	Quit sReturnValue
]]></Implementation>
</Method>

<Method name="xRefRAttr">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>sPTName:%String,sRTSystem:%String,refValue:%String,attrName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[..xRefRAttrFunct(..StringReplace(.sPTName,"'","''"), ..StringReplace(.sRTSystem,"'","''") , ..StringReplace(.refValue,"'","''"), ..StringReplace(.attrName,"'","''"))
]]></Implementation>
</Method>

<Method name="xRefRAttrFunct">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>sPTName:%String,sRTSystem:%String,refValue:%String,attrName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set RVId = 0, sReturnValue = ""
	set tSC = ..xRef(sPTName,sRTSystem,refValue,,.RVId)	
	
	set oRV = ##class(IIBAENSEMBLE.Reference.RelatedValue).%OpenId(RVId)
	
	if $ISOBJECT(oRV) {
		if $ISOBJECT(oRV.attr()) set sReturnValue = $ZOBJPROPERTY(oRV.attr(),attrName)
	}
	
	Quit sReturnValue
]]></Implementation>
</Method>

<Method name="xRefUpSert">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>sPTName:%String,sRTSystem:%String,sPV:%String,sRV:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[..xRefUpSertFunct(..StringReplace(.sPTName,"'","''"), ..StringReplace(.sRTSystem,"'","''"), ..StringReplace(.sPV,"'","''"), ..StringReplace(.sRV,"'","''"))
]]></Implementation>
</Method>

<Method name="xRefUpSertFunct">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>sPTName:%String,sRTSystem:%String,sPV:%String,sRV:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tSC = 1
	
	set oPT = ##class(IIBAENSEMBLE.csp.Reference).getPTobj(sPTName)
	set sPTID=oPT.%Id()
	
	set oPV = ##class(IIBAENSEMBLE.csp.Reference).getPVobj(sPV, sPTID)
	set sPVID=oPV.%Id()	
	
	set oRT = ##class(IIBAENSEMBLE.csp.Reference).getRTobj(sRTSystem, sPTID)
	set sRTID=oRT.%Id()
	
	set sRVID=##class(IIBAENSEMBLE.csp.Reference).getRVID(sRV, sPVID, sRTID)
	
	if sRVID="" {
		set tSC = ##class(IIBAENSEMBLE.csp.Reference).doRVUpSert(oPT, oRT, oPV, sRV)
	}
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="TableUpdateOrInsertExpr">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>value1:%String="",value2:%String="",value3:%String="",targetvalue:%String,translationID:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[..TableUpdateOrInsertFunct(..StringReplace(.value1,"'","''"),..StringReplace(.value2,"'","''"),..StringReplace(.value3,"'","''"),..StringReplace(.targetvalue,"'","''"),.translationID)
]]></Implementation>
</Method>

<Method name="TableUpdateOrInsertFunct">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>value1:%String="",value2:%String="",value3:%String="",targetvalue:%String,translationID:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set exists = ..TableLookup(value1,value2,value3,translationID,0)
	
	//set ^CacheTempMattsTrace3(1) = exists
	//set ^CacheTempMattsTrace3(2) = value1_value2_value3_translationID
	
	If exists '= "" {
		Set rset = ##class(%ResultSet).%New()
	
		If (value2 '= "") & (value3 '= "") {
			Do rset.Prepare("UPDATE IIBAENSEMBLE.LookupTable SET RightID= '"_targetvalue_"' WHERE LeftID1 = '"_value1_"' AND LeftID2 = '"_value2_"' AND LeftID3 = '"_value3_"' AND LookupID = '"_translationID_"'")
		} ElseIf value2 '= "" {
			Do rset.Prepare("UPDATE IIBAENSEMBLE.LookupTable SET RightID= '"_targetvalue_"' WHERE LeftID1 = '"_value1_"' AND LeftID2 = '"_value2_"' AND LeftID3 IS NULL AND LookupID = '"_translationID_"'")
		} Else {
			Do rset.Prepare("UPDATE IIBAENSEMBLE.LookupTable SET RightID= '"_targetvalue_"' WHERE LeftID1 = '"_value1_"' AND LeftID2 IS NULL AND LeftID3 IS NULL AND LookupID = '"_translationID_"'")
		}
	
		Set tSC = rset.Execute()

	} Else {
	
		Set rset = ##class(%ResultSet).%New()
			
		If (value2 '= "") & (value3 '= "") {
			Do rset.Prepare("INSERT INTO IIBAENSEMBLE.LookupTable (LeftID1, LeftID2, LeftID3, RightID, LookupID) VALUES ('"_value1_"', '"_value2_"', '"_value3_"', '"_targetvalue_"', '"_translationID_"')")
		} ElseIf value2 '= "" {
			Do rset.Prepare("INSERT INTO IIBAENSEMBLE.LookupTable (LeftID1, LeftID2, RightID, LookupID) VALUES ('"_value1_"', '"_value2_"', '"_targetvalue_"', '"_translationID_"')")
		} Else {
			Do rset.Prepare("INSERT INTO IIBAENSEMBLE.LookupTable (LeftID1, RightID, LookupID) VALUES ('"_value1_"', '"_targetvalue_"', '"_translationID_"')")
		}
		
		set tSC = rset.Execute()
	
	}
			
	Quit tSC
]]></Implementation>
</Method>

<Method name="TableInsert">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>value1:%String="",value2:%String="",value3:%String="",targetvalue:%String,translationID:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[..TableInsertAction(..StringReplace(.value1,"'","''"),..StringReplace(.value2,"'","''"),..StringReplace(.value3,"'","''"),..StringReplace(.targetvalue,"'","''"),.translationID)
]]></Implementation>
</Method>

<Method name="TableInsertAction">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>value1:%String="",value2:%String="",value3:%String="",targetvalue:%String,translationID:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set exists = ..TableLookup(value1,value2,value3,translationID,0)
	
	If exists '= "" {
		set tSC = "AlreadyExists"
	} Else {
	
		Set rset = ##class(%ResultSet).%New()
			
		If (value2 '= "") & (value3 '= "") {
			Do rset.Prepare("INSERT INTO IIBAENSEMBLE.LookupTable (LeftID1, LeftID2, LeftID3, RightID, LookupID) VALUES ('"_value1_"', '"_value2_"', '"_value3_"', '"_targetvalue_"', '"_translationID_"')")
		} ElseIf value2 '= "" {
			Do rset.Prepare("INSERT INTO IIBAENSEMBLE.LookupTable (LeftID1, LeftID2, RightID, LookupID) VALUES ('"_value1_"', '"_value2_"', '"_targetvalue_"', '"_translationID_"')")
		} Else {
			Do rset.Prepare("INSERT INTO IIBAENSEMBLE.LookupTable (LeftID1, RightID, LookupID) VALUES ('"_value1_"', '"_targetvalue_"', '"_translationID_"')")
		}
		
		set tSC = rset.Execute()
	
	}
			
	Quit tSC
]]></Implementation>
</Method>

<Method name="TableLookup">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>value1:%String="",value2:%String="",value3:%String="",translationID:%String="",returnDefault:%Boolean=1</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[..TableTranslate(..StringReplace(.value1,"'","''"),..StringReplace(.value2,"'","''"),..StringReplace(.value3,"'","''"),.translationID,.returnDefault)
]]></Implementation>
</Method>

<Method name="TableLookupApos">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>value1:%String="",value2:%String="",value3:%String="",translationID:%String="",returnDefault:%Boolean=1</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[..TableTranslate(..StringReplace(.value1,"'","''"),..StringReplace(.value2,"'","''"),..StringReplace(.value3,"'","''"),.translationID,.returnDefault)
]]></Implementation>
</Method>

<Method name="TableTranslate">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>value1:%String="",value2:%String="",value3:%String="",translationID:%String="",returnDefault:%Boolean=1</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// $$$LOGINFO(value1_" , "_value2_" , "_value3_" , "_translationID)
	Set tgtID = "", srcID1 = value1, srcID2 = value2, srcID3 = value3, count = 0, lookuptable = translationID
	
	//$$$LOGINFO("1:"_value1_"2:"_value2_"3:"_value3_"translationID:"_translationID)
		
	Set rset = ##class(%ResultSet).%New()
	If (srcID2 '= "") & (srcID3 '= "") {
		Do rset.Prepare("SELECT TOP 1 RightID FROM IIBAENSEMBLE.LookupTable WHERE LeftID1 = '"_srcID1_"' AND LeftID2 = '"_srcID2_"' AND LeftID3 = '"_srcID3_"' AND LookupID = '"_lookuptable_"'")
	} ElseIf srcID2 '= "" {
		Do rset.Prepare("SELECT TOP 1 RightID FROM IIBAENSEMBLE.LookupTable WHERE LeftID1 = '"_srcID1_"' AND LeftID2 = '"_srcID2_"' AND LeftID3 is NULL AND LookupID = '"_lookuptable_"'")
	} Else {
		Do rset.Prepare("SELECT TOP 1 RightID FROM IIBAENSEMBLE.LookupTable WHERE LeftID1 = '"_srcID1_"' AND LeftID2 is NULL AND LeftID3 is NULL AND LookupID = '"_lookuptable_"'")
	}
	
	Do rset.Execute()
	While (rset.Next(.sc)) {
		If ($SYSTEM.Status.IsOK(sc)) // check if this succeeded without errors
            {
                set tgtID = rset.Data("RightID")
            }
        Else // if there was an error, break out of the While loop
            {
                Quit
            }		
	}
	
	If $SYSTEM.Status.IsError(sc) // if there was an error, process that
     {
     $$$LOGERROR("Table Lookup Error") // perform error processing
     }
     
    if returnDefault = 1 {
     if tgtID = "" {
		Set rset = ##class(%ResultSet).%New()
	    //Do rset.Prepare("SELECT TOP 1 RightID FROM IIBAENSEMBLE.LookupTable WHERE LeftID1 = 'DefaultValue' AND LeftID2 = 'DefaultValue' AND LeftID3 = 'DefaultValue' AND LookupID = '"_lookuptable_"'")
	 	Do rset.Prepare("SELECT TOP 1 ID,LookupTableName,DefaultValue FROM IIBAENSEMBLE.LookupTableHeader WHERE LookupTableName = '"_lookuptable_"'")
	 	Do rset.Execute()
		While (rset.Next(.sc)) {
			If ($SYSTEM.Status.IsOK(sc)) // check if this succeeded without errors
    	        {
    	            //set tgtID = rset.Data("RightID")
    	            set tgtID = rset.Data("DefaultValue")
    	        }
    	    Else // if there was an error, break out of the While loop
    	        {
    	            Quit
    	        }		
		}
     } 
    }
	
	Quit tgtID
]]></Implementation>
</Method>

<Method name="TableLookupR">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>value1:%String="",translationID:%String="",Delimiter:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[..TableTranslateR(.value1,.translationID,.Delimiter)
]]></Implementation>
</Method>

<Method name="TableTranslateR">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>value1:%String="",translationID:%String="",Delimiter:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//$$$LOGINFO(value1_" , "_translationID)
	Set tgtID = "", srcID1 = value1, lookuptable = translationID, strDelimiter = Delimiter
	If strDelimiter = "" { set strDelimiter = "^" }
	Set rset = ##class(%ResultSet).%New()
	Do rset.Prepare("SELECT TOP 1 LeftID1, LeftID2, LeftID3 FROM IIBAENSEMBLE.LookupTable WHERE RightID = '"_srcID1_"' AND LookupID = '"_lookuptable_"'")
	Do rset.Execute()
	While (rset.Next(.sc)) {
		If ($SYSTEM.Status.IsOK(sc)) // check if this succeeded without errors
            {
	
				If (rset.Data("LeftID2") '= "") & (rset.Data("LeftID3") '= "") {
					Set tgtID = rset.Data("LeftID1")_strDelimiter_rset.Data("LeftID2")_strDelimiter_rset.Data("LeftID3")
				} ElseIf rset.Data("LeftID2") '= "" {
					Set tgtID = rset.Data("LeftID1")_strDelimiter_rset.Data("LeftID2")
				} Else {
					Set tgtID = rset.Data("LeftID1")
				}
	
			}
        Else // if there was an error, break out of the While loop
            {
                Quit
            }		
	}
	
	If $SYSTEM.Status.IsError(sc) // if there was an error, process that
     {
     $$$LOGERROR("Reverse Table Lookup Error") // perform error processing
     }
	
	
	Quit tgtID
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// 

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// INPUT

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    SourceTimeZoneGMT -  Source Time zone relative to GMT

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// 			Default is Pacific Standard Time (-8)

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    SourceDayLightSaveYN - Is daylight saving used at the source time zone Y/N

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// 			Default is "Y"

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    TargetTimeZoneGMT - Target Time zone relative to GMT (Pacific standard = -8 )

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//    TargetDayLightSaveYN - Is daylight saving used at the target time zone Y/N

]]></Content>
</UDLText>

<Method name="TimeZoneDiffExpr">
<Description>
This function determines the time difference between two time zones, taking
into consideration whether or not we are in daylight savings, and whether or 
or not daylight savings is used. The assumption is that everyone is in daylight
savings at the same time.</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>SourceTimeZoneGMT:%Integer=-8,SourceDaylightSaveYN:%String="Y",TargetTimeZoneGMT:%Integer,TargetDaylightSaveYN:%String,TimeValue:%String=""</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[..TimeZoneDiffFunct(.SourceTimeZoneGMT,.SourceDaylightSaveYN, .TargetTimeZoneGMT,.TargetDaylightSaveYN,.TimeValue)
]]></Implementation>
</Method>

<Method name="TimeZoneDiffFunct">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>SourceTimeZoneGMT:%Integer,SourceDaylightSaveYN:%String,TargetTimeZoneGMT:%Integer,TargetDaylightSaveYN:%String,TimeValue:%String=""</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	
	If ( TimeValue = "" ) {
		Set TimeValue=$TR($TR($ZDT($H,8,1)," ",""),":","")
	}
	
	Set TimeValue=$E(TimeValue_"000000000000",1,12)
	
	set Diff=0
	
	
	/// Determine if we are in daylight savings
	//	- Calculate the difference between current local time and GMT
	//  - Compare to Timezone difference from GMT
	Set TimeDiff=($P($P($ZTIMESTAMP,",",2),".",1) - $P($HOROLOG,",",2))/3600
	If ( TimeDiff < 0 ) {
		Set TimeDiff=TimeDiff+24
	}
	Set DayLightSavings=($ZTIMEZONE/60)-TimeDiff
	
	//Determine time zone time difference
	Set Diff=TargetTimeZoneGMT-SourceTimeZoneGMT
	
	//Account for instances where day light savings is not used at some places
	if ( ( DayLightSavings=1 ) & ( TargetDaylightSaveYN '= SourceDaylightSaveYN ) ) {
		If ( (SourceDaylightSaveYN="Y") & ( TargetDaylightSaveYN="N") ) {
			
			Set Diff=Diff-1
		} Else {
			Set Diff=Diff+1
		}
	}
	
	Quit Diff
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
//         

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
//   Converts the timestamp to $H, adds TimeAdjustment, and converts back to HL7 format

]]></Content>
</UDLText>

<Method name="HL7TimestampAdjustExpr">
<Description>
Adjusts an HL7 timestamp, adding the TimeAdjustment value (in seconds) to the HL7 Time Stamp</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>Timestamp:%String,TimeAdjustment:%Integer,TimestampLength:%Integer=14</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[..HL7TimestampAdjustFunct(.Timestamp,.TimeAdjustment,.TimestampLength)
]]></Implementation>
</Method>

<Method name="HL7TimestampAdjustFunct">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Timestamp:%String,TimeAdjustment:%Integer,TimestampLength:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// $$$TRACE("HL7 Timetamp Adjust Inputs: Timestamp:"_Timestamp_", Adjustment:"_TimeAdjustment)
	Set NewTimestamp=""
	
	If (Timestamp '= "" ) {
		//First convert the HL7 Timestamp to $H format
		Set Htimestamp=$ZDTH($E(Timestamp,5,6)_"/"_$E(Timestamp,7,8)_"/"_$E(Timestamp,1,4)_" "_$E(Timestamp,9,10)_":"_$E(Timestamp,11,12)_":"_$E(Timestamp,13,14))
	
		//Now Adjust time stamp 
		Set Hday=$P(Htimestamp,",",1)
		Set Htime=$P(Htimestamp,",",2)
	
		Set NewTime=Htime+TimeAdjustment
		Set NewDay=Hday
		If ( (NewTime > 86399) || (NewTime<0) ) {
			If (NewTime > 86399 ) {
				Set DayCount=NewTime\86400
			} Else {
				Set DayCount=NewTime\86400-1
			}
			Set NewTime=NewTime-(86400*DayCount)
			Set NewDay=NewDay+DayCount
		}
	
	
		Set NewTimestamp=$TRANSLATE($ZDT(NewDay_","_NewTime,8,1),": ")
	}
	Quit $E(NewTimestamp,1,TimestampLength)
]]></Implementation>
</Method>

<Method name="FormatIDXMrnExpr">
<Description>
Format the MRN to IDX format, adding the dashes</Description>
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>MRN:%String="",MrnLength:%Integer=8,PrefixChar:%String="0"</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[..FormatIDXMrnFunct(.MRN,.MrnLength,.PrefixChar)
]]></Implementation>
</Method>

<Method name="FormatIDXMrnFunct">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>MRN:%String="",MrnLength:%Integer="",PrefixChar:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set IdxMrn=""
	
	If (PrefixChar '= "") {
		Set MRN=$JUSTIFY(MRN,MrnLength)
		Set MRN=$TR(MRN," ",PrefixChar)
	}
	
	Set MrnLen=$Length(MRN)
	For i=0:2:MrnLength-2 {
		If ( i>0 ) {
			Set IdxMrn="-"_IdxMrn
		}
		
		Set IdxMrn=$Extract(MRN,MrnLength-i-1,MrnLength-i)_IdxMrn
	}
	
	
	Quit IdxMrn
]]></Implementation>
</Method>

<Method name="StringReplace">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>OriginalString:%String,ReplaceThis:%String,ReplaceWith:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[$ListToString($ListFromString($G(OriginalString),ReplaceThis),ReplaceWith)
]]></Implementation>
</Method>

<Method name="date2digitexpr">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>sdate:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[..date2digitfun(.sdate)
]]></Implementation>
</Method>

<Method name="date2digitfun">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>sdate:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	set tSC = ""
	
	if sdate?2N1"/"2N1"/"4N {
		set tSC = sdate
	} elseif sdate?2N1"/"2N1"/"2N {
		set tyearnow = $E($ZD($H,3),3,4)
		set tyear = $P(sdate,"/",3)
		if tyear > tyearnow {
			set $P(sdate,"/",3) = "19"_tyear
		} else {
			set $P(sdate,"/",3) = "20"_tyear
		}
		set tSC = sdate
	}
				
	Quit tSC
]]></Implementation>
</Method>

<Method name="dateODBCexpr">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>sdate:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[..dateODBCfun(.sdate)
]]></Implementation>
</Method>

<Method name="dateODBCfun">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>sdate:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	set tSC = ""
	
	//sdate is expected to be in the format MM/DD/[YY]YY
	if (sdate?2N1"/"2N1"/"4N)||(sdate?2N1"/"2N1"/"2N) {
		
		set tdate = ..date2digitfun(sdate)
		set tSC = $ZD($ZDH(tdate,1),3)
	}
	
	//sdate is expected to be in the format MM/DD/[YY]YY hh:mm AM/PM
	if (sdate?2N1"/"2N1"/"4N1" "2N1":"2N1" "2A)||(sdate?2N1"/"2N1"/"2N1" "2N1":"2N1" "2A) {
		set tdate = ..date2digitfun($P(sdate," ",1))
		set ttime = $P(sdate," ",2)_" "_$P(sdate," ",3)
		set tSC = $ZDT($ZDTH(tdate_" "_ttime,1,4),3,1)
	}
	
	//sdate is HL7 date/time CCYYMMDDHHMMSS (HH, MM, SS opt)
	if ( sdate?8.14N  ) {
		
		// add seconds if not included
		If $LENGTH(sdate)<13 {
			set sdate=$E(sdate_"000000",1,14)
		}
		
		set tdate=$E(sdate,1,4)_"-"_$E(sdate,5,6)_"-"_$E(sdate,7,8)
		set ttime=$E(sdate,9,10)_":"_$E(sdate,11,12)_":"_$E(sdate,13,14)
		set tSC=tdate_" "_ttime
	}
	
	//sdate is expected to be in the format CCYYMMDD HH:MM
	if ( sdate?8N1" "2N1":"2N ) {
		
		set tdate=$E(sdate,1,4)_"-"_$E(sdate,5,6)_"-"_$E(sdate,7,8)
		set ttime=$E(sdate,10,14)_":00"
		set tSC=tdate_" "_ttime
	}
				
	Quit tSC
]]></Implementation>
</Method>

<Method name="ParseCSV">
<ClassMethod>1</ClassMethod>
<FormalSpec>CSVDataToProcess:%String</FormalSpec>
<ReturnType>%List</ReturnType>
<Implementation><![CDATA[
	
	//Declaring variables for text delimiter and text qualifyer
    set TextDelimiter="", TextQualifyer=""

	//Declaring the variables used in determining action to be taken
    set ProcessQualifyer="", NewRecordCreate=""

	//Declaring variables dealing with input string
    set CharMaxNumber=0, CharLocation=0, CharCurrentVal="", CharCounter=0, CharStorage=""

	//Declaring variables that handle array duties
    
    set CSVArrayCount=0

    
    
    //----------------------------------
    
    //Setting default values for various variables

   //<- Text delimiter is a comma
    set TextDelimiter = ","

   //<- Chr(34) is the ascii code for "
    set TextQualifyer = $C(34)

   //<- Determining how record should be processed
   set ProcessQualifyer = "False"

   //<- Calculating no. of characters in variable
    set CharMaxNumber = $LENGTH(CSVDataToProcess)

   //<- Determining how to handle record at different
   //   stages of operation
   //   0 = Don//t create new record
   //   1 = Write data to existing record
   //   2 = Close record and open new one
   set NewRecordCreate = 0

   //<- Priming the array counter
   set CSVArrayCount = 0

   //<- Initializing the array
   kill CSVArray
   set CSVArray = ""
   set CSVArray(CSVArrayCount) = ""

   //<- Record character counter
   set CharCounter = 0

   //----------------------------------
   
   //Starting the main loop
   
   For CharLocation=1:1:CharMaxNumber {
	   
	   //Retrieving the next character in sequence from CSVDataToProcess
	   set CharCurrentVal = $E(CSVDataToProcess,CharLocation,CharLocation)
	   
	   //This will figure out if the record uses a text qualifyer or not
	   If (CharCurrentVal = TextQualifyer) && (CharCounter = 0) {
         set ProcessQualifyer = "True"
         set CharCurrentVal = ""
	   }
	   
	   //Advancing the record 'letter count' counter
       set CharCounter = CharCounter + 1

	   //Choosing data extraction method (text qualifyer or no text qualifyer)
       If ProcessQualifyer = "True" {
	              
	       //This section handles records with a text qualifyer and text delimiter
           //It is also handles the special case scenario, where the qualifyer is
           //part of the data.  In the CSV file, a double quote represents a single
           //one  ie.  "" = "
           If $LENGTH(CharStorage) '= 0 {
	           
               If CharCurrentVal = TextDelimiter {
	               set CharStorage = ""
                   set ProcessQualifyer = "False"
                   set NewRecordCreate = 2
               } Else {
                   set CharStorage = ""
                  set NewRecordCreate = 1
               }
           } Else {
	           
	           If CharCurrentVal = TextQualifyer {
		           set CharStorage = CharStorage_CharCurrentVal
                   set NewRecordCreate = 0
	           } Else {
		           set NewRecordCreate = 1
	           }
           }
	       
       } Else {
	       
	       //This section handles a regular CSV record.. without the text qualifyer
	       If CharCurrentVal = TextDelimiter {
		       set NewRecordCreate = 2
	       } Else {
		       set NewRecordCreate = 1
	       }
       }
       
       //Writing the data to the array
       if NewRecordCreate = 1 {
	       //This section just writes the info to the array
           set CSVArray(CSVArrayCount) = CSVArray(CSVArrayCount)_CharCurrentVal
       }
       
       if NewRecordCreate = 2 {
	       //This section closes the current record and creates a new one
	       set CharCounter = 0
	       set CSVArrayCount = CSVArrayCount + 1
	       set CSVArray(CSVArrayCount) = ""
	       
	       
       }
      
       
	   
   }

	
	for i=0:1:CSVArrayCount {
		//w CSVArray(i),!
		set $LIST(lCSV,i+1) = CSVArray(i)
	}
	
	Quit lCSV
]]></Implementation>
</Method>

<Method name="FormatExamCodeWModifierExpr">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>ExamCode:%String,Modifier:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[..FormatExamCodeWModifierFunct(.ExamCode,.Modifier)
]]></Implementation>
</Method>

<Method name="FormatExamCodeWModifierFunct">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>ExamCode:%String,Modifier:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set NewExamCode=ExamCode
	
	If ( (Modifier="RIGHT") || (Modifier="LEFT") || (Modifier="BILAT") ) {
		Set NewExamCode=NewExamCode_"/"_Modifier
	}
	
	Quit NewExamCode
]]></Implementation>
</Method>

<Method name="TestEmail">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&FileName:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set OldFileName = FileName
	set FileName = FileName_".dat"
	set FileRename = ##class(%File).Rename(OldFileName,FileName)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="CheckHL7OBXForString">
<ClassMethod>1</ClassMethod>
<FormalSpec>HL7:%RegisteredObject,StringValue:%String=""</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set i=""
	set tSC=""
	Set ReportText = ""
	Set Return = 0
	
	For {
		Set i=HL7.GetNextIndex("OBX()",i,.tSC)  Quit:i=""
		Set ReportText=HL7.GetValueAt("OBX("_i_"):5")
		if $FIND($ZSTRIP(ReportText,"<>W"),$ZSTRIP(StringValue,"<>W")) {
			set Return = 1
			Quit
		}	
	}
	
	
	Quit Return
]]></Implementation>
</Method>

<Method name="CheckForBlankOBX">
<ClassMethod>1</ClassMethod>
<FormalSpec>HL7:%RegisteredObject</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	Set i=""
	set tSC=""
	Set ReportText = ""
	Set Return = "Blank"
	
	For {
		Set i=HL7.GetNextIndex("OBX()",i,.tSC)  Quit:i=""
		Set ReportText=HL7.GetValueAt("OBX("_i_"):5")
		if (($ZSTRIP(ReportText,"*W")'="")&&($ZSTRIP(ReportText,"*W")'="S:SQ")) {
			set Return = "NotBlank"
			Quit
		}	
	}
	
	
	Quit Return
]]></Implementation>
</Method>

<Method name="SentenceCaseHack">
<Description>
Makes the first character of each sentence upper case, changes the remaining characters to lower case
and adds a period at the end of the sentence. 
An optional parameter is used to define the sentence separator. The defualt is period followed by a space</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>origSentence:%String,Separator:%String=". "</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	Set SentenceList=$LFS(origSentence,Separator)
	Set newSentence=""
	s ptr=0,sentence="",pos=0
	// Break up the sentence using the provided separator
	while $LISTNEXT(SentenceList,ptr,sentence) {
		s pos=pos+1
		s nw=1
		//Find first none space character in the sentence.
		While ( (nw <= $LENGTH(sentence)) && ($E(sentence,nw) = " ") ) {
			Set nw=nw+1
		}
		
		s $LIST(SentenceList,pos)=$ZCONVERT($E(sentence,1,nw),"U")_$ZCONVERT($E(sentence,nw+1,$LENGTH(sentence)),"L")
	}
	// Put the sentence back together again.
	Set newSentence=$ZSTRIP($LTS(SentenceList,Separator),">W")
	Set:$E(newSentence,$LENGTH(newSentence))'="." newSentence=newSentence_"."
	
	Quit newSentence
]]></Implementation>
</Method>

<Method name="VerbiageCleanupHack">
<Description>
Fix sentence capitalization, and replace short keys with full descriptions.
Shorkeys are defined in the tranlsation table 'Radflow common shortkeys'.
Shortkeys in lookup table must be upper case.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Verbiage:%String,SeparatorList:%String=" "</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	set SentenceStart=1,newVerbiage="",Separator=$E(SeparatorList)
	set ptr=0
	
	// Assume words are separated by a space
	while ($LISTNEXT($LFS(Verbiage,Separator),ptr,token)) {
	
		if (token'="") {
			
			s ShortkeyReplace=..CheckShortKeys(token,$E(SeparatorList,2,$LENGTH(SeparatorList)))
			
			
			s newToken=ShortkeyReplace
			
			//Capitalize if first word in a sentence
			s:SentenceStart $E(newToken,1)=$ZCONVERT($E(newToken,1),"U")
			
			//Check to see if we are at the end of a sentence
			if ( ($ZCONVERT(token,"U")="DR") || ($ZCONVERT(token,"U")="DR.") ) {
				S newToken="Dr."
				s SentenceStart=1
			} elseif ( $FIND(".!",$E(token,$LENGTH(token))) && (token'?.(1A1".")) ) {
				s SentenceStart=1
			} elseif ( (token'="?") && ($E(token,$LENGTH(token))="?") ) {
				s SentenceStart=1
			} else  {
				s SentenceStart=0
			}
			
			s:newVerbiage'="" newVerbiage=newVerbiage_Separator
			s newVerbiage=newVerbiage_newToken
		}
	}
	
	//Add a period at the end vergiage if it does not end with a punctuation character
	s:'$F(".?;,",$E(newVerbiage,$L(newVerbiage))) newVerbiage=newVerbiage_"."
	
	//Make sure there is a space after every period
	s ptr=0,count=0,tmp=""
	While ($LISTNEXT($LFS(newVerbiage,"."),ptr,token)) {
		s count=count+1
		if ((count>1) && ($E(token)'=" ") && ($LENGTH(token)>1)) {
			s tmp=tmp_". "_$ZCONVERT($E(token),"U")_$E(token,2,$LENGTH(token))
		} else {
			s:tmp'="" tmp=tmp_"."
			s tmp=tmp_token
		}
	}
	
	s newVerbiage=tmp
	
	//Make sure there is a space after every comma
	s ptr=0,count=0,tmp=""
	While ($LISTNEXT($LFS(newVerbiage,","),ptr,token)) {
		s count=count+1
		if ((count>1) && ($E(token)'=" ") && ($LENGTH(token)>1)) {
			s tmp=tmp_", "_token
		} else {
			s:tmp'="" tmp=tmp_","
			s tmp=tmp_token
		}
	}
	
	s newVerbiage=tmp
			
	
	
	Q newVerbiage
]]></Implementation>
</Method>

<Method name="CheckShortKeys">
<ClassMethod>1</ClassMethod>
<FormalSpec>token:%String,SeparatorList:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	
	
	//W !,"in CheckShortKeys- token: ",token," SeparatorList: ",SeparatorList,!
	
	Q:token=""
		
	s nToken=""
	
	//Check for Shortkey conversion
	if ( token?.P ) {
		s Shortkey=token
	} elseif (token'?.(1A1".") ) {
		s Shortkey=$ZSTRIP(token,"<>P")
	} else {
		s Shortkey=token
	}
	
	//w "Shortkey: ",Shortkey,!
	
	s Shortkey=$ZCONVERT(Shortkey,"U")
	s ShortkeyReplace=##class(IIBAENSEMBLE.Functions).TableLookup(Shortkey,"","","RADFLOW COMMON ShortkeyS")
	
	//w "ShortkeyReplace ",ShortkeyReplace,!
	
	if (ShortkeyReplace="") {	
		if ( SeparatorList="" ) {
			S nToken=$ZCONVERT(token,"L")
			
		} else {
			s ptr=0,Separator=$E(SeparatorList),count=0
			While ($LISTNEXT($LFS(token,Separator),ptr,sToken)) {
				s tmp="",count=count+1
				s:sToken'="" tmp=..CheckShortKeys(sToken,$E(SeparatorList,2,$LENGTH(SeparatorList)))
				
				s:count>1 nToken=nToken_Separator
				s nToken=nToken_tmp
			}
		}
	} else {
		s nToken=token
		s end=$F($ZCONVERT(token,"U"),Shortkey)
		s $E(nToken,end-$LENGTH(Shortkey),end-1)=ShortkeyReplace
	} 	
	
	//W "In CheckShortKey- nToken: ",nToken,!
	Q nToken
]]></Implementation>
</Method>

<Method name="DateFilter">
<ClassMethod>1</ClassMethod>
<FormalSpec>tDate:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s rv=""
	s tDate2H=$ZDH(tDate,3)
	s tDateDiff=tDate2H-($H+0)
	if (tDateDiff = 0 ) {
		s rv="=HorologDate"
	} elseif (tDateDiff>0) {
		s rv=">HorologDate"
	} else {
		s rv="<HorologDate"
	}
	
	Q rv
]]></Implementation>
</Method>

<Method name="WaitSeconds">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>Seconds:%String="0"</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[..WaitSecondsFunct(.Seconds)
]]></Implementation>
</Method>

<Method name="WaitSecondsFunct">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>Seconds:%String="0"</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	hang Seconds
	
	Quit 1
]]></Implementation>
</Method>

<Method name="longStringToMaxLengthLines">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[longString:%String,MaxLength:%Integer,&Lines:%List]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s tSC = 1
	s Lines = ""
	s curLineNum = 0
	s curLine = ""
	s curLineList = ""
	s curPosition = 0
	
	Do {
		s curLineList = $LFS($E(longString,curPosition+1,curPosition+MaxLength)," ")
		if curPosition+MaxLength >= $L(longString) {
			s curLine = $LTS(curLineList," ")
		} else {
			s curLine = $LTS($LI(curLineList,1,$LL(curLineList)-1)," ")
		}
		s $LI(Lines,$INCREMENT(curLineNum)) = curLine
		s curPosition = curPosition + $L(curLine)+1
	} WHILE curPosition < $L(longString)
	
	
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="timeDiff">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>T2:%TimeStamp,T1:%TimeStamp</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[##class(Ens.DataType.UTC).timeDiff(T2,T1)
]]></Implementation>
</Method>

<Method name="ObjExists">
<ClassMethod>1</ClassMethod>
<FormalSpec>ClassName:%String,ID:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[

	Quit $ISOBJECT($CLASSMETHOD(ClassName,"%OpenId",ID))
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.HistoricUpload.Bsvc.GetMsgsFromDB">
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessService</Super>
<TimeChanged>61782,46638.026944</TimeChanged>
<TimeCreated>61737,38683.725187</TimeCreated>

<Parameter name="ADAPTER">
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Property name="TargetConfigNames">
<Type>%String</Type>
</Property>

<Property name="SourceIdentifier">
<Type>%String</Type>
</Property>

<Property name="MessageCount">
<Type>%String</Type>
</Property>

<Parameter name="SETTINGS">
<Type>%String</Type>
<Default>TargetConfigNames,SourceIdentifier,MessageCount</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:%RegisteredObject,pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	s tSC=$$$OK
	s rs=##class(%ResultSet).%New()
	s qry="select top "_..MessageCount_" * from IIBAENSEMBLE_HistoricUpload.Queue where SourceIdentifier='"_..SourceIdentifier_"' and  Processed=0"
	//s qry="select top "_..MessageCount_" * from IIBAENSEMBLE_HistoricUpload.Queue where SourceIdentifier='"_..SourceIdentifier_"' and  Processed=0 order by MessageId Desc"
	$$$TRACE(qry)
	d rs.Prepare(qry)
	d rs.Execute()
	
	while (rs.Next()) {
		
		s MessageId=rs.Get("MessageId")
		if (MessageId'="") {
			s HL7msg=##class(EnsLib.HL7.Message).%OpenId(MessageId)
			For i=1:1:$L(..TargetConfigNames,",") {
				S target=$P(..TargetConfigNames,",",i)
				$$$TRACE("Sending HL7 Message '"_MessageId_"' To '"_target_"'.")
			
				set tSC=..SendRequestAsync(target,HL7msg)
				Q:$$$ISERR(tSC)
			}
		}
		
		s source=..SourceIdentifier
		&sql( update IIBAENSEMBLE_HistoricUpload.Queue set Processed=1 
				where SourceIdentifier = :source
				and   MessageId = :MessageId
			)
		
		if (SQLCODE'=0) {
			$$$TRACE("Update failed")
			Q
		}
	}
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="OnGetConnections">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pArray:%String,item:Ens.Config.Item</FormalSpec>
<Implementation><![CDATA[
	Set (tValue,tIndex)="" 
	For { 
		Set tIndex = item.Settings.Next(tIndex) Quit:tIndex=""
		Set tSetting = item.Settings.GetAt(tIndex)
		If tSetting.Name="TargetConfigNames" {
			Set tValue=tSetting.Value
		}
	}
	
	For i=1:1:$L(tValue,",") { 
		Set tOne=$P(tValue,",",i)
		If (tOne '= "" ) {
			Set pArray(tOne)=""
		}
	}
	Quit
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.HistoricUpload.PopulateEnsQ">
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>61851,55533.929602</TimeChanged>
<TimeCreated>61733,48260.689006</TimeCreated>

<XData name="BPL">
<Description>
BPL Definition</Description>
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process language='objectscript' request='Ens.Request' response='Ens.Response' height='2000' width='2000' >
<context>
<property name='HL7message' type='EnsLib.HL7.Message' >
</property>
</context>
<sequence xend='550' yend='600' >
<trace name='Start' value='"Start"' xpos='550' ypos='200' />
<transform name='Transform to HL7' class='ICOrderResult.Transforms.RisReportsToCMA' source='request' target='context.HL7message' xpos='550' ypos='300' />
<code name='Save HL7 Message' xpos='550' ypos='400' >
<![CDATA[	// Save the new message to the DB
	$$$TRACE("HL7 message: "_context.HL7message.RawContent)
	d context.HL7message.%Save()]]]]><![CDATA[>
</code>
<code name='Populate queue' xpos='550' ypos='500' >
<![CDATA[	//Add new entry into the queue
	
	s QueueEntry=##class(IIBAENSEMBLE.HistoricUpload.Queue).%New()
	s QueueEntry.SourceIdentifier="CMA"
	s QueueEntry.MessageId=context.HL7message.%Id()
	s QueueEntry.Processed=0
	d QueueEntry.%Save()
	
	
]]]]><![CDATA[>
</code>
</sequence>
</process>
]]></Data>
</XData>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.HistoricUpload.Queue">
<Super>%Persistent</Super>
<TimeChanged>62987,46088.199542</TimeChanged>
<TimeCreated>61733,38951.138979</TimeCreated>

<Property name="SourceIdentifier">
<Type>%String</Type>
</Property>

<Property name="MessageId">
<Type>%String</Type>
</Property>

<Property name="Processed">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<UDLText name="T">
<Content><![CDATA[
//set oref.CreatedOn = $ZDT($h,3,1) //Task Item Definitions, ItemType='ClassObjectPurge'

]]></Content>
</UDLText>

<Property name="CreatedOn">
<Type>%TimeStamp</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^IIBAENSEMBLE.Histori34DC.QueueD</DataLocation>
<DefaultData>QueueDefaultData</DefaultData>
<IdLocation>^IIBAENSEMBLE.Histori34DC.QueueD</IdLocation>
<IndexLocation>^IIBAENSEMBLE.Histori34DC.QueueI</IndexLocation>
<StreamLocation>^IIBAENSEMBLE.Histori34DC.QueueS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="QueueDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>SourceIdentifier</Value>
</Value>
<Value name="3">
<Value>MessageId</Value>
</Value>
<Value name="4">
<Value>Processed</Value>
</Value>
<Value name="5">
<Value>CreatedOn</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.Installer">
<Description><![CDATA[
IIBA Toolkit Installer <br>
This class can be used for the creation of the IIBA namespace and for upgrading the IIBA namespace <br>
This class can also be used for creation or upgrade of a client's namespace <br><br>
This class must be imported into the %SYS namespace before calling the setup method.
<br>
In all cases, from terminal, call the method ##class(IIBAENSEMBLE.Installer).setupDefaults(...)
<br><br>
For creation of IIBA pass the following parameters
<ul>
<li>"IIBA"
<li>"&lt;source file directory&gt;"
<li>"&lt;database directory for IIBA database&gt;"
</ul>

For upgrade of IIBA pass the following parameters
<ul>
<li>"IIBA"
<li>"&lt;source file directory&gt;"
</ul>

For creation of Client Namespace pass the following parameters
<ul>
<li>"&lt;Namespace&gt;"
<li>"&lt;source file directory&gt;"
<li>"&lt;database directory for namespace database&gt;"
</ul>

For upgrade of Client Namespace pass the following parameters
<ul>
<li>"&lt;Namespace&gt;"
<li>"&lt;source file directory&gt;"
</ul>
<br>
The source files are generated by running ##class(IIBAENSEMBLE.Utilities).buildInstallerSourceFiles("outputPath")<br>
The source files should be generated in a namespace that has the toolkit csp files like IIBARIS]]></Description>
<IncludeCode>%occInclude</IncludeCode>
<TimeChanged>62731,56660.286941</TimeChanged>
<TimeCreated>61494,40487</TimeCreated>

<XData name="Installer">
<Description>
Application Definition</Description>
<XMLNamespace>INSTALLER</XMLNamespace>
<Data><![CDATA[
<Manifest>

<!-- Create Resources -->
<Resource Name="%DB_${NAMESPACE}" 
		Permission="RW" 
		Description="Resource for ${NAMESPACE} Database"
		/>
<Resource Name="NS_${NAMESPACE}" 
		Permission="RW" 
		Description="Resource for ${NAMESPACE} Application"
		/>
		
<If Condition='${NamespaceExists}=0'>

<!-- Create namespace -->
<Namespace Name="${NAMESPACE}"
          Create="yes"
          Code="${NAMESPACE}"
          Data="${NAMESPACE}"
          Ensemble="1"
          EnsemblePortalGrant="%DB_${NAMESPACE}"
		  >
<Configuration>

<!-- "data" and "code" database -->
<Database Name="${NAMESPACE}"
		 Dir="${NSDBDir}"
		 Create="yes"
		 Resource="%DB_${NAMESPACE}"
		 PublicPermissions=""/>

</Configuration>
</Namespace>

</If>

<!-- Post Ensemble 2010.2: Delete old 'spt' csp application if it exists -->
<If Condition='"${NAMESPACE}"&apos;="IIBA"'>

<Var Name="sptURL" Value="/csp/${NAMESPACE}spt"/>

<If Condition='##class(Security.Applications).Exists("${sptURL}")=1'>
<Invoke Class="Security.Applications" Method="Delete" CheckStatus="true">
<Arg Value="${sptURL}"/>
</Invoke>
</If>
</If>

<!-- Once the namespace exists whether it was created or not-->


<Namespace Name="${NAMESPACE}"
          Create="no"
          >



<Configuration>
<!-- database -->
<Database Name="${NAMESPACE}"
		 Create="no"
		 Resource="%DB_${NAMESPACE}"
		 />

<If Condition='"${NAMESPACE}"&apos;="IIBA"'>

<!-- Class Mapping -->
<ClassMapping Package="IIBAENSEMBLE" 						From="IIBA"/> 

<!-- Global Mapping -->
<GlobalMapping Global="IIBAENSEMBL4D4.SupportPageD883D" 	From="IIBA"/> 
<GlobalMapping Global="IIBAENSEMBLE.Monitor.tblItemsD" 		From="IIBA"/> 
<GlobalMapping Global="IIBAENSEMBL521.TaskItemDefi72BD" 	From="IIBA"/> 
<If Condition='"${pMapLookup}"="1"'>
<!--  These are not used for a new namespace that doesn't share resources with IIBA-->
<GlobalMapping Global="IIBAENSEMBLE.LookupTableD" 			From="IIBA"/> 
<GlobalMapping Global="IIBAENSEMBLE.LookupTableI" 			From="IIBA"/> 
<GlobalMapping Global="IIBAENSEMBLE.Mon676.ItemStatusD" 	From="IIBA"/> 
<GlobalMapping Global="IIBAENSEMBLE.R71D.RelatedValueD" 	From="IIBA"/> 
<GlobalMapping Global="IIBAENSEMBLE.R71D.RelatedValueI" 	From="IIBA"/> 
<GlobalMapping Global="IIBAENSEMBLE.Re71D.RelatedTypeD" 	From="IIBA"/> 
<GlobalMapping Global="IIBAENSEMBLE71D.PrincipalTypeD" 		From="IIBA"/> 
<GlobalMapping Global="IIBAENSEMBLE71D.PrincipalValueD" 	From="IIBA"/> 
<GlobalMapping Global="IIBAENSEMBLE71D.PrincipalValueI" 	From="IIBA"/> 
</If>
</If>
</Configuration>

<If Condition='"${NAMESPACE}"&apos;="IIBA"'>
<!-- Create a CSP application for the namespace -->
<Var Name="URL" Value="/csp/${NAMESPACE}"/>

<!-- Check to see if the support application exists -->
<If Condition='##class(Security.Applications).Exists("${URL}")=0'>

<CSPApplication Url="${URL}"
			   Directory="${CSPDirectory}"
	           Resource="NS_${NAMESPACE}"
	           Grant="%DB_${NAMESPACE}"
	           Description="Support Toolkit"
	           CookiePath="/csp/"
	           AuthenticationMethods="36"
	           Recurse="true"
	 />
</If>

<Invoke Class="IIBAENSEMBLE.Utilities" Method="cspfileAppNameChange" CheckStatus="1">
<Arg Value="${SourceFileDir}/iiba_modalBox_csp.xml"/>
<Arg Value="${URL}"/>
</Invoke>
<Import File="${SourceFileDir}/temp_iiba_modalBox_csp.xml" Flags="ckf"/>

<Invoke Class="%File" Method="Delete" CheckStatus="1">
<Arg Value="${SourceFileDir}/temp_iiba_modalBox_csp.xml"/>
</Invoke>

<Invoke Class="IIBAENSEMBLE.Utilities" Method="cspfileAppNameChange" CheckStatus="1">
<Arg Value="${SourceFileDir}/iiba_CustomImages_csp.xml"/>
<Arg Value="${URL}"/>
</Invoke>
<Import File="${SourceFileDir}/temp_iiba_CustomImages_csp.xml" Flags="ckf"/>

<Invoke Class="%File" Method="Delete" CheckStatus="1">
<Arg Value="${SourceFileDir}/temp_iiba_CustomImages_csp.xml"/>
</Invoke>

<Invoke Class="IIBAENSEMBLE.Utilities" Method="cspfileAppNameChange" CheckStatus="1">
<Arg Value="${SourceFileDir}/iiba_ext_csp.xml"/>
<Arg Value="${URL}"/>
</Invoke>
<Import File="${SourceFileDir}/temp_iiba_ext_csp.xml" Flags="ckf"/>

<Invoke Class="%File" Method="Delete" CheckStatus="1">
<Arg Value="${SourceFileDir}/temp_iiba_ext_csp.xml"/>
</Invoke>

<Invoke Class="IIBAENSEMBLE.Utilities" Method="cspfileAppNameChange" CheckStatus="1">
<Arg Value="${SourceFileDir}/iiba_img_csp.xml"/>
<Arg Value="${URL}"/>
</Invoke>
<Import File="${SourceFileDir}/temp_iiba_img_csp.xml" Flags="ckf"/>

<Invoke Class="%File" Method="Delete" CheckStatus="1">
<Arg Value="${SourceFileDir}/temp_iiba_img_csp.xml"/>
</Invoke>

<Invoke Class="IIBAENSEMBLE.Utilities" Method="cspfileAppNameChange" CheckStatus="1">
<Arg Value="${SourceFileDir}/iiba_csp_items.xml"/>
<Arg Value="${URL}"/>
</Invoke>
<Import File="${SourceFileDir}/temp_iiba_csp_items.xml" Flags="ckf"/>

<Invoke Class="%File" Method="Delete" CheckStatus="1">
<Arg Value="${SourceFileDir}/temp_iiba_csp_items.xml"/>
</Invoke>
</If>

<If Condition='"${NAMESPACE}"="IIBA"'>
<!-- Load IIBA classes -->
<Import File="${SourceFileDir}/iibasupport_cls.xml" Flags="ckf"/>

<!-- Load Global Data for IIBA Toolkit config -->
<Import File="${SourceFileDir}/iibasupport_globals.gof"/>

<!-- Clean up entries for TaskItemDefinition -->
<Invoke Class="IIBAENSEMBLE.Task.TaskItemDefinition" Method="setTaskItemDefinitiontoDefaults"/>
</If>

</Namespace>

<!-- Once the namespace exists whether it was created or not-->
<Namespace Name="%SYS"
          Create="no"
          >
<ClassMapping Package="IIBAENSEMBLE.Task" 						From="IIBA"/> 
<GlobalMapping Global="IIBAENSEMBLE.Monitor.tblItemsD" 		From="IIBA"/> 
<!-- Create Role directly because the installer Role tag doesn't support variables in the Resources name at this point -->
<Invoke Class="Security.Roles" Method="Create" >
<Arg name="Name" Value="NS_${NAMESPACE}"/>
<Arg name="Description" Value="Access to Toolkit applications" />
<Arg name="Resources" Value="${NAMESPACERESOURCES}" />
</Invoke>

</Namespace>

</Manifest>
]]></Data>
</XData>

<Method name="setup">
<Description>
This is a method generator whose code is generated by XGL.</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<CodeMode>objectgenerator</CodeMode>
<FormalSpec><![CDATA[&pVars,pLogLevel:%Integer,pInstaller:%Installer.Installer]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; Let our XGL document generate code for this method. 
	Quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "Installer")
]]></Implementation>
</Method>

<Method name="setupDefaults">
<Description>
Setup defaults for this MyApp system</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pNamespace:%String,pSourceFileDir:%String,pNSDBDir:%String="",pMapLookup:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if $E(pSourceFileDir,$L(pSourceFileDir),$L(pSourceFileDir)) = "\" {
		s pSourceFileDir = $E(pSourceFileDir,1,$L(pSourceFileDir)-1)
	}
	
	set CSPDIR = ##class(%File).ParentDirectoryName(##class(%File).ManagerDirectory())_"CSP\"_pNamespace
	set NamespaceExists = ##class(%SYS.Namespace).Exists(pNamespace)
	if NamespaceExists set pNSDBDir = $P(##class(%SYS.Namespace).GetGlobalDest(pNamespace),"^",2)
	
	Q:pNSDBDir="" "must have namespace directory for new namespaces"
	
	s pVars = ""
	s pVars("NAMESPACE") = pNamespace
	s pVars("NAMESPACERESOURCES") = "%DB_"_pNamespace_":RW,NS_"_pNamespace_":RWU,%DB_IIBA:RW,NS_IIBA:RWU,%DB_CACHESYS:RW"
	s pVars("CSPDirectory") = CSPDIR
	s pVars("NamespaceExists") = NamespaceExists
	s pVars("NSDBDir") = pNSDBDir
	s pVars("SourceFileDir") = pSourceFileDir
	s pVars("pMapLookup") = pMapLookup
				
	Q ..setup(.pVars)
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.LookupTable">
<Description>
Copyright 2007 by Inland Imaging Business Associates
Updated Paul Hegel - Med Fusion Req#1 - Phegel: related to new LookupTableHeader for Permissions
</Description>
<SqlTableName>LookupTable</SqlTableName>
<Super>%Persistent</Super>
<TimeChanged>63574,59600</TimeChanged>
<TimeCreated>60470,39670.053289</TimeCreated>

<Property name="LookupID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Index name="LookupIDIDX">
<Type>bitmap</Type>
<Properties>LookupID</Properties>
</Index>

<Property name="LeftID1">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="LeftID2">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="LeftID3">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Index name="SourceIDX">
<Type>bitmap</Type>
<Properties>LeftID1,LeftID2,LeftID3</Properties>
</Index>

<Property name="RightID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="4000"/>
</Property>

<Index name="RightIDIDX">
<Type>bitmap</Type>
<Properties>RightID</Properties>
</Index>

<UDLText name="T">
<Content><![CDATA[
// Req#1 - Phegel: Add relationship to new LookupTableHeader 

]]></Content>
</UDLText>

<Property name="LookupTableHeader">
<Description>
NOTE: Cardinality refers to the related table. So there will only be one LookupTableHeader for this record.</Description>
<Type>IIBAENSEMBLE.LookupTableHeader</Type>
<Cardinality>one</Cardinality>
<Inverse>LookupTable</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="LookupTableHeaderIndex">
<Properties>LookupTableHeader</Properties>
</Index>

<Method name="CheckExisting">
<Description>
Req#2 - PHegel - Moved the Check existing to here so it's reusable across other methods. Move to using inline sql</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Table:%String,ItemID:%String,LeftID1:%String,LeftID2:%String,LeftID3:%String,RightID:%String,*Exists:%Boolean,*FoundId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set FoundId = ""
	set Exists = 0
	#DIM tResult as %SQL.StatementResult
	
	Q:RightID="" "RightID cannot be <EMPTY>"
	
	set tSQL = 3
	SET tSQL(1) = "select ID from IIBAENSEMBLE.LookupTable "
	set tSQL(2) = "WHERE LeftID1= '"_LeftID1_"' AND RightID= '"_RightID_"' "
	set tSQL(3) = "AND LookupID= '"_Table_"' "
	
	if LeftID2 '= "" {
		set tSQL = 4
		set tSQL(4) = "AND LeftID2= '"_LeftID2_"' "
	}	
	If (LeftID3 '= "") {
		set tSQL = 5
		set tSQL(5) = "AND LeftID3= '"_LeftID3_"' "
	}
	set tStatement = ##class(%SQL.Statement).%New()
	set tSC = tStatement.%Prepare(.tSQL)
	q:$$$ISERR(tSC) tSC

	set tResult = tStatement.%Execute()
	while(tResult.%Next())
	{
		set FoundId = tResult.%Get("ID")	
	}
	
	if (FoundId="" )||(ItemID=FoundId){
		Set Exists=0
		set quitvalue= "Ok"} 
	else {
		set Exists=1
		set quitvalue= "Item already exists with these lookup values"	}
	
	QUIT quitvalue
]]></Implementation>
</Method>

<Method name="Insert">
<Description>
Req#2 - PHegel - create an insert method to make it easier to audit and to Add the Header Value.  
	Checks for Existing match and skips if exists.
		Returns ItemID of inserted row.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Table:%String,LeftID1:%String,LeftID2:%String,LeftID3:%String,RightID:%String,*Exists:%Boolean,*ItemID:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set foundID = ""
	set ItemID = ""
	s tSC = ..CheckExisting(Table,0,LeftID1,LeftID2,LeftID3,RightID, .Exists, .foundID)
	
	If (Exists) {
		set tSC = "exists"
		set ItemID = foundID
	} Else {
	
		set obj = ##class(IIBAENSEMBLE.LookupTable).%New()
		set header = ##class(IIBAENSEMBLE.LookupTableHeader).GetObjectByName(Table)	
		if ('$DATA(header))
			set obj.LookupTableHeader = header
			
		set obj.LookupID = Table
		set obj.LeftID1 = LeftID1
		set obj.LeftID2 = LeftID2
		set obj.LeftID3 = LeftID3
		set obj.RightID = RightID
		
		set tSC = obj.%Save(1)
		set ItemID = obj.%Id()
	}
			
	Quit tSC
]]></Implementation>
</Method>

<Method name="Update">
<Description>
Req#2 - PHegel - create an insert method to make it easier to audit and to Add the Header Value.
	ItemID can be sent in or it can be output as well.
 	Since ItemID hs a value</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Table:%String,LeftID1:%String,LeftID2:%String,LeftID3:%String,RightID:%String,&ItemID:%String=0]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#Dim obj as IIBAENSEMBLE.LookupTable
	
	set exists = 1
	set:ItemID="" ItemID=0
	
	s tSC = ..CheckExisting(Table,ItemID,LeftID1,LeftID2,LeftID3,RightID,.exists,.foundID)
	If ((exists) && (ItemID'=0))
	{
		set tSC = "AlreadyExists"	
	}	
	else
	{
		set ItemID = foundID
		set obj = ##class(IIBAENSEMBLE.LookupTable).%OpenId(ItemID)
		
		set obj.LookupID = Table
		set obj.LeftID1 = LeftID1
		set obj.LeftID2 = LeftID2
		set obj.LeftID3 = LeftID3
		set obj.RightID = RightID
		
		set tSC = obj.%Save()
	}
			
	Quit tSC
]]></Implementation>
</Method>

<Method name="SetRow">
<ClassMethod>1</ClassMethod>
<FormalSpec>Table:%String,LeftID1:%String,LeftID2:%String,LeftID3:%String,RightID:%String,*Exists:%Boolean,*ItemID:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set foundID = ""
	
	s tSC = ..CheckExisting(Table,0,LeftID1,LeftID2,LeftID3,RightID,.Exists, .foundID)
	
	if (Exists)
	{
		set ItemID = foundID
		set tSC = ..Update(Table,LeftID1,LeftID2,LeftID3,RightID,.ItemID)
		Q:$$$ISERR(tSC)
		set tSC = "Updated"
	}
	else
	{
		set tSC = ..Insert(Table,LeftID1,LeftID2,LeftID3,RightID,.ItemID)	
		Q:$$$ISERR(tSC)
		set tSC = "Inserted"
	}
	quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^IIBAENSEMBLE.LookupTableD</DataLocation>
<DefaultData>LookupTableDefaultData</DefaultData>
<IdLocation>^IIBAENSEMBLE.LookupTableD</IdLocation>
<IndexLocation>^IIBAENSEMBLE.LookupTableI</IndexLocation>
<StreamLocation>^IIBAENSEMBLE.LookupTableS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="LookupTableDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>LeftID1</Value>
</Value>
<Value name="3">
<Value>LeftID2</Value>
</Value>
<Value name="4">
<Value>LeftID3</Value>
</Value>
<Value name="5">
<Value>LookupID</Value>
</Value>
<Value name="6">
<Value>RightID</Value>
</Value>
<Value name="7">
<Value>LookupTableHeader</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>1</Selectivity>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
</Property>
<Property name="LeftID1">
<Selectivity>1</Selectivity>
</Property>
<Property name="LeftID2">
<Selectivity>1</Selectivity>
</Property>
<Property name="LeftID3">
<Selectivity>1</Selectivity>
</Property>
<Property name="LookupID">
<Selectivity>1</Selectivity>
</Property>
<Property name="RightID">
<Selectivity>1</Selectivity>
</Property>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.LookupTableHeader">
<Description>
Copyright 2014 by Nuvodia, LLC
Req#1 - Phegel - Requirement #1 - Table Security for Med Fusion 
created by Paul Hegel 2/11/2014
Lookup Table Header will maintain the resource and the Headers for the Column Names as well as the reference to the lookup values.</Description>
<SqlTableName>LookupTableHeader</SqlTableName>
<Super>%Persistent</Super>
<TimeChanged>63327,49056.489564</TimeChanged>
<TimeCreated>60470,39670.053289</TimeCreated>

<Property name="LookupTableName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Index name="LookupTableNameIDX">
<Type>bitmap</Type>
<Properties>LookupTableName</Properties>
</Index>

<Property name="LookupTableDescription">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ColumnNameLeftID1">
<Type>%String</Type>
<InitialExpression>"Left ID 1"</InitialExpression>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ColumnNameLeftID2">
<Type>%String</Type>
<InitialExpression>"Left ID 2"</InitialExpression>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ColumnNameLeftID3">
<Type>%String</Type>
<InitialExpression>"Left ID 3"</InitialExpression>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ColumnNameRightID">
<Type>%String</Type>
<InitialExpression>"Right ID"</InitialExpression>
<Parameter name="MAXLEN" value="255"/>
</Property>

<UDLText name="T">
<Content><![CDATA[
// TODO: find where this is currently stored.  Guessing it's a Global.

]]></Content>
</UDLText>

<Property name="DefaultValue">
<Type>%String</Type>
<Parameter name="MAXLEN" value="4000"/>
</Property>

<Property name="Resource">
<Description>
User needs to have read,write or Use permisions on this resource in order to see it in the drop down list (%All can see all).</Description>
<Type>%String</Type>
<InitialExpression>"LookUpTableAdmin"</InitialExpression>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="LookupTable">
<Description>
NOTE: Cardinality refers to the related table. So there will be many LookupTable rows for this record. 
Relationsip of LookupTable is a Collection and has Collection Functions.</Description>
<Type>IIBAENSEMBLE.LookupTable</Type>
<Cardinality>many</Cardinality>
<Inverse>LookupTableHeader</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="GetIdByName">
<ClassMethod>1</ClassMethod>
<FormalSpec>pLookupTableName:%String</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
   set ID = ""
   
   &sql(SELECT ID
        INTO :ID
        FROM IIBAENSEMBLE.LookupTableHeader where LookupTableName = :pLookupTableName)
        
   q ID
]]></Implementation>
</Method>

<Method name="GetObjectByName">
<Description>
Gets LookupTableObject By the Name of the Table</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pLookupTableName:%String,*tSC:%Status</FormalSpec>
<ReturnType>IIBAENSEMBLE.LookupTableHeader</ReturnType>
<Implementation><![CDATA[
	
	set tSC = $$$OK
	set ID = ..GetIdByName(pLookupTableName)
	
 	if (ID=""){
		s tSC = $$$ERROR("LookupTableName not found: "_ pLookupTableName)
	}
	
	set header = ##class(IIBAENSEMBLE.LookupTableHeader).%OpenId(ID)
	
	QUIT header
]]></Implementation>
</Method>

<Method name="CreateLookupTableHeader">
<Description><![CDATA[
Creates LookupTableHeader from pLookupTableName and Looks for matching LookupTable->LookupID
	If it finds matching records it adds them to the LookupTableHeader
		If there is a row where leftID starts with "." then it replaces Column Names from this row removing leading period.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pLookupTableName:%String,*pID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	
	set pID = ..GetIdByName(pLookupTableName)
	if (pID="")
	{
		//Create record in LookupTableHeader
		set header = ##class(IIBAENSEMBLE.LookupTableHeader).%New()
		set header.LookupTableName = pLookupTableName
		set tSC = header.%Save()
		set pID = header.%Id()
		d header.%UnlockId(pID)
		set header = ""
	}
	set tSC = ..RelateToLookupTable(pID)
	
	QUIT tSC
]]></Implementation>
</Method>

<Method name="CreateLookupTableHeaderFromImport">
<Description>
Use to setup new LookupTableHeader from import based on the SessionId of the Imported tables.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pSessionId:%String,*HeaderIDs:%ListOfDataTypes</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	 
	Set rsHeader = ##class(%ResultSet).%New()
	Do rsHeader.Prepare("SELECT DISTINCT LookupID from IIBAENSEMBLE.LookupTableImport where SessionID = '"_pSessionId_"'")
	Do rsHeader.Execute()
	set count = 1
	
	set HeaderIDs = ##class(%ListOfDataTypes).%New()
	set HeaderIDs.ElementType = "%String"
	
	While (rsHeader.Next(.tSC)){
		set tableName = rsHeader.Get("LookupID")
		set tSC = ..CreateLookupTableHeader(tableName, .id)
		do HeaderIDs.Insert(id)
		q:$$$ISERR(tSC)
	}
	
	quit tSC
]]></Implementation>
</Method>

<Method name="RelateToLookupTable">
<Description><![CDATA[
This method is used to relate the LookupTable records to the Header based on the
LookupTableHeader->LookupTableName matching the LookupTable->LookupID]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	set header = ##class(IIBAENSEMBLE.LookupTableHeader).%OpenId(pID)
	// Relate to LookupTable
	set rsDetail = ##class(%ResultSet).%New()
	Do rsDetail.Prepare("SELECT ID FROM IIBAENSEMBLE.LookupTable where lookupID = '"_header.LookupTableName_"'")
	Do rsDetail.Execute()
	While(rsDetail.Next(.tSC)){
		QUIT:$$$ISERR(tSC)
		set id = rsDetail.Get("ID")
		set detail = ##class(IIBAENSEMBLE.LookupTable).%OpenId(id)
		set tSC = header.LookupTable.Insert(detail)
		//if leftid1 starts with "." then this is the title row.  set the column names.
		if ($E(detail.LeftID1,1,1)=".")
		{ 
			set header.ColumnNameLeftID1 = $E(detail.LeftID1,2,$L(detail.LeftID1))
			
			if ($E(detail.LeftID2,1,1)=".")
				{ set header.ColumnNameLeftID2 = $E(detail.LeftID2,2,$L(detail.LeftID2)) }
			
			if ($E(detail.LeftID3,1,1)=".")
				{ set header.ColumnNameLeftID3 = $E(detail.LeftID3,2,$L(detail.LeftID3)) } 
			
			if ($E(detail.RightID,1,1)=".")
				{ set header.ColumnNameRightID = $E(detail.RightID,2,$L(detail.RightID)) } 
		}
		
		QUIT:$$$ISERR(tSC)
		//w detail.LookupTableHeader.LookupTableName, ":", detail.%Id(),"  status: ", sc,!
	}
	//Get default value from lookup table Set DefaultValue on Header
	set tSC = ..GetDefaultValueFromLookup(header.LookupTableName, .defaultValue)
	QUIT:$$$ISERR(tSC) tSC
	set header.DefaultValue = defaultValue
	set tSC = header.%Save()
	QUIT tSC
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Req#4 - PHegel - used by the delete table method.

]]></Content>
</UDLText>

<Method name="DeleteLookupTableHeaderByName">
<Description>
Used to delete table headers for testing and to later delete the whole table by pLookupTableName</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pLookupTableName:%String,pDeleteRelated:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	
	set ID = ..GetIdByName(pLookupTableName)
	QUIT:ID="" $$$ERROR("LookupTableName not found: "_ pLookupTableName)
	
	set tSC = ..DeleteLookupTableHeaderByID(ID, pDeleteRelated)
	Quit tSC
]]></Implementation>
</Method>

<Method name="GetDefaultValueFromLookup">
<ClassMethod>1</ClassMethod>
<FormalSpec>pLookupTableName:%String,*pDefaultValue:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	set pDefaultValue = ""
	
	#DIM tResult as %SQL.StatementResult

	set tSQL = 3
	SET tSQL(1) = "select RightID from IIBAENSEMBLE.LookupTable "
	set tSQL(2) = "WHERE LeftID1= 'DefaultValue' AND LeftID2= 'DefaultValue' AND LeftID3= 'DefaultValue' "
	set tSQL(3) = "AND LookupID= '"_pLookupTableName_"' "

	set tStatement = ##class(%SQL.Statement).%New()
	set tSC = tStatement.%Prepare(.tSQL)
	q:$$$ISERR(tSC) tSC

	set tResult = tStatement.%Execute()
	while(tResult.%Next())
	{
		set pDefaultValue = tResult.%Get("RightID")	
	}
	s:'$DATA(pDefaultValue) pDefaultValue=""
	
	QUIT $$$OK
]]></Implementation>
</Method>

<Method name="SetDefaultValue">
<ClassMethod>1</ClassMethod>
<FormalSpec>Table:%String,DefValue:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<SqlProc>1</SqlProc>
<Implementation><![CDATA[
	#dim tSC as %Status = $$$OK
	// Set the Default value based on Table Name
	set defaultValue = ##class(IIBAENSEMBLE.Functions).StringReplace(DefValue,"'","''")
	
	#dim obj as IIBAENSEMBLE.LookupTableHeader = ..GetObjectByName(Table)
	set obj.DefaultValue = DefValue
	set tSC = obj.%Save()
	
	quit tSC
]]></Implementation>
</Method>

<Method name="DeleteLookupTableHeaderByID">
<Description>
Used to delete table headers for testing and to later delete the whole table by pID (OID)</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String,pDeleteRelated:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	
	//first remove relatioships or Delete records related to Table Header
	set header = ##class(IIBAENSEMBLE.LookupTableHeader).%OpenId(pID)

	// iterate over the details and print their data
	Set key = ""
	#dim detail as IIBAENSEMBLE.LookupTable
	
	do {
		set detail = header.LookupTable.GetNext(.key)
		quit:detail="" 
		set rowID = detail.%Id()
		// Always - Remove relationship only (don't delete object if pDeleted=0)
		s id = header.LookupTable.Remove(detail)	
		//Are we Deleting related?
		If (pDeleteRelated=1) {
			set tSC = ##class(IIBAENSEMBLE.LookupTable).%UnlockId(rowID)
			set detail = ""
			// YES - Delete related detail row
			set tSC = ##class(IIBAENSEMBLE.LookupTable).%DeleteId(rowID, 1)
			QUIT:$$$ISERR(tSC)
		}
		set tSC = header.%Save()
		QUIT:$$$ISERR(tSC)
	} While (key'="")
	QUIT:$$$ISERR(tSC) tSC
	
	//second - Delete Header 
	set header = ""
	s tSC = ##class(IIBAENSEMBLE.LookupTableHeader).%DeleteId(pID)
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="GetListByPermissions">
<Description><![CDATA[
Gets list of LookupTableHeaders where User has R,W,U persmission on the table Resource
To give users access.
1. Resource needs to be created in System->System Management->Resources
2. Resource needs to be added to an existing or new Role in System->System Management->Roles with Use permissions
3. Add New Role to User, otherwise the use may already have access to existing Role, if not Add the Role to user.
4. User also needs access to the Resource: LookUpTableAdmin with Read access only in order to see this list can be added 
   to above role or create a new role that can be added to users that use table. The default resource for a 
   LookupTable is LookUpTableAdmin, so they will need Read and Use access to see it.
Note: This list controls the users ability to see the table. They will need to have W permissions on the table to modify it.]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*pListOfHeaders:%ListOfObjects</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set pListOfHeaders = ##class(%ListOfObjects).%New()
	set tSC = $$$OK
	
	//select list of names
	set rsHeader = ##class(%ResultSet).%New()
	Do rsHeader.Prepare("SELECT ID, Resource FROM IIBAENSEMBLE.LookupTableHeader Order BY LookupTableName")
	Do rsHeader.Execute()
	While(rsHeader.Next(.tSC)){
		QUIT:$$$ISERR(tSC)
		set resource = rsHeader.Get("Resource")
		
		// User must have Use access to the resource in order to see it in this list
		if ##class(%SYSTEM.Security).Check(resource, "Use")
		{
			set id = rsHeader.Get("ID")
			set header = ##class(IIBAENSEMBLE.LookupTableHeader).%OpenId(id)
			set tSC = pListOfHeaders.Insert(header)
			QUIT:$$$ISERR(tSC)
		}
		QUIT:$$$ISERR(tSC)
	}
	QUIT tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^IIBAENSEMBLE.LookupTable435CD</DataLocation>
<DefaultData>LookupTableHeaderDefaultData</DefaultData>
<IdLocation>^IIBAENSEMBLE.LookupTable435CD</IdLocation>
<IndexLocation>^IIBAENSEMBLE.LookupTable435CI</IndexLocation>
<StreamLocation>^IIBAENSEMBLE.LookupTable435CS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="LookupTableHeaderDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>LookupTableName</Value>
</Value>
<Value name="3">
<Value>LookupTableDescription</Value>
</Value>
<Value name="4">
<Value>ColumnNameLeftID1</Value>
</Value>
<Value name="5">
<Value>ColumnNameLeftID2</Value>
</Value>
<Value name="6">
<Value>ColumnNameLeftID3</Value>
</Value>
<Value name="7">
<Value>ColumnNameRightID</Value>
</Value>
<Value name="8">
<Value>TableResource</Value>
</Value>
<Value name="9">
<Value>LookupTable</Value>
</Value>
<Value name="10">
<Value>Resource</Value>
</Value>
<Value name="11">
<Value>DefaultValue</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.LookupTableImport">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<SqlTableName>LookupTableImport</SqlTableName>
<Super>%Persistent</Super>
<TimeChanged>62546,33655.243742</TimeChanged>
<TimeCreated>60470,39670.053289</TimeCreated>

<Property name="SessionID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="LookupID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="LeftID1">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="LeftID2">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="LeftID3">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="RightID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="4000"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^IIBAENSEMBLE.LookupTableI6DDD</DataLocation>
<DefaultData>LookupTableImportDefaultData</DefaultData>
<IdLocation>^IIBAENSEMBLE.LookupTableI6DDD</IdLocation>
<IndexLocation>^IIBAENSEMBLE.LookupTableI6DDI</IndexLocation>
<StreamLocation>^IIBAENSEMBLE.LookupTableI6DDS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="LookupTableImportDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>LeftID1</Value>
</Value>
<Value name="3">
<Value>LeftID2</Value>
</Value>
<Value name="4">
<Value>LeftID3</Value>
</Value>
<Value name="5">
<Value>LookupID</Value>
</Value>
<Value name="6">
<Value>RightID</Value>
</Value>
<Value name="7">
<Value>SessionID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.MRNConversion.BP">
<Description>
</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>63726,34993.449845</TimeChanged>
<TimeCreated>63525,36781.161808</TimeCreated>

<XData name="BPL">
<Description>
BPL Definition</Description>
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process language='objectscript' request='Ens.Request' height='2000' width='2000' >
<context>
<property name='HL7message' type='EnsLib.HL7.Message' instantiate='0' >
</property>
</context>
<sequence xend='200' yend='1150' >
<trace name='Start' value='"Entering Temp Merge processing"' xpos='200' ypos='250' />
<if name='HL7 message?' condition='$CLASSNAME(request)="EnsLib.HL7.Message"' xpos='200' ypos='350' xend='200' yend='1050' >
<true>
<code name='Check Pocessed Status' xpos='335' ypos='500' >
<![CDATA[
	// get the HL7 merge message from the Merge list.
	
	// declare variables
	#dim tSC as %Status = $$$OK
	
	//set OrgCode = request.GetValueAt("MSH:SendingFacility")
	set OrgCode = "TSH"
	set NewMRN=request.GetValueAt("PID:PatientIDInternalID(1).ID")
	
	// get indexed id if it exists.
	set tSC =##class(IIBAENSEMBLE.MRNConversion.Queue).RefIDExists(OrgCode,NewMRN,.id) Quit:tSC'=$$$OK
	set tMsg=##class(IIBAENSEMBLE.MRNConversion.Queue).RefIDOpen(id,1)
	
	// get mrn change message and mark processedtime.
	if ##Class(%Library.TimeStamp).IsValid(tMsg.ProcessedTime) '= 1
	{
		set context.HL7message=tMsg.ConversionMsg
		set tMsg.ProcessedTime=$ZDT($H,3)
		do tMsg.%Save()
	}	
	
 ]]]]><![CDATA[>
</code>
<if name='Processed?' condition='context.HL7message&apos;=""' xpos='335' ypos='600' xend='335' yend='850' >
<true>
<call name='Send Conversion HL7' target='@process.MergeTargetConfig' async='1' xpos='470' ypos='750' >
<request type='Ens.Request' >
<assign property="callrequest" value="context.HL7message" action="set" />
</request>
</call>
</true>
</if>
<call name='Send Original hl7' target='@process.AdtTargetConfig' async='1' xpos='335' ypos='950' >
<request type='Ens.Request' >
<assign property="callrequest" value="request" action="set" />
</request>
</call>
</true>
</if>
</sequence>
</process>
]]></Data>
</XData>

<Property name="MergeTargetConfig">
<Type>%String</Type>
</Property>

<Property name="AdtTargetConfig">
<Type>%String</Type>
</Property>

<Parameter name="SETTINGS">
<Type>%String</Type>
<Default><![CDATA[MergeTargetConfig:Additional:selector?multiSelect=0&context={Ens.ContextSearch/ProductionItems?targets=1&productionName=@productionId},AdtTargetConfig:Additional:selector?multiSelect=0&context={Ens.ContextSearch/ProductionItems?targets=1&productionName=@productionId}]]></Default>
</Parameter>

<Method name="OnGetConnections">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pArray:%String,item:Ens.Config.Item</FormalSpec>
<Implementation><![CDATA[
	Set (tValue,tIndex)="" 
	
	For { 
		Set tIndex = item.Settings.Next(tIndex) Quit:tIndex=""
		Set tSetting = item.Settings.GetAt(tIndex)
		//If ##class(Ens.Util.Functions).In(tSetting.Name,"AdtTargetConfig,MergeTargetConfig") {
		If ((tSetting.Name="AdtTargetConfig") || ( tSetting.Name="MergeTargetConfig")) {
			if (tSetting.Value'="") {
				set:tValue'="" tValue=tValue_","
				Set tValue=tValue_tSetting.Value
			}
		}
	}
	
	For i=1:1:$L(tValue,",") { 
		Set tOne=$P(tValue,",",i)
		If (tOne '= "" ) {
			Set pArray(tOne)=""
		}
	}
	Quit
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>BPDefaultData</DefaultData>
<Data name="BPDefaultData">
<Subscript>"BP"</Subscript>
<Value name="1">
<Value>MergeTargetConfig</Value>
</Value>
<Value name="2">
<Value>AdtTargetConfig</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.MRNConversion.BS">
<Super>Ens.BusinessService,Ens.ContextSearch</Super>
<TimeChanged>63706,8190.181695</TimeChanged>
<TimeCreated>63616,43960.992764</TimeCreated>

<Parameter name="ADAPTER">
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Property name="TargetConfigNames">
<Type>%String</Type>
</Property>

<Property name="MessageCount">
<Type>%String</Type>
</Property>

<Property name="FacilityCodes">
<Description>
Select OrgCodes to process.</Description>
<Type>%String</Type>
</Property>

<Parameter name="SETTINGS">
<Type>%String</Type>
<Default><![CDATA[TargetConfigNames:Additional:selector?multiSelect=0&context={Ens.ContextSearch/ProductionItems?targets=1&productionName=@productionId},MessageCount,FacilityCodes:Additional:selector?multiSelect=0&context={IIBAENSEMBLE.MRNConversion.BS/ClientSearch?targets=1&productionName=@productionId}]]></Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:%RegisteredObject,pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	s tSC=$$$OK
	s rs=##class(%ResultSet).%New()
	if $L(..FacilityCodes,",")'=1
	{
		s tAndOr = $Replace(..FacilityCodes,",","' OR OrgCode = '")_"'"
	}
	else
	{
		s tAndOr = ..FacilityCodes_"'"
	}
	s qry="select top "_..MessageCount_" * from IIBAENSEMBLE_MRNConversion.Queue where  ProcessedTime is NULL AND (OrgCode = '"_tAndOr_") Order By LastServiceDate DESC"
	$$$TRACE(qry)
	d rs.Prepare(qry)
	d rs.Execute()
	
	while (rs.Next()) {
		
		s RefID=rs.Get("ID")
		$$$TRACE("Processing MRN: "_RefID)
		if (RefID'="") {
			s MergeRequest=##class(IIBAENSEMBLE.MRNConversion.Queue).%OpenId(RefID)
			s MergeRequest.ProcessedTime = $ZDT($H,3)
			d MergeRequest.%Save()
			For i=1:1:$L(..TargetConfigNames,",") {
				S target=$P(..TargetConfigNames,",",i)
				$$$TRACE("Sending HL7 Message '"_RefID_"' To '"_target_"'.")
				if MergeRequest.RegistrationMsg '= ""
				{
					set tSC=..SendRequestAsync(target,MergeRequest.RegistrationMsg)
				}
				set tSC=..SendRequestAsync(target,MergeRequest.ConversionMsg)
				Q:$$$ISERR(tSC)
			}
		}
		
	
	}
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="OnGetConnections">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pArray:%String,item:Ens.Config.Item</FormalSpec>
<Implementation><![CDATA[
	Set (tValue,tIndex)="" 
	For { 
		Set tIndex = item.Settings.Next(tIndex) Quit:tIndex=""
		Set tSetting = item.Settings.GetAt(tIndex)
		If tSetting.Name="TargetConfigNames" {
			Set tValue=tSetting.Value
		}
	}
	
	For i=1:1:$L(tValue,",") { 
		Set tOne=$P(tValue,",",i)
		If (tOne '= "" ) {
			Set pArray(tOne)=""
		}
	}
	Quit
]]></Implementation>
</Method>

<Method name="ClientSearch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[*pCaption:%String,*pTopResults,*pResults,&pParms:%String,pSearchKey:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s RS = ##class(%ResultSet).%New()
	s sql = "Select Distinct OrgCode from IIBAENSEMBLE_MRNConversion.Queue where ProcessedTime is NULL"
	do RS.Prepare(sql)
	do RS.Execute()
	s pResults = 0
	s tcount = 0
		
	while RS.Next()
	{
		s pResults = pResults + 1
		&sql(select Count("OrgCode") into :tcount from IIBAENSEMBLE_MRNConversion.Queue where OrgCode = :RS.Get("OrgCode"))
		s pResults(pResults) = RS.Get("OrgCode")
	
		//RS.Get("OrgCode")_"("_tcount_")"
		s pCaption = "Please Select OrgCodes"
	}
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.MRNConversion.HL7ADTMessage">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>63630,43965.955391</TimeChanged>
<TimeCreated>63614,43479.462687</TimeCreated>
<DependsOn>IIBAENSEMBLE.MRNConversion.Queue,EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='IIBAENSEMBLE.MRNConversion.Queue' targetClass='EnsLib.HL7.Message' targetDocType='2.3:ADT_A06' create='new' language='objectscript' >
<code>
<![CDATA[ 
	// ******* Declare Variables *********
]]]]><![CDATA[></code>
<assign value='source.OrgCode' property='OrgID' action='set' />
<assign value='"A06"' property='Trigger' action='set' />
<assign value='"1158"' property='CxRint' action='set' >
<annotation>Need to load balance between CxR interfaces. </annotation>
</assign>
<code>
<![CDATA[ 
	// ******* MSH *********
]]]]><![CDATA[></code>
<assign value='OrgID' property='target.{MSH:SendingFacility}' action='set' />
<assign value='"Inland Imaging"' property='target.{MSH:ReceivingApplication}' action='set' />
<assign value='source.ProcessedTime' property='target.{MSH:DateTimeofMessage}' action='set' />
<assign value='"ADT"' property='target.{MSH:MessageType.messagetype}' action='set' />
<assign value='Trigger' property='target.{MSH:MessageType.triggerevent}' action='set' />
<assign value='source.ConversionMsg.ParentId' property='target.{MSH:MessageControlID}' action='set' />
<assign value='"P"' property='target.{MSH:ProcessingID}' action='set' />
<assign value='"2.3"' property='target.{MSH:VersionID}' action='set' />
<assign value='CxRint' property='target.{MSH:CountryCode}' action='set' />
<assign value='"RADIANT"' property='target.{MSH:SendingApplication}' action='set' />
<code>
<![CDATA[ 
	// ******* EVN *********
]]]]><![CDATA[></code>
<assign value='Trigger' property='target.{EVN:EventTypeCode}' action='set' />
<code>
<![CDATA[ 
	// ******* PID *********
]]]]><![CDATA[></code>
<assign value='source.NewMRN' property='target.{PID:PatientIDInternalID(1).ID}' action='set' />
<assign value='OrgID' property='target.{PID:PatientIDInternalID(1).assigningfacility}' action='set' />
<assign value='source.lName' property='target.{PID:PatientName.familyname}' action='set' />
<assign value='source.fName' property='target.{PID:PatientName.givenname}' action='set' />
<assign value='source.Sex' property='target.{PID:Sex}' action='set' />
<assign value='$P(source.DOB,"/",3)_$CASE($L($P(source.DOB,"/",1)),2:$P(source.DOB,"/",1),1:"0"_$P(source.DOB,"/",1),:$P(source.DOB,"/",1))_$CASE($L($P(source.DOB,"/",1)),2:$P(source.DOB,"/",2),1:"0"_$P(source.DOB,"/",2),:$P(source.DOB,"/",2))' property='target.{PID:DateofBirth.timeofanevent}' action='set' />
<code>
<![CDATA[ 
	// ******* MRG *********
]]]]><![CDATA[></code>
</transform>
]]></Data>
</XData>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>
</Class>


<Class name="IIBAENSEMBLE.MRNConversion.HL7Message">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>63699,42831.416542</TimeChanged>
<TimeCreated>63614,43479.462687</TimeCreated>
<DependsOn>IIBAENSEMBLE.MRNConversion.Queue,EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='IIBAENSEMBLE.MRNConversion.Queue' targetClass='EnsLib.HL7.Message' targetDocType='2.3:ADT_A18' create='new' language='objectscript' >
<code>
<![CDATA[ 
	// ******* Declare Variables *********
]]]]><![CDATA[></code>
<assign value='source.OrgCode' property='OrgID' action='set' />
<assign value='"A18"' property='Trigger' action='set' />
<assign value='"1058"' property='CxRint' action='set' >
<annotation>Need to load balance between CxR interfaces. </annotation>
</assign>
<code>
<![CDATA[ 
	// ******* MSH *********
]]]]><![CDATA[></code>
<assign value='OrgID' property='target.{MSH:SendingFacility}' action='set' />
<assign value='"Inland Imaging"' property='target.{MSH:ReceivingApplication}' action='set' />
<assign value='source.ProcessedTime' property='target.{MSH:DateTimeofMessage}' action='set' />
<assign value='"ADT"' property='target.{MSH:MessageType.messagetype}' action='set' />
<assign value='Trigger' property='target.{MSH:MessageType.triggerevent}' action='set' />
<assign value='source.ConversionMsg.ParentId' property='target.{MSH:MessageControlID}' action='set' />
<assign value='"P"' property='target.{MSH:ProcessingID}' action='set' />
<assign value='"2.3"' property='target.{MSH:VersionID}' action='set' />
<assign value='##Class(ImagecastPacs.Functions).ConnectRLoadBalance(source.NewMRN)' property='target.{MSH:CountryCode}' action='set' />
<assign value='"RADIANT"' property='target.{MSH:SendingApplication}' action='set' />
<code>
<![CDATA[ 
	// ******* EVN *********
]]]]><![CDATA[></code>
<assign value='Trigger' property='target.{EVN:EventTypeCode}' action='set' />
<code>
<![CDATA[ 
	// ******* PID *********
]]]]><![CDATA[></code>
<assign value='source.NewMRN' property='target.{PID:PatientIDInternalID(1).ID}' action='set' />
<assign value='OrgID' property='target.{PID:PatientIDInternalID(1).assigningfacility}' action='set' />
<assign value='source.lName' property='target.{PID:PatientName.familyname}' action='set' />
<assign value='source.fName' property='target.{PID:PatientName.givenname}' action='set' />
<assign value='source.Sex' property='target.{PID:Sex}' action='set' />
<assign value='$P(source.DOB,"/",3)_$CASE($L($P(source.DOB,"/",1)),2:$P(source.DOB,"/",1),1:"0"_$P(source.DOB,"/",1),:$P(source.DOB,"/",1))_$CASE($L($P(source.DOB,"/",1)),2:$P(source.DOB,"/",2),1:"0"_$P(source.DOB,"/",2),:$P(source.DOB,"/",2))' property='target.{PID:DateofBirth.timeofanevent}' action='set' />
<code>
<![CDATA[ 
	// ******* MRG *********
]]]]><![CDATA[></code>
<assign value='source.OldMRN' property='target.{MRG:PriorPatientIDInternal(1)}' action='set' />
</transform>
]]></Data>
</XData>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>
</Class>


<Class name="IIBAENSEMBLE.MRNConversion.Queue">
<Super>%Persistent</Super>
<TimeChanged>63691,43859.82783</TimeChanged>
<TimeCreated>63600,32693.808838</TimeCreated>

<Property name="InputTime">
<Type>%TimeStamp</Type>
</Property>

<Property name="ProcessedTime">
<Type>%TimeStamp</Type>
</Property>

<Property name="OrgCode">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="OldMRN">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="NewMRN">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="fName">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="lName">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="Sex">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="DOB">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="ConversionMsg">
<Type>EnsLib.HL7.Message</Type>
</Property>

<Property name="RegistrationMsg">
<Type>EnsLib.HL7.Message</Type>
</Property>

<Index name="ProcessedTime">
<Properties>ProcessedTime</Properties>
</Index>

<Index name="RefID">
<IdKey>1</IdKey>
<Properties>OrgCode,NewMRN</Properties>
<Unique>1</Unique>
</Index>

<Index name="OldMRN">
<Properties>OrgCode,OldMRN</Properties>
</Index>

<Property name="LastServiceDate">
<Type>%TimeStamp</Type>
</Property>

<Method name="AddRecord">
<ClassMethod>1</ClassMethod>
<FormalSpec>Version:%String,OrgCode:%String,OldMRN:%String,NewMRN:%String,fName:%String,lName:%String,DOB:%String,Sex:%String,LastServiceDate:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tSC As %Status = $$$OK
	Set ADTmsg = ""
	//Save current object
	Set tStore = ##class(IIBAENSEMBLE.MRNConversion.Queue).%New()
	Set tStore.OrgCode = OrgCode
	Set tStore.OldMRN = OldMRN
	Set tStore.NewMRN = NewMRN
	Set tStore.fName = fName
	Set tStore.lName = lName
	Set tStore.DOB = DOB
	Set tStore.Sex = Sex
	Set tStore.InputTime = $ZDATETIME($HOROLOG,3,1)
	//translate to date here and set to default date if invalid 
	Set tStore.LastServiceDate = $ZD($ZDH(LastServiceDate,1,,,,,,,"62947"),3)
	Set tSC = tStore.%Save() q:'tSC tSC
	//update current object with hl7 message using dtl.
	Set tSC = ##class(IIBAENSEMBLE.MRNConversion.HL7Message).Transform(tStore,.HL7msg)
	if Version = "44"
	{
		Set tSC = ##class(IIBAENSEMBLE.MRNConversion.HL7ADTMessage).Transform(tStore,.ADTmsg)
	}
	Set tSC = tStore.%Open()
	Set tStore.RegistrationMsg = ADTmsg
	Set tStore.ConversionMsg = HL7msg
	Set tSC = tStore.%Save()
	Quit tSC
]]></Implementation>
</Method>

<Method name="DeleteQueue">
<ClassMethod>1</ClassMethod>
<FormalSpec>OrgCode:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set QueueRS = ##class(%ResultSet).%New()
    set sql = "select %ID "
    set sql = sql_"from IIBAENSEMBLE_MRNConversion.Queue "
    set sql = sql_"WHERE OrgCode = '"_OrgCode_"'"
    do QueueRS.Prepare(sql)
    do QueueRS.Execute()

    While QueueRS.Next(){
                                
        set ItemID = QueueRS.Get("ID")
                                                                        
        &sql(DELETE FROM IIBAENSEMBLE_MRNConversion.Queue WHERE %ID = :ItemID)
        &sql(COMMIT)
                                
        if SQLCODE '=0{
           w "Failed on: "_ItemID,!
           
               }
                                
        }
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^IIBAENSEMBLE.MRNConvF37D.QueueD</DataLocation>
<DefaultData>QueueDefaultData</DefaultData>
<IdLocation>^IIBAENSEMBLE.MRNConvF37D.QueueD</IdLocation>
<IndexLocation>^IIBAENSEMBLE.MRNConvF37D.QueueI</IndexLocation>
<StreamLocation>^IIBAENSEMBLE.MRNConvF37D.QueueS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="QueueDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>OnInputTime</Value>
</Value>
<Value name="3">
<Value>ProcessedTime</Value>
</Value>
<Value name="4">
<Value>OrgCode</Value>
</Value>
<Value name="5">
<Value>OldMRN</Value>
</Value>
<Value name="6">
<Value>fName</Value>
</Value>
<Value name="7">
<Value>lName</Value>
</Value>
<Value name="8">
<Value>Sex</Value>
</Value>
<Value name="9">
<Value>DOB</Value>
</Value>
<Value name="10">
<Value>ConversionMsg</Value>
</Value>
<Value name="11">
<Value>NewMRN</Value>
</Value>
<Value name="12">
<Value>InputTime</Value>
</Value>
<Value name="13">
<Value>RegistrationMsg</Value>
</Value>
<Value name="14">
<Value>LastServiceDate</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.MRNConversion.WWGH">
<Super>Ens.DataTransformDTL</Super>
<TimeChanged>63693,46692.506301</TimeChanged>
<TimeCreated>63687,38662.368809</TimeCreated>
<DependsOn>EnsLib.HL7.Message</DependsOn>

<XData name="DTL">
<XMLNamespace>http://www.intersystems.com/dtl</XMLNamespace>
<Data><![CDATA[
<transform sourceClass='EnsLib.HL7.Message' targetClass='EnsLib.HL7.Message' sourceDocType='WWGH:MDM_T02' targetDocType='WWGH:MDM_T02' create='copy' language='objectscript' >
<assign value='source.{PID:PatientIDInternalID(1).ID}' property='MRN' action='set' />
<assign value='"WWG"' property='OrgCode' action='set' />
<code>
<![CDATA[ 
	// *  Assign NewMRN if OldMRN is being sent in Result message.
	
	//check if RefID exists.
	
	if (##class(IIBAENSEMBLE.MRNConversion.Queue).OldMRNExists(OrgCode,MRN,.RefId)=1) {
		
		set tMsg=##class(IIBAENSEMBLE.MRNConversion.Queue).RefIDOpen(RefId,1)
		set MRN = tMsg.NewMRN
		
	}
	
		
]]]]><![CDATA[></code>
<assign value='MRN' property='target.{PID:PatientIDInternalID(1).ID}' action='set' />

</transform>
]]></Data>
</XData>

<Parameter name="IGNOREMISSINGSOURCE">
<Default>1</Default>
</Parameter>

<Parameter name="REPORTERRORS">
<Default>1</Default>
</Parameter>
</Class>


<Class name="IIBAENSEMBLE.Monitor.AlertExceptions">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>62546,33655.314006</TimeChanged>
<TimeCreated>60932,34437.942577</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="ExceptionId">
<Type>%Integer</Type>
<Required>1</Required>
</Property>

<Property name="ItemName">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="StartDttm">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="EndDttm">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="Comment">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^IIBAENSEMBL676.AlertExcepti61AD</DataLocation>
<DefaultData>AlertExceptionsDefaultData</DefaultData>
<IdLocation>^IIBAENSEMBL676.AlertExcepti61AD</IdLocation>
<IndexLocation>^IIBAENSEMBL676.AlertExcepti61AI</IndexLocation>
<StreamLocation>^IIBAENSEMBL676.AlertExcepti61AS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="AlertExceptionsDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Comment</Value>
</Value>
<Value name="3">
<Value>EndDttm</Value>
</Value>
<Value name="4">
<Value>ItemName</Value>
</Value>
<Value name="5">
<Value>StartDttm</Value>
</Value>
<Value name="6">
<Value>ExceptionId</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.Monitor.AlertNotification">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessMetric</Super>
<TimeChanged>63601,22648.37218</TimeChanged>
<TimeCreated>60600,50171.543673</TimeCreated>

<Property name="TargetConfigNames">
<Type>%String</Type>
</Property>

<Parameter name="SETTINGS">
<Type>%String</Type>
<Default>TargetConfigNames</Default>
</Parameter>

<Method name="OnGetConnections">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pArray:%String,item:Ens.Config.Item</FormalSpec>
<Implementation><![CDATA[
	Set (tValue,tIndex)="" 
	For { 
		Set tIndex = item.Settings.Next(tIndex) Quit:tIndex=""
		Set tSetting = item.Settings.GetAt(tIndex)
		If tSetting.Name="TargetConfigNames" {
			Set tValue=tSetting.Value
		}
	}
	
	For i=1:1:$L(tValue,",") { 
		Set tOne=$P(tValue,",",i)
		If (tOne '= "" ) {
			Set pArray(tOne)=""
		}
	}
	Quit
]]></Implementation>
</Method>

<Method name="OnCalculateMetrics">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	//To Do
	
		/* 
		Author: Ben Graham, (Schedule logic: Matt Simpson)
		Date: Nov 2006
		
		Purpose: Alert users of interface exceptions specified in the monitoring table
		
		Notes:
			- Each type of condition has separate code (if block) that checks the alert conditon.
			    When a new type is added, you must also add a code block for evaluatting the condition.
		
		General Logic:
			Get the name of the production
			Get list of interfaces items in the production
			Get all availble statistics for the production
			Get list of interfaces (items) and parameters to be monitored (Active only)
			
			For each item
				For each parameter
					If parameter schedule indicates the parameter should be checked now
						Get info regarding last status change and alert reported
					
						If the status has changed
							record the new status and the time the changed was identified
						
						Else
							If there is an alert condition
								If the condition persisted longer than the alert duration
									If the time since the last alert is greater than the alert duration
										Report the alert
										Update the alert Time
									End
								End
							End
						End
					End
				End
			End
	
	
		4/18/2007 - Adding Holiday Processing. bg
		
		4/19/2007 - Adding Actions to be performed on an alert. bg
		
		10/4/2007 - Adding troubled boolean flag in status table to indicate current troubled items. ms
		
		11/20/2007 - Adding Alert Exceptions - Define date/time exceptions for alerts
		
		
	
	*/
	
	// *****  Get the name of the production    *******
	Set ProductionName=""
	Set ProductionStatus=""
	set status = ##class(Ens.Director).GetProductionStatus(.ProductionName,.ProductionStatus)

	$$$TRACE("1.Production: "_ProductionName)
	
	// *****  Get list of items and metrics  ********
	
	K HostStatus
	K troubled
	$$$TRACE("2.Collecting List of items...")
	// Get the list of interfaces (items) from the production class
	set production=##class(Ens.Config.Production).%OpenId(ProductionName)
	
	for i=1:1:(production.Items.Count()+0) {
  
  		// collect item settings
  		s item=production.Items.GetAt(i)
 
  		s name=item.Name
  		S HostStatus(name)=item.Category_"^"_item.ClassName_"^"_i
  		S HostStatus(name,"Category")=item.Category
  		S HostStatus(name,"RunningStatus")=item.Enabled+0
  		S HostStatus(name,"ClassName")=item.ClassName
  		S HostStatus(name,"ID")=i 
  		
 	}

	 
	$$$TRACE("3.Collecting statistics...")
 	set rs=##class(%ResultSet).%New("Ens.Util.Statistics:EnumerateHostStatus")
 	Set r=rs.Execute()
 
	while rs.Next() {
		Set name=rs.Get("Name")
		// $$$TRACE("--> Statistics for: "_name)
 		Set HostStatus(name,"Status")=rs.Get("Status")
  		Set HostStatus(name,"AdapterState")=rs.Get("AdapterState")
  		Set HostStatus(name,"LastAction")=rs.Get("LastActivity")
  		Set HostStatus(name,"ElapsedTime")=rs.Get("ElapsedTime")
  		set HostStatus(name,"Queue")=rs.Get("Queue")+0
  		Set HostStatus(name,"Count")=rs.Get("Count")+0
	}

	$$$TRACE("4.Get list of items and parameters that are monitored")
	K ParamList
	Set rs=##class(%ResultSet).%New()
	set ParamSelect = ""
	set ParamSelect = ParamSelect_"Select "
	set ParamSelect = ParamSelect_"p.ID, p.Active, p.AlertDuration, p.ItemName, p.NotificationEmail, p.EmailText, p.Parameter, p.Threshold, p.ThresholdDuration, p.HolidayOnly, p.Holidays, "
	set ParamSelect = ParamSelect_"s.HourStart, s.HourEnd, s.M, s.T, s.W, s.Th, s.F, s.Sa, s.Su "
	set ParamSelect = ParamSelect_"from IIBAENSEMBLE_Monitor.ItemParameters P "
	set ParamSelect = ParamSelect_"inner join IIBAENSEMBLE_Monitor.tblSchedules S "
	set ParamSelect = ParamSelect_"on P.ID = S.ParameterID "
	set ParamSelect = ParamSelect_"where P.Active=1 order by P.ItemName"
	Do rs.Prepare(ParamSelect)
	Do rs.Execute()
	
	While(rs.Next(.sc)) {
		
		If ($System.Status.IsOK(sc) )  {
			Set Name=rs.Data("ItemName")
			Set ParamList(Name)=1
			Set Parameter=rs.Data("Parameter")
			Set ParamList(Name,Parameter,"ID")=rs.Data("ID")
			Set ParamList(Name,Parameter,"Threshold")=rs.Data("Threshold")
			Set ParamList(Name,Parameter,"ThresholdDuration")=rs.Data("ThresholdDuration")
			Set ParamList(Name,Parameter,"AlertDuration")=rs.Data("AlertDuration")
			Set ParamList(Name,Parameter,"Schedule","HourStart")=rs.Data("HourStart")
			Set ParamList(Name,Parameter,"Schedule","HourEnd")=rs.Data("HourEnd")
			Set ParamList(Name,Parameter,"Schedule",0)=rs.Data("Su")
			Set ParamList(Name,Parameter,"Schedule",1)=rs.Data("M")
			Set ParamList(Name,Parameter,"Schedule",2)=rs.Data("T")
			Set ParamList(Name,Parameter,"Schedule",3)=rs.Data("W")
			Set ParamList(Name,Parameter,"Schedule",4)=rs.Data("Th")
			Set ParamList(Name,Parameter,"Schedule",5)=rs.Data("F")
			Set ParamList(Name,Parameter,"Schedule",6)=rs.Data("Sa")
			Set ParamList(Name,Parameter,"EMail")=rs.Data("NotificationEmail")
			Set ParamList(Name,Parameter,"EMailText")=rs.Data("EmailText")
			Set ParamList(Name,Parameter,"HolidayOnly")=rs.Data("HolidayOnly")
			Set ParamList(Name,Parameter,"Holidays")=rs.Data("Holidays")

		}
	}
	
	// *** Now check current status - and report alerts ***
	$$$TRACE("6.Check for Alerts that need to be reported")
	//New SQLCODE,%ROWCOUNT
	
	//Traverse through the list of names in the parameter list
	Set Name=""
	For {
		Set Name=$O(ParamList(Name)) 
		Q:Name=""
		
		
		$$$TRACE("6-5. Checking Alert Exceptions")
		S AlertException=0
		//s aers=##class(%ResultSet).%New()
		//d aers.Prepare("select count (*) AS AlertException from IIBAENSEMBLE_Monitor.AlertExceptions where ItemName = :Name and GETDATE() between StartDttm and EndDttm")
		//d aers.Execute()
		//d aers.Next()
		//s AlertException=aers.Data("AlertException")
		&sql(select count (*) INTO :AlertException from IIBAENSEMBLE_Monitor.AlertExceptions 
			where ItemName = :Name and 
			GETDATE() between StartDttm and EndDttm)
		$$$TRACE("Alert Exception: "_AlertException)

		
			
		If ( AlertException < 1 ) {
			
			
					
			// For each item, traverse through the list of conditions that need to be monitored
			Set AlertMessage=""
			//set AlertMessage="http://ensembletest01/csp/iibasupport/IIBAInterfaceStatus.csp?InterfaceName="_Name
			//set AlertMessage="http://ensembletest01/csp/iibasupport/IIBASystemStatus.csp"
			Set AlertSubject=""
			Set AlertEmailList=""
			Set Parameter=""
			Set AlertActions=""

			For {
				Set Parameter=$O(ParamList(Name,Parameter))
				Q:Parameter=""
			
				Set today=$ZDATE($H,8)
				Set CheckAlertFlag=0
				// Is this alert for Holidays only?
				if (ParamList(Name,Parameter,"HolidayOnly")=1) {
				
					if ($DATA(^ZAlert.Holiday(today))>0) {
						$$$TRACE("Holiday alert only: Today is a holiday- Holiday List: "_ParamList(Name,Parameter,"Holidays"))
						Set TodayHoliday=^ZAlert.Holiday(today)
						If ( $LF($LFS(ParamList(Name,Parameter,"Holidays"),"^"),TodayHoliday)>0) {
							$$$TRACE("This Holiday is defined for this parameter")
							Set CheckAlertFlag=1
						}
					} else {
						// do nothing - at this point I need to go the next parameter...
						$$$TRACE("This is a holiday only alert, but today is not a holiday")
						Set CheckAlertFlag=0
					}
				} elseif ($DATA(^ZAlert.Holiday(today))>0) {
					$$$TRACE("Today is a holiday- Holiday List: "_ParamList(Name,Parameter,"Holidays"))
					Set TodayHoliday=^ZAlert.Holiday(today)
					If ( $LF($LFS(ParamList(Name,Parameter,"Holidays"),"^"),TodayHoliday)>0) {
						$$$TRACE("This Holiday is defined for this parameter")
						Set CheckAlertFlag=1
					}
				} else {
					$$$TRACE("Need to do normal checking of this alert")
					Set CheckAlertFlag=1
				}
			
				//  ******* Need to check the alert if flag is set *****
				If (CheckAlertFlag=1) {
				$$$TRACE("Checking the Alert...")
			
				// For each Parameter, check the schedule to determine if this alert should be used now
				if ($P($H,",",2)>(3600*ParamList(Name,Parameter,"Schedule","HourStart")))
					&($P($H,",",2)<(3600*ParamList(Name,Parameter,"Schedule","HourEnd")))
					&(ParamList(Name,Parameter,"Schedule",$ZD($H,10))=1) {

					Set LastStatus=""
					Set TimeLastStatus=""
					Set TimeLastAlert=""
			
					// Get info regarding last time the status changed and alert was reported
					&sql(Select Top 1 LastStatus,TimeLastStatus,TimeLastAlert 
						into :LastStatus,:TimeLastStatus,:TimeLastAlert
						From IIBAENSEMBLE_Monitor.ItemStatus
						Where ItemName=:Name and Parameter=:Parameter)
					
					$$$TRACE("7.Query for ItemStatus info for: "_Name_"/"_Parameter_" SQLCODE: "_SQLCODE_" ROWCOUNT: "_%ROWCOUNT)
			
					s LastCount=0
					if (Parameter="CountChange") {
						Set CurrentStatus=$G(HostStatus(Name,"Count"))
						s LastCount=LastStatus
						W !,"Current Count is: "_CurrentStatus
					} else {
						Set CurrentStatus=$G(HostStatus(Name,Parameter))
					}
					Set CurrentTime=$ZDT($H,3)

					If ( SQLCODE=0 ) {
				
						$$$TRACE("8.Check for a status change...("_Name_","_Parameter_": Last Status: "_LastStatus_","_TimeLastStatus_", Current Status: "_CurrentStatus_")")
						// Each condition is checked explicility - this is easier to maintain.
						//     When adding a new type of condition - a relavant section will need to be added.
					
						If ((Parameter="Queue") ||( Parameter="Count") || (Parameter="CountChange"))  {
							If ( ( CurrentStatus > ParamList(Name,Parameter,"Threshold") )  && ( LastStatus > ParamList(Name,Parameter,"Threshold") ) ) {
								Set LastStatus=CurrentStatus
							} ElseIf ( ( CurrentStatus < ParamList(Name,Parameter,"Threshold") )  && ( LastStatus < ParamList(Name,Parameter,"Threshold") ) ) {
								Set LastStatus=CurrentStatus
							}
						}
									
						$$$TRACE("9.Check for a status change...("_Name_","_Parameter_": Last Status: "_LastStatus_","_TimeLastStatus_", Current Status: "_CurrentStatus_")")
				
						If ( CurrentStatus'=LastStatus ) {
						// The Status has changed: record the the change, and coclude the processing of this item/parameter.
							s InfoText=ParamList(Name,Parameter,"EMailText")
							&sql( Update IIBAENSEMBLE_Monitor.ItemStatus Set
									LastStatus=:CurrentStatus,
									TimeLastStatus=:CurrentTime,
									EmailText=:InfoText
								Where
									ItemName=:Name and
									Parameter=:Parameter  )
						} Else {
							// The Status has not changed: Check for alerts that need to be reported
							$$$TRACE("10.Checking for alert conditions...")
							S Message=""
							If ( Parameter="RunningStatus" ) {
								If (  CurrentStatus=ParamList(Name,Parameter,"Threshold") ) {
									S Message= ProductionName_":   Item "_Name_" RunningStatus is "_$CASE(CurrentStatus,1:"Enabled",:"Disabled")
								
								}
							} ElseIf ( Parameter="Status") {
								If (  CurrentStatus=ParamList(Name,Parameter,"Threshold") ) {
									S Message= ProductionName_":   Item "_Name_" Status is "_CurrentStatus
								
								}
							} ElseIf ( Parameter="Queue") {
				
								If (  CurrentStatus>ParamList(Name,Parameter,"Threshold") ) {
									S Message= ProductionName_":  Item "_Name_" Queue size is "_HostStatus(Name,"Queue")
								
								}
							} ElseIf ( Parameter="Count") {
				
								If (  CurrentStatus>=ParamList(Name,Parameter,"Threshold") ) {
									S Message= ProductionName_":  Item "_Name_" Count size is "_HostStatus(Name,"Count")
								
								}	
							} ElseIf ( Parameter="AdapterState" ) {
								// W Name,"--> Current Status is: ",CurrentStatus,"  condition: ",ParamList(Name,Parameter,"Threshold"),!
								If ( (CurrentStatus'="") & ( CurrentStatus'[ParamList(Name,Parameter,"Threshold") ) ) {
								//If ( $FIND(CurrentStatus,ParamList(Name,Parameter,"Threshold"))>0 ) {
									S Message= ProductionName_":  Item "_Name_" Adapter State is: "_CurrentStatus
								
								}
						
							} ElseIf ( Parameter="LastAction") {
								Set TimeDiff=""
								Set LastAction=$P(CurrentStatus,".",1)
								&sql(Select distinct {fn TimestampDiff(SQL_TSI_SECOND,:TimeLastStatus,:CurrentTime) } 
									into :TimeDiff
									From IIBAENSEMBLE_Monitor.ItemStatus )
								If TimeDiff>ParamList(Name,Parameter,"Threshold") {
									if (TimeDiff > 3600 ) {
										S H=TimeDiff\3600
										S M=TimeDiff#3600\60
										If ($LENGTH(M)=1) {
											S M="0"_M
										}
										S dTimeDiff=H_":"_M_" Hours"
									} Elseif ( TimeDiff > 60 ) {
										S M=TimeDiff\60
										S S=TimeDiff#60
										If ( $LENGTH(S)=1) {
											S S="0"_S
										}
										S dTimeDiff=M_":"_S_" Minutes"
									} Else {
										s dTimeDiff=TimeDiff_" Seconds"
									}
									
									S Message=ProductionName_": Item "_Name_"- "_dTimeDiff_" have elapsed since the last transaction."
								
								}

							} ElseIf ( Parameter="CountChange") {
									
								// Implementation in progress
								// Logic for change in message count:
								// - Time difference since last status
								// - Message count since last status
								//
								// If ( TimeDiff>duration)
								//     Update status
								//     If CountChange exceeds threshold
								//        alert
								//     }
								// }
								
								S StatusDiff=0
								&sql(Select distinct {fn TimestampDiff(SQL_TSI_SECOND,:TimeLastStatus,:CurrentTime) } 
									into :StatusDiff
									From IIBAENSEMBLE_Monitor.ItemStatus )
								
								
								If (StatusDiff > ParamList(Name,Parameter,"ThresholdDuration")) {	
								
									//Update status with current count
									s NameSpace=$ZNSPACE
									s InfoText=ParamList(Name,Parameter,"EMailText")
									&sql( Update IIBAENSEMBLE_Monitor.ItemStatus Set
										LastStatus=:CurrentStatus,
										TimeLastStatus=:CurrentTime,
										EmailText=:InfoText
									Where
										ItemName=:Name and
										NameSpace=:NameSpace and
										Parameter=:Parameter  )
								}
									s CountChange=CurrentStatus-LastCount
									$$$TRACE("Count Change: "_CountChange)
									s threshold=ParamList(Name,Parameter,"Threshold")
									if ($E(threshold)="<") {
										if ((CountChange>=0) && (CountChange<$E(threshold,2,$L(threshold)))) {
											s Message=ProductionName_": Item "_Name_" - The Message count is lower than expected ("_threshold_")"
											set troubled(Name,Parameter) = 1
													
											Try {
												set status = ##class(Ens.Director).EnableConfigItem(Name,0,0)
												Job ##class(Ens.Director).UpdateProduction()
												$$$TRACE("Count Change disabling: "_Name)
											} Catch errobj {
												Do ##class(Ens.Util.Log).LogError("IIBAENSEMBLE.Utilities","CycleInterface","Disable failed: "_errobj.Name)
											}
	

											// sleep for a few seconds to let things settle
											H 10
	
											// Enable the interface
											Try {
												set status = ##class(Ens.Director).EnableConfigItem(Name,1,0)
												Job ##class(Ens.Director).UpdateProduction()
												$$$TRACE("Count Change enabling: "_Name)
											} Catch errobj {
												Do ##class(Ens.Util.Log).LogError("IIBAENSEMBLE.Utilities","CycleInterface","Enable failed: "_errobj.Name)
											}
										}
									} elseif ($E(threshold)=">") {
										if (CountChange>$E(threshold,2,$L(threshold))) {
											s Message=ProductionName_": Item "_Name_" - The Message count is higher than expected ("_threshold_")"
											set troubled(Name,Parameter) = 1
										}
									}
								
									
								$$$TRACE("Count Change Message: "_Message)
								//s Message=""
									
								
								
							}
					
							If ( Message '= "" ) {
						
								$$$TRACE("11.Alert Condition has been identified... ")
								S StatusDiff=0
								&sql(Select distinct {fn TimestampDiff(SQL_TSI_SECOND,:TimeLastStatus,:CurrentTime) } 
									into :StatusDiff
									From IIBAENSEMBLE_Monitor.ItemStatus )
						
								$$$TRACE("12.Time since last status: "_StatusDiff)
								If (StatusDiff > ParamList(Name,Parameter,"ThresholdDuration")) {
									//Add this item to the troubled array for updating the troubled column after the loop is done
									set troubled(Name,Parameter) = 1
								
									S AlertDiff=0
									&sql(Select distinct {fn TimestampDiff(SQL_TSI_SECOND,:TimeLastAlert,:CurrentTime) }
										into :AlertDiff
										From IIBAENSEMBLE_Monitor.ItemStatus )
							
									$$$TRACE("13.  Time since last alert: "_AlertDiff_" / Parameter setting: "_ParamList(Name,Parameter,"AlertDuration"))
									If ( AlertDiff="") {
										Set AlertDiff=86400
									}
								
							
									If ( AlertDiff > ParamList(Name,Parameter,"AlertDuration") ) {
										// We have an alert that needs to be reported
										// W "-------------------------",!
										// W "Email: "_ParamList(Name,Parameter,"EMail"),!
										// W "Subject: Ens Alert: "_Name_"/"_Parameter,!
										// W "Message Body: ",Message,!
										$$$TRACE("14.Codition to report: "_Name_"/"_Parameter_": "_ParamList(Name,Parameter,"EMail")_"  "_Message)
								
										If ( AlertSubject="" ) {
											Set AlertSubject="Ens Alert "_Name_": "_Parameter
										} Else {
											Set AlertSubject=AlertSubject_", "_Parameter
										}
								
										If ( AlertEmailList="" ) {
											Set AlertEmailList=ParamList(Name,Parameter,"EMail")
									
										} Else {
											S ePtr=0
											WHILE $LISTNEXT($LISTFROMSTRING(ParamList(Name,Parameter,"EMail"),","),ePtr,Email) {
												IF ( AlertEmailList'[Email ) {
													Set AlertEmailList=AlertEmailList_","_Email
												}
											}
										}
								
										Set AlertMessage=AlertMessage_$C(13,10)_Message
										Set:ParamList(Name,Parameter,"EMailText")'="" AlertMessage=AlertMessage_$C(13,10)_ParamList(Name,Parameter,"EMailText")
										
										s NameSpace=$ZNSPACE
										$$$TRACE("15.Updating ItemStatus Table ("_Name_","_NameSpace_","_Parameter_") with:  "_CurrentTime_"/"_Message)
										s EmailText=ParamList(Name,Parameter,"EMailText")
										&sql( Update IIBAENSEMBLE_Monitor.ItemStatus Set
												TimeLastAlert=:CurrentTime,
												LastAlert=:Message,
												EmailText=:EmailText
											Where 
												ItemName=:Name and
												NameSpace=:NameSpace and
												Parameter=:Parameter )
											
											
										$$$TRACE("16. Update list of actions")
										Set Ars=##class(%ResultSet).%New()
										Do Ars.Prepare("Select ActionID from IIBAENSEMBLE_Monitor.ItemAction where ItemID="_ParamList(Name,Parameter,"ID") )
										Do Ars.Execute()
										While (Ars.Next()) {
											Set Action=Ars.Data("ActionID")
											$$$TRACE("Action: "_Action)
											If ( AlertActions="" ) {
												Set AlertActions=$LB(Action)
											} Else {
												if ( $LF(AlertActions,Action)<1) {
													Set AlertActions=AlertActions_$LB(Action)
												}
											}
										
										}
										close Ars

									}
								}
							}
						}
			
					} Elseif ( SQLCODE=100) {
				
						// Row does not exist - add to the status table
						$$$LOGINFO(ProductionName_": Monitoring Service : Row missing in ItemStatus Table for "_Name_"/"_Parameter_"/"_CurrentStatus_"/"_CurrentTime_" : Action - Row added")
						S NameSpace=$ZNSPACE
						s EmailText=ParamList(Name,Parameter,"EMailText")
						&sql(Insert into IIBAENSEMBLE_Monitor.ItemStatus 
							(NameSpace,ItemName,Parameter,LastStatus,TimeLastStatus,EmailText) values
							(:NameSpace,:Name,:Parameter,:CurrentStatus,:CurrentTime,:EmailText) )
					}
				}
			
				//  *** End of need to check alert because flag is set
				}
			}
		
	
			// do we have alerts to report?
			If ( AlertEmailList'="" ) {
			
			
			
				Set i=0
				WHILE $LISTNEXT($LISTFROMSTRING(AlertEmailList,","),i,Email) {
				
					$$$TRACE("16.Alert for "_Email_"  Subject: "_AlertSubject)
					Set EmailRequest=""
					Set EmailRequest= ##class(IIBAENSEMBLE.msg.EmailSendRequest).%New()
					Set EmailRequest.Subject=AlertSubject
					Set EmailRequest.Text=AlertMessage

					Set EmailRequest.Destination=Email
				
					For j=1:1:$L(..TargetConfigNames,",") {
						S target=$P(..TargetConfigNames,",",j)
						If ( target '= "" ) {
							Do ..SendRequestAsync(target,EmailRequest)
						}
					}
				}
			}

		}
	}
	
	//Update Troubled Column in Status Table
		
	set rs = ##class(%ResultSet).%New()
	do rs.Prepare("Select distinct ID, ItemName, Parameter from IIBAENSEMBLE_Monitor.ItemStatus")
	do rs.Execute()
	
	While rs.Next() {
			
		set ID = "", Name="", Parameter=""
		S NameSpace=$ZNSPACE
		set ID = rs.Data("ID"), Name = rs.Data("ItemName"), Parameter = rs.Data("Parameter")
		if $DATA(troubled(Name,Parameter)) = 0 {
			&sql(UPDATE IIBAENSEMBLE_Monitor.ItemStatus SET Troubled = 0 WHERE NameSpace=:NameSpace and ItemName=:Name and Parameter=:Parameter)
		} elseif $DATA(troubled(Name,Parameter)) '= 0 {
			&sql(UPDATE IIBAENSEMBLE_Monitor.ItemStatus SET Troubled = 1 WHERE NameSpace=:NameSpace and ItemName=:Name and Parameter=:Parameter)
		}
	}


	
	
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Monitor.DBusage">
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>63225,29234.292931</TimeChanged>
<TimeCreated>61418,36825.732493</TimeCreated>
<Inheritance>right</Inheritance>

<Property name="Namespace">
<Type>%String</Type>
</Property>

<Property name="GlobalName">
<Type>%String</Type>
</Property>

<Property name="LogDate">
<Type>%TimeStamp</Type>
</Property>

<Property name="DBsize">
<Type>%Integer</Type>
</Property>

<Method name="ProcessIntegrityLog">
<ClassMethod>1</ClassMethod>
<FormalSpec>LogFilename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	if '##class(%File).Exists(LogFilename) w "Cannot opne file '"_LogFilename_"'.",! Q
	
	s file=##class(%File).%New(LogFilename)
	s tSC=file.Open("R")
	
	if 'tSC w "Error: ",tSC Q
	
	//w "The file is open...",!
	
	
	while 'file.AtEnd {
		s line=file.ReadLine()
		//w line,!
		
		if ($E(line,1,30)="Cache Database Integrity Check" ) {
			S LogDate=$REPLACE($LTS($LIST($LFS(line," "),6,8)," ")," at","")
			s LogDate=$ZDT($ZDTH(LogDate),3)
			
			
			
		} else {
			if $G(LogDate)="" w "Could not determine the log date !!" Q
			
			if ($E(line,1,13)="---Directory " ) {
				s namespace=$LIST($LFS(line,"\"),$LL($LFS(line,"\"))-1)
				
				
				
			} elseif ($E($ZSTRIP(line,"<W"),1,6)="Total:") {
				s size=$TR($LIST($LFS($ZSTRIP(line,"=W")," "),6),",")
				
				s len=$L(size)
				s unit=$E(size,len-1,len)
				
				if (unit="kb") {
					s size=$E(size,1,len-2)_"000"
				} elseif (unit="MB") {
					s size=$E(size,1,len-2)_"000000"
				}
				
				
				s tSC=..AddUpdateRow(namespace,global,LogDate,size)
				Q:'tSC
				
				s global="",size=""
				
			
			} elseif ($E(line,1,7)="Global:") {
				s global=$LIST($LFS(line," "),2)
				
				
			} elseif ($F(line,"Total blocks")>0) {
				
				s global="_"_namespace_"_TotalSize"
				s size=$TR($LIST($LFS($ZSTRIP($ZSTRIP(line,"<W"),"=W")," "),4),",")
				
				s len=$L(size)
				s unit=$E(size,len-1,len)
				
				if (unit="kb") {
					s size=$E(size,1,len-2)_"000"
				} elseif (unit="MB") {
					s size=$E(size,1,len-2)_"000000"
				}
				
				s tSC=..AddUpdateRow(namespace,global,LogDate,size)
				Q:'tSC
				
			} elseif ($F(line,"Free blocks")>0) {
				
				s global="_"_namespace_"_FreeSize"
				s size=$TR($LIST($LFS($ZSTRIP(line,"=W")," "),5),",")
				
				s len=$L(size)
				s unit=$E(size,len-1,len)
				
				if (unit="kb") {
					s size=$E(size,1,len-2)_"000"
				} elseif (unit="MB") {
					s size=$E(size,1,len-2)_"000000"
				}
				
				s tSC=..AddUpdateRow(namespace,global,LogDate,size)
				Q:'tSC
				
			}
		}
		
	}
	
	d file.Close()
	
	Q $$$OK
]]></Implementation>
</Method>

<Method name="AddUpdateRow">
<ClassMethod>1</ClassMethod>
<FormalSpec>rNamespace:%String,rGlobalName:%String,rLogDate:%String,rDBsize:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s len=$L(rDBsize)
	s unit=$E(rDBsize,len-1,len)
				
	if (unit="kb") {
		s rDBsize=$E(rDBsize,1,len-2)_"000"
	} elseif (unit="MB") {
		s rDBsize=$E(rDBsize,1,len-2)_"000000"
	}
				
	
				
	s rs=##class(%ResultSet).%New()
	s qry="Select DBsize from IIBAENSEMBLE_Monitor.DBusage where Namespace='"_rNamespace_"' and GlobalName='"_rGlobalName_"' and LogDate='"_rLogDate_"'"
	d rs.Prepare(qry)
	s tSC=rs.Execute()
				
	Q:'tSC
				
	if (rs.Next() ) {
	
		d rs.Close()
		s rs=##class(%ResultSet).%New()
		d rs.Prepare("Update IIBAENSEMBLE_Monitor.DBusage set DBsize='"_rDBsize_"' where Namespace='"_rNamespace_"' and GlobalName='"_rGlobalName_"' and LogDate='"_rLogDate_"'")
		s tSC=rs.Execute()
					
		Q:'tSC
				
	} else {
		//W "New row.. will add to the table",!
		
		d rs.Close()
		s rs=##class(%ResultSet).%New()
		s qry="Insert into IIBAENSEMBLE_Monitor.DBusage (Namespace, GlobalName, LogDate, DBsize) values ('"_rNamespace_"', '"_rGlobalName_"', '"_rLogDate_"', '"_rDBsize_"')"
		d rs.Prepare(qry)
		s tSC=rs.Execute()
					
		Q:'tSC
					
		s global="",size=""
		
	} 
	
	Q $$$OK
]]></Implementation>
</Method>

<Method name="ShowStats">
<ClassMethod>1</ClassMethod>
<FormalSpec>Threshold:%String=1000000,Dates:%String</FormalSpec>
<Implementation><![CDATA[
	w "Threshold: ",Threshold,!
	k logDates
	s rs=##class(%ResultSet).%New()
	d rs.Prepare("select distinct LogDate from IIBAENSEMBLE_Monitor.DBusage ")
	s tSC=rs.Execute()
	
	while (rs.Next()) {
		s logDates(rs.Get("LogDate"))=1
		w rs.Get("LogDate"),","
		
	}
	w !
	d rs.Close()
	
	k globalStats
	k globallist
	k namespacelist
	s current=$O(logDates(""))
	
	while(current'="") {
		w !,"collection data for: ",current
		
		s rs=##class(%ResultSet).%New()
		w "Sql: ","select Namespace, GlobalName, DBsize from IIBAENSEMBLE_Monitor.DBusage where LogDate='"_current_"' and CONVERT(Decimal(18,0),DBsize)>"_Threshold,!
		d rs.Prepare("select Namespace, GlobalName, DBsize from IIBAENSEMBLE_Monitor.DBusage where LogDate='"_current_"' and CONVERT(Decimal(18,0),DBsize) > "_Threshold)
		s tSC=rs.Execute()
	
	
		while (rs.Next()) {
			s globalStats(rs.Get("Namespace"),rs.Get("GlobalName"),current)=rs.Get("DBsize")
			s globallist(rs.Get("GlobalName"))=1
			s namespacelist(rs.Get("Namespace"))=1
		
		}
		
		s current=$O(logDates(current))
	}
	
	w !!,"Namespace,Global,"
	s current=""
	for {
		s current=$O(logDates(current)) q:current=""
		w current,","
	}
	w !
	s namespace=""
	For {
		s namespace=$O(globalStats(namespace)) q:namespace=""
		
		s global=""
		For {
			s global=$O(globalStats(namespace,global)) q:global=""
			 w namespace,",",global,","
			s current=""
			For {
				s current=$O(logDates(current)) q:'current
				w $G(globalStats(namespace,global,current))/1000000000,","
			}
			w !
		}
	}
]]></Implementation>
</Method>

<Method name="UsageSummary">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	k logDates
	s rs=##class(%ResultSet).%New()
	d rs.Prepare("select distinct LogDate from IIBAENSEMBLE_Monitor.DBusage ")
	s tSC=rs.Execute()
	
	while (rs.Next()) {
		s logDates(rs.Get("LogDate"))=1
		w rs.Get("LogDate"),","
		
	}
	w !
	d rs.Close()
	
	k globalStats
	k globallist
	k namespacelist
	s current=$O(logDates(""))
	
	while(current'="") {
		w !,"collection data for: ",current
		
		s rs=##class(%ResultSet).%New()
		d rs.Prepare("select Namespace, GlobalName, DBsize from IIBAENSEMBLE_Monitor.DBusage where LogDate='"_current_"' and CONVERT(Decimal(18,0),DBsize)>1000000000")
		s tSC=rs.Execute()
	
	
		while (rs.Next()) {
			s globalStats(rs.Get("Namespace"),rs.Get("GlobalName"),current)=rs.Get("DBsize")
			s globallist(rs.Get("GlobalName"))=1
			s namespacelist(rs.Get("Namespace"))=1
		
		}
		
		s current=$O(logDates(current))
	}
	
	w !!,"Namespace,Global,"
	s current=""
	for {
		s current=$O(logDates(current)) q:current=""
		w current,","
	}
	w !
	s namespace=""
	For {
		s namespace=$O(globalStats(namespace)) q:namespace=""
		
		s global=""
		For {
			s global=$O(globalStats(namespace,global)) q:global=""
			 w namespace,",",global,","
			s current=""
			For {
				s current=$O(logDates(current)) q:'current
				w $G(globalStats(namespace,global,current))/1000000000,","
			}
			w !
		}
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^IIBAENSEMBLE.Monitor.DBusageD</DataLocation>
<DefaultData>DBusageDefaultData</DefaultData>
<IdLocation>^IIBAENSEMBLE.Monitor.DBusageD</IdLocation>
<IndexLocation>^IIBAENSEMBLE.Monitor.DBusageI</IndexLocation>
<StreamLocation>^IIBAENSEMBLE.Monitor.DBusageS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="DBusageDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Namespace</Value>
</Value>
<Value name="3">
<Value>GlobalName</Value>
</Value>
<Value name="4">
<Value>Date</Value>
</Value>
<Value name="5">
<Value>Size</Value>
</Value>
<Value name="6">
<Value>LogDate</Value>
</Value>
<Value name="7">
<Value>DBsize</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.Monitor.ItemAction">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%Persistent</Super>
<TimeChanged>62546,33655.988289</TimeChanged>
<TimeCreated>60739,49287.684311</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// ID from the IIBAENSEMBLE_Monitor.ItemParameters table

]]></Content>
</UDLText>

<Property name="ItemID">
<Type>%Integer</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
// itemdescription from the IIBAENSEMBLE_Monitor.tblItems table

]]></Content>
</UDLText>

<Property name="ActionID">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^IIBAENSEMBLE.Mon676.ItemActionD</DataLocation>
<DefaultData>ItemActionDefaultData</DefaultData>
<IdLocation>^IIBAENSEMBLE.Mon676.ItemActionD</IdLocation>
<IndexLocation>^IIBAENSEMBLE.Mon676.ItemActionI</IndexLocation>
<StreamLocation>^IIBAENSEMBLE.Mon676.ItemActionS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ItemActionDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ActionID</Value>
</Value>
<Value name="3">
<Value>ItemID</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.Monitor.ItemParameters">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%Persistent</Super>
<TimeChanged>62546,33656.069359</TimeChanged>
<TimeCreated>60598,49039.989764</TimeCreated>

<Property name="ItemName">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Parameter">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Threshold">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="ThresholdID">
<Type>%Integer</Type>
</Property>

<Property name="ThresholdDuration">
<Type>%Integer</Type>
</Property>

<Property name="AlertDuration">
<Type>%Integer</Type>
</Property>

<Property name="Schedule">
<Type>%String</Type>
<Parameter name="MAXLEN" value="2048"/>
</Property>

<Property name="Active">
<Type>%Boolean</Type>
</Property>

<Property name="NotificationEmail">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Holidays">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="HolidayOnly">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="EmailText">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^IIBAENSEMBLE676.ItemParametersD</DataLocation>
<DefaultData>ItemParametersDefaultData</DefaultData>
<IdLocation>^IIBAENSEMBLE676.ItemParametersD</IdLocation>
<IndexLocation>^IIBAENSEMBLE676.ItemParametersI</IndexLocation>
<StreamLocation>^IIBAENSEMBLE676.ItemParametersS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ItemParametersDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Active</Value>
</Value>
<Value name="3">
<Value>AlertDuration</Value>
</Value>
<Value name="4">
<Value>ItemName</Value>
</Value>
<Value name="5">
<Value>Parameter</Value>
</Value>
<Value name="6">
<Value>Schedule</Value>
</Value>
<Value name="7">
<Value>Threshold</Value>
</Value>
<Value name="8">
<Value>ThresholdDuration</Value>
</Value>
<Value name="9">
<Value>NotificationEmail</Value>
</Value>
<Value name="10">
<Value>ThresholdID</Value>
</Value>
<Value name="11">
<Value>HolidayOnly</Value>
</Value>
<Value name="12">
<Value>Holidays</Value>
</Value>
<Value name="13">
<Value>EmailText</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.Monitor.ItemStatus">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%Persistent</Super>
<TimeChanged>62546,33656.150443</TimeChanged>
<TimeCreated>60598,49212.666051</TimeCreated>

<Property name="ItemName">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Parameter">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="LastStatus">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="TimeLastStatus">
<Type>%TimeStamp</Type>
</Property>

<Property name="LastAlert">
<Type>%String</Type>
<Parameter name="MAXLEN" value="1024"/>
</Property>

<Property name="TimeLastAlert">
<Type>%TimeStamp</Type>
</Property>

<Property name="Troubled">
<Type>%Boolean</Type>
</Property>

<Property name="NameSpace">
<Type>%String</Type>
</Property>

<Property name="EmailText">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^IIBAENSEMBLE.Mon676.ItemStatusD</DataLocation>
<DefaultData>ItemStatusDefaultData</DefaultData>
<IdLocation>^IIBAENSEMBLE.Mon676.ItemStatusD</IdLocation>
<IndexLocation>^IIBAENSEMBLE.Mon676.ItemStatusI</IndexLocation>
<StreamLocation>^IIBAENSEMBLE.Mon676.ItemStatusS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ItemStatusDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ItemName</Value>
</Value>
<Value name="3">
<Value>LastAlert</Value>
</Value>
<Value name="4">
<Value>LastStatus</Value>
</Value>
<Value name="5">
<Value>Parameter</Value>
</Value>
<Value name="6">
<Value>TimeLastAlert</Value>
</Value>
<Value name="7">
<Value>TimeLastStatus</Value>
</Value>
<Value name="8">
<Value>Troubled</Value>
</Value>
<Value name="9">
<Value>NameSpace</Value>
</Value>
<Value name="10">
<Value>ItemId</Value>
</Value>
<Value name="11">
<Value>EmailText</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.Monitor.tblItems">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%Persistent</Super>
<TimeChanged>62546,33656.211574</TimeChanged>
<TimeCreated>60626,41146.910544</TimeCreated>

<Property name="itemtype">
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Property name="itemvalue">
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Property name="itemdescription">
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^IIBAENSEMBLE.Monitor.tblItemsD</DataLocation>
<DefaultData>tblItemsDefaultData</DefaultData>
<IdLocation>^IIBAENSEMBLE.Monitor.tblItemsD</IdLocation>
<IndexLocation>^IIBAENSEMBLE.Monitor.tblItemsI</IndexLocation>
<StreamLocation>^IIBAENSEMBLE.Monitor.tblItemsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="tblItemsDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>itemname</Value>
</Value>
<Value name="3">
<Value>itemtype</Value>
</Value>
<Value name="4">
<Value>itemdescription</Value>
</Value>
<Value name="5">
<Value>itemvalue</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.Monitor.tblSchedules">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%Persistent</Super>
<TimeChanged>62546,33656.271761</TimeChanged>
<TimeCreated>60626,50637.434657</TimeCreated>

<Property name="ParameterID">
<Type>%Integer</Type>
</Property>

<Property name="HourStart">
<Type>%Integer</Type>
</Property>

<Property name="HourEnd">
<Type>%Integer</Type>
</Property>

<Property name="M">
<Type>%Boolean</Type>
</Property>

<Property name="T">
<Type>%Boolean</Type>
</Property>

<Property name="W">
<Type>%Boolean</Type>
</Property>

<Property name="Th">
<Type>%Boolean</Type>
</Property>

<Property name="F">
<Type>%Boolean</Type>
</Property>

<Property name="Sa">
<Type>%Boolean</Type>
</Property>

<Property name="Su">
<Type>%Boolean</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^IIBAENSEMBLE.M676.tblSchedulesD</DataLocation>
<DefaultData>tblSchedulesDefaultData</DefaultData>
<IdLocation>^IIBAENSEMBLE.M676.tblSchedulesD</IdLocation>
<IndexLocation>^IIBAENSEMBLE.M676.tblSchedulesI</IndexLocation>
<StreamLocation>^IIBAENSEMBLE.M676.tblSchedulesS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="tblSchedulesDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>F</Value>
</Value>
<Value name="3">
<Value>HourEnd</Value>
</Value>
<Value name="4">
<Value>HourStart</Value>
</Value>
<Value name="5">
<Value>M</Value>
</Value>
<Value name="6">
<Value>ParameterID</Value>
</Value>
<Value name="7">
<Value>Sa</Value>
</Value>
<Value name="8">
<Value>Su</Value>
</Value>
<Value name="9">
<Value>T</Value>
</Value>
<Value name="10">
<Value>Th</Value>
</Value>
<Value name="11">
<Value>W</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.Operation.BARTcpOperation">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>EnsLib.HL7.Operation.TCPOperation</Super>
<TimeChanged>61066,35683.303903</TimeChanged>
<TimeCreated>60738,50067.020273</TimeCreated>

<Property name="AeRetryCount">
<Type>%Integer</Type>
</Property>

<Parameter name="SETTINGS">
<Default>AeRetryCount</Default>
</Parameter>

<Method name="OnMessage">
<FormalSpec>pRequest:EnsLib.HL7.Message,*pResponse:EnsLib.HL7.Message</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#; Send the message and get reply if any
	Set pResponse=$$$NULLOREF
	
	Set tSC=..validateAndIndex(pRequest) Quit:$$$ISERR(tSC) tSC
	
	Set tESN=$G($$$ExpectedSequenceNumber) Set:'tESN tESN=""
	Set tSC=..Adapter.HL7Message(pRequest,.tReplyMsg,tESN) Quit:$$$ISERR(tSC) tSC
	Set:tESN $$$ExpectedSequenceNumber=tESN+1

	If ""'=..SearchTableClass {
		Set tSCStore=$zobjclassmethod(..SearchTableClass,"IndexDoc",pRequest)
		If $$$ISERR(tSCStore) $$$LOGWARNING("Failed to construct SearchTable instance for message "_pRequest_"/"_pRequest.%Id()_" with DocType='"_pRequest.DocType_"' using class '"_..SearchTableClass_"' "_$$$StatusDisplayString(tSCStore))
	}
	If $IsObject(tReplyMsg) {
		Set tControlId=pRequest.GetValueAt("1:10")
		Set tReplyMsg.Source=pRequest.%Id()_$C(13,10)_..Adapter.IPAddress_":"_..Adapter.Port
	} Else { Set tControlId="" }
	Do ..OnReplyDocument(.tReplyMsg)
	If $IsObject(tReplyMsg) {
		Set tAckType=tReplyMsg.Name
		$$$sysTRACE("Got reply message "_tReplyMsg_"/"_tReplyMsg.%Id()_" of type "_tAckType)
		If ..#SetReplyDocType && (""'=..%RequestHeader.ReturnQueueName) && (""=tReplyMsg.DocType) && (""'=pRequest.MessageTypeCategory) {
			Do tReplyMsg.PokeTypeCategory(pRequest.MessageTypeCategory)
			Do ##class(EnsLib.HL7.Schema).ResolveReplyNameAndDocType(pRequest.MessageTypeCategory_":"_pRequest.Name,.tReplyDocName,.tReplyDocType)
			If tReplyDocName'=tAckType {
				Set tReplyDocType=##class(EnsLib.HL7.Schema).ResolveSchemaTypeToDocType(pRequest.MessageTypeCategory,tAckType)
			}
			Do:""'=tReplyDocType tReplyMsg.PokeDocType(tReplyDocType)
		}
		Set tReplyMsg.IsMutable=0
		set tMSA=tReplyMsg.GetSegmentAt(2)
		Set tAckType=$P(tAckType,"_"), tMSACode=$S($IsObject(tMSA)&&("MSA"=tMSA.GetValueAt(0)):tMSA.GetValueAt(1), 1:"No MSA")
		Set tCode=$Case(tMSACode,"No MSA":-1,"AA":0,"CA":0,"AE":1,"CE":1,"AR":2,"CR":2,:3)
		If ..#SaveOKACKs || ("ACK"'=tAckType) || tCode {
			#; Save replies if they are not normal ACKs or if we are built to save all
			If ""'=..SearchTableClass && ..#IndexReplies {
				Set tSCStore=$zobjclassmethod(..SearchTableClass,"IndexDoc",tReplyMsg)
				If $$$ISERR(tSCStore) $$$LOGWARNING("Failed to construct SearchTable instance for message "_tReplyMsg_"/"_tReplyMsg.%Id()_" with DocType='"_tReplyMsg.DocType_"' using class '"_..SearchTableClass_"' "_$$$StatusDisplayString(tSCStore))
			} Else {
				Set tSCStore=tReplyMsg.%Save()
				If $$$ISERR(tSCStore) $$$LOGERROR("Failed to save reply message "_tReplyMsg_"/"_tReplyMsg.%Id()_" with DocType='"_tReplyMsg.DocType_"' "_$$$StatusDisplayString(tSCStore))
			}
		}
		If ..#WarnACKControlId&&(tCode>=0) {
			Set tControlId=$S(""'=tControlId:$P(tControlId,$C(13,10)), 1:pRequest.GetValueAt("1:10"))
			If tControlId'=tMSA.GetValueAt(2) { $$$LOGWARNING("HL7 reply message "_tReplyMsg_"/"_tReplyMsg.%Id()_" MSA:2 ControlId '"_tMSA.GetValueAt(2)_"' does not match original message ControlId '"_tControlId_"'") }
		}
		If tCode=0 {
			Set pResponse = tReplyMsg
		} ElseIf tCode=1 {
			// Set ..Retry=1
			//$$$sysTRACE("Retrying HL7 Message "_pRequest_"/"_pRequest.%Id()_" because ACK "_tReplyMsg_"/"_tReplyMsg.%Id()_" has MSA.AcknowledgementCode = '"_tMSACode_"'")
			set aers=##class(%ResultSet).%New("Ens.Util.Statistics:EnumerateJobStatus")
			s sc=aers.Execute(..%ConfigName)
			d aers.Next()
			s retry=aers.Data("Retry")
			If ( retry<..AeRetryCount) {
				set ..Retry=1
				$$$LOGWARNING("Retry on AE : HL7 Message "_pRequest_"/"_pRequest.%Id())
			} else {
				Set sMsaText=$S($IsObject(tMSA)&&("MSA"=tMSA.GetValueAt(0)):tMSA.GetValueAt(3)_" "_tMSA.GetValueAt(6), 1:"No MSA")
				$$$LOGWARNING("HL7 Message "_pRequest_"/"_pRequest.%Id()_" - ACK "_tReplyMsg_"/"_tReplyMsg.%Id()_" has MSA.AcknowledgementCode = '"_tMSACode_"' / "_sMsaText_" / ")
				Set pResponse = tReplyMsg
			}
		} ElseIf tCode>1 || '..#AllowNonMSA {
			Set ..SuspendMessage=1
			Do ..SendAlert(##Class(Ens.AlertRequest).%New($LB(..%ConfigName,"Suspended HL7 Message "_pRequest_"/"_pRequest.%Id()_" because ACK "_tReplyMsg_"/"_tReplyMsg.%Id()_" has MSA.AcknowledgementCode = '"_tMSACode_"'")))
		} Else { ; tCode<0 && AllowNonMSA
			$$$LOGWARNING("Accepting HL7 reply Message "_tReplyMsg_"/"_tReplyMsg.%Id()_" that has no MSA:1 field; MSH='"_tReplyMsg.GetValueAt(1)_"'")
			Set pResponse = tReplyMsg
		}
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Operation.TCPOperation">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>EnsLib.HL7.Operation.TCPOperation</Super>
<TimeChanged>61066,35692.422268</TimeChanged>
<TimeCreated>60589,33269.828517</TimeCreated>

<Parameter name="WarnACKControlId">
<Description>
Log a Warning if the reply MSA:1 ControlId does not match the original message's control ID</Description>
<Type>%Boolean</Type>
<Default>0</Default>
</Parameter>
</Class>


<Class name="IIBAENSEMBLE.PurgeProdFeeds">
<Super>%RegisteredObject</Super>
<TimeChanged>62572,40116.352439</TimeChanged>
<TimeCreated>62570,54434.203325</TimeCreated>

<Method name="Purge">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pDeletedCount:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s %tID = "", %tBodyId = ""
	Set tSC=$$$OK, SQLCODE=0, pDeletedCount=0, pDeletedCount("bodies")=0

	&sql(DECLARE C2 CURSOR FOR
		Select ID,MessageBodyId Into :%tID,:%tBodyId From Ens.MessageHeader
			Where (MessageBodyClassName = 'EnsLib.HL7.Message'
				AND SourceConfigName IN ('MEDICALISPRO.BPROC.RISTOMEDICALIS', 'PASSTHRU.BPROC.RADFLOW', 'PASSTHRU.BSVC.ICTCP')))
	&sql(OPEN C2)
 	For {
	 	&sql(FETCH C2)  Quit:SQLCODE
 		
 		If %tBodyId'=""
 		{
			Set tSC1=$zobjclassmethod("EnsLib.HL7.Message","%DeleteId",%tBodyId)

			Set pDeletedCount("bodies")=pDeletedCount("bodies")+$$$ISOK(tSC1)
 		}

		&sql(DELETE From Ens.MessageHeader Where ID = :%tID)
		Set pDeletedCount=pDeletedCount+%ROWCOUNT
	} Set tCode=SQLCODE &sql(CLOSE C2) Set:'SQLCODE SQLCODE=tCode

	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Reference.PrincipalType">
<Description>
Copyright 2008 by Inland Imaging Business Associates</Description>
<Super>%Persistent</Super>
<TimeChanged>63574,59600</TimeChanged>
<TimeCreated>61068,56433.563943</TimeCreated>

<Property name="Name">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Property name="System">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Property name="Resource">
<Description>
Reg#1 - Bug#2 - Phegel - Add initial expression so it has a default Reference
Resource access....</Description>
<Type>%String</Type>
<InitialExpression>"Reference"</InitialExpression>
</Property>

<Property name="PrincipalRole">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="256"/>
<Parameter name="VALUELIST" value=",source,target"/>
</Property>

<Property name="PrincipalValues">
<Type>PrincipalValue</Type>
<Cardinality>many</Cardinality>
<Inverse>PrincipalType</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="RelatedTypes">
<Type>RelatedType</Type>
<Cardinality>many</Cardinality>
<Inverse>PrincipalType</Inverse>
<Relationship>1</Relationship>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^IIBAENSEMBLE71D.PrincipalTypeD</DataLocation>
<DefaultData>PrincipalTypeDefaultData</DefaultData>
<IdLocation>^IIBAENSEMBLE71D.PrincipalTypeD</IdLocation>
<IndexLocation>^IIBAENSEMBLE71D.PrincipalTypeI</IndexLocation>
<StreamLocation>^IIBAENSEMBLE71D.PrincipalTypeS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="PrincipalTypeDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DefaultValue</Value>
</Value>
<Value name="3">
<Value>Name</Value>
</Value>
<Value name="4">
<Value>PrincipalRole</Value>
</Value>
<Value name="5">
<Value>System</Value>
</Value>
<Value name="6">
<Value>Resource</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
</Property>
<Property name="Name">
<Selectivity>11.1111%</Selectivity>
</Property>
<Property name="PrincipalRole">
<Selectivity>50.0000%</Selectivity>
</Property>
<Property name="Resource">
<Selectivity>50.0000%</Selectivity>
</Property>
<Property name="System">
<Selectivity>25.0000%</Selectivity>
</Property>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.Reference.PrincipalValue">
<Description>
Copyright 2008 by Inland Imaging Business Associates</Description>
<Super>%Persistent</Super>
<TimeChanged>63574,59600</TimeChanged>
<TimeCreated>61068,55705.849803</TimeCreated>

<Property name="PValue">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Property name="PrincipalType">
<Type>PrincipalType</Type>
<Cardinality>one</Cardinality>
<Inverse>PrincipalValues</Inverse>
<Relationship>1</Relationship>
<Required>1</Required>
</Property>

<Index name="PrincipalTypeIndex">
<Properties>PrincipalType</Properties>
</Index>

<Property name="RelatedValues">
<Type>RelatedValue</Type>
<Cardinality>many</Cardinality>
<Inverse>PrincipalValue</Inverse>
<Relationship>1</Relationship>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^IIBAENSEMBLE71D.PrincipalValueD</DataLocation>
<DefaultData>PrincipalValueDefaultData</DefaultData>
<IdLocation>^IIBAENSEMBLE71D.PrincipalValueD</IdLocation>
<IndexLocation>^IIBAENSEMBLE71D.PrincipalValueI</IndexLocation>
<StreamLocation>^IIBAENSEMBLE71D.PrincipalValueS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="PrincipalValueDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Value</Value>
</Value>
<Value name="3">
<Value>PrincipalType</Value>
</Value>
<Value name="4">
<Value>PValue</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>99.9991%</Selectivity>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
</Property>
<Property name="PValue">
<Selectivity>0.0137%</Selectivity>
</Property>
<Property name="PrincipalType">
<Selectivity>12.5000%</Selectivity>
</Property>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.Reference.RelatedType">
<Description>
Copyright 2008 by Inland Imaging Business Associates</Description>
<Super>%Persistent</Super>
<TimeChanged>63574,59600</TimeChanged>
<TimeCreated>61068,56451.874967</TimeCreated>

<Property name="System">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Property name="DefaultValue">
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Property name="OneToOne">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Required>1</Required>
</Property>

<Property name="attrClass">
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Property name="PrincipalType">
<Type>PrincipalType</Type>
<Cardinality>one</Cardinality>
<Inverse>RelatedTypes</Inverse>
<Relationship>1</Relationship>
<Required>1</Required>
</Property>

<Property name="RelatedValues">
<Type>RelatedValue</Type>
<Cardinality>many</Cardinality>
<Inverse>RelatedType</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="getAttrList">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set attrString = ""
	set count = 0
	Set rs = ##class(%ResultSet).%New()
	Do rs.Prepare("Select Name from %Dictionary.PropertyDefinition where parent = '"_..attrClass_"' Order by SequenceNumber")
	do rs.Execute()
	While rs.Next() {
		if $I(count) > 1 {
			s attrString = attrString_","
		} 
		s attrString = attrString_rs.Data("Name")
	}
	Quit attrString
]]></Implementation>
</Method>

<Method name="attrImportValidateHeader">
<FormalSpec>header:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	if ..attrClass = "" Quit 0
	 
 	set lHeader = $LFS("PTName,RTSystem,PValue,RValue,"_..getAttrList())
	
	set lCSV = ##class(IIBAENSEMBLE.Functions).ParseCSV(header)
 
	Set ReturnVal=1
 
	for i=1:1:$LL(lHeader) { 
		if ($LL(lCSV)'=$LL(lHeader))||($LI(lCSV,i)'=$LI(lHeader,i)){
	 		Set ReturnVal=0
	 	}
	}
 
 
	Quit ReturnVal
]]></Implementation>
</Method>

<Method name="getAttrData">
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[
	
	set attrString = ..getAttrList()
	
	//Create list from Class Name
	set MCL = $LFS(..attrClass,".")
	//Create a new sublist of all parts of the name except the last part
	set MCLt = $LI(MCL,1,$LL(MCL)-1)
	//Join the parts of that name back into a string delimited by _ except the last part
	set sClassTable = $LTS(MCLt,"_")
	//Add the last part in, but delimited by . 
	set sClassTable = sClassTable_"."_$LI(MCL,$LL(MCL))

	set SQL=""
	set SQL=SQL_"Select RelatedValue.id, PrincipalValue->PValue as "_..PrincipalType.System_", RValue as "_..System_", "_attrString_" from IIBAENSEMBLE_Reference.RelatedValue "
	set SQL=SQL_"LEFT OUTER JOIN "_sClassTable_" "
	set SQL=SQL_"ON attrId = "_$LI(MCL,$LL(MCL))_".id "
	set SQL=SQL_"WHERE RelatedType = "_..%Id()_" "
	set SQL=SQL_"ORDER BY "_..PrincipalType.System
	
	set rs = ##class(%ResultSet).%New()
	do rs.Prepare(SQL)
	do rs.Execute()
	
	Quit rs
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^IIBAENSEMBLE.Re71D.RelatedTypeD</DataLocation>
<DefaultData>RelatedTypeDefaultData</DefaultData>
<IdLocation>^IIBAENSEMBLE.Re71D.RelatedTypeD</IdLocation>
<IndexLocation>^IIBAENSEMBLE.Re71D.RelatedTypeI</IndexLocation>
<StreamLocation>^IIBAENSEMBLE.Re71D.RelatedTypeS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="RelatedTypeDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>DefaultValue</Value>
</Value>
<Value name="3">
<Value>System</Value>
</Value>
<Value name="4">
<Value>OneToOne</Value>
</Value>
<Value name="5">
<Value>PrincipalType</Value>
</Value>
<Value name="6">
<Value>attrClass</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
</Property>
<Property name="DefaultValue">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="OneToOne">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="PrincipalType">
<Selectivity>11.1111%</Selectivity>
</Property>
<Property name="System">
<Selectivity>3.8462%</Selectivity>
</Property>
<Property name="attrClass">
<Selectivity>25.0000%</Selectivity>
</Property>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.Reference.RelatedValue">
<Description>
Copyright 2008 by Inland Imaging Business Associates</Description>
<Super>%Persistent</Super>
<TimeChanged>63358,43103</TimeChanged>
<TimeCreated>61068,55816.488381</TimeCreated>

<Property name="RValue">
<Type>%String</Type>
<Required>1</Required>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Property name="PrincipalValue">
<Type>PrincipalValue</Type>
<Cardinality>one</Cardinality>
<Inverse>RelatedValues</Inverse>
<Relationship>1</Relationship>
<Required>1</Required>
</Property>

<Index name="PrincipalValueIndex">
<Properties>PrincipalValue</Properties>
</Index>

<Property name="RelatedType">
<Type>RelatedType</Type>
<Cardinality>one</Cardinality>
<Inverse>RelatedValues</Inverse>
<Relationship>1</Relationship>
<Required>1</Required>
</Property>

<Index name="RelatedTypeIndex">
<Properties>RelatedType</Properties>
</Index>

<Property name="attrId">
<Type>%Integer</Type>
</Property>

<Method name="attrUpSert">
<FormalSpec>attrName:%String,attrValue:%String</FormalSpec>
<Implementation><![CDATA[
	set obj = $ZOBJCLASSMETHOD(..RelatedType.attrClass,"%OpenId",..attrId)
	if '$ISOBJECT(obj) set obj = $ZOBJCLASSMETHOD(..RelatedType.attrClass,"%New")
	
	
	set $ZOBJPROPERTY(obj, attrName) = attrValue
	
	do obj.%Save()
	
	set ..attrId = obj.%Id()
	
	do ..%Save()
]]></Implementation>
</Method>

<Method name="attrUpSertJSON">
<FormalSpec>Attributes:%String</FormalSpec>
<Implementation><![CDATA[
	set obj = $ZOBJCLASSMETHOD(..RelatedType.attrClass,"%OpenId",..attrId)
	if '$ISOBJECT(obj) set obj = $ZOBJCLASSMETHOD(..RelatedType.attrClass,"%New")
	
	
	
	set Attributes = $TR(Attributes,"{}""")
	
	for i=1:1:$L(Attributes,",") {
		
		set attrPair = $TR($P(Attributes,",",i),"{}""")
		set attrName = $ZSTRIP($P(attrPair,":",1),"<>W")
		set attrValue = $ZSTRIP($P(attrPair,":",2),"<>W")
		if (attrName '= "id")
			&&(attrName '= "RValue")
			&&(attrName '= "PValue")
			&&(attrName '= ..RelatedType.System)
			&&(attrName '= ..RelatedType.PrincipalType.System)
			&&(attrName '= "") {
			set $ZOBJPROPERTY(obj, attrName) = attrValue
			do ##class(IIBAENSEMBLE.csp.Reference).AuditChanges("attrUpSertJSON","attrPair:"_attrPair,..PrincipalValue.PrincipalType.%Id(),..RelatedType.%Id(),..PrincipalValue.%Id(),..%Id())
		}
	}
	
	do obj.%Save()
	
	set ..attrId = obj.%Id()
	
	do ..%Save()
]]></Implementation>
</Method>

<Method name="attr">
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[
	set obj = $ZOBJCLASSMETHOD(..RelatedType.attrClass,"%OpenId",..attrId)
	Quit obj
]]></Implementation>
</Method>

<Method name="attrImport">
<ClassMethod>1</ClassMethod>
<FormalSpec>sRTID:%String,pFileStream:%GlobalCharacterStream</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set HeaderLine = pFileStream.ReadLine()
	
	s ^CacheTempTrace = ""
	s ^CacheTempTrace = sRTID_"^"_HeaderLine
	
	set oRT = ##class(IIBAENSEMBLE.Reference.RelatedType).%OpenId(sRTID)
	
	if '$ISOBJECT(oRT) Quit "{success:false, resultstring:'Related Type Id: "_sRTID_" failed to open.'}"
	
	if 'oRT.attrImportValidateHeader(HeaderLine) {
		Quit "{success:false, resultstring:'Header row failed validation.'}"
	}
		
	while 'pFileStream.AtEnd {
		
		Set tLine = pFileStream.ReadLine()
		
		set lCSV = ##class(IIBAENSEMBLE.Functions).ParseCSV(tLine)
 
 		set sPTName=$LI(lCSV,1)
 		set sRTSystem = $LI(lCSV,2)
 		set sPV = $LI(lCSV,3)
 		set sRV = $LI(lCSV,4)
 		
 		//This condition causes the routine to skip attributes that are not for this Related Type in case you have multiple RT atttributes in one file
 		if (sPTName=oRT.PrincipalType.Name)&&(sRTSystem=oRT.System) {
 		
	 		s attrNameValuePairs = "{"
	 		s attrNameList = $LFS(oRT.getAttrList())
	 		
	 		for i=1:1:$LL(attrNameList) {
		 		if i > 1 s attrNameValuePairs=attrNameValuePairs_","
		 		s attrNameValuePairs = attrNameValuePairs_$LI(attrNameList,i)_":"_$LI(lCSV,4+i)
	 		}
 			set attrNameValuePairs=attrNameValuePairs_"}"
 			
	 		set sRVID=""
	
			&sql(select ID into :sRVID from IIBAENSEMBLE_Reference.RelatedValue where RValue = :sRV AND PrincipalValue->PValue = :sPV AND RelatedType = :sRTID)
			if SQLCODE '= 0 s sRVID = ""
		
			set oRV = ##class(IIBAENSEMBLE.Reference.RelatedValue).%OpenId(sRVID)
		
			if $ISOBJECT(oRV) do oRV.attrUpSertJSON(attrNameValuePairs)
 		}	
	}
	Quit "{success:true, resultstring:'Import completed successfully.'}"
]]></Implementation>
</Method>

<Method name="attrDelete">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = 1
	if ..RelatedType.attrClass '= "" {
	
	set tSC = $ZOBJCLASSMETHOD(..RelatedType.attrClass,"%DeleteId",..attrId)
	if tSC {
		set ..attrId = ""
		do ..%Save()
	}
	
	}
	Quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^IIBAENSEMBLE.R71D.RelatedValueD</DataLocation>
<DefaultData>RelatedValueDefaultData</DefaultData>
<IdLocation>^IIBAENSEMBLE.R71D.RelatedValueD</IdLocation>
<IndexLocation>^IIBAENSEMBLE.R71D.RelatedValueI</IndexLocation>
<StreamLocation>^IIBAENSEMBLE.R71D.RelatedValueS</StreamLocation>
<ExtentSize>39887</ExtentSize>
<Data name="RelatedValueDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Value</Value>
</Value>
<Value name="3">
<Value>PrincipalValue</Value>
</Value>
<Value name="4">
<Value>RelatedType</Value>
</Value>
<Value name="5">
<Value>RValue</Value>
</Value>
<Value name="6">
<Value>attrId</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>99.9991%</Selectivity>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
</Property>
<Property name="PrincipalValue">
<Selectivity>0.0156%</Selectivity>
</Property>
<Property name="RValue">
<Selectivity>0.0063%</Selectivity>
</Property>
<Property name="RelatedType">
<Selectivity>1.7241%</Selectivity>
</Property>
<Property name="attrId">
<Selectivity>7.6923%</Selectivity>
</Property>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.Task.AlertFreeSpace">
<Description>
Copyright 2007 by Inland Imaging Business Associates
The names of the Directories to check are stored in TaskItemDefinition as item type NSDir</Description>
<Super>%SYS.Task.Definition</Super>
<TimeChanged>61191,51296.218318</TimeChanged>
<TimeCreated>60906,36916.256329</TimeCreated>

<Parameter name="TaskName">
<Default>AlertFreeSpace</Default>
</Parameter>

<Property name="EmailCC">
<Description>
used to populate the "From:" field in the email generated to send the Buttons report</Description>
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="EmailFrom">
<Description>
used to populate the "From:" field in the email generated to send the Buttons report</Description>
<Type>%String</Type>
<InitialExpression>"EnsTEST@duvoisin.com"</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="EmailTo">
<Description>
used to populate the "From:" field in the email generated to send the Buttons report</Description>
<Type>%String</Type>
<InitialExpression>"msimpson@ii-ba.com"</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="EmailReplyTo">
<Description>
used to populate the "Reply-To:" field in the email generated to send the Buttons report</Description>
<Type>%String</Type>
<InitialExpression>"EnsTEST@duvoisin.com"</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="SMTPServer">
<Description>
name of SMTP server to use for sending %Buttons; if this is blank, the Buttons report will not be sent to InterSystems</Description>
<Type>%String</Type>
<InitialExpression>"smtp.duvoisin.com"</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="SMTPUser">
<Description>
name of SMTP Authenticated User</Description>
<Type>%String</Type>
<InitialExpression>"webuser"</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="SMTPPass">
<Description>
password of SMTP Authenitcated User</Description>
<Type>%String</Type>
<InitialExpression>"webuser"</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="SMTPPort">
<Description>
password (stored encrypted) of SMTP Authenitcated User</Description>
<Type>%String</Type>
<InitialExpression>25</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="Threshold">
<Description>
FreeSpace Threshold</Description>
<Type>%String</Type>
<InitialExpression>3000</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
 set db = ##class(%Monitor.System.Freespace).%New()
 w db.Initialize()
 
 s DBThreshold=""

 &sql(DECLARE C1 CURSOR FOR 
	 SELECT ItemName, ItemValue INTO :DBDir,:DBThreshold
	 FROM IIBAENSEMBLE_Task.TaskItemDefinition 
	 WHERE ItemType='NSDir')
 &sql(OPEN C1)
   For { &sql(FETCH C1)  Quit:SQLCODE'=0 	
	
	set dbFreeSpace = 0
	
	do ##class(SYS.Database).GetDatabaseFreeSpace(DBDir,.dbFreeSpace)
	
	s:DBThreshold="" DBThreshold=..Threshold
	
	IF dbFreeSpace <= DBThreshold {
		
	  If ..SMTPServer '= "",..EmailFrom '= ""  {
		Set s=##class(%Net.SMTP).%New()
		Set AuthUser=$ZSTRIP(..SMTPUser,"<>W")
		Set objAuth=""
		If AuthUser]"" {
			#; use default authentication list
			set objAuth=##class(%Net.Authenticator).%New() 
			Set objAuth.UserName=AuthUser
			Set objAuth.Password=..SMTPPass
		}
		If objAuth set s.authenticator=objAuth
		Set s.smtpserver=..SMTPServer
		Set s.port=..SMTPPort
		Set m = ##class(%Net.MailMessage).%New()
		Set m.From = ..EmailFrom
		Set m.ReplyTo = ..EmailReplyTo
		Set m.Subject = DBDir_" FREESPACE: "_dbFreeSpace_" mb"
		Set m.Charset="iso-8859-1"
		Do m.To.Insert(..EmailTo)
		If ..EmailCC'="" {
			for i=1:1:$L(..EmailCC,",") {
				Do m.Cc.Insert($P(..EmailCC,",",i))
			}	
		}
		Set Status = m.TextData.Write(DBDir_$C(10)_$C(13)_" FREESPACE: "_dbFreeSpace_" mb"_$C(10)_$C(13)_" Threshold: "_DBThreshold_ " mb")
		Set Status = s.Send(m)
		
	  }
	}
   }
	
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Task.ArchiveHL7">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%SYS.Task.Definition</Super>
<TimeChanged>61158,57712.967067</TimeChanged>
<TimeCreated>60906,36916.256329</TimeCreated>

<Parameter name="TaskName">
<Default>ArchiveHL7</Default>
</Parameter>

<Property name="sDate1">
<Type>%String</Type>
</Property>

<Property name="sDate2">
<Type>%String</Type>
</Property>

<Property name="ArchivePath">
<Type>%String</Type>
</Property>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	D ##class(IIBAENSEMBLE.Utilities).ArchiveHL7(..sDate1,..sDate2,..ArchivePath)
	
	
	
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Task.BackupDB">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%SYS.Task.Definition</Super>
<TimeChanged>61457,41389.687533</TimeChanged>
<TimeCreated>60906,36916.256329</TimeCreated>

<Parameter name="TaskName">
<Default>BackupDB</Default>
</Parameter>

<Property name="EmailCC">
<Description>
used to populate the "From:" field in the email generated to send the Buttons report</Description>
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="EmailFrom">
<Description>
used to populate the "From:" field in the email generated to send the Buttons report</Description>
<Type>%String</Type>
<InitialExpression>"EnsTEST@duvoisin.com"</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="EmailTo">
<Description>
used to populate the "From:" field in the email generated to send the Buttons report</Description>
<Type>%String</Type>
<InitialExpression>"msimpson@ii-ba.com"</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="EmailReplyTo">
<Description>
used to populate the "Reply-To:" field in the email generated to send the Buttons report</Description>
<Type>%String</Type>
<InitialExpression>"EnsTEST@duvoisin.com"</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="SMTPServer">
<Description>
name of SMTP server to use for sending %Buttons; if this is blank, the Buttons report will not be sent to InterSystems</Description>
<Type>%String</Type>
<InitialExpression>"smtp.duvoisin.com"</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="SMTPUser">
<Description>
name of SMTP Authenticated User</Description>
<Type>%String</Type>
<InitialExpression>"webuser"</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="SMTPPass">
<Description>
password of SMTP Authenitcated User</Description>
<Type>%String</Type>
<InitialExpression>"webuser"</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="SMTPPort">
<Description>
SMTPPort</Description>
<Type>%String</Type>
<InitialExpression>25</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="BackupPath">
<Description>
Local Backup Path with trailing \</Description>
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="ArchivePath">
<Description>
Remote Archive location to copy backup to (unc) with trailing \</Description>
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="ArchivePath2">
<Description>
Remote Archive location to duplicate the current archive to prior to purging it with new backups with trailing \</Description>
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="BackupTask">
<Description><![CDATA[
Type of Backup to perform<br>
Use "CopyCurrentArchive" to make a copy of the files in ArchivePath to ArchivePath2]]></Description>
<Type>%String</Type>
<InitialExpression>"CumuIncrDBList / FullDBList"</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = 1
	if ..IsBackupRunning(.Info)=0 {
	
	  If ..BackupTask = "CopyCurrentArchive" {
		  set result = $ZF(-2,"robocopy "_..ArchivePath_" "_..ArchivePath2_" /R:0 /PURGE /XF """_..BackupPath_"copylog.log"" /V /NP /LOG+:"""_..BackupPath_"copylog.log""")
		  if result '= 0 {
		  	set tSC = result
		  } else {
			set tSC = 1
		  }
	  } else {
		
		do ..removeoldbackups()
		
		set tSC = ##class(Backup.General).StartTask(..BackupTask,0,1,..BackupPath)
		
		if 'tSC {
			set tSC = ##class(Backup.General).StartTask("FullDBList",0,1,..BackupPath)
		}
		
		if tSC {
			
			set result = $ZF(-2,"robocopy "_..BackupPath_" "_..ArchivePath_" /R:0 /PURGE /XF """_..BackupPath_"copylog.log"" /V /NP /LOG+:"""_..BackupPath_"copylog.log""")
			if result '= 0 {
				set tSC = result
			} else {
				set tSC = 1
			}
			
			/*
			//This commented code replaced by robo copy commands above
			do ..removeoldarchives()
		
			// do copy of new backup file to archive
			set NewestFile = ""
			Set rset = ##class(%ResultSet).%New()
			set rset.ClassName = "%File"
			set rset.QueryName = "FileSet"
			Do rset.Execute(..BackupPath,"*.cbk","DateModified",0)
			While rset.Next() { set NewestFile = rset.Data("Name") } //get last file which is most recent as sort is ascending
			if NewestFile '= "" {
				set result = $ZF(-2,"copy "_NewestFile_" "_..ArchivePath_##class(%File).GetFilename(NewestFile)_" /Y")
				if result '= 0 {
					set tSC = result
				} else {
					set tSC = 1
				}
			}
			*/
		}
	  }
		
	} else {
		do ..Alert(.Info)
	}

	Quit tSC
]]></Implementation>
</Method>

<Method name="IsBackupRunning">
<FormalSpec>Info:%RegisteredObject</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set Return = 0
	set rs=##class(%ResultSet).%New("Backup.Task:List")
	do rs.Execute()
	While rs.Next() {
		if rs.Data("Status") = "Running" {
			set Info(rs.Data("Name"),"Name") = rs.Data("Name")
			set Info(rs.Data("Name"),"Type") = rs.Data("Type")
			set Info(rs.Data("Name"),"Device") = rs.Data("Device")
			set Info(rs.Data("Name"),"Description") = rs.Data("Description")
			set Info(rs.Data("Name"),"Status") = rs.Data("Status")
			set Info(rs.Data("Name"),"LastLogFile") = rs.Data("LastLogFile")
			set Return = 1
		}
	}
	
	Quit Return
]]></Implementation>
</Method>

<Method name="Alert">
<FormalSpec>Info:%RegisteredObject</FormalSpec>
<Implementation><![CDATA[
	 
	 set Name = ""
	 For {
	 	Set Name=$O(Info(Name))
 		Q:Name=""
 		set Body="The requested backup task will not run because the following backup is currently running."_$C(13,10)_$C(13,10)
 		
 		set Body = Body_"Name: "_Info(Name,"Name")_$C(13,10)
 		set Body = Body_"Status: "_Info(Name,"Status")_$C(13,10)
 		set Body = Body_"Type: "_Info(Name,"Type")_$C(13,10)
 		set Body = Body_"Device: "_Info(Name,"Device")_$C(13,10)
 		set Body = Body_"LogFile: "_Info(Name,"LastLogFile")_$C(13,10)
 		
 		set Body = Body_$C(13,10)_$C(13,10)
 		 		
	 }
	 
	do ..SendEmail(Body)
]]></Implementation>
</Method>

<Method name="SendEmail">
<FormalSpec>Body:%String</FormalSpec>
<Implementation><![CDATA[

	If ..SMTPServer '= "",..EmailFrom '= ""  {
		Set s=##class(%Net.SMTP).%New()
		Set AuthUser=$ZSTRIP(..SMTPUser,"<>W")
		Set objAuth=""
		If AuthUser]"" {
			#; use default authentication list
			set objAuth=##class(%Net.Authenticator).%New() 
			Set objAuth.UserName=AuthUser
			Set objAuth.Password=..SMTPPass
		}
		If objAuth set s.authenticator=objAuth
		Set s.smtpserver=..SMTPServer
		Set s.port=..SMTPPort
		Set m = ##class(%Net.MailMessage).%New()
		Set m.From = ..EmailFrom
		Set m.ReplyTo = ..EmailReplyTo
		Set m.Subject = "Backup Task Failed"
		Set m.Charset="iso-8859-1"
		Do m.To.Insert(..EmailTo)
		If ..EmailCC'="" {
			for i=1:1:$L(..EmailCC,",") {
				Do m.Cc.Insert($P(..EmailCC,",",i))
			}	
		}
		Set Status = m.TextData.Write(Body)
		Set Status = s.Send(m)
	}
]]></Implementation>
</Method>

<Method name="removeoldbackups">
<Implementation><![CDATA[
	set countofcum = 0, cumsnewerthanfull = ""
	If ..BackupTask = "FullDBList" {
		Set rset = ##class(%ResultSet).%New()
		set rset.ClassName = "%File"
		set rset.QueryName = "FileSet"
		Do rset.Execute(..BackupPath,"*.cbk","DateModified",0)
		While rset.Next() {
			d ##class(%File).Delete(rset.Data("Name"))	
		}
		d rset.Close()		
	}
	If ..BackupTask = "CumuIncrDBList" {
		Set rset = ##class(%ResultSet).%New()
		set rset.ClassName = "%File"
		set rset.QueryName = "FileSet"
		Do rset.Execute(..BackupPath,"CumuIncrDBList*.cbk","DateModified",0)
		While rset.Next() {
			set countofcum = countofcum+1
			set cumsnewerthanfull(countofcum) = rset.Data("Name")
		}
		d rset.Close()
		for i=1:1:countofcum-1 {
			d ##class(%File).Delete(cumsnewerthanfull(i))
		}
	}
]]></Implementation>
</Method>

<Method name="removeoldarchives">
<Implementation><![CDATA[
	set CurrentFullDate = "", countofcum = 0, cumsnewerthanfull = ""
	Set fullrset = ##class(%ResultSet).%New()
	set fullrset.ClassName = "%File"
	set fullrset.QueryName = "FileSet"
	Do fullrset.Execute(..ArchivePath,"FullDBList*.cbk","DateModified",0)
	While fullrset.Next() { set CurrentFullDate = $TR(fullrset.Data("DateModified"),"- :") } //get last full which is most recent as sort is ascending
	d fullrset.Close()
	if CurrentFullDate'="" {
		If ..BackupTask = "FullDBList" {
			Set rset = ##class(%ResultSet).%New()
			set rset.ClassName = "%File"
			set rset.QueryName = "FileSet"
			Do rset.Execute(..ArchivePath,"*.cbk","DateModified",0)
			While rset.Next() {
				if $TR(rset.Data("DateModified"),"- :") < CurrentFullDate d ##class(%File).Delete(rset.Data("Name"))	
			}
			d rset.Close()		
		}
		If ..BackupTask = "CumuIncrDBList" {
			Set rset = ##class(%ResultSet).%New()
			set rset.ClassName = "%File"
			set rset.QueryName = "FileSet"
			Do rset.Execute(..ArchivePath,"CumuIncrDBList*.cbk","DateModified",0)
			While rset.Next() {
				if $TR(rset.Data("DateModified"),"- :") > CurrentFullDate {
					set countofcum = countofcum+1
					set cumsnewerthanfull(countofcum) = rset.Data("Name")
				}
			}
			d rset.Close()
			for i=1:1:countofcum-1 {
				d ##class(%File).Delete(cumsnewerthanfull(i))
			}
		}
	}
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Task.BackupTables">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%SYS.Task.Definition</Super>
<TimeChanged>61097,25463.716326</TimeChanged>
<TimeCreated>60906,36916.256329</TimeCreated>

<Parameter name="TaskName">
<Default>BackupTables</Default>
</Parameter>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set rset = ##class(%ResultSet).%New()
	do rset.Prepare("Select LeftID1 as SchemaName, LeftID2 as TableName, LeftID3 as FileName, RightID as ColumnNames from IIBAENSEMBLE.LookupTable where LookupID = 'TableBackupList'")
	do rset.Execute()
	
	While rset.Next() {
		kill pParms
	
		set pParms("FileName") = rset.Data("FileName")
		set pParms("Columns") = $LFS(rset.Data("ColumnNames"))
		set pParms("SchemaName") = rset.Data("SchemaName")
		set pParms("TableName") = rset.Data("TableName")
	
		do ..TableExport(.pParms)
	
	}	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="TableExport">
<Description><![CDATA[
This Method utilizes the %SQL.Export.Mgr class to export tables to text files.<p>
Several of the available parameters are hard coded such as: Delimiter, StringQuote, Date, Time.<p>
4 Parameters are required to successfully use this method.  The parameters are passed to this method as one array with 4 elements.<p>
<ul>
<li><b>SchemaName</b> - example: set pParms("SchemaName") = "IIBAENSEMBLE" </li>
<li><b>Table</b> - example: set pParms("TableName") = "LookupTable" </li>
<li><b>FileName</b> - example: set pParms("FileName") = "E:\RestoreData\LookupTableBackup.txt" </li>
<li><b>Columns</b> - example: set pParms("Columns") = $LFS("LeftID1^S,LeftID2^S,LeftID3^S,LookupID^S,RightID^S") <br>
Columns is a list delimited by commas.  Each list item has two parts delimited by ^.  Part 1 is column name. Part 2 is data type. The data types are:
<ul>
<li>"D" for %Library.Date </li>
<li>"T" for %Library.Time </li>
<li>"N" for %Library.Integer, %Library.Boolean, %Library.Float, %Library.Numeric, %Library.SmallInt, %Library.TinyInt, %Library.Currency </li>
<li>"S" for %Library.String and all others </li>
</ul></li></ul>
Example of calling this method with pParms array: do ##class(IIBAENSEMBLE.Utilities).TableExport(.pParms)]]></Description>
<FormalSpec><![CDATA[&pParms:%String]]></FormalSpec>
<Implementation><![CDATA[
		if ($G(pParms("SchemaName"))="") ||
		($G(pParms("TableName"))="") ||
		($G(pParms("FileName"))="") ||
		($G(pParms("Columns"))="") { Quit }
	
	
	set pParms("Delimiter") = 0
	set pParms("StringQuote") = "double"
	set pParms("DateFormat") = 1
	set pParms("TimeFormat") = 1
	set pParms("NoCheck") = 0
	set pParms("HasHeaders") = 1
 	set pParms("TotalColumns") = $LL(pParms("Columns"))
 	
 	Set SchemaName = pParms("SchemaName"), TableName = pParms("TableName")
	
	Do {
	    set mgr = ##class(%SQL.Export.Mgr).%New()
	    Set mobj = ##class(%SQL.Manager.API).%New()
	    Set ok = mobj.CheckIdentifier(.SchemaName)
	    Set ok = mobj.CheckIdentifier(.TableName)
	    Set classname = mobj.FindClassName(SchemaName_"."_TableName)
	    Set mgr.FileName = pParms("FileName")
	    Set mgr.TableName = SchemaName_"."_TableName
	    Set mgr.ClassName = classname
	    Set mgr.Delimiter = $c(9)
	    Set delim = pParms("StringQuote")
	    Set mgr.StringQuote = $s(delim="":"",delim="double":"""",1:"'")
	 	Set mgr.DateFormat = pParms("DateFormat")
	 	Set mgr.TimeFormat = pParms("TimeFormat")
	 	Set mgr.NoCheck = pParms("NoCheck")
	  	Set mgr.HasHeaders = pParms("HasHeaders")
		For i = 1:1:pParms("TotalColumns") {
			Set coldata = $li(pParms("Columns"),i)
			Set colname = $p(coldata,"^",1)
			Set datatype = $p(coldata,"^",2)
 			Set ok = mobj.CheckIdentifier(.colname)
		 	Do mgr.ColumnNames.Insert(colname)
		 	Do mgr.ColumnTypes.Insert(datatype)
		}
 
	 	Set rows = 1000
	 	Set done = 0
	 	Set total = 0
	 	Set totalbytes = 0
	 	Set totalinserted = 0
	 	Set numerr = 0
	 	Set size = 0
	 	Set header = ""
			Set result = mgr.GenerateExportRoutine()
		 	if result '= 1 {
			 	Set tmsg = "Error generating export routine: "_result
			 	do ##class(Ens.Util.Log).LogError("IIBAENSEMBLE.Utilities", "TableExport", tmsg)
			 	Quit
		 	}
			do mgr.OpenExport()
			Set sta = mgr.GetExportSize(.size)
			if size = 0 {
				do ##class(Ens.Util.Log).LogWarning("IIBAENSEMBLE.Utilities", "TableExport", "Table: "_TableName_" - No data to export")
			} else {
				while done = 0 {
					do mgr.ExportRows(.rows,.done)
					Set total = total + rows
				}
				do ##class(Ens.Util.Log).LogInfo("IIBAENSEMBLE.Utilities", "TableExport", "Table: "_TableName_" / Exported: "_total_" rows")
			}
			do mgr.CloseExport()
			do mgr.DeleteExportRoutine()
 
		Set mobj = ""
	} While(0)
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Task.BackupToNetwork">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%SYS.Task.Definition</Super>
<TimeChanged>61269,43097.374294</TimeChanged>
<TimeCreated>60906,36916.256329</TimeCreated>

<Parameter name="TaskName">
<Default>BackupToNetwork</Default>
</Parameter>

<Property name="EmailCC">
<Description>
used to populate the "From:" field in the email generated to send the Buttons report</Description>
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="EmailFrom">
<Description>
used to populate the "From:" field in the email generated to send the Buttons report</Description>
<Type>%String</Type>
<InitialExpression>"EnsTEST@duvoisin.com"</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="EmailTo">
<Description>
used to populate the "From:" field in the email generated to send the Buttons report</Description>
<Type>%String</Type>
<InitialExpression>"msimpson@ii-ba.com"</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="EmailReplyTo">
<Description>
used to populate the "Reply-To:" field in the email generated to send the Buttons report</Description>
<Type>%String</Type>
<InitialExpression>"EnsTEST@duvoisin.com"</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="SMTPServer">
<Description>
name of SMTP server to use for sending %Buttons; if this is blank, the Buttons report will not be sent to InterSystems</Description>
<Type>%String</Type>
<InitialExpression>"smtp.duvoisin.com"</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="SMTPUser">
<Description>
name of SMTP Authenticated User</Description>
<Type>%String</Type>
<InitialExpression>"webuser"</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="SMTPPass">
<Description>
password of SMTP Authenitcated User</Description>
<Type>%String</Type>
<InitialExpression>"webuser"</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="SMTPPort">
<Description>
SMTPPort</Description>
<Type>%String</Type>
<InitialExpression>25</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="DriveLetter">
<Description>
Drive Letter</Description>
<Type>%String</Type>
<InitialExpression>"Z"</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="uncpath">
<Description>
UNC path</Description>
<Type>%String</Type>
<InitialExpression>"\\sqlbackup\Backups4\Ensemble"</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="DomainUser">
<Description>
Domain User</Description>
<Type>%String</Type>
<InitialExpression>"duvoisin\svc_iibaensemble"</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="DomainPass">
<Description>
Domain user Password</Description>
<Type>%String</Type>
<InitialExpression>"118aensem8le"</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="BackupTask">
<Description>
Drive Letter</Description>
<Type>%String</Type>
<InitialExpression>"CumuIncrDBList / FullDBList"</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	//if ..IsBackupRunning(.Info)=0 {
	
		do $ZF(-1,"net use "_..DriveLetter_": /DELETE")
		do $ZF(-1,"net use "_..DriveLetter_": "_..uncpath_" /USER:"_..DomainUser_" "_..DomainPass)
		do $ZF(-1,"cscript "_..DriveLetter_":\script\deleteolderthan2.vbs "_..BackupTask)
		set tSC = ##class(Backup.General).StartTask(..BackupTask,0,1,..DriveLetter_":\")
		do $ZF(-1,"net use "_..DriveLetter_": /DELETE")

	//} else {
	//	do ..Alert(.Info)
	//}

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="IsBackupRunning">
<FormalSpec>Info:%RegisteredObject</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set Return = 0
	set rs=##class(%ResultSet).%New("Backup.Task:List")
	do rs.Execute()
	While rs.Next() {
		if rs.Data("Status") = "Running" {
			set Info(rs.Data("Name"),"Name") = rs.Data("Name")
			set Info(rs.Data("Name"),"Type") = rs.Data("Type")
			set Info(rs.Data("Name"),"Device") = rs.Data("Device")
			set Info(rs.Data("Name"),"Description") = rs.Data("Description")
			set Info(rs.Data("Name"),"Status") = rs.Data("Status")
			set Info(rs.Data("Name"),"LastLogFile") = rs.Data("LastLogFile")
			set Return = 1
		}
	}
	
	Quit Return
]]></Implementation>
</Method>

<Method name="Alert">
<FormalSpec>Info:%RegisteredObject</FormalSpec>
<Implementation><![CDATA[
	 
	 set Name = ""
	 For {
	 	Set Name=$O(Info(Name))
 		Q:Name=""
 		set Body="The requested backup task will not run because the following backup is currently running."_$C(13,10)_$C(13,10)
 		
 		set Body = Body_"Name: "_Info(Name,"Name")_$C(13,10)
 		set Body = Body_"Status: "_Info(Name,"Status")_$C(13,10)
 		set Body = Body_"Type: "_Info(Name,"Type")_$C(13,10)
 		set Body = Body_"Device: "_Info(Name,"Device")_$C(13,10)
 		set Body = Body_"LogFile: "_Info(Name,"LastLogFile")_$C(13,10)
 		
 		set Body = Body_$C(13,10)_$C(13,10)
 		 		
	 }
	 
	do ..SendEmail(Body)
]]></Implementation>
</Method>

<Method name="SendEmail">
<FormalSpec>Body:%String</FormalSpec>
<Implementation><![CDATA[

	If ..SMTPServer '= "",..EmailFrom '= ""  {
		Set s=##class(%Net.SMTP).%New()
		Set AuthUser=$ZSTRIP(..SMTPUser,"<>W")
		Set objAuth=""
		If AuthUser]"" {
			#; use default authentication list
			set objAuth=##class(%Net.Authenticator).%New() 
			Set objAuth.UserName=AuthUser
			Set objAuth.Password=..SMTPPass
		}
		If objAuth set s.authenticator=objAuth
		Set s.smtpserver=..SMTPServer
		Set s.port=..SMTPPort
		Set m = ##class(%Net.MailMessage).%New()
		Set m.From = ..EmailFrom
		Set m.ReplyTo = ..EmailReplyTo
		Set m.Subject = "Backup Task Failed"
		Set m.Charset="iso-8859-1"
		Do m.To.Insert(..EmailTo)
		If ..EmailCC'="" {
			for i=1:1:$L(..EmailCC,",") {
				Do m.Cc.Insert($P(..EmailCC,",",i))
			}	
		}
		Set Status = m.TextData.Write(Body)
		Set Status = s.Send(m)
	}
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Task.CycleInterface">
<Super>%SYS.Task.Definition</Super>
<TimeChanged>61677,58780.613663</TimeChanged>
<TimeCreated>61677,32228.19458</TimeCreated>

<Parameter name="TaskName">
<Default>CycleInterface</Default>
</Parameter>

<Property name="InterfaceName">
<Type>%String</Type>
</Property>

<Property name="InactivityThreshold">
<Description>
Inactivity time before cycle the interface (Minutes)</Description>
<Type>%String</Type>
<InitialExpression>"60"</InitialExpression>
</Property>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	D ##class(IIBAENSEMBLE.Utilities).CycleInterface(..InterfaceName,..InactivityThreshold)
	
	
	
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Task.FileZip">
<Super>%SYS.Task.Definition</Super>
<TimeChanged>63425,62121.579999</TimeChanged>
<TimeCreated>61677,32228.19458</TimeCreated>

<Parameter name="TaskName">
<Default>ZipFiles</Default>
</Parameter>

<Property name="UseDateRange">
<Description>
This method is used to create compressed files and place them in an archive folder. pUseDateRange defaults to 0. If a specified date range is desired change to 1 and enter StartDate and EndDate. 
The default date range is for the current day.
pUseDateRange enter a 0 to use default (current day) or 1 to specify date range</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="StartDate">
<Description>
pStartDate = Zip2.32 will compress all files in tziplist after this date (mmddyyyy or yyyy-mm-dd)</Description>
<Type>%String</Type>
</Property>

<Property name="EndDate">
<Description>
pEndDate = Zip2.32 will compress all files in tziplist prior to and including this date (mmddyyyy or yyyy-mm-dd)</Description>
<Type>%String</Type>
</Property>

<Property name="ArchiveDirectory">
<Description>
pArchiveDir = file path of the archive directory.</Description>
<Type>%String</Type>
</Property>

<Property name="FileName">
<Description>
pFileName = file name of compressed records. Default is ZippedFile, pStartDate will be appended to filename</Description>
<Type>%String</Type>
</Property>

<Property name="FileType">
<Description>
pFileType = type of files to be processed Ex: *.txt, *.csv. Default is all files (*).</Description>
<Type>%String</Type>
</Property>

<Property name="ZipList">
<Description>
pZiplist = file path of directory to be compressed.</Description>
<Type>%String</Type>
</Property>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tSC As %Status = $$$OK
	
	s tSC = ##class(IIBAENSEMBLE.Utilities).ZipArchived(..UseDateRange,..StartDate,..EndDate,..ArchiveDirectory,..FileName,..FileType,..ZipList)
	
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Task.FolderPurge">
<Super>%SYS.Task.Definition</Super>
<TimeChanged>61433,48053.253873</TimeChanged>
<TimeCreated>61432,41158.977811</TimeCreated>

<Parameter name="TaskName">
<Default>FolderPurge</Default>
</Parameter>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
		
	Set FolderName="",PurgeDays="",ItemValue="",tSC=$$$OK
	
	&sql(DECLARE C1 CURSOR FOR 
		 SELECT ItemName,ItemValue INTO :FolderName,:ItemValue
		 FROM IIBAENSEMBLE_Task.TaskItemDefinition 
		 WHERE NameSpace = 'All' AND ItemType='FolderPurge')
	&sql(OPEN C1)
		For { &sql(FETCH C1)  Quit:SQLCODE'=0 
			//W !,FolderName,", ",ItemValue,!
			s FileSpec=$P(ItemValue,"^",1)
			s PurgeDays=$P(ItemValue,"^",2)+0
			If ((FileSpec="") || (FolderName="") || (PurgeDays<1)) Continue
			// Clean out Archive files older than 'PurgeDays' days
			
			Set MgrDir=##class(%File).ManagerDirectory(),FolderIsMgr=""
			s MgrDirRoot=##class(%File).GetDirectoryPiece(MgrDir,1)
			For {
				s:##class(%File).NormalizeDirectory(MgrDir)=##class(%File).NormalizeDirectory(FolderName) FolderIsMgr=1
				s MgrDir=##class(%File).ParentDirectoryName(MgrDir)
				Q:MgrDir=""||(MgrDir=##class(%File).ParentDirectoryName(MgrDir))
			}
			Continue:FolderIsMgr||'##class(%File).DirectoryExists(FolderName)
			
			W !,"Purge files from '",FolderName,"' Folder",!
			
			Set rset = ##class(%ResultSet).%New()
			set rset.ClassName = "%File"
			set rset.QueryName = "FileSet"
			Do rset.Execute(FolderName,FileSpec)
			Set FileDelete = 1
			While (rset.Next()) {
				
				if ($ZB(##class(%File).Attributes(rset.Data("Name")),16,1)=0) {
					// only delete files - skip directories
					If $PIECE($HOROLOG,",") - $PIECE($ZDATETIMEH(rset.Data("DateModified"),3,1),",") > PurgeDays {
						w rset.Data("Name"),!
						s FileDelete=""
						Set FileDelete = ##class(%File).Delete(rset.Data("Name"))
						If FileDelete = 0 {
							//W "File delete Failed: "_rset.Data("Name")
							s tSC=0
						}
					}
				}
			}
		
		}
	&sql(CLOSE C1)
	
	Q $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Task.GetProductionItems">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%SYS.Task.Definition</Super>
<TimeChanged>61066,35763.827902</TimeChanged>
<TimeCreated>60906,36916.256329</TimeCreated>

<Parameter name="TaskName">
<Default>GetProductionItems</Default>
</Parameter>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set NameSpace = $ZNSPACE
	
	&sql(DELETE FROM IIBAENSEMBLE_Task.TaskItemDefinition
		WHERE NameSpace = :NameSpace AND ItemType = 'ProdItems')
	
	Set ProductionName=""
	Set ProductionStatus=""
	set status = ##class(Ens.Director).GetProductionStatus(.ProductionName,.ProductionStatus)

	set production=##class(Ens.Config.Production).%OpenId(ProductionName)

	for i=1:1:production.Items.Count() {
		
		// collect item names
		s item=production.Items.GetAt(i)
		s name=item.Name
		&sql(INSERT INTO IIBAENSEMBLE_Task.TaskItemDefinition
			(NameSpace, ItemType, ItemName)
			VALUES
			(:NameSpace, 'ProdItems', :name))
	}
	
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Task.GetUsersDefaultNS">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%SYS.Task.Definition</Super>
<TimeChanged>62677,46354.313711</TimeChanged>
<TimeCreated>60906,36916.256329</TimeCreated>

<Parameter name="TaskName">
<Default>GetUsersDefaultNS</Default>
</Parameter>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&sql(delete from IIBAENSEMBLE_Task.TaskItemDefinition WHERE ItemType = 'DefaultNS')
	
	set rs = ##class(%ResultSet).%New("Security.Users:Detail")
	do rs.Execute("*","*","*")
	While rs.Next() {
		set sName="",sNS=""
		set sName = rs.Data("Name")
		set sNS=rs.Data("Namespace")
		&sql(insert into IIBAENSEMBLE_Task.TaskItemDefinition (NameSpace, ItemType, ItemName, ItemValue) VALUES('All','DefaultNS',:sName,:sNS))
		
		
	
	}
	
	
	
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Task.GlobalExport">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%SYS.Task.Definition</Super>
<TimeChanged>61219,36359.20374</TimeChanged>
<TimeCreated>60906,36916.256329</TimeCreated>

<Parameter name="TaskName">
<Default>GlobalExport</Default>
</Parameter>

<Property name="FileName">
<Description>
The globals will be exported to this filename.</Description>
<Type>%String</Type>
</Property>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = 1
	
	do ..GetGlobalList(.GlobalList)
	
	set tSC = ##class(%Library.Global).Export($ZNSPACE,.GlobalList,..FileName,7,"V")
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="GetGlobalList">
<FormalSpec><![CDATA[&GlobalList:%String]]></FormalSpec>
<Implementation><![CDATA[
	set GlobalList = ""
	
	set x = ""
	
	set i = 0
	
	set NameSpace = $ZNSPACE	
	
	&sql(DECLARE C1 CURSOR FOR
		SELECT ItemName into :x 
		FROM IIBAENSEMBLE_Task.TaskItemDefinition 
		WHERE ItemType = 'GlobalExport' AND NameSpace = :NameSpace)
		
		&sql(OPEN C1)
		&sql(FETCH C1)
		While (SQLCODE = 0) {
			set i = i+1
			set $LIST(GlobalList,i) = x
			&sql(FETCH C1)
		}
	&sql(CLOSE C1)
	
	set GlobalList = $LTS(GlobalList,",")
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Task.LockList">
<Super>%SYS.Task.Definition</Super>
<TimeChanged>63602,57352.254272</TimeChanged>
<TimeCreated>63602,55344.428827</TimeCreated>

<Parameter name="TaskName">
<Default>LockList</Default>
</Parameter>

<Property name="TargetFilePath">
<Description>
This method is used to create a text file of the lock table information named "LockList"
Specify desired file path. Leaving TargetFilePath blank will default to Install directory</Description>
<Type>%String</Type>
</Property>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#Dim tSC As %Status = $$$OK
	#Dim file As %File
	
	s tSC = ..RemoveOldFiles() q:'tSC
	
	if ..TargetFilePath = ""
	{
		s ..TargetFilePath = ##class(%File).ParentDirectoryName(##class(%File).ManagerDirectory())
	}
	
	Set tCompletePath = ##class(%File).NormalizeFilename("LockList.txt",..TargetFilePath)
	
	Set Rset = ##class(%ResultSet).%New("%SYS.LockQuery:List")
	Do Rset.Execute()
	
	Set file = tCompletePath
	Open file:"WNS"
	Use file while Rset.%Next() {
		Do Rset.%Print()
	}
	Close file
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="RemoveOldFiles">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#Dim tSC As %Status = $$$OK
	
	if ..TargetFilePath = "" {
		s ..TargetFilePath = ##class(%File).ParentDirectoryame(##class(%File).ManagerDirectory())
	}
	
	s ..TargetFilePath = ##class(%File).NormalizeDirectory(..TargetFilePath)
	
	Set rset = ##class(%ResultSet).%New()
	set rset.ClassName = "%File"
	set rset.QueryName = "FileSet"
	Do rset.Execute(..TargetFilePath,"LockList.txt","DateModified",0)
	While rset.Next() {
		s tSC = ##class(%File).Delete(rset.Data("Name")) q:'tSC
	}
	d rset.Close()
	
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Task.MSGCLASSDEF">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%SYS.Task.Definition</Super>
<TimeChanged>63602,75271.679861</TimeChanged>
<TimeCreated>60906,36916.256329</TimeCreated>

<Parameter name="TaskName">
<Default>MSGCLASSDEF</Default>
</Parameter>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set InfoMsg = "Start MSGCLASSDEF at: "_$ZDT($H)_" | "
	
	set SourceConfigName="",MessageBodyClassName=""
	set NameSpace=$ZNSPACE
	
	//&SQL(delete from IIBAENSEMBLE_Task.TaskItemDefinition where ItemType LIKE 'MsgClassDef%' AND NameSpace = :NameSpace)
	
	set TaskRS = ##class(%ResultSet).%New()
    set sql = "select %ID, ItemName, ItemValue "
    set sql = sql_"from IIBAENSEMBLE_Task.TaskItemDefinition "
    set sql = sql_"WHERE ItemType LIKE 'MsgClassDef%' "
    set sql = sql_"AND NameSpace = '"_NameSpace_"'"
    do TaskRS.Prepare(sql)
    do TaskRS.Execute()

    While TaskRS.Next(){
                                
        set TaskId = TaskRS.Get("ID")
        set ItemName = TaskRS.Get("ItemName")
        set ItemValue = TaskRS.Get("ItemValue")

                                                                
        &sql(DELETE FROM IIBAENSEMBLE_Task.TaskItemDefinition WHERE %ID = :TaskId)
        &sql(COMMIT)
                                
        if SQLCODE '=0{
               set Source = "IIBAENSEMBLE.Task"
               set Type = "MSGCLASSDEF"
               //set Name = "DELETE"
               set infoMsg = ItemName_" ("_ItemValue_")"_" : "_TaskId_" (ERR:"_SQLCODE_")"
                                               
               do ##class(Ens.Util.Log).LogWarning(Source,Type,infoMsg)
               //do $SYSTEM.Security.Audit(Source,Type,Name,infoMsg,Name)
               }
                                
        }
	
		
	&sql(DECLARE C1 CURSOR FOR 
		 SELECT %NOLOCK DISTINCT SourceConfigName,MessageBodyClassName INTO :SourceConfigName,:MessageBodyClassName
		 FROM Ens.MessageHeader WHERE MessageBodyClassName IS NOT NULL )
	
		&sql(OPEN C1)
		For { &sql(FETCH C1)  Quit:SQLCODE'=0 
			
			&sql(INSERT INTO IIBAENSEMBLE_Task.TaskItemDefinition (Namespace,ItemType,ItemName,ItemValue) 
				VALUES (:NameSpace,'MsgClassDef^S',:SourceConfigName,:MessageBodyClassName))
		}
	&sql(CLOSE C1)
	
	&sql(DECLARE C2 CURSOR FOR 
		 SELECT %NOLOCK DISTINCT TargetConfigName,MessageBodyClassName INTO :SourceConfigName,:MessageBodyClassName
		 FROM Ens.MessageHeader WHERE MessageBodyClassName IS NOT NULL )
	
		&sql(OPEN C2)
		For { &sql(FETCH C2)  Quit:SQLCODE'=0 
			
			&sql(INSERT INTO IIBAENSEMBLE_Task.TaskItemDefinition (Namespace,ItemType,ItemName,ItemValue) 
				VALUES (:NameSpace,'MsgClassDef^T',:SourceConfigName,:MessageBodyClassName))
		}
	&sql(CLOSE C2)
	
	//temp log info- to see how the transaction is handled.
	set cMode = $SYSTEM.SQL.GetAutoCommit()
	set stat = $SYSTEM.SQL.GetIsolationMode()
	              
	set InfoMsg = InfoMsg_"End MSGCLASSDEF at: "_$ZDT($H)_"  CommitMode="_cMode_"  IsoMode="_stat
	
	do ##class(Ens.Util.Log).LogInfo("IIBAENSEMBLE.Task", "MSGCLASSDEF", InfoMsg)
	
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="QuickUpdate">
<ClassMethod>1</ClassMethod>
<FormalSpec>MsgDate:%String=""</FormalSpec>
<Implementation><![CDATA[
	
	
	set InfoMsg = "Request Completed:  Begin MSGCLASSDEF at "_$ZDT($H)_" |   "
	
	set SourceConfigName="",MessageBodyClassName=""
	set NameSpace=$ZNSPACE
	
	If (MsgDate="" ) {
		S MsgDate=$ZDATE($H,3)
		
	} else {
		s MsgDate=$ZDT($ZDH(MsgDate),3)
	}
	
	If ( MsgDate '="" ) {
		s start=MsgDate_" 00:00:00"
		s end=MsgDate_" 23:59:59"
		
		// w "dates: "_start_" to "_end,!
			
		&sql(DECLARE C3 CURSOR FOR 
		 	SELECT DISTINCT SourceConfigName,MessageBodyClassName INTO :SourceConfigName,:MessageBodyClassName
			 FROM Ens.MessageHeader 
			 where (TimeCreated > :start) and (TimeCreated < :end) 
			 AND MessageBodyClassName IS NOT NULL )
	
			&sql(OPEN C3)
			For { &sql(FETCH C3)  Quit:SQLCODE'=0 
			
				// w !,SourceConfigName,MessageBodyClassName
			
				&sql(INSERT INTO IIBAENSEMBLE_Task.TaskItemDefinition (Namespace,ItemType,ItemName,ItemValue) 
					VALUES (:NameSpace,'MsgClassDef^S',:SourceConfigName,:MessageBodyClassName))
			
			}
		&sql(CLOSE C3)
	
		&sql(DECLARE C4 CURSOR FOR 
		 	SELECT DISTINCT TargetConfigName,MessageBodyClassName INTO :SourceConfigName,:MessageBodyClassName
		 	FROM Ens.MessageHeader 
		 	where ( TimeCreated > :start ) and ( TimeCreated < :end ) 
		 	AND MessageBodyClassName IS NOT NULL )
	
			&sql(OPEN C4)
			For { &sql(FETCH C4)  Quit:SQLCODE'=0 
			
				// w !,SourceConfigName,MessageBodyClassName
			
				&sql(INSERT INTO IIBAENSEMBLE_Task.TaskItemDefinition (Namespace,ItemType,ItemName,ItemValue) 
				VALUES (:NameSpace,'MsgClassDef^T',:SourceConfigName,:MessageBodyClassName))
			
		}
		&sql(CLOSE C4)
	}
	
	set InfoMsg = InfoMsg_"End MSGCLASSDEF at "_$ZDT($H)
	
	//do ##class(Ens.Util.Log).LogInfo("IIBAENSEMBLE.Task", "MSGCLASSDEF", InfoMsg)
	Q InfoMsg
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Task.NoObjectQueuePurge">
<Description>
Removes purged objects from a queue list. Current objects will remain.</Description>
<IncludeCode>Ensemble</IncludeCode>
<TimeChanged>63560,58586.62207</TimeChanged>
<TimeCreated>63560,57347.506819</TimeCreated>

<Method name="RemoveObjectsFromQueue">
<ClassMethod>1</ClassMethod>
<FormalSpec>pQueueName:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if pQueueName="" Quit $$$ERROR($$$EnsErrGeneral,"Invalid QueueName parameter")
	Set tQRef=$S($D($$$EnsQueue):$name($$$EnsQueue), 1:$name($$$EnsSuspended($$$SystemName,"Ens.Queue")))
	if $data(@tQRef@(pQueueName))=0 Quit $$$ERROR($$$EnsErrGeneral,"Queue '"_pQueueName_"' does not exist")
	set tSC=$$$OK
	lock +^Ens.Queue(pQueueName)
	set tPriority=0 for  {
		set tPriority=$o(@tQRef@(pQueueName,tPriority)) quit:tPriority=""
		set tIndex="" for  {
			set tIndex=$o(@tQRef@(pQueueName,tPriority,tIndex)) quit:tIndex=""
			set tSC1=..AbortPurgedItems(pQueueName,tPriority,tIndex)
			if $$$ISERR(tSC1) set tSC=$$$ADDSC(tSC,tSC1)
		}
	}
	lock -^Ens.Queue(pQueueName)
	quit tSC
]]></Implementation>
</Method>

<Method name="AbortPurgedItems">
<ClassMethod>1</ClassMethod>
<FormalSpec>pQueueName:%String="",pPriority:%Integer=0,pIndex:%Integer=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If pQueueName="" Quit $$$ERROR($$$EnsErrGeneral,"Invalid QueueName parameter")
	If pPriority=0 Quit $$$ERROR($$$EnsErrGeneral,"Invalid Priority parameter")
	Set tQRef=$S($D($$$EnsQueue):$name($$$EnsQueue), 1:$name($$$EnsSuspended($$$SystemName,"Ens.Queue")))
	Set $ZT="Trap",tSC=$$$OK
	Do {
		Lock +@tQRef@(pQueueName)
		If $data(@tQRef@(pQueueName,pPriority,pIndex))=0 Set tSC=$$$ERROR($$$EnsErrGeneral,"QueueItem does not exist - "_pQueueName_":"_pPriority_":"_pIndex) Quit
		Set tId=@tQRef@(pQueueName,pPriority,pIndex)
		Set tMsg=##Class(Ens.MessageHeader).%OpenId(tId)
		If tMsg=$$$NULLOREF {
			Kill @tQRef@(pQueueName,pPriority,pIndex)
			Set @tQRef@(pQueueName,0,"count")=@tQRef@(pQueueName,0,"count")-1
		}
		//Set tMsg=##Class(Ens.MessageHeader).%OpenId(tId)
		//If tMsg=$$$NULLOREF Set tSC=$$$EnsError($$$EnsErrGeneral,"MessageHeader #"_tId_" can not be loaded") Quit
		//Do tMsg.SetStatus($$$eMessageStatusAborted)
		//If tMsg.ReturnQueueName'="" && (tQRef=$name($$$EnsQueue)) {
			//Set tSC = tMsg.NewErrorResponse(.tResponseHeader,$$$ERROR($$$EnsErrGeneral,"Message '"_tId_"' aborted.")) Quit:$$$ISERR(tSC)
			//Set tSC = ##class(Ens.Queue).EnQueue(tResponseHeader) Quit:$$$ISERR(tSC)
		//}
		Lock -@tQRef@(pQueueName)
	} While 0
Exit
	Quit tSC
Trap
	Set $ZT=""
	Lock:$D(tSC) -@tQRef@(pQueueName)
	Set tSC=$$$EnsSystemError
	Goto Exit
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Task.PurgeClassObjects">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%SYS.Task.Definition</Super>
<TimeChanged>61270,30991.399019</TimeChanged>
<TimeCreated>60906,36916.256329</TimeCreated>

<Parameter name="TaskName">
<Default>PurgeClassObjects</Default>
</Parameter>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	set ClassName="",PurgeFieldName="",PurgeFieldType="",DaysToKeep=""
	set NameSpace=$ZNSPACE,ItemName="",ItemValue="",tMessageId="",tDoNotDeleteDate=""
	
	&sql(DECLARE C1 CURSOR FOR 
		 SELECT ItemName,ItemValue INTO :ItemName,:ItemValue
		 FROM IIBAENSEMBLE_Task.TaskItemDefinition 
		 WHERE NameSpace = :NameSpace AND ItemType='ClassObjectPurge')
	&sql(OPEN C1)
		For { &sql(FETCH C1)  Quit:SQLCODE'=0 
	
			set ClassName = ItemName
			set PurgeFieldName=$P(ItemValue,"^",1)
			set PurgeFieldType=$P(ItemValue,"^",2)
			set DaysToKeep=$P(ItemValue,"^",3)
			
			//Create list from Class Name
 			set CL = $LFS(ClassName,".")
 			//Create a new sublist of all parts of the name except the last part
 			set CLt = $LI(CL,1,$LL(CL)-1)
 			//Join the parts of that name back into a string delimited by _ except the last part
 			set ClassTable = $LTS(CLt,"_")
 			//Add the last part in, but delimited by . 
 			set ClassTable = ClassTable_"."_$LI(CL,$LL(CL))
			
			If PurgeFieldType="TimeStamp" { Set tDoNotDeleteDate = "'"_$ZDT($H-DaysToKeep,3)_"'" }
			If PurgeFieldType="Date" { Set tDoNotDeleteDate = $H-DaysToKeep }
			
			set InfoMsg = "Start "_ClassName_" Purge at: "_$ZDT($H)_" | "
			set InfoMsg = InfoMsg_"Keep: "_DaysToKeep_" days | "
	
				
			set rs=##class(%ResultSet).%New()
			do rs.Prepare("Select ID from "_ClassTable_" WHERE "_PurgeFieldName_" < "_tDoNotDeleteDate)
			do rs.Execute()
			set count=0
			set errorcount=0
			While rs.Next() {
				Set tSC1=$zobjclassmethod(ClassName,"%DeleteId",rs.Data("ID"))
				if tSC1=1 { set count=count+1 } else {set errorcount=errorcount+1}
				//w rs.Data("ID")
			}
			
			set InfoMsg = InfoMsg_"Objects purged: "_count_" | Objects error on purge: "_errorcount_" | "
			set InfoMsg = InfoMsg_"End Purge at: "_$ZDT($H)
			
			do ##class(Ens.Util.Log).LogInfo("IIBAENSEMBLE.Task", "PurgeClassObjects", InfoMsg)
			
		}
	&sql(CLOSE C1)

	
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Task.PurgeErrorsGlobal">
<Super>%SYS.Task.Definition</Super>
<TimeChanged>62285,47069.107002</TimeChanged>
<TimeCreated>62081,48006.99721</TimeCreated>

<Property name="tNumberOfDaysToKeep">
<Type>%String</Type>
</Property>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		//Set tNumberOfDaysToKeep = 3
		Set tH = $H - ..tNumberOfDaysToKeep
		For  Set tH = $O(^ERRORS(tH),-1) Quit:tH=""  Kill ^ERRORS(tH)
	} Catch errobj {
		Throw errobj
	}
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Task.PurgeMessages">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%SYS.Task.Definition</Super>
<TimeChanged>61095,37201.666297</TimeChanged>
<TimeCreated>60906,36916.256329</TimeCreated>

<Parameter name="TaskName">
<Default>PurgeMessages</Default>
</Parameter>

<Property name="DaysToKeep">
<Description>
The purge will remove all message older than the number of days to Keep</Description>
<Type>%Integer</Type>
</Property>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set InfoMsg = "Start Purge at: "_$ZDT($H)_" | "
	
	set InfoMsg = InfoMsg_"Keep: "_..DaysToKeep_" days | "
	
	set InfoMsg = InfoMsg_"HL7 TotalCount Before: "_##class(EnsLib.HL7.Message).TotalCount()_" | "
	
	do ##class(Ens.Purge).PurgeAll(.MHCounts,..DaysToKeep,0,1)
	
	set name="" 
	for { 
		set name=$O(MHCounts(name))  
		quit:name=""
		set InfoMsg = InfoMsg_name_": "_MHCounts(name)_" | "
	}
	
	set ackCount = 0
	set rs = ##class(%ResultSet).%New()
    do rs.Prepare("Select ID, TimeCreated from EnsLib_HL7.Message where TimeCreated < '"_$ZD($H-..DaysToKeep,3)_"'")
    do rs.Execute()
    While rs.Next() {
	    set ackCount = ackCount+1
    	do ##class(EnsLib.HL7.Message).%DeleteId(rs.Data("ID"))
    }
    do rs.Close()
 	
 	set InfoMsg = InfoMsg_"Ack Msgs purged: "_ackCount_" | "
	
	set ruleCount = 0
	set rs = ##class(%ResultSet).%New()
    do rs.Prepare("select ID, TimeExecuted from Ens_Rule.RuleLog where TimeExecuted < '"_$ZD($H-..DaysToKeep,3)_"'")
    do rs.Execute()
    While rs.Next() {
	    set ruleCount = ruleCount+1
    	do ##class(Ens.Rule.RuleLog).%DeleteId(rs.Data("ID"))
    }
    do rs.Close()
	
	set InfoMsg = InfoMsg_"Rule log entries purged: "_ruleCount_" | "
	
	
	set InfoMsg = InfoMsg_"HL7 TotalCount After: "_##class(EnsLib.HL7.Message).TotalCount()_" | "
	
	set InfoMsg = InfoMsg_"End Purge at: "_$ZDT($H)
	
	do ##class(Ens.Util.Log).LogInfo("IIBAENSEMBLE.Task", "PurgeMessages", InfoMsg)
	
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Task.SendButtons">
<Description>
Task provided by the WRC to automate the collection of Buttons reports, and to automate them being sent to the WRC for achival and configuration history.
Class updated: 12/29/2006</Description>
<Super>%SYS.Task.Definition,%XML.Adaptor</Super>
<System>4</System>
<TimeChanged>63203,34045.812284</TimeChanged>
<TimeCreated>60555,43042.57236</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="TaskName">
<Default>SendButtons</Default>
</Parameter>

<Parameter name="XMLNAME">
<Default>ProfilerData</Default>
</Parameter>

<Property name="ArchiveDirectory">
<Description>
if this field is filled, then the files are left in the local Archive  </Description>
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="BigButtons">
<Description>
flag to indicate if this should be a Big Buttons; default is to collect a "Small" Buttons</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="EmailCC">
<Description>
used to populate the "From:" field in the email generated to send the Buttons report</Description>
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="EmailFrom">
<Description>
used to populate the "From:" field in the email generated to send the Buttons report</Description>
<Type>%String</Type>
<InitialExpression>"DefaultSendButtons@InterSystems.com"</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="EmailReplyTo">
<Description>
used to populate the "Reply-To:" field in the email generated to send the Buttons report</Description>
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="SMTPServer">
<Description>
name of SMTP server to use for sending %Buttons; if this is blank, the Buttons report will not be sent to InterSystems</Description>
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="SMTPUser">
<Description>
name of SMTP Authenticated User</Description>
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="SMTPPass">
<Description>
password of SMTP Authenitcated User</Description>
<Type>%String</Type>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="SMTPPort">
<Description>
password (stored encrypted) of SMTP Authenitcated User</Description>
<Type>%String</Type>
<InitialExpression>25</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="WRCHealthCheckEnabled">
<Description>
flag to indicate if Butttons should be emailed to the WRC when collected and not associated with a WRC issue#</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="WRCIssueNumber">
<Description>
WRC Issue Number to be included in subject; NOTE: This is cleared after a buttons is sent with this in the Subject line, and needs to be reinitilized through the System Management Portal</Description>
<Type>%Integer</Type>
<Parameter name="XMLPROJECTION" value="NONE"/>
</Property>

<Property name="zInfoAdhocNotListedInZV">
<Description>
if there are any Adhocs applies as changed files only, which didn't update the $ZV string, they should be listed here</Description>
<Type>%String</Type>
<Parameter name="XMLNAME" value="AdhocNotListedInZV"/>
</Property>

<Property name="zInfoBackupType">
<Description>
manual field indicating the types of backups used on this instance of Caché</Description>
<Type>%String</Type>
<Parameter name="XMLNAME" value="BackupType"/>
</Property>

<Property name="zInfoCPUDetails">
<Description>
manual field indicating the type and quantity of CPU(s) used on this system</Description>
<Type>%String</Type>
<Parameter name="XMLNAME" value="CPUDetails"/>
</Property>

<Property name="zInfoHardwareType">
<Description>
manual field indicating the type of hardware that this system is running on</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
<Parameter name="XMLNAME" value="HardwareType"/>
</Property>

<Property name="zInfoPrimaryPurpose">
<Description>
manual property indicates what the primary use is for this Caché Instance: Development, Testing, QA or Production</Description>
<Type>%String</Type>
<Parameter name="DISPLAYLIST" value=",Development,Testing,Quality Assurance,Production,"/>
<Parameter name="VALUELIST" value=",Dev,Test,QA,Prod,"/>
<Parameter name="XMLNAME" value="PrimaryPurpose"/>
</Property>

<Property name="zInfoTotalPhysicalMemory">
<Description>
total physical memory on the machine</Description>
<Type>%String</Type>
<Parameter name="XMLNAME" value="TotalPhysicalMemory"/>
</Property>

<Property name="zzInfoNotesFromCustomer">
<Description>
any special notes that the customer wants included with the %Buttons</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="500"/>
<Parameter name="XMLNAME" value="NotesFromCustomer"/>
</Property>

<Method name="ArchiveDirectoryIsValid">
<ClassMethod>1</ClassMethod>
<FormalSpec>ArchiveDirectory:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If (ArchiveDirectory'="") {
		If '##class(%Library.File).DirectoryExists(ArchiveDirectory) Quit $$$ERROR($$$GeneralError,"Directory does not exist")
	}
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnTask">
<Description>
This method is responsible for executing the task
At the scheduled time, the Task Manager
- creates an instance of this object,
- Sets any property values using the stored "Settings" for the task,
- and invokes this method to execute the task.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If ..ArchiveDirectory'="" {
		Set Status = ##class(IIBAENSEMBLE.Task.SendButtons).ArchiveDirectoryIsValid(..ArchiveDirectory) 
		If 'Status Quit Status
	}
	If ..BigButtons {
		Set LogType = "Advanced"	
	}
	Else {
		Set LogType = "Basic"	
	}
	Set Status = $$INT^Buttons(LogType,..ArchiveDirectory)
	If $P(Status,"|",1) '= 1 Quit $$$ERROR($$$GeneralError,$P(Status,"|",2))
	Set FullFile = $P(Status,"|",2)
	// Buttons on VMS returns a trailing ";" in the filename which needs to be removed
	Set FullFile = $P(FullFile,";",1)
	// send if they have filled in the required information for Sending the report to the WRC
	If ..SMTPServer '= "",..EmailFrom '= ""  {
		Set s=##class(%Net.SMTP).%New()
		Set AuthUser=$ZSTRIP(..SMTPUser,"<>W")
		Set objAuth=""
		If AuthUser]"" {
			#; use default authentication list
			set objAuth=##class(%Net.Authenticator).%New() 
			Set objAuth.UserName=AuthUser
			Set objAuth.Password=..SMTPPass
		}
		If objAuth set s.authenticator=objAuth
		Set s.smtpserver=..SMTPServer
		Set s.port=..SMTPPort
		Set m = ##class(%Net.MailMessage).%New()
		Set m.From = ..EmailFrom
		Set m.ReplyTo = ..EmailReplyTo
		Set m.Subject = "Automated sending of "_FullFile
		Set m.Charset="iso-8859-1"
		If ..WRCIssueNumber '="" {
			Do m.To.Insert("support@intersystems.com")
			Set m.Subject = "Buttons for WRC"_..WRCIssueNumber
		}
		//Do m.To.Insert("WRCHealthCheck@intersystems.com")
		Do m.To.Insert("bgraham@nuvodia.com")
		If ..EmailCC'="" {
			for i=1:1:$L(..EmailCC,",") {
				Do m.Cc.Insert($P(..EmailCC,",",i))
			}	
		}
		Set Status = ..XMLExportToString(.body,,",indent")
		Set Status = m.TextData.Write(body)
		If $$$ISERR(Status) Quit $$$ERROR($$$GeneralError,Status)
		Set dir = ##class(%File).GetDirectory(FullFile)
		Set file = ##class(%File).GetFilename(FullFile)
		Set Status = m.AttachFile(dir,file,0,"iso-8859-1")
		If $$$ISERR(Status) Quit $$$ERROR($$$GeneralError,Status)
		Set Status = s.Send(m)
		If $$$ISERR(Status) Quit $$$ERROR($$$GeneralError,Status)
	}
	//if the customer hasn't defined an Archive Directory, but they are automatically creating reports on a schedule, then delete the file
	If ..ArchiveDirectory="",..WRCHealthCheckEnabled {
		Set Status = ##class(%File).Delete(FullFile)
	}
	//clear out the WRCIssue number so the customer will need to manually enter it again
	If ..WRCIssueNumber'="" {
		Set ..WRCIssueNumber = ""
		Set ..BigButtons = 0
	}
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Task.SetToolkitFavorite">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%SYS.Task.Definition</Super>
<TimeChanged>64202,69588.56237</TimeChanged>
<TimeCreated>60906,36916.256329</TimeCreated>

<Parameter name="TaskName">
<Default>SetToolkitFavorite</Default>
</Parameter>

<Method name="OnTask">
<FormalSpec>username:%String="All"</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&sql(delete from IIBAENSEMBLE_Task.TaskItemDefinition WHERE ItemType = 'DefaultNS')
	
	set rs = ##class(%ResultSet).%New("Security.Users:Detail")
	do rs.Execute("*","*","*")
	While rs.Next() {
		set sName="",sNS=""
		set sName = rs.Data("Name")
		set sNS=rs.Data("Namespace")
		
		if ( (username="All") || (sName=username) ) {
			//Add toolkit shortcut to favorites
			s obj=##class(%SYS.Portal.Users).%New()
			s obj.Username=sName
			s tDefaultApp = $SYSTEM.CSP.GetDefaultApp(sNS)
			s obj.Page=$P(tDefaultApp,"/",3)_" / Nuvo Toolkit"
			s obj.Data=tDefaultApp_"/IIBASupport.csp?PageName=SystemStatus"
			d obj.%Save()
		}
	
	}
	
	
	
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Task.SourceExport">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%SYS.Task.Definition</Super>
<TimeChanged>65324,40674.72549</TimeChanged>
<TimeCreated>60906,36736.731135</TimeCreated>

<Parameter name="TaskName">
<Default>SourceExporttoFile</Default>
</Parameter>

<Property name="CSPApplicationName">
<Type>%String</Type>
</Property>

<Property name="CSPApplicationPath">
<Type>%String</Type>
</Property>

<Property name="ExportPath">
<Type>%String</Type>
</Property>

<Property name="VersionsToKeep">
<Type>%Integer</Type>
<InitialExpression>3</InitialExpression>
</Property>

<UDLText name="T">
<Content><![CDATA[
/*
	*** C001 11/7/2019 BHK - add options to:
		- disable timestamping (IncludeTimeStamp)
		- export all items, regardless of whether ^SourceControldttm() item matches %RoutineMgr.TS() output for item
		- toggle deletion of files in ExportPath
	to allow for exporting of classes, one-time, for an indirect (manual) xport-to-SourceControl context
*/
]]></Content>
</UDLText>

<Property name="IncludeTimeStamp">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="ExportAll">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="DeleteFiles">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  
 kill tFullList 
 
 
 do $System.OBJ.GetClassList(.tList,"/mapped=0/system=0/percent=0")
  set class="" for  {
    set class=$o(tList(class)) quit:class=""
    if $P(class,".",1) '= "csp" {
    	set tFullList(class_".cls")=""
    }
  }
 
 set p="" for  {
    set p=$o(^Ens.Rule.RuleDefinitionD(p)) q:p=""
    set r="" for  {
      set r=$o(^Ens.Rule.RuleDefinitionD(p,r)) q:r=""
      set tFullList(p_"."_r_".rul")=""
    }
  }
  
 set cat="" for  {
 set cat=$o(^EnsHL7.Schema(cat)) quit:cat=""
  	set tFullList(cat_".hl7")=""
 }
 
 if ..CSPApplicationName '= "" {
	 Set Path=..CSPApplicationPath, Mask="*.*"	
	 Set rset = ##class(%ResultSet).%New()
	 set rset.ClassName = "%File"
	 set rset.QueryName = "FileSet"
	 Do rset.Execute(Path,Mask)
	
	 While (rset.Next()) {
		// only files - skip directories
		if ($ZB(##class(%File).Attributes(rset.Data("Name")),16,1)=0) {
			set filename = ##class(%File).GetFilename(rset.Data("Name"))
			if $P(filename,".",2) = "csp" {
				set tFullList(..CSPApplicationName_filename)=""
	 		}
	 	}
	 }
	
	 Do rset.Close()
 }
 
 set name="", tSourceControldttm=""
 
 for {set name = $O(tFullList(name)) quit:name=""

 		set tSourceControldttm = $GET(^SourceControldttm(name))
 		// *** C001
 		//if tSourceControldttm'=##class(%RoutineMgr).TS(name) {
	 	if ( (..ExportAll=1) ||(tSourceControldttm'=##class(%RoutineMgr).TS(name)) ) {
			set tSC = ..ExportFile(name)
			set ^SourceControldttm(name)=##class(%RoutineMgr).TS(name) 			
 		}
	 
 }
	
 Quit ..FinalCommit()
]]></Implementation>
</Method>

<Method name="FinalCommit">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//This is here to be over-ridden in sub class if needed.
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ExportFile">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set filename = ..ExternalName(InternalName,..IncludeTimeStamp)	// *** C001
	set ^CacheTempMattsTrace2(8) = InternalName
	set ^CacheTempMattsTrace2(9) = filename
	
	//do ..DeletePreviousVersions(filename) // *** C001
	do:(..DeleteFiles=1) ..DeletePreviousVersions(filename)
	 
	Set tSC=$system.OBJ.Export(InternalName,filename,"-d")
	
	set ^CacheTempMattsTrace2(10) = "exporting file: "_InternalName_tSC	
 	
 	if $$$ISERR(tSC) Quit $$$ERROR($$$GeneralError,"Error occured in exporting file")
 	
 	Quit tSC
]]></Implementation>
</Method>

<Method name="ExternalName">
<FormalSpec>InternalName:%String,AddTimeStamp:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set name=$TR($piece(InternalName,".",1,$length(InternalName,".")-1),"/",".")
	Set ext=$zconvert($piece(InternalName,".",$length(InternalName,".")),"l")
	
	if AddTimeStamp = 0 {
		Set filename=..ExportPath_ext_"."_name_".xml"
	} else {
		Set filename=..ExportPath_ext_"."_name_"."_##class(Ens.Util.Time).FormatDateTime("%Y%m%d%H%M%S")_".xml"
	}
		
	Quit filename
]]></Implementation>
</Method>

<Method name="DeletePreviousVersions">
<FormalSpec>filename:%String</FormalSpec>
<Implementation><![CDATA[
	Set Path=..ExportPath, mask=##class(%File).GetFilename(filename)
	
	set mlist=""
	
	for i=1:1:$LENGTH(mask,".")-2 {
		set $LI(mlist,i)=$P(mask,".",i)
	}
	
	set mask = $LTS(mlist,".")
	set mask = mask_".*"
	
	
 	Set rset = ##class(%ResultSet).%New()
 	set rset.ClassName = "%File"
 	set rset.QueryName = "FileSet"
 	Do rset.Execute(Path,mask,"DateModified")
 	set filecount = 0
	
	set ^CacheTempMattsTrace2(5) = mask
	
 	While (rset.Next()) {
	// only files - skip directories
		if ($ZB(##class(%File).Attributes(rset.Data("Name")),16,1)=0) {
			set filecount = filecount +1
			set gfilenames(filecount) = rset.Data("Name")
 		}	
 	}
 	set ^CacheTempMattsTrace2(6) = filecount
 	set ^CacheTempMattsTrace2(11) = ..VersionsToKeep
 	set deletecount = 0
 	while filecount >= ..VersionsToKeep {
	 	set deletecount = deletecount + 1
	 	set ^CacheTempMattsTrace2("delete",deletecount) = gfilenames(deletecount)
	 	do ##class(%File).Delete(gfilenames(deletecount))
	 	set filecount = filecount - 1
 	}
 	set ^CacheTempMattsTrace2(12) = deletecount
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Task.SourceExportCVS">
<Description><![CDATA[
In order to use this class the following is required:<br>
<ul>
<li>System Environment Variable as CVSROOT=:pserver:&lt;username&gt;@&lt;servername&gt;:&lt;port&gt;/&lt;directory or module path&gt;</li>
<li>System Environment Variable as CVS_PASSFILE=&lt;local file path&gt;\.cvspass</li>
<li>Windows needs to be restarted after adding these variables</li>
<li>All CVS commands should be executed by the user account that will be the assigned user for the scheduled task - typically the domain service acount.</li>
<li>use ! shell from terminal to execute "cvs login".  Once logged in, it should stay logged in permanently.</li>
<li>Once logged in, create a sub folder at the NameSpace root to be the local copy of the repository</li>
<li>run a file export to get an initial copy of all class files into the subfolder, or just create a single blank text file</li>
<li>from within the subfolder, run "cvs import -m "initial import" &lt;subfolder name&gt; vendor start"</li>
<li>Then remove the subfolder and then check it out from the namespace root with "cvs checkout &lt;subfolder name&gt;"</li>
<li>Set the subfolder as the export path when scheduling this task.</li>
<li>a batch file named cvsbat.bat must exist in the root of the namespace and contain these two lines:<br>cd %1<br>%~2</li>
</ul>]]></Description>
<CompileAfter>IIBAENSEMBLE.Task.SourceExport</CompileAfter>
<Super>IIBAENSEMBLE.Task.SourceExport</Super>
<TimeChanged>65324,37727.300011</TimeChanged>
<TimeCreated>61842,47660.217435</TimeCreated>

<Parameter name="TaskName">
<Default>SourceExporttoCVS</Default>
</Parameter>

<Property name="RepositoryType">
<Type>%String</Type>
<InitialExpression>"CVS"</InitialExpression>
</Property>

<Property name="VersionsToKeep">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Method name="ExportFile">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set filename = ..ExternalName(InternalName,0)
	
	set NewFile = ##class(%File).Exists(filename)
	
	Set tSC=$system.OBJ.Export(InternalName,filename,"-d")
	
	s FileNameOnly = ##class(%File).GetFilename(filename)
	s FileDirectory = ##class(%File).GetDirectoryPiece(..ExportPath,##class(%File).GetDirectoryLength(..ExportPath))
	
	if $$$ISERR(tSC) Quit $$$ERROR($$$GeneralError,"Error occured in exporting file")
	
	set tSC = 0
	
	if 'NewFile	set tSC = $ZF(-1,"cvsbat.bat "_FileDirectory_" ""cvs add "_FileNameOnly_"""")
	
	if tSC = 1 Quit $$$ERROR($$$GeneralError,"Error occured in adding file")
 	
 	Quit 1
]]></Implementation>
</Method>

<Method name="FinalCommit">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $ZF(-1,"cvs commit -m ""commit "_##class(Ens.Util.Time).FormatDateTime("%Y%m%d%H%M")_"""")
	
	if tSC = 1 Quit $$$ERROR($$$GeneralError,"Error occured in committing file")
	
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Task.SourceExportToSVN">
<Description><![CDATA[
<b>Copyright 2015 by Nuvodia</b><br/>
<i>Modified by Paul Hegel and Jeremy Weeks</i><br/>
<i>on  1/8/2015</i><br/>
This Class exports changed classes to Microsoft Visual Source Safe.<br/>
In order for this class to be used TFS Client must be installed<br/>
correctly configured on the Ensemble Server<br/>]]></Description>
<IncludeCode>Ensemble</IncludeCode>
<Super>%SYS.Task.Definition</Super>
<TimeChanged>63732,38818.255949</TimeChanged>
<TimeCreated>60906,36736.731135</TimeCreated>

<Parameter name="TaskName">
<Default>SourceExportToSVN</Default>
</Parameter>

<Property name="CSPApplicationName">
<Description><![CDATA[
The CSP Application Folder name for the namespace (navigate to the namespace/prodcution)<br/>
example link: http://localhost:57773/csp/dev/EnsPortal.ProductionConfig.zen?$NAMESPACE=DEV&$NAMESPACE=DEV<br/>
use this portion of the link:<br/>
example: /csp/dev/<br/>]]></Description>
<Type>%String</Type>
</Property>

<Property name="CSPApplicationPath">
<Description><![CDATA[
This is the physical path of the CSP Application to find this go to CSP folder of the instance:<br/>
1. To find the instance folder, in management portal click on About.  It's the same folder as the configuration file<br/>
2. From there drill to the CSP folder and the namespace folder.<br/>
	Pattern: [instance folder]\csp\[namespace]<br/>
	Example: h:\ensemblesys\csp\iibasupport<br/>]]></Description>
<Type>%String</Type>
</Property>

<Property name="SCPath">
<Description><![CDATA[
Source Control (SC) Path within the source control application<br/>
example: $/iibaensemble/test<br/>]]></Description>
<Type>%String</Type>
</Property>

<Property name="SCUser">
<Description><![CDATA[
Domain/Application Username that has full read/write access to the Source Control project<br/>
example: TFSService<br/>
domain example: DUVOISIN\TFSService<br/>]]></Description>
<Type>%String</Type>
</Property>

<Property name="SCPWord">
<Description><![CDATA[
Password of above SCUser<br/>
example: P@ssw0rd<br/>]]></Description>
<Type>%String</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
/*
/// Use Ensemble Credentials
/// This is the ID name of the set of credentials values to be used to access the external system
Property Credentials As %String;

Property %CredentialsObj As Ens.Config.Credentials;
*/
]]></Content>
</UDLText>

<Property name="ExportFilePath">
<Description>
This is the mapped directory from the Source Control or that will be mapped into a workspace for the SCUser 
Use the location that you want mapped in source control's Workspace for this user
file system in this location will map to the SCPath above
Example:  d:\tfs\interface\test</Description>
<Type>%String</Type>
</Property>

<Property name="SVNCommand">
<Type>%String</Type>
</Property>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tFullList
	kill tFullList 
	s tFullList = "" // tFullList will store all the class files we may need to check-in to SVN
	#dim tSC AS %Status = $$$OK
	//Initialize Source Control
	set tSC = ..InitializeSourceControl()
 
	//Load Class List
	s tSC = ..LoadClassList(.tFullList)
 
	//Load Rules
	s tSC = ..LoadRulesList(.tFullList) 
 
	//Load HL7 Schemas 
	s tSC = ..LoadHL7Schema(.tFullList)
 
	//CSP Application path Files - Load
	s tSC = ..LoadCSPApplications(.tFullList)
 
 	s tSC = ..UpdateSourceControl(.tFullList)

	
 Quit tSC
]]></Implementation>
</Method>

<Method name="UpdateSourceControl">
<FormalSpec><![CDATA[&pFullList]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	w "Enter UpdateSourceControl",!
	#dim tSC As %Status = $$$OK
	#dim name As %String = ""
	#dim tSourceControldttm As %String = ""
 	//Iterate over tFullList multivalue array starting with first since name =" "
 	for {
	 	set name = $O(pFullList(name)) quit:name=""
		//Get the last time it was checked into source control from Global ^SourceControlDttm multivalue array.
  		set tSourceControldttm = $GET(^SourceControldttm(name))
 		if tSourceControldttm'=##class(%RoutineMgr).TS(name) 
 		{
			//set tSC = ..ExportFile(name)
			set tSC = ..OnBeforeCompile(name)
			set tSC = ..OnAfterCompile(name)
			//once code is committed to source control set the new dttm on the global.
			set ^SourceControldttm(name)=##class(%RoutineMgr).TS(name) 			
 		}
 }
 Q tSC
]]></Implementation>
</Method>

<Method name="LoadCSPApplications">
<FormalSpec><![CDATA[&pFullList]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tSC As %Status = $$$OK
	if ..CSPApplicationName '= "" { 
		Set Path=..CSPApplicationPath, Mask="*.*"	
		Set rset = ##class(%ResultSet).%New()
		set rset.ClassName = "%File"
		set rset.QueryName = "FileSet"
		Do rset.Execute(Path,Mask)
		While (rset.Next()) {
			// only files - skip directories
			if ($ZB(##class(%File).Attributes(rset.Data("Name")),16,1)=0) {
				set filename = ##class(%File).GetFilename(rset.Data("Name"))
				if $P(filename,".",2) = "csp" {
					set tFullList(..CSPApplicationName_filename)=""
					w "Add "_..CSPApplicationName_filename,!
				}
			}
		}
		Do rset.Close()
 	}
	Q tSC
]]></Implementation>
</Method>

<Method name="LoadHL7Schema">
<FormalSpec><![CDATA[&pFullList]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tSC = $$$OK
	set cat=""
	for
	{
 		set cat=$o(^EnsHL7.Schema(cat)) quit:cat=""
  		set pFullList(cat_".hl7")=""
  		w "Add HL7 "_cat_".hl7",!
 	}
 
	Q tSC
]]></Implementation>
</Method>

<Method name="LoadRulesList">
<FormalSpec><![CDATA[&pFullList]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tSC as %Status = $$$OK
	set p="" for  {
    set p=$o(^Ens.Rule.RuleDefinitionD(p)) q:p=""
    set r="" for  {
    	set r=$o(^Ens.Rule.RuleDefinitionD(p,r)) q:r=""
    	set pFullList(p_"."_r_".rul")=""
    	w "Add rule "_p_"."_r_".rul",!
    }
  }
  Q tSC
]]></Implementation>
</Method>

<Method name="LoadClassList">
<FormalSpec><![CDATA[&pFullList]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s tSC = $$$OK

 	do $System.OBJ.GetClassList(.tList,"/mapped=0/system=0/percent=0")
 	set class="" for  {
    set class=$o(tList(class)) quit:class=""
    if $P(class,".",1) '= "csp" {
    	set pFullList(class_".cls")=""
    	w "Add class "_class_".cls",!
    }
  }
  Q tSC
]]></Implementation>
</Method>

<Method name="InitializeSourceControl">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tSC = $$$OK
	s ..SCUser = ##class(Ens.Config.Credentials).GetValue("Assembla","Username")
	s ..SCPWord = ##class(Ens.Config.Credentials).GetValue("Assembla","Password")
	// s ..ExportFilePath = "C:\Users\nmilleville\Documents\ensemble"
	s ..ExportFilePath = "H:\temp\jmp\SVN"
	s ..SVNCommand = "c:\""program files""\tortoisesvn\bin\svn"
	d ..SCCheckOut()
	s ..ExportFilePath = "H:\temp\jmp\SVN\TEST"

	q tSC
]]></Implementation>
</Method>

<Method name="OnBeforeCompile">
<Description>
Before loading any item we check to see if it exists in SVN and check it out if it does.</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Try to checkout... 
	//#dim checkoutStatus = ..SCCheckOut(InternalName)
	
	//Always export file so it can be added.
	set tSC = ..ExportFile(InternalName)

	//if it fails then add
	if (1)
	{	
		// file status was not successful, then it doesn't exist so we nee to add it.
		set tSC = ..SCAdd(InternalName)
	}
	Q tSC
]]></Implementation>
</Method>

<Method name="OnAfterCompile">
<Description>
After compiling an item we write this to an xml file so that we can check the changes into TFS.</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = ..SCCheckIn(InternalName)
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="ExportFile">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set filename = ..ExternalName(InternalName)
	 
	Set tSC = $system.OBJ.Export(InternalName,filename,"-d")
	w "exporting file: "_InternalName_tSC,!	
 	// 	w $system.Status.DisplayError(tSC)
 	
 	//Quit:$$$ISERR(tSC)
 	if $$$ISERR(tSC) Quit $$$ERROR($$$GeneralError,"Error occured in exporting file" _tSC)
 	
 	Quit tSC
]]></Implementation>
</Method>

<Method name="SCName">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set name=$TR($piece(InternalName,".",1,$length(InternalName,".")-1),"/",".")
	Set ext=$zconvert($piece(InternalName,".",$length(InternalName,".")),"l")
	
	Set SCName=..SCPath_"/"_ext_"."_name_".xml"
	
	Quit SCName
]]></Implementation>
</Method>

<Method name="SCCheckOut">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set logpath = ..ExportFilePath _ "\log\"
	#dim tSVNRepoPath = "https://subversion.assembla.com/svn/jointman/Ensemble"
	set cmd = ..SVNCommand_" checkout --username "_..SCUser_" --password "_..SCPWord_" "_tSVNRepoPath_" "_..ExportFilePath
	
	w cmd,!
	set result = $ZF(-1,cmd)
	w result,!
	quit ..GetStatus(result)
]]></Implementation>
</Method>

<Method name="SCCheckIn">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set filename = ..ExternalName(InternalName)
	set logpath = ..ExportFilePath _ "\log\"
	set cmd = ..SVNCommand_" commit -m ""Nightly checkin "_$ZDT($H)_""" --username "_..SCUser_" --password "_..SCPWord_" "_filename
	w cmd,!
	set result = $ZF(-1,cmd)
	w result,!
	quit ..GetStatus(result)
]]></Implementation>
</Method>

<Method name="SCAdd">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set filename = ..ExternalName(InternalName)
	set logpath = ..ExportFilePath _ "\log\"
	set cmd = ..SVNCommand_" add --username "_..SCUser_" --password "_..SCPWord_" "_filename
	w cmd,!
	set result = $ZF(-1,cmd)
	w result,!
	quit ..GetStatus(result)
]]></Implementation>
</Method>

<Method name="ExternalName">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set name=$TR($piece(InternalName,".",1,$length(InternalName,".")-1),"/",".")
	Set ext=$zconvert($piece(InternalName,".",$length(InternalName,".")),"l")
	
	set filename = ..ExportFilePath_"\"_ext_"."_name_".xml"
		
	Quit filename
]]></Implementation>
</Method>

<Method name="SCStatus">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set SCName = ..SCName(InternalName)
	set logpath = ..ExportFilePath _ "\log\"
	set cmd = "tf status  "_SCName_" /login:"_..SCUser_","_..SCPWord _" /noprompt 1>>"_logpath_"commandlog.txt 2>&1"
	set result = $ZF(-1,cmd)
	quit ..GetStatus(result)
]]></Implementation>
</Method>

<Method name="SCGet">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set SCName = ..SCName(InternalName)
	set logpath = ..ExportFilePath _ "\log\"
	set cmd = "tf get  "_SCName_" /login:"_..SCUser_","_..SCPWord _" /overwrite /noprompt 1>>"_logpath_"commandlog.txt 2>&1"
	set result = $ZF(-1,cmd)
	quit ..GetStatus(result)
]]></Implementation>
</Method>

<Method name="CheckWorkspace">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set logpath = ..ExportFilePath _ "\log\"
	//set cmd = "tf workspaces /owner:"_ ..SCUser_ " /collection:"_ ..TFSCollectionPath _ " /login:"_..SCUser_","_..SCPWord _" 1>>"_logpath_"workspacelog.txt 2>&1"
	set result = $ZF(-1,cmd)
	quit ..GetStatus(result)
]]></Implementation>
</Method>

<Method name="SetWorkspace">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set logpath = ..ExportFilePath _ "\log\"
	//set cmd = "tf workspace /new /collection:"_ ..TFSCollectionPath _ " /login:"_..SCUser_","_..SCPWord _" /permission:Public 1>>"_logpath_"workspacelog.txt 2>&1"
	set result = $ZF(-1,cmd)
	quit ..GetStatus(result)
]]></Implementation>
</Method>

<Method name="SetWorkfolder">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set logpath = ..ExportFilePath _ "\log\"
	//set cmd = "tf workfold /map "_ ..SCPath _" " _ ..ExportFilePath _" /login:"_..SCUser_","_..SCPWord _" 1>>"_logpath_"workfoldlog.txt 2>&1"
	set result = $ZF(-1, cmd)
	quit ..GetStatus(result)
]]></Implementation>
</Method>

<Method name="DeleteLogFiles">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set logfiles = ..ExportFilePath _ "\log\*.*"
	set tSC = ##class(%File).Delete(logfiles)
	return tSC
]]></Implementation>
</Method>

<Method name="GetStatus">
<Description>
	SCResult		Definition
	============	=============================================================================================
	0				Success.
	1				Partial success; this means at least something, or possibly everything, failed to succeed.
	2				Unrecognized command.
	100				Nothing succeeded.</Description>
<FormalSpec>SCresult:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	quit $CASE(SCresult,
              0:$$$OK,
              1:$$$ERROR($$$GeneralError,"Partial success; this means at least something, or possibly everything, failed to succeed."),
              2:$$$ERROR($$$GeneralError,"Unrecognized command."),
              100:$$$ERROR($$$GeneralError,"Nothing succeeded."))
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Task.SourceExportToTFS">
<Description><![CDATA[
<b>Copyright 2015 by Nuvodia</b><br/>
<i>Modified by Paul Hegel and Jeremy Weeks</i><br/>
<i>on  1/8/2015</i>
This Class exports changed classes to Microsoft Visual Source Safe.
In order for this class to be used TFS Client must be installed
correctly configured on the Ensemble Server <br/>
Note: The global ^TFSSourceControldttm stores the last compile dttm which is
approximately the last date time the code would have been
committed<br/>]]></Description>
<Super>%SYS.Task.Definition</Super>
<TimeChanged>63567,54284.784359</TimeChanged>
<TimeCreated>60906,36736.731135</TimeCreated>

<Parameter name="TaskName">
<Default>SourceExportToTFS</Default>
</Parameter>

<Property name="CSPApplicationName">
<Description><![CDATA[
The CSP Application Folder name for the namespace (navigate to the namespace/prodcution)><br/>
example link: http://localhost:57773/csp/dev/EnsPortal.ProductionConfig.zen?$NAMESPACE=DEV&$NAMESPACE=DEV><br/>
use this portion of the link:><br/>
example: /csp/dev/><br/>]]></Description>
<Type>%String</Type>
</Property>

<Property name="CSPApplicationPath">
<Description><![CDATA[
This is the physical path of the CSP Application to find this go to CSP folder of the instance:<br/>
1. To find the instance folder, in management portal click on About.  It's the same folder as the configuration file<br/>
2. From there drill to the CSP folder and the namespace folder.<br/>
	Pattern: [instance folder]\csp\[namespace]<br/>
	Example: h:\ensemblesys\csp\iibasupport<br/>]]></Description>
<Type>%String</Type>
</Property>

<Property name="SCPath">
<Description><![CDATA[
Source Control (SC) Path within the source control application<br/>
example: $/iibaensemble/test<br/>]]></Description>
<Type>%String</Type>
</Property>

<Property name="SCUser">
<Description><![CDATA[
Domain/Application Username that has full read/write access to the Source Control project<br/>
example: TFSService<br/>
domain example: DUVOISIN\TFSService<br/>]]></Description>
<Type>%String</Type>
</Property>

<Property name="SCPWord">
<Description><![CDATA[
Password of above SCUser<br/>
example: P@ssw0rd<br/>
TODO:  Future - move to use Ensemble Credential system.<br/>]]></Description>
<Type>%String</Type>
</Property>

<UDLText name="T">
<Content><![CDATA[
/*
/// Use Ensemble Credentials
/// This is the ID name of the set of credentials values to be used to access the external system
Property Credentials As %String;

Property %CredentialsObj As Ens.Config.Credentials;
*/
]]></Content>
</UDLText>

<Property name="ExportFilePath">
<Description><![CDATA[
This is the mapped directory from the Source Control or that will be mapped into a workspace for the SCUser <br/>
Use the location that you want mapped in source control's Workspace for this user
file system in this location will map to the SCPath above><br/>
Example:  d:\tfs\interface\test<br/>]]></Description>
<Type>%String</Type>
</Property>

<Property name="TFSCollectionPath">
<Description><![CDATA[
TFS Collection Path (specific to team foundation server)<br/>
pattern: http://[tfs server]:8080/tfs/[collettion name]<br/>
example: http://devsql2012:8080/tfs/JerTest<br/>]]></Description>
<Type>%String</Type>
</Property>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  
 kill tFullList 
 //Initialize Source Control
 set tSC = ..InitializeSourceControl()
 Q:'tSC tSC
 
 //Load Class List 
 do $System.OBJ.GetClassList(.tList,"/mapped=0/system=0/percent=0")
  set class="" for  {
    set class=$o(tList(class)) quit:class=""
    if $P(class,".",1) '= "csp" {
    	set tFullList(class_".cls")=""
    }
  }
  //Load Rules
 set p="" for  {
    set p=$o(^Ens.Rule.RuleDefinitionD(p)) q:p=""
    set r="" for  {
      set r=$o(^Ens.Rule.RuleDefinitionD(p,r)) q:r=""
      set tFullList(p_"."_r_".rul")=""
    }
  }
   //Load HL7 Schemas 
 set cat="" for  {
 set cat=$o(^EnsHL7.Schema(cat)) quit:cat=""
  	set tFullList(cat_".hl7")=""
 }
   //CSP Application path Files - Load
 if ..CSPApplicationName '= "" { 
	 Set Path=..CSPApplicationPath, Mask="*.*"	
	 Set rset = ##class(%ResultSet).%New()
	 set rset.ClassName = "%File"
	 set rset.QueryName = "FileSet"
	 Do rset.Execute(Path,Mask)
	
	 While (rset.Next()) {
		// only files - skip directories
		if ($ZB(##class(%File).Attributes(rset.Data("Name")),16,1)=0) {
			set filename = ##class(%File).GetFilename(rset.Data("Name"))
			if $P(filename,".",2) = "csp" {
				set tFullList(..CSPApplicationName_filename)=""
	 		}
	 	}
	 }
	
	 Do rset.Close()
 }
 
 set name="", tSourceControldttm=""
  //Iterate over tFullList multivalue array starting with first since name =" "
 for {set name = $O(tFullList(name)) quit:name=""
 
  //Get the last time it was checked into source control from Global ^TFSSourceControldttm multivalue array.
  
 		set tSourceControldttm = $GET(^TFSSourceControldttm(name))
 		if tSourceControldttm'=##class(%RoutineMgr).TS(name) {
			
			//set tSC = ..ExportFile(name)
			
			set tSCBefore = ..OnBeforeCompile(name)
			set tSC = ..OnAfterCompile(name)
			//once code is committed to source control successfully set the new dttm on the global.
 			if (tSC && tSCBefore)
 			{
				set ^TFSSourceControldttm(name)=##class(%RoutineMgr).TS(name) 
				kill ^TFSSourceControldttm(name,"Error")
 			}	
 			else
 			{
	 			set ^TFSSourceControldttm(name,"Error")=tSCBefore_tSC	
 			}		
 		}
 }
	
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="InitializeSourceControl">
<Description>
Initializes the source control by setting the current directory, deleting log files for re-use, 
checking the workspace, creating workspace, if not exists and setting the working folder.</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK
	
	if ('##class(%File).DirectoryExists(..ExportFilePath))
	{
		set tSC = $$$ERROR("Directory: " _..ExportFilePath _" doesn't exist. Please verify the ExportFilePath settings are correct and the directory exsits on the server.")
		QUIT tSC
	}
	set cd = $system.Process.CurrentDirectory(..ExportFilePath)
	
	set tSC = ..DeleteLogFiles()
	//w "Log files deleted result: ", tSC,!
	
	set tSC = ..CheckWorkspace()
	//w "Check Workspace result: ", result,!

	if ('tSC){
		set tSC = ..SetWorkspace()
		//w "Set Workspace result: ", result,!
	}
	//q:'tSC tSC
	
	set tSC = ..SetWorkfolder()
	q tSC
]]></Implementation>
</Method>

<Method name="OnBeforeCompile">
<Description>
Before loading any item we check to see if it exists in TFS and check it out if it does.</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	//set ^CacheTempMattsTrace2(1) = $ZDT($H)_": OnBeforeCompile for file: "_InternalName
	
	//set filename = ..ExternalName(InternalName)
	
	//set ^CacheTempMattsTrace2(1) = $ZDT($H)_": OnBeforeCompile for file: "_InternalName_" "_tSC
	
	// Try to checkout... 
	set checkoutStatus = ..SCCheckOut(InternalName)
	
	//Always export file so it can be added.
	//set ^CacheTempMattsTrace2(3) = tSC
	set tSC = ..ExportFile(InternalName)

	//if it fails then add
	if ('checkoutStatus)
	{	
		// file status was not successful, then it doesn't exist so we nee to add it.
		set tSC = ..SCAdd(InternalName)
	}
	Q tSC
]]></Implementation>
</Method>

<Method name="OnAfterCompile">
<Description>
After compiling an item we write this to an xml file so that we can check the changes into TFS.</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//set ^CacheTempMattsTrace2(2) = $ZDT($H)_": OnAfterCompile for file: "_InternalName
		
	//write it to file and check it in with the current user
	//set tSC = ..ExportFile(InternalName)
	//Q:tSC tSC
	
	set tSC = ..SCCheckIn(InternalName)
	if ('tSC)
	{
		set tSC = ..SCResolve(InternalName)	
		Q:'tSC // quit if it doesn't resolve
		
		set tSC = ..SCCheckIn(InternalName)	
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="ExportFile">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set filename = ..ExternalName(InternalName)
	 
	Set tSC = $system.OBJ.Export(InternalName,filename,"-d")
	set ^CacheTempMattsTrace2(10) = "exporting file: "_InternalName_tSC	
 	// 	w $system.Status.DisplayError(tSC)
 	
 	//Quit:$$$ISERR(tSC)
 	if $$$ISERR(tSC) Quit $$$ERROR($$$GeneralError,"Error occured in exporting file" _tSC)
 	
 	Quit tSC
]]></Implementation>
</Method>

<Method name="SCName">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set name=$TR($piece(InternalName,".",1,$length(InternalName,".")-1),"/",".")
	Set ext=$zconvert($piece(InternalName,".",$length(InternalName,".")),"l")
	
	Set SCName=..SCPath_"/"_ext_"."_name_".xml"
	
	Quit SCName
]]></Implementation>
</Method>

<Method name="SCCheckOut">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set filename = ..ExternalName(InternalName)
	set logpath = ..ExportFilePath _ "\log\"
	set cmd = "tf checkout "_filename_" /login:"_..SCUser_","_..SCPWord _" /lock:none  1>>"_logpath_"commandlog.txt 2>&1"
	set result = $ZF(-1,cmd)
	quit ..GetStatus(result, "SCCheckOut")
]]></Implementation>
</Method>

<Method name="SCCheckIn">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set filename = ..ExternalName(InternalName)
	set logpath = ..ExportFilePath _ "\log\"
	set cmd = "tf checkin "_filename_" /login:"_..SCUser_","_..SCPWord _" /noprompt  1>>"_logpath_"commandlog.txt 2>&1"
	set result = $ZF(-1,cmd)
	quit ..GetStatus(result, "SCCheckIn")
]]></Implementation>
</Method>

<Method name="SCAdd">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set filename = ..ExternalName(InternalName)
	set logpath = ..ExportFilePath _ "\log\"
	set cmd = "tf add "_filename_" /login:"_..SCUser_","_..SCPWord _" /noprompt  1>>"_logpath_"commandlog.txt 2>&1"
	set result = $ZF(-1,cmd)
	
	quit ..GetStatus(result, "SCAdd")
]]></Implementation>
</Method>

<Method name="SCResolve">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set filename = ..ExternalName(InternalName)
	set logpath = ..ExportFilePath _ "\log\"
	set cmd = "tf resolve "_filename_" /login:"_..SCUser_","_..SCPWord _" /auto:KeepYours /noprompt  1>>"_logpath_"commandlog.txt 2>&1"	set result = $ZF(-1,cmd)
	quit ..GetStatus(result, "SCCheckIn")
]]></Implementation>
</Method>

<Method name="ExternalName">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set name=$TR($piece(InternalName,".",1,$length(InternalName,".")-1),"/",".")
	Set ext=$zconvert($piece(InternalName,".",$length(InternalName,".")),"l")
	
	set filename = ..ExportFilePath_"\"_ext_"."_name_".xml"
		
	Quit filename
]]></Implementation>
</Method>

<Method name="SCStatus">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set SCName = ..SCName(InternalName)
	set logpath = ..ExportFilePath _ "\log\"
	set cmd = "tf status  "_SCName_" /login:"_..SCUser_","_..SCPWord _" /noprompt 1>>"_logpath_"commandlog.txt 2>&1"
	set result = $ZF(-1,cmd)
	quit ..GetStatus(result, "SCStatus")
]]></Implementation>
</Method>

<Method name="SCGet">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set SCName = ..SCName(InternalName)
	set logpath = ..ExportFilePath _ "\log\"
	set cmd = "tf get  "_SCName_" /login:"_..SCUser_","_..SCPWord _" /overwrite /noprompt 1>>"_logpath_"commandlog.txt 2>&1"
	set result = $ZF(-1,cmd)
	quit ..GetStatus(result, "SCGet")
]]></Implementation>
</Method>

<Method name="CheckWorkspace">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set computerName = $zu(110)
	set workspace = ..GetSCWorkspace()
	set logpath = ..ExportFilePath _ "\log\"
	set cmd = "tf workspaces /owner:"_ ..SCUser_ " /computer:" _computerName_ " /collection:"_ ..TFSCollectionPath _ " /login:"_..SCUser_","_..SCPWord _" " _workspace_" 1>>"_logpath_"workspacelog.txt 2>&1"
	set result = $ZF(-1,cmd)
	quit ..GetStatus(result, "CheckWorkspace")
]]></Implementation>
</Method>

<Method name="SetWorkspace">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set SCWorkspace = ..GetSCWorkspace()
	set logpath = ..ExportFilePath _ "\log\"
	set cmd = "tf workspace /collection:"_ ..TFSCollectionPath _" /new /noprompt /login:"_..SCUser_","_..SCPWord _" /permission:Public 1>>"_logpath_"workspacelog.txt 2>&1"
	set result = $ZF(-1,cmd)
	quit ..GetStatus(result, "SetWorkspace")
]]></Implementation>
</Method>

<Method name="SetWorkfolder">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set logpath = ..ExportFilePath _ "\log\"
	set SCWorkspace = ..GetSCWorkspace()
	set cmd = "dir >>"_logpath_"dir.txt"
	set result = $ZF(-1, cmd)		
	set cmd = "tf workfold /map "_ ..SCPath _" " _ ..ExportFilePath _" /login:"_..SCUser_","_..SCPWord _ " /workspace:"_ SCWorkspace _" 1>>"_logpath_"workfoldlog.txt 2>&1"
	set result = $ZF(-1, cmd)
	quit ..GetStatus(result, "SetWorkfolder")
]]></Implementation>
</Method>

<Method name="GetSCWorkspace">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#DIM computerName as %String
	#DIM user as %String
	if ($LENGTH(..SCUser, "\")>1)
	{
		set user = $PIECE(..SCUser,"\",2)
	}else{
		set user = ..SCUser	
	}
	set computerName = $zu(110)
	return computerName_";"_user
]]></Implementation>
</Method>

<Method name="DeleteLogFiles">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set logfiles = ..ExportFilePath _ "\log\*.*"
	set tSC = ##class(%File).Delete(logfiles)
	return tSC
]]></Implementation>
</Method>

<Method name="GetStatus">
<Description><![CDATA[
	SCResult ****** Definition<br/>
	=============== =============================================================================================<br/>
	0 ------------- Success.<br/>
	1 ------------- Partial success; this means at least something, or possibly everything, failed to succeed.<br/>
	2 ------------- Unrecognized command.<br/>
	100 ----------- Nothing succeeded.<br/>]]></Description>
<FormalSpec>SCresult:%String,MethodCalled:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	quit $CASE(SCresult,
              0:$$$OK,
              1:$$$ERROR($$$GeneralError,"Partial success; this means at least something, or possibly everything, failed to succeed.", MethodCalled ),
              2:$$$ERROR($$$GeneralError,"Unrecognized command.", MethodCalled),
              100:$$$ERROR($$$GeneralError,"Nothing succeeded.", MethodCalled))
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Task.SourceExporttoVSS">
<Description>
Copyright 2007 by Inland Imaging Business Associates
This Class exports changed classes to Microsoft Visual Source Safe.
In order for this class to be used VSS must be correctly configured on the Ensemble Server
The ssbat.bat file must exist in the root of the namespace mgr directory
A folder named vss must exist in the root of the namespace mgr directory</Description>
<Super>%SYS.Task.Definition</Super>
<TimeChanged>62621,50235</TimeChanged>
<TimeCreated>60906,36736.731135</TimeCreated>

<Parameter name="TaskName">
<Default>SourceExporttoVSS</Default>
</Parameter>

<Property name="CSPApplicationName">
<Description>
example: /csp/healthshare/iibasupport/</Description>
<Type>%String</Type>
</Property>

<Property name="CSPApplicationPath">
<Description>
example: h:\ensemblesys\csp\iibasupport</Description>
<Type>%String</Type>
</Property>

<Property name="VSSFolder">
<Description>
example: /iibaensemble/test</Description>
<Type>%String</Type>
</Property>

<Property name="VSSUser">
<Description>
example: iibaensemble</Description>
<Type>%String</Type>
</Property>

<Property name="VSSPWord">
<Description>
example: iibaensemble</Description>
<Type>%String</Type>
</Property>

<Property name="NameSpaceDir">
<Description>
NameSpace Directory - example: e:\ensemblesys\mgr\IIBARIS</Description>
<Type>%String</Type>
</Property>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
  
 kill tFullList 
 
 
 do $System.OBJ.GetClassList(.tList,"/mapped=0/system=0/percent=0")
  set class="" for  {
    set class=$o(tList(class)) quit:class=""
    if $P(class,".",1) '= "csp" {
    	set tFullList(class_".cls")=""
    }
  }
 
 set p="" for  {
    set p=$o(^Ens.Rule.RuleDefinitionD(p)) q:p=""
    set r="" for  {
      set r=$o(^Ens.Rule.RuleDefinitionD(p,r)) q:r=""
      set tFullList(p_"."_r_".rul")=""
    }
  }
  
 set cat="" for  {
 set cat=$o(^EnsHL7.Schema(cat)) quit:cat=""
  	set tFullList(cat_".hl7")=""
 }
 
 if ..CSPApplicationName '= "" { 
	 Set Path=..CSPApplicationPath, Mask="*.*"	
	 Set rset = ##class(%ResultSet).%New()
	 set rset.ClassName = "%File"
	 set rset.QueryName = "FileSet"
	 Do rset.Execute(Path,Mask)
	
	 While (rset.Next()) {
		// only files - skip directories
		if ($ZB(##class(%File).Attributes(rset.Data("Name")),16,1)=0) {
			set filename = ##class(%File).GetFilename(rset.Data("Name"))
			if $P(filename,".",2) = "csp" {
				set tFullList(..CSPApplicationName_filename)=""
	 		}
	 	}
	 }
	
	 Do rset.Close()
 }
 
 set name="", tSourceControldttm=""
 
 for {set name = $O(tFullList(name)) quit:name=""

 		set tSourceControldttm = $GET(^SourceControldttm(name))
 		if tSourceControldttm'=##class(%RoutineMgr).TS(name) {
			
			//set tSC = ..ExportFile(name)
			
			set tSC = ..OnBeforeCompile(name)
			set tSC = ..OnAfterCompile(name)
 			
			set ^SourceControldttm(name)=##class(%RoutineMgr).TS(name) 			
 		}
 }
	
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="OnBeforeCompile">
<Description>
Before loading any item we check to see if it exists in VSS and check it out if it does.</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	set ^CacheTempMattsTrace2(1) = $ZDT($H)_": OnBeforeCompile for file: "_InternalName
	/*
	status - 
		0 means exists and is Not checkedout
		1 means exists and is checked out
		100 means doesn't exist

	check out - 
		0 means success
		100 means already checked out
		100 means doesn't exist
			
	check in - 
		0 means success
		100 means checked out by other user
		100 means file doesn't exist
	*/
	
	
	set filename = ..ExternalName(InternalName)
	set VSSName = ..VSSName(InternalName)
	
	set tSC = $ZF(-1,"ss status "_VSSName_" -I-")
	set ^CacheTempMattsTrace2(1) = $ZDT($H)_": OnBeforeCompile for file: "_InternalName_" "_tSC
	
	///*	
	//if tSC = 0, the file exists and is checked in so we check it out
	if tSC = 0 {
		set tSC = ..VSSCheckOut(VSSName)
	//if tSC = 100, the file doesn't exist so we write it, add it, and check it out
	} Elseif tSC = 100 {
		//write it to file
		set ^CacheTempMattsTrace2(3) = tSC
		set tSC = ..ExportFile(InternalName)

		//change current project, add, and checkout
		if tSC { set tSC = ..VSSAdd(InternalName) }	
	//if tSC = 1, the file exists but is checked out, we quit with an error message
	} Elseif tSC = 1 {
		Quit $$$ERROR($$$GeneralError,"File is checked out of Source Control and cannot be compiled")
	}
	
	if tSC = 0 {
		Quit $$$OK
	} Else {
		Quit $$$ERROR($$$GeneralError,"File failed checkout: "_tSC)
	}
]]></Implementation>
</Method>

<Method name="OnAfterCompile">
<Description>
After compiling an item we write this to an xml file so that we can check the changes into VSS.</Description>
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ^CacheTempMattsTrace2(2) = $ZDT($H)_": OnAfterCompile for file: "_InternalName
	
	set VSSName = ..VSSName(InternalName)
	
	// this condition added to skip hl7 files for now...
	Set ext=$zconvert($piece(InternalName,".",$length(InternalName,".")),"l")
		
	//write it to file and check it in with the current user
	set tSC = ..ExportFile(InternalName)
	if tSC { set tSC = ..VSSCheckIn(VSSName) }
	
	if tSC = 0 {
		Quit $$$OK
	} Else {
		Quit $$$ERROR($$$GeneralError,"File failed checkin: "_tSC)
	}
]]></Implementation>
</Method>

<Method name="ExportFile">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set filename = ..ExternalName(InternalName)
	

	 
	Set tSC=$system.OBJ.Export(InternalName,filename,"-d")
	set ^CacheTempMattsTrace2(10) = "exporting file: "_InternalName_tSC	
 	// 	w $system.Status.DisplayError(tSC)
 	
 	//Quit:$$$ISERR(tSC)
 	if $$$ISERR(tSC) Quit $$$ERROR($$$GeneralError,"Error occured in exporting file")
 	
 	Quit tSC
]]></Implementation>
</Method>

<Method name="VSSCheckOut">
<FormalSpec>VSSName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tSC = $ZF(-1,"ssbat.bat checkout "_VSSName_" "_..VSSUser_"")
	Quit tSC
]]></Implementation>
</Method>

<Method name="VSSCheckIn">
<FormalSpec>VSSName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tSC = $ZF(-1,"ssbat.bat checkin "_VSSName_" "_..VSSUser_"")
	Quit tSC
]]></Implementation>
</Method>

<Method name="VSSAdd">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set filename = ..ExternalName(InternalName)
	
	set tSC = $ZF(-1,"ss Cp $/"_..VSSFolder_"/"_$ZNSPACE_" -I- -Y"_..VSSUser_","_..VSSPWord_"")
	set ^CacheTempMattsTrace2(4) = tSC
	set tSC = $ZF(-1,"ss add "_filename_" -I- -K -Y"_..VSSUser_","_..VSSPWord_"")
	set ^CacheTempMattsTrace2(5) = tSC
	Quit tSC
]]></Implementation>
</Method>

<Method name="VSSName">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set name=$TR($piece(InternalName,".",1,$length(InternalName,".")-1),"/",".")
	Set ext=$zconvert($piece(InternalName,".",$length(InternalName,".")),"l")
	
	Set VSSName="$"_..VSSFolder_"/"_$ZNSPACE_"/"_ext_"."_name_".xml"
	
	Quit VSSName
]]></Implementation>
</Method>

<Method name="ExternalName">
<FormalSpec>InternalName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set name=$TR($piece(InternalName,".",1,$length(InternalName,".")-1),"/",".")
	Set ext=$zconvert($piece(InternalName,".",$length(InternalName,".")),"l")
	
	set filename = ..NameSpaceDir_"\vss\"_ext_"."_name_".xml"
		
	Quit filename
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Task.TaskItemDefinition">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%Persistent</Super>
<TimeChanged>62546,33657.53642</TimeChanged>
<TimeCreated>61040,42318.262819</TimeCreated>

<Property name="NameSpace">
<Type>%String</Type>
</Property>

<Property name="ItemType">
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Property name="ItemName">
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Property name="ItemValue">
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Query name="GetTaskItemNames">
<Type>%SQLQuery</Type>
<FormalSpec>NameSpace:%String,ItemType:%String="TaskMgmtMethods"</FormalSpec>
<SqlQuery>SELECT distinct ItemName FROM TaskItemDefinition
 WHERE ((NameSpace = :NameSpace OR NameSpace = 'All') AND ItemType = :ItemType)
 ORDER BY ItemName</SqlQuery>
</Query>

<Query name="GetTaskItemValues">
<Type>%SQLQuery</Type>
<FormalSpec>NameSpace:%String,ItemName:%String,ItemType:%String="TaskMgmtMethods"</FormalSpec>
<SqlQuery>SELECT ItemValue FROM TaskItemDefinition
 WHERE (ItemName = :ItemName AND ItemType = :ItemType AND (NameSpace = :NameSpace OR NameSpace = 'All'))
 ORDER BY ItemValue</SqlQuery>
</Query>

<Method name="setTaskItemDefinitiontoDefaults">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	
	&SQL(
	
		delete from IIBAENSEMBLE_Task.TaskItemDefinition 
		where 
		(	ItemName in (

			'04^WorkflowTaskPurge'
			,'10^TaskItems'
			,'20^SupportPages'
			,'11^MsgClassDefUpdate'
			,'30^TCP Port List'
			)
			and NameSpace <> 'All'
		)
		or 
		(
			ItemName NOT in (
			'04^WorkflowTaskPurge'
			,'10^TaskItems'
			,'20^SupportPages'
			,'11^MsgClassDefUpdate'
			,'30^TCP Port List'
			)
		)
	)
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^IIBAENSEMBL521.TaskItemDefi72BD</DataLocation>
<DefaultData>TaskItemDefinitionDefaultData</DefaultData>
<IdLocation>^IIBAENSEMBL521.TaskItemDefi72BD</IdLocation>
<IndexLocation>^IIBAENSEMBL521.TaskItemDefi72BI</IndexLocation>
<StreamLocation>^IIBAENSEMBL521.TaskItemDefi72BS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="TaskItemDefinitionDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ItemName</Value>
</Value>
<Value name="3">
<Value>ItemType</Value>
</Value>
<Value name="4">
<Value>ItemValue</Value>
</Value>
<Value name="5">
<Value>NameSpace</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.Task.TaskItemDefinitionAdmin.Admin">
<Description>
Copyright 2007 by Inland Imaging Business Associates
IIBAENSEMBLE.Task.TaskItemDefinitionAdmin.Admin</Description>
<Super>%ZEN.application</Super>
<TimeChanged>61066,35710.070042</TimeChanged>
<TimeCreated>61048,55900.625149</TimeCreated>

<Parameter name="APPLICATIONNAME">
<Description>
This is the name of this application.</Description>
<Default>TaskItemDefinitionAdmin</Default>
</Parameter>

<Parameter name="HOMEPAGE">
<Description>
This is the URL of the main starting page of this application.</Description>
<Default>IIBAENSEMBLE.Task.TaskItemDefinitionAdmin.Home.cls</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains application-wide CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>
</Class>


<Class name="IIBAENSEMBLE.Task.TaskItemDefinitionAdmin.Home">
<Description>
Copyright 2007 by Inland Imaging Business Associates
Created using the page template: Default</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>63840,52995.979963</TimeChanged>
<TimeCreated>61048,56927.475224</TimeCreated>
<DependsOn>IIBAENSEMBLE.Zen.ToolkitHeader</DependsOn>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>IIBAENSEMBLE.Task.TaskItemDefinitionAdmin.Admin</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Home</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENToolKIT</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
    /*Style classes for use on this page */
   
     body { font-family: arial; }
     table.tpTable caption{
       background: transparent;
       font-size: 1.4em;
       font-weight: bold;
       text-align: left;
       border: none;
     }
    /* even rows */
     .tpEven { color: black; background: #ebf3ff; }
    
    /* odd rows */
     .tpOdd { color: black; background: white; }
    /* this is a selected row */
     table.tpTable tr.tpSelected { background: #3d80df; color: white; }
   
    /* hover for odd and even rows */
     tr.tpOdd:hover,tr.tpEven:hover { 
        background-color: #3d80df; 
        color: #ffffff; }
  
    /* table header style */
    table.tpTable th {
        border-right: 1px solid gray;
        border-bottom: 1px solid gray;
        background: #C5D6D6;
        color: black;
        font-weight: bold;
        text-align: left;
        padding: 2px;
        overflow: hidden;
     }
     /* table header style */
    table.tpTable tr {
	    font-size: .8em;
    }
    /* selected column header (th) */
     table.tpTable th.tpHdrSelected { background: #3d80df; }
    /* filter layour */
     table.tpFilterLayout td { border: none; background: #C5D6D6; }

</style>
]]></Data>
</XData>

<UDLText name="T">
<Content><![CDATA[
// <page xmlns="http://www.intersystems.com/zen" title="">

]]></Content>
</UDLText>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns:ZENToolKIT="http://www.intersystems.com/toolkitheader" title="IIBA Support" width="auto" id="maintitle">

<ZENToolKIT:ToolkitHeader id="title" title="Task Items List"/>


  <hgroup width="100%"  valign="top">
    <vgroup width="5%"></vgroup>
  
    <vgroup width="90%"  valign="top">
   
    <tableNavigator id="TaskItemNav" tablePaneId="TaskItemTable"/>
 	
 	<hgroup valign="top">
 	
    <tablePane 
    id="TaskItemTable" 
    pageSize="10" 
    maxRows="100000"
    showRowNumbers="true" 
    showZebra="true" 
    useSnapshot="true"
    extraColumnWidth="25px"
    caption="Task Item Definitions"
	sortOrder="asc" 
    tableName="IIBAENSEMBLE_Task.TaskItemDefinition" 
    width="1200px"
    onselectrow="zenPage.fillForm('');"
    >
	<column colName="ID" hidden="true" />
   	<column header="NameSpace" width="100px" colName="NameSpace" filterType="text"/>
   	<column header="ItemType" width="150px" colName="ItemType" filterType="text"/>
   	<column header="ItemName" width="400px" colName="ItemName" filterType="text"/>
   	<column header="ItemValue" width="400px" colName="ItemValue" filterType="text"/>
   	<column header=""	width="40px" linkCaption="edit" link="javascript:zenPage.fillForm('#(%query.ID)#');"/>


    </tablePane>
    <spacer width=".5em"/>
  <dataController id="TaskItemData"  
    modelClass="IIBAENSEMBLE.Task.TaskItemDefinitionAdmin.Model" 
    modelId=""
/>
    
    <fieldSet id="TaskItemFormGroup" hidden="false" legend="Edit">
	<form id="TaskItemForm" 
         controllerId="TaskItemData" 
         layout="vertical"
         cellStyle="padding: 2px; padding-left: 5px; padding-right: 5px;">
         <text label="NameSpace:" dataBinding="NameSpace" id="NameSpace" name="NameSpace" size="25"/>
         <spacer height=".5em"/> 
		 <text label="ItemType:" dataBinding="ItemType" id="ItemType" name="ItemType" size="25"/>
		 <spacer height=".5em"/> 
		 <text label="ItemName:" dataBinding="ItemName" id="ItemName" name="ItemName" size="25"/>
		 <spacer height=".5em"/> 
		 <text label="ItemValue:" dataBinding="ItemValue" id="ItemValue" name="ItemValue" size="25"/>
		 <spacer height=".5em"/> 
		  <hgroup>
  		<button caption="Save" onclick="zenPage.saveTaskItem();" />
  		<spacer width="5"/>
  		<button caption="New" onclick="zenPage.newTaskItem();" />
  		<spacer width="5"/>
  		<button caption="Delete" onclick="zenPage.deleteTaskItem();" />
		 </hgroup>  
	</form>	
	</fieldSet>
	
	</hgroup>
    </vgroup>
  
    <vgroup width="5%"></vgroup>
  
 </hgroup>

</page>
]]></Data>
</XData>

<Method name="saveTaskItem">
<Description>
save contact model to database</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  // validate and save form
  var form = zenPage.getComponentById('TaskItemForm');
  form.save();
  var table=zenPage.getComponentById('TaskItemTable');
  //refresh data in contact table
  table.executeQuery();
]]></Implementation>
</Method>

<Method name="newTaskItem">
<Description>
Create new object via dataModel</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  var controller = zenPage.getComponentById('TaskItemData');
  controller.createNewObject();
]]></Implementation>
</Method>

<Method name="deleteTaskItem">
<Description>
Delete current item from database</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  var controller = zenPage.getComponentById('TaskItemData');
  controller.deleteId(controller.getModelId());
  var table = zenPage.getComponentById('TaskItemTable');
   //refresh data in contact table
  table.executeQuery(true);
  controller.update();
]]></Implementation>
</Method>

<Method name="fillForm">
<FormalSpec>id</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  var controller = zenPage.getComponentById('TaskItemData');
  controller.setProperty('modelId',id);
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Task.TaskItemDefinitionAdmin.Model">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%ZEN.DataModel.ObjectDataModel</Super>
<TimeChanged>61066,35724.215967</TimeChanged>
<TimeCreated>61048,59061.906728</TimeCreated>

<Property name="NameSpace">
<Type>%String</Type>
</Property>

<Property name="ItemType">
<Type>%String</Type>
</Property>

<Property name="ItemName">
<Type>%String</Type>
</Property>

<Property name="ItemValue">
<Type>%String</Type>
</Property>

<Method name="%OnOpenSource">
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[  Quit ##class(IIBAENSEMBLE.Task.TaskItemDefinition).%OpenId(pID)
]]></Implementation>
</Method>

<Method name="%OnSaveSource">
<FormalSpec>pSource:IIBAENSEMBLE.Task.TaskItemDefinition</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   Set tSC = pSource.%Save()
   Set ..%id = pSource.%Id()
   Quit tSC
]]></Implementation>
</Method>

<Method name="%OnNewSource">
<FormalSpec>*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[  Quit ##class(IIBAENSEMBLE.Task.TaskItemDefinition).%New()
]]></Implementation>
</Method>

<Method name="%OnDeleteSource">
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  Quit ##class(IIBAENSEMBLE.Task.TaskItemDefinition).%DeleteId(pID)
]]></Implementation>
</Method>

<Method name="%OnLoadModel">
<FormalSpec>pSource:IIBAENSEMBLE.Task.TaskItemDefinition</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set ..NameSpace = pSource.NameSpace
    Set ..ItemType = pSource.ItemType
    Set ..ItemName = pSource.ItemName
    Set ..ItemValue = pSource.ItemValue
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnStoreModel">
<FormalSpec>pSource:IIBAENSEMBLE.Task.TaskItemDefinition</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set pSource.NameSpace = ..NameSpace
    Set pSource.ItemType = ..ItemType
    Set pSource.ItemName = ..ItemName
    Set pSource.ItemValue = ..ItemValue
    Quit pSource.%Save()
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Task.Utilities">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%Persistent</Super>
<TimeChanged>62546,33659.42939</TimeChanged>
<TimeCreated>60796,55395.775849</TimeCreated>

<Method name="BackupCumu">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	do $ZF(-1,"net use z: /DELETE")
	do $ZF(-1,"net use z: \\sqlbackup\Backups4\Ensemble /USER:duvoisin\svc_iibaensemble 118aensem8le")
	do $ZF(-1,"cscript z:\script\deleteolderthan2.vbs cumuincrdblist")
	set tSC = ##class(Backup.General).StartTask("CumuIncrDBList",0,1,"Z:\")
	do $ZF(-1,"net use z: /DELETE")
]]></Implementation>
</Method>

<Method name="BackupFull">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	do $ZF(-1,"net use z: /DELETE")
	do $ZF(-1,"net use z: \\sqlbackup\Backups4\Ensemble /USER:duvoisin\svc_iibaensemble 118aensem8le")
	do $ZF(-1,"cscript z:\script\deleteolderthan2.vbs fulldblist")
	set tSC = ##class(Backup.General).StartTask("FullDBList",0,1,"Z:\")
	do $ZF(-1,"net use z: /DELETE")
]]></Implementation>
</Method>

<Method name="IsBackupRunning">
<ClassMethod>1</ClassMethod>
<FormalSpec>Info:%RegisteredObject</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set Return = 0
	set rs=##class(%ResultSet).%New("Backup.Task:List")
	do rs.Execute()
	While rs.Next() {
		if rs.Data("Status") = "Running" {
			set Info(rs.Data("Name"),"Name") = rs.Data("Name")
			set Info(rs.Data("Name"),"Type") = rs.Data("Type")
			set Info(rs.Data("Name"),"Device") = rs.Data("Device")
			set Info(rs.Data("Name"),"Description") = rs.Data("Description")
			set Info(rs.Data("Name"),"Status") = rs.Data("Status")
			set Info(rs.Data("Name"),"LastLogFile") = rs.Data("LastLogFile")
			set Return = 1
		}
	}
	
	Quit Return
]]></Implementation>
</Method>

<Method name="Alert">
<ClassMethod>1</ClassMethod>
<FormalSpec>Info:%RegisteredObject</FormalSpec>
<Implementation><![CDATA[
	 
	 set Name = ""
	 For {
	 	Set Name=$O(Info(Name))
 		Q:Name=""
 		set Body="The following backup/s are currently running. The requested backup task will not run."_$C(13,10)_$C(13,10)
 		
 		set Body = Body_"Name: "_Info(Name,"Name")_$C(13,10)
 		set Body = Body_"Status: "_Info(Name,"Status")_$C(13,10)
 		set Body = Body_"Type: "_Info(Name,"Type")_$C(13,10)
 		set Body = Body_"Device: "_Info(Name,"Device")_$C(13,10)
 		set Body = Body_"LogFile: "_Info(Name,"LastLogFile")_$C(13,10)
 		
 		set Body = Body_$C(13,10)_$C(13,10)
 		 		
	 }
	 
	 w Body
]]></Implementation>
</Method>

<Method name="Test">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	
	if ..IsBackupRunning(.Info)=0 {
		w "not running" 
	} else {
		do ..Alert(.Info)
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^IIBAENSEMBLE.Task.UtilitiesD</DataLocation>
<DefaultData>UtilitiesDefaultData</DefaultData>
<IdLocation>^IIBAENSEMBLE.Task.UtilitiesD</IdLocation>
<IndexLocation>^IIBAENSEMBLE.Task.UtilitiesI</IndexLocation>
<StreamLocation>^IIBAENSEMBLE.Task.UtilitiesS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="UtilitiesDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.Task.iibaUpdateProduction">
<Super>%SYS.Task.Definition</Super>
<TimeChanged>63474,41714.870089</TimeChanged>
<TimeCreated>61677,32228.19458</TimeCreated>

<Parameter name="TaskName">
<Default>iibaUpdateProduction</Default>
</Parameter>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tSC As %Status = $$$OK
	
	d ##class(Ens.Director).UpdateProduction()
	
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Utilities">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%RegisteredObject</Super>
<TimeChanged>64202,69504.240224</TimeChanged>
<TimeCreated>60487,54188.758232</TimeCreated>

<Method name="InvokeService">
<ClassMethod>1</ClassMethod>
<FormalSpec>servicename:%String,value:%RegisteredObject=""</FormalSpec>
<Implementation><![CDATA[
	set Status = ##class(Ens.Director).CreateBusinessService(servicename,.service)
	if Status {
		do service.ProcessInput(value)
	}
]]></Implementation>
</Method>

<Method name="InvokeSCBatch">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set oref = ##class(IIBAENSEMBLE.SourceControlBatch).%New()
	set tSC = oref.SCBatch()
]]></Implementation>
</Method>

<Method name="CycleInterface">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>InterfaceList:%String,InactivityThreshold:%Integer=0</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	
		
	// first find which interfaces are currently enabled.
	Set ProductionName=""
	Set ProductionStatus=""
	set status = ##class(Ens.Director).GetProductionStatus(.ProductionName,.ProductionStatus)
	
	set production=##class(Ens.Config.Production).%OpenId(ProductionName)
	
	
	for i=1:1:production.Items.Count() {
		
		s item=production.Items.GetAt(i)
		//W item.Name,!
		if ( $FIND(InterfaceList,item.Name) && (item.Enabled+0=1) ) {
			s InterfaceEnabled(item.Name)=item.Enabled+0
		}
	}
	

	// Second, for the enabled interfaces, get the last action information
	set rs=##class(%ResultSet).%New("Ens.Util.Statistics:EnumerateHostStatus")
 	Set r=rs.Execute()
 
	while rs.Next() {
		Set ifName=rs.Get("Name")
		If ($G(InterfaceEnabled(ifName))) {
			//Do ##class(Ens.Util.Log).LogInfo("IIBAENSEMBLE.Utilities","CycleInterface","Disable failed: "_ifName)
			s InterfaceEnabled(ifName)=rs.Get("LastActivity")
		}
	}

	
	s InterfaceName=""
	For {
		s InterfaceName=$O(InterfaceEnabled(InterfaceName))
		Q:InterfaceName=""
		
		s ifLastAction=InterfaceEnabled(InterfaceName)
	
		

		// Cycle the interface if the inactivity time has exceeded the threshold	
		Set CurrentTime=$ZDT($H,3)
		Set TimeDiff=""
		&sql(Select distinct {fn TimestampDiff(SQL_TSI_SECOND,:ifLastAction,:CurrentTime) } into :TimeDiff From IIBAENSEMBLE_Monitor.ItemStatus )
	
		If ( TimeDiff > (InactivityThreshold*60) ) {
			
			//Disable the Interface
			Try {
				set status = ##class(Ens.Director).EnableConfigItem(InterfaceName,0)
			} Catch errobj {
				Do ##class(Ens.Util.Log).LogError("IIBAENSEMBLE.Utilities","CycleInterface","Disable failed: "_errobj.Name)
			}
	

			// sleep for a few seconds to let things settle
			H 10
	
			// Enable the interface
			Try {
				set status = ##class(Ens.Director).EnableConfigItem(InterfaceName,1)
			} Catch errobj {
				Do ##class(Ens.Util.Log).LogError("IIBAENSEMBLE.Utilities","CycleInterface","Enable failed: "_errobj.Name)
			}
		
	
		}
	}
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ClearQueue">
<ClassMethod>1</ClassMethod>
<FormalSpec>QueueName:%String,startIndex:%Integer="",endIndex:%Integer=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
		
 
 Set rset = ##class(%ResultSet).%New("Ens.Queue:EnumerateItem")
 set tSC = rset.Execute(QueueName)

 set rownum=0
 While (rset.Next()) {
    
    if ((startIndex="")||(rset.Data("Index")>=startIndex))
    	&&((endIndex="")||(rset.Data("Index")<=endIndex)) {
    	set tSC = ##class(Ens.Queue).AbortItem(QueueName,rset.GetDataByName("Priority"),rset.GetDataByName("Index"))        
    	//if tSC '= 1 Quit
    	set rownum = rownum+1
    	//if rownum > 5 Quit
    }
 }
 Do rset.Close()
 
 w rownum,!
 
 Quit tSC
]]></Implementation>
</Method>

<Method name="PurgeArchivedFiles">
<ClassMethod>1</ClassMethod>
<FormalSpec>Path:%String,Mask:%String="*.*",Keep:%Integer=30</FormalSpec>
<Implementation><![CDATA[
	// Clean out Archive files older than 30 days
	Set rset = ##class(%ResultSet).%New()
	set rset.ClassName = "%File"
	set rset.QueryName = "FileSet"
	Do rset.Execute(Path,Mask)
	Set FileDelete = 1
	While (rset.Next()) {
		// only delete files - skip directories
		if ($ZB(##class(%File).Attributes(rset.Data("Name")),16,1)=0) {
			If $PIECE($HOROLOG,",") - $PIECE($ZDATETIMEH(rset.Data("DateCreated"),3,1),",") > Keep {
				Set FileDelete = ##class(%File).Delete(rset.Data("Name"))
				If FileDelete = 0 {
					do ##class(Ens.Util.Log).LogError("IIBAENSEMBLE.Utilities", "PurgeArchivedFiles", "File delete Failed: "_rset.Data("Name"))
				}
			}
		}
	}
	
	Do rset.Close()
]]></Implementation>
</Method>

<Method name="ToggleItemStatus">
<ClassMethod>1</ClassMethod>
<FormalSpec>ItemName:%String,NumberofAttempts:%Integer,WaitBtwnAttempts:%Integer,Enable:%Boolean</FormalSpec>
<Implementation><![CDATA[
	set i=0
	for {
		set tSC = ##class(Ens.Director).EnableConfigItem(ItemName,Enable)
		Quit:tSC=1
		set i = i +1
		Quit:i=NumberofAttempts
		hang WaitBtwnAttempts
	}
	
	set tSC = ##class(Ens.Director).UpdateProduction()
]]></Implementation>
</Method>

<Method name="WriteJobsQueues">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
		Set rs = ##class(%ResultSet).%New()
	set rs.ClassName = "Ens.Job"
	set rs.QueryName = "Enumerate"
	Do rs.Execute()
	
	set filename = ##class(%File).ManagerDirectory()_"Jobs"_##class(Ens.Util.Time).FormatDateTime("%Y%m%d%H%M%S")_".csv"
	set file = ##class(%File).%New(filename)
	Do file.Open("WSN")
	Do file.WriteLine("Job,ConfigName,Mode,Status,Detail,ActiveMessage,State")
	While rs.Next() {
		Do file.WriteLine(rs.Data("Job")_","_rs.Data("ConfigName")_","_rs.Data("Mode")_","_rs.Data("Status")_","_rs.Data("Detail")_","_rs.Data("ActiveMessage")_","_rs.Data("State"))
		
	}
	
	w "Jobs list written to: "_file.Name,!

		
	Do file.Close()
	
	
	
	Set rs = ##class(%ResultSet).%New()
	set rs.ClassName = "Ens.Queue"
	set rs.QueryName = "Enumerate"
	Do rs.Execute()
	
	set filename = ##class(%File).ManagerDirectory()_"Queues"_##class(Ens.Util.Time).FormatDateTime("%Y%m%d%H%M%S")_".csv"
	set file = ##class(%File).%New(filename)
	Do file.Open("WSN")
	Do file.WriteLine("Name,Count,Created")
	While rs.Next() {
		Do file.WriteLine(rs.Data("Name")_","_rs.Data("Count")_","_rs.Data("Created"))
		
	}
	
	w "Queues list written to: "_file.Name,!
	
	Do file.Close()
]]></Implementation>
</Method>

<Method name="GetItemSettingObject">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[ItemName:%String,SettingName:%String,&SettingObject:Ens.Config.Setting]]></FormalSpec>
<Implementation><![CDATA[
	set ItemID=""
	
	&sql(select ID into :ItemID from Ens_Config.Item where Name = :ItemName)
	
	set item = ##class(Ens.Config.Item).%OpenId(ItemID)
	
	for i=1:1:item.Settings.Count() {
		if item.Settings.GetAt(i).Name = SettingName set SettingObject = item.Settings.GetAt(i)	
	}
]]></Implementation>
</Method>

<Method name="ArchiveHL7">
<Description>
This Method queries HL7 message body IDs for Services and Operations from the Ens.MessageHeader table within the date range that is specified.
The Date range is by default T-1.  If sDate1 is supplied and sDate2 is not, the date ranges is sDate1.
If both sDate1 and sDate2 are supplied, the date range spans the two dates.
The archive path defaults to d:\archive\, but it can be overridden as the 3rd parameter if needed.
Once the message body IDs are acquired, the RawContect of each message is written to a file that is named CCYY-MM-DD.[ItemName].hl7.txt</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>sDate1:%String="",sDate2:%String="",ArchivePath:%String="D:\Archive\",sSource:%String="",sTarget:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set InfoMsg = "Start Archive at: "_$ZDT($H)_" | "
	
	If ( $E(ArchivePath,$L(ArchivePath),$L(ArchivePath)) '= "\" ) {
		S ArchivePath=ArchivePath_"\"
	}
	
	//w ArchivePath,!
	
	If (sDate1="")&&(sDate2=""){
		set sDate1 = $ZD($H-1,3)
		set sDate2 = $ZD($H-1,3)
	} elseif (sDate1'="")&&(sDate2=""){
		set sDate2=sDate1
	}
	
	set InfoMsg = InfoMsg_"sDate1: "_sDate1_" | sDate2: "_sDate2_" | AchivePath: "_ArchivePath_" | "
	
	If (sDate1?4N1"-"2N1"-"2N)&&(sDate2?4N1"-"2N1"-"2N) {	
	
		set StartStamp = sDate1_" 00:00:00"
		set EndStamp = sDate2_" 23:59:59"
		//set EndStamp = sDate2_" 01:00:00"
	
		set SQL = ""
		Set rset = ##class(%ResultSet).%New()
		set rset.RuntimeMode = "1"
		
		set SQL = SQL_"SELECT MessageBodyId, MessageBodyClassName, SourceBusinessType, SourceConfigName, TargetBusinessType, TargetConfigName, TimeCreated "
		set SQL = SQL_"FROM Ens.MessageHeader "
		set SQL = SQL_"WHERE TimeCreated >= '"_StartStamp_"' "
		set SQL = SQL_"AND TimeCreated <= '"_EndStamp_"' "
		set SQL = SQL_"AND (SourceBusinessType = 1 OR TargetBusinessType = 3) "
		
		if sSource '= "" {
			set SQL = SQL_"AND SourceConfigName = '"_sSource_"' "
		}
		if sTarget '= "" {
			set SQL = SQL_"AND TargetConfigName = '"_sTarget_"' "
		}
		
		Do rset.Prepare(SQL)
		Do rset.Execute()
	
		Kill ^CacheTempMsgArchive($ZNSPACE)
		set ^CacheTempMsgArchive($ZNSPACE) = ""
	
		While (rset.Next()) {
		
		  If rset.Data("MessageBodyClassName") = "EnsLib.HL7.Message" {
	
			If rset.Data("SourceBusinessType")=1 {
				set ^CacheTempMsgArchive($ZNSPACE,rset.Data("SourceConfigName"),$P(rset.Data("TimeCreated")," ",1),rset.Data("MessageBodyId")) = ""
			} ElseIf rset.Data("TargetBusinessType")=3 {
				set ^CacheTempMsgArchive($ZNSPACE,rset.Data("TargetConfigName"),$P(rset.Data("TimeCreated")," ",1),rset.Data("MessageBodyId")) = ""
			}
			
		  }
		  
		}

	//w "end while",!

		Set ItemName=""
		For {
			Set ItemName=$O(^CacheTempMsgArchive($ZNSPACE,ItemName)) 
			Q:ItemName=""
	//w ItemName,!
			Set TimeCreated=""
			For {
				Set TimeCreated=$O(^CacheTempMsgArchive($ZNSPACE,ItemName,TimeCreated)) 
				Q:TimeCreated=""
			
				Set file=##class(%File).%New(ArchivePath_TimeCreated_"."_$ZNSPACE_"."_ItemName_".hl7.txt")
				If $ISOBJECT(file) = 1 {
				Do file.Open("WSN")
			
			//w file.Name,!
			
				Set MsgID=""
				For {
					Set MsgID=$O(^CacheTempMsgArchive($ZNSPACE,ItemName,TimeCreated,MsgID)) 
					Q:MsgID=""
			
					set hl7 = ##class(EnsLib.HL7.Message).%OpenId(MsgID)
				    If $ISOBJECT(hl7) = 1 {
						Do file.WriteLine(hl7.RawContent)
						//Do hl7.OutputToLibraryStream(file)
				    } else {
					    do ##class(Ens.Util.Log).LogWarning("IIBAENSEMBLE.Utilities", "ArchiveHL7", "Could not create hl7 object: "_MsgID) 
				    }
				}
			
				//Close file
				do file.Close()
				} else {
					do ##class(Ens.Util.Log).LogWarning("IIBAENSEMBLE.Utilities", "ArchiveHL7", "Could not create file: "_ArchivePath_TimeCreated_"."_ItemName_".hl7.txt") 
				}
			}		
		}
	} Else {
		set ErrorMsg = "Arhive HL7 Date 1: "_sDate1_" or 2: "_sDate2_" is not correctly formatted as ODBC date YYYY-MM-DD"
		do ##class(Ens.Util.Log).LogError("IIBAENSEMBLE.Utilities", "ArchiveHL7", ErrorMsg) 
	}
	
	set InfoMsg = InfoMsg_"End Archive at: "_$ZDT($H)
	
	do ##class(Ens.Util.Log).LogInfo("IIBAENSEMBLE.Utilities", "ArchiveHL7", InfoMsg) 

	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DisableAllBusinessServices">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	
	// *****  Get the name of the production    *******
	Set ProductionName=""
	Set ProductionStatus=""
	set status = ##class(Ens.Director).GetProductionStatus(.ProductionName,.ProductionStatus)
	
	// Get a list of the Enabled Business Services	
	set production=##class(Ens.Config.Production).%OpenId(ProductionName)
	
	for i=1:1:production.Items.Count() {
  
  		
  		s item=production.Items.GetAt(i)
  		s name=item.Name
  		If (item.BusinessType() = "1") {
  			  		
			if (item.Enabled+0 = 1 ) {
	  			W !,"....Disabling ",item.Name
	  			set status = ##class(Ens.Director).EnableConfigItem(name,0)
  			}

  			
  		}
	}
	
	// Update Production
	set upstatus = ##class(Ens.Director).UpdateProduction()
]]></Implementation>
</Method>

<Method name="cspfileAppNameChange">
<ClassMethod>1</ClassMethod>
<FormalSpec>filename:%String,newAppName:%String,oldAppName:%String="/csp/YOURNAMESPACE/"</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	
	set fileOriginal = ##class(%File).%New(filename)
	
	set tSC =  fileOriginal.Open("RS")
	Quit:$$$ISERR(tSC) tSC
	set dir = ##class(%File).GetDirectory(filename)
	set newfilename = "temp_"_##class(%File).GetFilename(filename)
	set fileNew = ##class(%File).%New(dir_newfilename)
	set tSC =  fileNew.Open("WSN")
	Quit:$$$ISERR(tSC) tSC
	While 'fileOriginal.AtEnd {
		set tSC = fileNew.WriteLine(##class(IIBAENSEMBLE.Functions).StringReplace(fileOriginal.ReadLine(),oldAppName,newAppName))
		Quit:$$$ISERR(tSC) 
	}
	Quit:$$$ISERR(tSC) tSC
	do fileNew.Close()
	do fileOriginal.Close()
	
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="buildInstallerSourceFiles">
<ClassMethod>1</ClassMethod>
<FormalSpec>outputPath:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	if outputPath = "" {
		s outputPath = ##class(%File).ParentDirectoryName(##class(%File).ManagerDirectory())
	}
	s outputPath = ##class(%File).NormalizeDirectory(outputPath)
	
	s outputFileClasses = outputPath_"iibasupport_cls.xml"
	s outputFileCSP = outputPath_"iibasupport_csp.xml"
	s outputFileModalBox = outputPath_"iiba_modalBox_csp.xml"
	s outputFileModalBoxTemp = outputPath_"temp_iiba_modalBox_csp.xml"
	s outputFileCustomImages = outputPath_"iiba_CustomImages_csp.xml"
	s outputFileCustomImagesTemp = outputPath_"temp_iiba_CustomImages_csp.xml"
	s outputFileExt = outputPath_"iiba_ext_csp.xml"
	s outputFileImg = outputPath_"iiba_img_csp.xml"
	s outputFileExtTemp = outputPath_"temp_iiba_ext_csp.xml"
	s outputFileImgTemp = outputPath_"temp_iiba_img_csp.xml"
	s outputFileCspItems = outputPath_"iiba_csp_items.xml"
	s outputFileCspItemsTemp = outputPath_"temp_iiba_csp_items.xml"
	s outputFileGlobals = outputPath_"iibasupport_globals.gof"
	s outputFileInstaller = outputPath_"installer_cls.xml"
	
	//for exporting globals
	//need to purge from Task Item Definitions all but: TaskItems, SupportPages, MsgClassDefUpdate after the import
	set GlobalList = "IIBAENSEMBL4D4.SupportPageD883D.gbl,IIBAENSEMBL521.TaskItemDefi72BD.gbl,IIBAENSEMBLE.Monitor.tblItemsD.gbl"
  	
	
	//Exporting Classes
	s tSC = $system.OBJ.ExportPackage("IIBAENSEMBLE",outputFileClasses,"",.err,)
	Quit:$$$ISERR(tSC) tSC
	
	//Exporting Installer
	s tSC = $system.OBJ.Export("IIBAENSEMBLE.Installer.cls",outputFileInstaller,"",.err,)
	Quit:$$$ISERR(tSC) tSC
	
	//Exporting CSP and web files like images and .js files
	//s tSC = $system.OBJ.ExportPattern("/csp/"_$ZNSPACE_"/*",outputFileCSP,"",.err,)
	s tDefaultApp = $SYSTEM.CSP.GetDefaultApp($NAMESPACE)
	s tSC = $system.OBJ.ExportPattern(tDefaultApp_"/modalbox/*",outputFileModalBox,"",.err,)
	Quit:$$$ISERR(tSC) tSC
	
	
	s tSC = $system.OBJ.ExportPattern(tDefaultApp_"/CustomImages/*",outputFileCustomImages,"",.err,)
	Quit:$$$ISERR(tSC) tSC
	
	
	s tSC = $system.OBJ.ExportPattern(tDefaultApp_"/ext/*",outputFileExt,"",.err,)
	Quit:$$$ISERR(tSC) tSC
	
	s tSC = $system.OBJ.ExportPattern(tDefaultApp_"/img/*",outputFileImg,"",.err,)
	Quit:$$$ISERR(tSC) tSC
	
	k items
	//s items("/csp/iibatest/calendar.html")=""
	s items(tDefaultApp_"/calendar2.js")=""
	s items(tDefaultApp_"/calendar.html")=""
	s items(tDefaultApp_"/date.js")=""
	s items(tDefaultApp_"/effects.js")=""
	//s items(tDefaultApp_"/IIBARWFDashboard.csp")=""
	s items(tDefaultApp_"/IIBASupport.csp")=""
	s items(tDefaultApp_"/IIBASupportDetail.csp")=""
	//s items("/csp/iibatest/IIBAWFTasks.csp")=""
	s items(tDefaultApp_"/prototype.js")=""
	s items(tDefaultApp_"/scriptaculous.js")=""
	s items(tDefaultApp_"/xp_progress.js")=""
	s tSC = $system.OBJ.ExportPattern(.items,outputFileCspItems,"",.err,)
	Quit:$$$ISERR(tSC) tSC
	
	w "CSP app name change beginning",!
	
	//rename the app name to the default so that it can be named to the appropriate namespace on import
	s tSC = ##class(IIBAENSEMBLE.Utilities).cspfileAppNameChange(outputFileModalBox,"/csp/YOURNAMESPACE/",tDefaultApp_"/")
	Quit:$$$ISERR(tSC) tSC
	
	//Change the name of the original file and replace it with the new temp file that was created by the app name change method
	set tSC = ##class(%File).Delete(outputFileModalBox)
	Quit:$$$ISERR(tSC) tSC
	set tSC = ##class(%File).Rename(outputFileModalBoxTemp,outputFileModalBox)
	Quit:$$$ISERR(tSC) tSC

	
	//rename the app name to the default so that it can be named to the appropriate namespace on import
	s tSC = ##class(IIBAENSEMBLE.Utilities).cspfileAppNameChange(outputFileCustomImages,"/csp/YOURNAMESPACE/",tDefaultApp_"/")
	Quit:$$$ISERR(tSC) tSC
	
	//Change the name of the original file and replace it with the new temp file that was created by the app name change method
	set tSC = ##class(%File).Delete(outputFileCustomImages)
	Quit:$$$ISERR(tSC) tSC
	set tSC = ##class(%File).Rename(outputFileCustomImagesTemp,outputFileCustomImages)
	Quit:$$$ISERR(tSC) tSC
	
	//rename the app name to the default so that it can be named to the appropriate namespace on import
	s tSC = ##class(IIBAENSEMBLE.Utilities).cspfileAppNameChange(outputFileExt,"/csp/YOURNAMESPACE/",tDefaultApp_"/")
	Quit:$$$ISERR(tSC) tSC
	
	//Change the name of the original file and replace it with the new temp file that was created by the app name change method
	set tSC = ##class(%File).Delete(outputFileExt)
	Quit:$$$ISERR(tSC) tSC
	set tSC = ##class(%File).Rename(outputFileExtTemp,outputFileExt)
	Quit:$$$ISERR(tSC) tSC
	
	//rename the app name to the default so that it can be named to the appropriate namespace on import
	s tSC = ##class(IIBAENSEMBLE.Utilities).cspfileAppNameChange(outputFileImg,"/csp/YOURNAMESPACE/",tDefaultApp_"/")
	Quit:$$$ISERR(tSC) tSC
	
	//Change the name of the original file and replace it with the new temp file that was created by the app name change method
	set tSC = ##class(%File).Delete(outputFileImg)
	Quit:$$$ISERR(tSC) tSC
	set tSC = ##class(%File).Rename(outputFileImgTemp,outputFileImg)
	Quit:$$$ISERR(tSC) tSC
	
	//rename the app name to the default so that it can be named to the appropriate namespace on import
	s tSC = ##class(IIBAENSEMBLE.Utilities).cspfileAppNameChange(outputFileCspItems,"/csp/YOURNAMESPACE/",tDefaultApp_"/")
	Quit:$$$ISERR(tSC) tSC
	
	//Change the name of the original file and replace it with the new temp file that was created by the app name change method
	set tSC = ##class(%File).Delete(outputFileCspItems)
	Quit:$$$ISERR(tSC) tSC
	set tSC = ##class(%File).Rename(outputFileCspItemsTemp,outputFileCspItems)
	Quit:$$$ISERR(tSC) tSC
	
	w "csp app name change complete",!
		
	//Exporting Globals with data for the configuration of the toolkit
	s tSC = ##class(%Library.Global).Export("IIBA",.GlobalList,outputFileGlobals,7,"V")
	Quit:$$$ISERR(tSC) tSC
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="Base64EncodeFromFile">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pFilename:%String,&tSC:%Status,ommitCRLF:%Boolean=0]]></FormalSpec>
<ReturnType>%Stream.TmpBinary</ReturnType>
<Implementation><![CDATA[
	#DIM len as %String =5700 // Read the file in chunks of 5700 Bytes
	#DIM file as %FileBinaryStream =##class(%FileBinaryStream).%New()
	#DIM stream as %Stream.TmpBinary =##class(%Stream.TmpBinary).%New()
	
	quit:$G(pFilename)="" ""
	
	set file.Filename=pFilename
	set tSC=file.Rewind()
	if $$$ISERR(tSC) Quit ""

	while 'file.AtEnd {
		set:'ommitCRLF tSC=stream.Write($system.Encryption.Base64Encode(file.Read(.len)))
		set:ommitCRLF tSC=stream.Write($TR($system.Encryption.Base64Encode(file.Read(.len)),$C(13,10)))
		if $$$ISERR(tSC)
	}
	if $$$ISERR(tSC) Quit ""
	
	set tSC=stream.Rewind()
	if $$$ISERR(tSC) Quit ""
	
	
	Quit stream
]]></Implementation>
</Method>

<Method name="Base64DecodeToFile">
<Description>
Converts a stream containing Base64 encoded data into a file</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pStream:%Stream.TmpBinary,pFilename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#DIM file as %FileBinaryStream =##class(%FileBinaryStream).%New()
	#DIM len as %String =5700 // Read the file in chunks of 5700 Bytes
	#DIM tSC as %Status
	
	quit:$G(pFilename)="" ""
	quit:'$ISOBJECT(pStream) ""
	
	set file.Filename=pFilename
	set tSC=file.Rewind()
	if $$$ISERR(tSC) Quit tSC
	d pStream.Rewind()

	While 'pStream.AtEnd {
		set tSC = file.Write($system.Encryption.Base64Decode(pStream.ReadLine())) 
		if $$$ISERR(tSC) Quit
	}
	if $$$ISERR(tSC) Quit tSC
	
	s tSC = file.%Save()
	if $$$ISERR(tSC) Quit tSC
	
	
	s file = ""
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="Base64DecodeToStream">
<Description>
Converts a stream containing Base64 encoded data into a stream</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%Stream.TmpBinary,&oStream:%GlobalBinaryStream]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set oStream =##class(%GlobalBinaryStream).%New()
	#DIM tSC as %Status = $$$OK
	
	quit:'$ISOBJECT(pStream) ""
	
	While 'pStream.AtEnd {
		set tSC = oStream.Write($system.Encryption.Base64Decode(pStream.ReadLine())) 
		if $$$ISERR(tSC) Quit
	}
	if $$$ISERR(tSC) Quit tSC
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="EnQueueMsg">
<ClassMethod>1</ClassMethod>
<FormalSpec>pRequest:%RegisteredObject,pSourceConfigName:%String,pTargetConfigName:%String,pSessionId:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = ##class(Ens.MessageHeader).NewRequestMessage(.pRequestHeader,pRequest,.pSessionId) Quit:('tSC)
	Set pRequestHeader.SourceConfigName = pSourceConfigName
	Set pRequestHeader.TargetConfigName = pTargetConfigName
	Set pRequestHeader.SourceBusinessType = ^Ens.Runtime("ConfigItem",^Ens.Runtime("DispatchName",pSourceConfigName),"BusinessType")
	Set pRequestHeader.TargetBusinessType = ^Ens.Runtime("ConfigItem",^Ens.Runtime("DispatchName",pTargetConfigName),"BusinessType")
	Set pRequestHeader.TargetQueueName = ^Ens.Runtime("ConfigItem",^Ens.Runtime("DispatchName",pTargetConfigName),"QueueName")
	Set tSC = ##class(Ens.Queue).EnQueue(pRequestHeader) Quit:('tSC)
	Quit tSC
]]></Implementation>
</Method>

<Method name="ZipArchived">
<Description>
This method is used to create compressed files and place them in an archive folder. pUseDateRange defaults to 0. If a specified date range is desired change to 1 and enter StartDate and EndDate. 
The default date range is for the previous day.
pStartDate = Zip2.32: Do not operate on files modified prior to the specified date (mmddyyyy or yyyy-mm-dd)
pEndDate = Zip2.32: Do not operate on files modified after or at the specified date (mmddyyyy or yyyy-mm-dd)
Date format = mmddyyyy or yyyy-mm-dd. 
pArchiveDir = file path of the archive directory.
pFileName = file name of compressed records. Default is ZippedFile, pStartDate will be appended to filename
pFileType = type of files to be processed Ex: *.txt, *.csv. Default is all files (*). 
pZiplist = file path of directory to be compressed. </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pUseDateRange:%Boolean=0,pStartDate:%String="",pEndDate:%String="",pArchiveDir:%String="",pFileName:%String="",pFileType:%String="",pZipList:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//This method will compress archive files and save as a .zip file
	//For file paths with spaces you must enclose each path in quotation marks and enclose the entire command in quotes as well
	#dim tSC As %Status = $$$OK
	#dim tprogram As %String = ""
	#dim tcommand As %String = ""
	#dim tziplist As %String = ""
	
	//Zip2.32 will compress all files in tziplist after this date (mmddyyyy or yyyy-mm-dd)
	if pUseDateRange = 1 {
		if ((pStartDate = "")||($L(pStartDate)< 8)) {
			Set tSC = $$$ERROR($$$GeneralError,"Error in Start Date")
			Quit tSC
		}
	
		//Zip2.32 will compress all files in tziplist prior to and including this date (mmddyyyy or yyyy-mm-dd)
		if ((pEndDate = "")||($L(pEndDate)< 8)) {
			Set tSC = $$$ERROR($$$GeneralError,"Error in End Date")
			Quit tSC
		}
		
	}

	Else {
		s pStartDate = $ZD($H-1,3)
		s pEndDate = $ZD($H,3)
	}
	
	//Zip program: Zip2.32
	set tprogram = """J:\Archive\zip\zip.exe"""
	
	if pArchiveDir = "" {
		s pArchiveDir = ##class(%File).ParentDirectoryName(##class(%File).ManagerDirectory())
	}
	
	s pArchiveDir = ##class(%File).NormalizeDirectory(pArchiveDir)
	
	if pFileName = "" {
		s pFileName = "ZippedFile"
	}
	
	//Enter archive directory for compressed files to be saved in. Include desired filename
	set tarchivedir = """"_pArchiveDir_pFileName_"_"_$ZSTRIP(pStartDate,"*P")_".zip"""
	
	//Enter the file type desired in the compression
	if pFileType = "" { 
		s pFileType = "*"
	}
	
	//Enter the directory containing files to be compressed
	if pZipList = "" {
		Set tSC = $$$ERROR($$$GeneralError,"Error in ZipList")
		Quit tSC
	}
	Else {
		s pZipList = ##class(%File).NormalizeDirectory(pZipList)
		set tziplist = """"_pZipList_pFileType_""""
	}
	
	//-m = delete files from tziplist directory. -t = Do not operate on files modified prior to the specified date. -tt = Do not operate on files modified after or at the specified date. 
	//-j = strip path from archived files. -r = recurse include subdirectories. -i = include only specified files
	set tcommand = "cmd /C """_tprogram_" -m -t "_pStartDate_" -tt "_pEndDate_" -j "_tarchivedir_" "_tziplist_""""
	
	s tSC = $ZF(-1, tcommand)
	if (tSC=0) {
		Set tSC = $$$OK
		Quit tSC
	}
	Elseif (tSC=2) {	
		Set tSC = $$$ERROR($$$GeneralError,"Unexpected end of zip file")
		Quit tSC
	}
	Elseif (tSC=3) {	
		Set tSC = $$$ERROR($$$GeneralError,"A generic error in the zipfile format was detected. Processing may have completed successfully anyway")
		Quit tSC
	}
	Elseif (tSC=4) {	
		Set tSC = $$$ERROR($$$GeneralError,"Zip was unable to allocate memory for one or more buffers during program initialization.")
		Quit tSC
	}
	Elseif (tSC=5) {	
		Set tSC = $$$ERROR($$$GeneralError,"A severe error in the zipfile format was detected. Processing probably failed immediately.")
		Quit tSC
	}
	Elseif (tSC=10) {	
		Set tSC = $$$ERROR($$$GeneralError,"Zip encountered an error while using a temp file")
		Quit tSC
	}
	Elseif (tSC=11) {	
		Set tSC = $$$ERROR($$$GeneralError,"Read or seek error")
		Quit tSC
	}
	Elseif (tSC=12) {	
		do ##class(Ens.Util.Log).LogInfo("IIBAENSEMBLE.Utilities", "ZipArchived", "Zip has nothing to do")
		Set tSC = $$$OK
		Quit tSC
	}
	Elseif (tSC=13) {	
		Set tSC = $$$ERROR($$$GeneralError,"Missing or empty zip file")
		Quit tSC
	}
	Elseif (tSC=14) {	
		Set tSC = $$$ERROR($$$GeneralError,"Error writing to a file")
		Quit tSC
	}
	Elseif (tSC=15) {	
		Set tSC = $$$ERROR($$$GeneralError,"Zip was unable to create a file to write to")
		Quit tSC
	}
	Elseif (tSC=16) {	
		Set tSC = $$$ERROR($$$GeneralError,"Bad command line parameters")
		Quit tSC
	}
	Elseif (tSC=18) {	
		Set tSC = $$$ERROR($$$GeneralError,"Zip could not open a specified file to read")
		Quit tSC
	}
	
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.WorkflowFunctions">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>Ens.Rule.FunctionSet</Super>
<TimeChanged>61433,31524.394017</TimeChanged>
<TimeCreated>60774,22862.013923</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// Perform an action an a workflow task, or on all workflow tasks for a role.

]]></Content>
</UDLText>

<Method name="TaskActionExpr">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>RoleName:%String="",Action:%String="",TaskId:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[..TaskActionFunct(.RoleName,.Action,.TaskId)
]]></Implementation>
</Method>

<Method name="TaskActionFunct">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>RoleName:%String="",Action:%String="",TaskId:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	if ( Action = ""  ) {
		Q "Not Action Provided"
	}
	
	if (TaskId="") {
	
		s rs=##CLASS(%ResultSet).%New("EnsLib.Workflow.Engine:Worklist")
		d rs.Execute()
	
		while (rs.Next(.sc) ) {
			If ($SYSTEM.Status.IsOK(sc) && (rs.Data("RoleName")=RoleName) ) {
				s TaskId= rs.Get("TaskId")
				d ..SubmitTaskAction(TaskId,Action)
			}
		}
	} else {
		
		d ..SubmitTaskAction(TaskId,Action)
	}
	
	Q $$$OK
]]></Implementation>
</Method>

<Method name="SubmitTaskAction">
<Description>
[Previously private]</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>TaskId:%String,Action:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s TaskRec=##class(EnsLib.Workflow.TaskResponse).%OpenId(TaskId)
	If ( TaskRec && 'TaskRec.%TaskStatus.IsComplete ) {
		s TaskRec.%Action=Action
		s tsc=##class(EnsLib.Workflow.Engine).CompleteTask(TaskRec,Action)
	}
]]></Implementation>
</Method>

<Method name="TaskActionByFromValueExpr">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<FormalSpec>RoleName:%String="",Action:%String="",FormField:%String="",FormValue:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[..TaskActionByFromValueFunct(.RoleName,.Action,.FormField,.FormValue)
]]></Implementation>
</Method>

<Method name="TaskActionByFromValueFunct">
<Final>1</Final>
<ClassMethod>1</ClassMethod>
<FormalSpec>RoleName:%String="",Action:%String="",FormField:%String="",FormValue:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If ( ( RoleName="" ) || (FormField="") ) {
		Q "Missing Data"
	}
	
	s rs=##CLASS(%ResultSet).%New("EnsLib.Workflow.Engine:Worklist")
	d rs.Execute()
	
	while (rs.Next(.sc) ) {
		If ($SYSTEM.Status.IsOK(sc) && (rs.Data("RoleName")=RoleName) ) {
			s TaskId= rs.Get("TaskId")
			s TaskRec=##class(EnsLib.Workflow.TaskResponse).%OpenId(TaskId)
			Set Value=TaskRec.%FormValues.GetAt(FormField)
			If ( FormValue = Value ) {
				d ..SubmitTaskAction(TaskId,Action)
			}
			
		}
		
	}

	
	Q $$$OK
]]></Implementation>
</Method>

<Method name="WFCreateOutputFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>filename:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set parentDir = "wfhtml"
	s EnsSysDir = ##class(%File).ParentDirectoryName(##class(%File).ManagerDirectory())
	if '##class(%File).DirectoryExists(EnsSysDir_parentDir) { 
		d ##class(%File).CreateDirectory(EnsSysDir_parentDir) 
	}
	set fullfilename = EnsSysDir_parentDir_"\"_filename
	Quit fullfilename
]]></Implementation>
</Method>

<Method name="WFReadOutputFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>fullfilename:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set html = ""
	set file = ##class(%File).%New()
	set file.Name = fullfilename
	set tSC = file.Open("R", 5)
	if tSC {
		while 'file.AtEnd {
			set html = html_file.ReadLine()
		}
	}
	
	d file.Close()
	set file = ""
	d ##class(%File).Delete(fullfilename)	
	
	Quit html
]]></Implementation>
</Method>

<Method name="WFDrawHTMLForm">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTask:EnsLib.Workflow.TaskResponse</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	set filename = pTask.%Id()_".txt"
	set fullfilename = ##class(IIBAENSEMBLE.WorkflowFunctions).WFCreateOutputFile(filename)
	
	OPEN fullfilename:("NRW"):5
	USE fullfilename
	
	set tSC = ##class(EnsLib.Workflow.FormEngine).DrawHTMLForm(pTask)
	
	CLOSE fullfilename
	
	set html = ##class(IIBAENSEMBLE.WorkflowFunctions).WFReadOutputFile(fullfilename)
	
	set html = $REPLACE(html,"<table","<table id=""fieldvalues""")
	
	Quit html
]]></Implementation>
</Method>

<Method name="WFDrawActionButtons">
<ClassMethod>1</ClassMethod>
<FormalSpec>worklist:EnsLib.Workflow.Worklist</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// loop over items defined for this task
	Set tActions = worklist.Task.%Actions
	set html=""
	set html=html_"<input type='button' onclick='TakeAction(this.id)' value='Relinquish' ID='$Relinquish'/>"
	set html=html_"<input type='button' onclick='TakeAction(this.id)' value='Save' ID='$Save'/>"
	
	For i = 1:1:$L(tActions,",") {
		Set tAction = $P(tActions,",",i)
		set html=html_"<input type='button' onclick='TakeAction(this.id)' value='"_tAction_"' ID='"_tAction_"'/>"
	}
	Quit html
]]></Implementation>
</Method>

<Method name="WFSaveFields">
<ClassMethod>1</ClassMethod>
<FormalSpec>worklist:EnsLib.Workflow.Worklist,Fields:%ArrayOfDataTypes</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set tSC = 1
	
	set ArrayKey = ""
	set ArrayValue = ""
	for  { Set ArrayValue=Fields.GetNext(.ArrayKey) Q:ArrayKey=""
		if $A(ArrayValue) = 0 set ArrayValue = ""
		set tSC = worklist.Task.%FormValues.SetAt(ArrayValue, ArrayKey)
		If $$$ISERR(tSC) Quit
	}
	
	set tSC = worklist.Task.%Save()
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="WFCreateArray">
<ClassMethod>1</ClassMethod>
<ReturnType>%ArrayOfDataTypes</ReturnType>
<Implementation><![CDATA[
	
	Quit ##class(%ArrayOfDataTypes).%New()
]]></Implementation>
</Method>

<Method name="WFGetTemplate">
<ClassMethod>1</ClassMethod>
<FormalSpec>worklist:EnsLib.Workflow.Worklist,method:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $ZOBJCLASSMETHOD(worklist.Task.%FormTemplate,method,worklist)
]]></Implementation>
</Method>

<Method name="WFCallServerStatus">
<Description><![CDATA[
This method is intended to be called from the web client in a .Net application.<br>
In order to call a cache method from a client in a .Net app, the following items are required:<br>
A json string must be built on the client in the format:<br>
{"#ServerCall":{"class":"cache_class_name","method":"cache_method_name"},"Args":{}}<br>
if the string "#ServerCall" is detected in the string that is passed from the .Net client to the .Net server<br>
the .Net server calls the cache WFCallServerStatus method and passes the whole json string as the only argument.<br>
Once this method receives the json string, it decodes it to an ArrayOfDataTypes.<br>
The #ServerCall node is used to populate the class and method arguments of the $ZOBJCLASSMETHOD function<br>
The Args ArrayOfDataTypes object is also passed, via the $ZOBJCLASSMETHOD, to the method that is being called.<br>
Therefore the method that is being called must be a Class method and must accept 1 argument of type ArrayOfDataTypes<br>
This method expects a %Status in return and will pass that %Status back to the .Net server<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>json:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set arr = ##class(IIBAENSEMBLE.cls.JSON).JsonDecode(json)
	Quit $ZOBJCLASSMETHOD(arr.GetAt("#ServerCall").GetAt("class"),arr.GetAt("#ServerCall").GetAt("method"),arr.GetAt("Args"))
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Zen.AlertAdminTable">
<Description>
Created using the page template: Default</Description>
<Super>IIBAENSEMBLE.Zen.ToolkitTemplate</Super>
<TimeChanged>63650,47816.661797</TimeChanged>
<TimeCreated>63649,41669.803485</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>IIBAENSEMBLE.Zen.Toolkit</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>TableView</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<Property name="MyUser">
<Type>%ZEN.Datatype.string</Type>
<InitialExpression>$username</InitialExpression>
</Property>

<Property name="MyServerName">
<Type>%ZEN.Datatype.string</Type>
<InitialExpression>$zu(110)</InitialExpression>
</Property>

<Property name="MyNamespace">
<Type>%ZEN.Datatype.string</Type>
<InitialExpression>($ZNSPACE)</InitialExpression>
</Property>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

table.tpTable {
    background: none repeat scroll 0 0 #FFFFFF;
    border: 1px solid #000000;
    empty-cells: show;
    font-family: Verdana;
	font-size: .6em;
    table-layout: fixed;
    width: 100%;
}
.tpEven {
    color: #0C202A;
    background: #A6DBF9;
}
.tpOdd {
    color: #0C202A;
}
</style>
]]></Data>
</XData>

<XData name="tablePane">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane>
<tableNavigatorBar tablePaneId="alertTable" showPageSize="true" width="70%" />
<tablePane
    width="1500px"
    id="alertTable" 
    sql="select * from IIBAENSEMBLE_Monitor.ItemParameters param 
join IIBAENSEMBLE_Monitor.tblSchedules sch on param.ID=sch.ParameterID"
    maxRows="1000" 
    pageSize="25" 
    autoExecute="true"
    showZebra="true" 
    showRowSelector="false"
    useSnapshot="true"
    extraColumnWidth="5%"
    dataSource="columns">    
   <column width="3%" header=" " colName="ParameterID" OnDrawCell="DrawEditCell" link="javascript:zenPage.showEditPage('#(%query.ID)#');"/>
   <column width="3%" linkCaption="Delete" header=" " colName="ParameterID" OnDrawCell="DrawDeleteCell" link="javascript:zenPage.deleteAlert('#(%query.ID)#');"/>
   <column header="Item Name" width="20%" colName="ItemName" filterType="text"/>
   <column header="Parameter" width="9%" colName="Parameter" filterType="enum" filterOp="=" filterEnum="AdapterState,RunningStatus,Queue,CountChange,LastAction,Count,Status" />
   <column header="Threshold Value" width="8%" colName="ThresholdDuration"/>
   <column header="Grace Period" width="6%" colName="Threshold"/>
   <column header="Alert Interval" width="6%" colName="AlertDuration"/>
   <column header="Hour Start" width="5%" colName="HourStart"/>
   <column header="Hour End" width="5%" colName="HourEnd"/>
   <column header="Active" width="5%" colName="Active"/>
   <column header="M" width="3%" colName="M"/>
   <column header="T" width="3%" colName="T"/>
   <column header="W" width="3%" colName="W"/>
   <column header="Th" width="3%" colName="Th"/>
   <column header="F" width="3%" colName="F"/>
   <column header="Sa" width="3%" colName="Sa"/>
   <column header="Su" width="3%" colName="Su"/>
   <column header="Holiday" width="6%" colName="Holidays"/>
   <column header="Hol Only" width="4%" colName="HolidayOnly"/>
   <column header="Notification" width="20%" colName="NotificationEmail"/>
 </tablePane>
</pane>
]]></Data>
</XData>

<Method name="DrawEditCell">
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #; Draw HTML to render table cell.
    s tLink = "IIBASupport.csp?PageName=AlertEdit&Mode=Edit&paramID="
    &html<
    	<a href='#(tLink)##(%query(pName))#'><img src='customimages/edit.gif'/></a>
    >
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawDeleteCell">
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
            #; Draw HTML to render table cell.
            &html<
            	<a href='javascript:zenPage.deleteAlert(#(%query(pName))#);'><img src='customimages/trash_bold.gif'/>
            >   
            Quit $$$OK
]]></Implementation>
</Method>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	//Req#5 - PHegel Tab Security Use for page name
	if ##class(%SYSTEM.Security).Check("AlertAdmin","USE"){ 
		set Allowed = 1 
	}
	Quit Allowed
]]></Implementation>
</Method>

<Method name="deleteAlert">
<ClassMethod>1</ClassMethod>
<FormalSpec>pName:%String</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	&javascript<
		var c=confirm('Are you sure you want to delete this alert?');
		if (c ) {
			var remove = #(..Remove(pName))#;
			location.reload(true);
		}
	>
	
	 /*
  	set rs=##class(%ResultSet).%New()
 	Do rs.Prepare("DELETE from IIBAENSEMBLE_Monitor.ItemParameters where ID = "pName"")
 	Do rs.Execute()
 	
 	set rs=##class(%ResultSet).%New()
 	Do rs.Prepare("DELETE from IIBAENSEMBLE_Monitor.tblSchedules where ParameterID = "pName"")
 	Do rs.Execute()
 	*/
]]></Implementation>
</Method>

<Method name="Remove">
<ClassMethod>1</ClassMethod>
<FormalSpec>paramID:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 	set rs=##class(%ResultSet).%New()
 	Do rs.Prepare("DELETE from IIBAENSEMBLE_Monitor.ItemParameters where ID = "_paramID_"")
 	Do rs.Execute()
 	
 	set rs=##class(%ResultSet).%New()
 	Do rs.Prepare("DELETE from IIBAENSEMBLE_Monitor.tblSchedules where ParameterID = "_paramID_"")
 	Do rs.Execute()
 	Q 1
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Zen.Category">
<Description>
Created using the page template: Default</Description>
<Super>IIBAENSEMBLE.Zen.ToolkitTemplate</Super>
<TimeChanged>63755,53593.974523</TimeChanged>
<TimeCreated>63755,50923.997846</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>IIBAENSEMBLE.Zen.Toolkit</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Business Item Categories</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

table.tpTable {
    background: none repeat scroll 0 0 #FFFFFF;
    border: 1px solid #000000;
    empty-cells: show;
    font-family: Verdana;
	font-size: .6em;
    table-layout: fixed;
    width: 100%;
}
.tpEven {
    color: #0C202A;
    background: #A6DBF9;
}
.tpOdd {
    color: #0C202A;
}
</style>
]]></Data>
</XData>

<XData name="tablePane">
<Description>
This XML block defines the contents of this pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane>
<tableNavigatorBar tablePaneId="categoryTable" showPageSize="true" width="70%" />
<tablePane showQuery="false" id="categoryTable" OnCreateResultSet="CreateTableRS"  
useSnapshot="true"  
pageSize="25" 
maxRows="500"
filtersDisabled="false"
width="90%"
nowrap="false"
showZebra="true" >

</tablePane>
</pane>
]]></Data>
</XData>

<XData name="detailPane">
<Description>
This XML block defines the contents of this pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen">
<html></html>
</pane>
]]></Data>
</XData>

<Method name="CreateTableRS">
<ClassMethod>1</ClassMethod>
<FormalSpec>*tSC:%Status,pInfo:%ZEN.Auxiliary.QueryInfo</FormalSpec>
<ReturnType>%ResultSet</ReturnType>
<Implementation><![CDATA[
	s tSC = $$$OK
	s sql = "select Name,Category from ens_config.item"
	
	Set tRS = ##class(%ResultSet).%New()
    Set tSC = tRS.Prepare(sql)
    Set pInfo.queryText = sql
    
	Q tRS
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Zen.ExceptionsCleanup">
<Description>
Created using the page template: Title Page</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>63840,53007.382823</TimeChanged>
<TimeCreated>62418,32246.678305</TimeCreated>
<DependsOn>IIBAENSEMBLE.Zen.ToolkitHeader</DependsOn>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>IIBAENSEMBLE.Zen.Toolkit</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Exceptions Statistics</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENToolKIT</Default>
</Parameter>

<Property name="ItemType">
<Type>%String</Type>
</Property>

<Property name="ItemNameFilter">
<Type>%String</Type>
</Property>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
/* style for title bar */
#title {
	background: #C5D6D6;
	color: black;
	font-family: Verdana;
	font-size: 1.5em;
	font-weight: bold;
	padding: 5px;
	border-bottom: 1px solid black;
	text-align: center;
}
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns:ZENToolKIT="http://www.intersystems.com/toolkitheader" title="Conversion Monitor" width="auto" id="maintitle" onshow="zenPage.HTMLUpdate()">

<ZENToolKIT:ToolkitHeader id="title" title="Conversion Monitor"/>
<html id="html1">Show unprocessed exception cleanup orders left to send per client.</html>
<hgroup id="hgroup">
<spacer width="20px"/>
<html id="html" OnDrawContent="DrawHTML"></html>
<spacer width="10px"/>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="DrawHTML">
<ClassMethod>1</ClassMethod>
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	set RS = ##class(%ResultSet).%New()
	set sql = "select Distinct SourceIdentifier From IIBAENSEMBLE_HistoricUpload.Queue  "
	set tSC = RS.Prepare(sql)
	set tSC = RS.Execute()
	set tValid = ""
	&sql(select Top 1 %ID into :tValid From IIBAENSEMBLE_HistoricUpload.Queue)
				
	if tValid = ""
		{
			&html<<p>>
			&html<<table>>
			&html<<tr><td>Client:</td><td><span style="color: blue;">None</span></td></tr>>
			&html<</table>>
				
		}
		else
		{
			while RS.Next()
			{
				s tCount = 0
				&sql(select Count("SourceIdentifier") into :tCount from IIBAENSEMBLE_HistoricUpload.Queue Where SourceIdentifier = :RS.Get("SourceIdentifier") and Processed = 0)
				
				if tCount '= 0
				{
					&html<<p>>
					&html<<table>>
					&html<<tr><td>Client:</td><td><span style="color: blue;">#(RS.Get("SourceIdentifier"))#</span></td></tr>>
					&html<</table>>
				}

				s tRunning = 0
				s tProcessed = ""

				&html<<table>>
				if tCount = 0 
				{
					//set btnId = RS.Get("OrgCode")
					//&html<<tr><button id="#(btnId)#" onclick="CleanUp()">#(RS.Get("OrgCode"))#</button>
					//<script language=javascript>
					//function CleanUp() {
					//	document.getElementById("#(btnId)#").innerHTML = "Hello World";}
					//</script>
					//>
					&html<<tr>>
				}
				else
				{
					&html<<tr>>
					&html<<td>Status:</td><td><span style="color: green;"> #(tCount)#</span></td></tr>>
				}
				
				&html<</table>>
				&html<</p>>
			}
		}
		Quit $$$OK
]]></Implementation>
</Method>

<Method name="HTMLUpdate">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var proxy = new zenProxy();
	var current = location.href;
	var last = current.lastIndexOf(".");
	var first = current.lastIndexOf("/");
	var path = current.substring(first,last);
	proxy.production = path;
	
	var html = zenPage.getComponentById('html');
	html.seed = proxy;
	html.refreshContents();
]]></Implementation>
</Method>

<Method name="UpdatePage">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[location.reload();
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Zen.OnCallMonitor.ErrorLogging">
<Super>%Persistent</Super>
<TimeChanged>63757,55153.396302</TimeChanged>
<TimeCreated>63757,52152.245646</TimeCreated>

<Property name="SessionId">
<Type>%Integer</Type>
</Property>

<Property name="InputDateTime">
<Type>%TimeStamp</Type>
<Required>1</Required>
</Property>

<Property name="MessageId">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="NameSpace">
<Type>%String</Type>
<Required>1</Required>
</Property>

<Property name="LogReason">
<Type>%String</Type>
</Property>

<Index name="IdKey">
<IdKey>1</IdKey>
<Properties>MessageId</Properties>
<Unique>1</Unique>
</Index>

<UDLText name="T">
<Content><![CDATA[
/// Indexing control methods.
/// set tSC =##class(IIBAENSEMBLE.Zen.OnCallMonitor.ErrorLogging).IdKeyExists(SessionId,.id) Quit:tSC'=$$$OK
/// set tMsg=##class(IIBAENSEMBLE.Zen.OnCallMonitor.ErrorLogging).IdKeyOpen(id,1)
/// set tSC=##class(IIBAENSEMBLE.Zen.OnCallMonitor.ErrorLogging).IdKeyDelete(id,1) Quit:tSC'=$$$OK

]]></Content>
</UDLText>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^IIBAENSEMBLEFCC9.ErrorLoggingD</DataLocation>
<DefaultData>ErrorLoggingDefaultData</DefaultData>
<IdLocation>^IIBAENSEMBLEFCC9.ErrorLoggingD</IdLocation>
<IndexLocation>^IIBAENSEMBLEFCC9.ErrorLoggingI</IndexLocation>
<StreamLocation>^IIBAENSEMBLEFCC9.ErrorLoggingS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="ErrorLoggingDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>InputDateTime</Value>
</Value>
<Value name="3">
<Value>MessageId</Value>
</Value>
<Value name="4">
<Value>NameSpace</Value>
</Value>
<Value name="5">
<Value>LogReason</Value>
</Value>
<Value name="6">
<Value>SessionId</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.Zen.OnCallMonitor.ErrorStack">
<Super>%ZEN.Component.page</Super>
<TimeChanged>63760,44229.600716</TimeChanged>
<TimeCreated>61048,56927.475224</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>IIBAENSEMBLE.Zen.Toolkit</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>OnCallError</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENToolKIT</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
 
#ErrorPage {
	background: lightblue;
	
}
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="" id="ErrorPage">
 <html id="title">OnCall Error</html>
<html id="testHTML" OnDrawContent="UploadHTML" containerStyle="background: lightblue;" height="auto"> </html>
</page>
]]></Data>
</XData>

<Method name="UploadHTML">
<ClassMethod>1</ClassMethod>
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	s qNS = $ZNSpace
	s xNS = %request.Get("NS")
	s tID = %request.Get("ID")
	
	s tStack = ""
	s tText = ""
	s tMsgId = ""
	s tSId = ""
	zn xNS
	&sql(select Stack, Text, MessageId, SessionId into :tStack,:tText,:tMsgId,:tSId from Ens_Util.Log Where %ID = :tID)
	&html<<table>>
	&html<<tr><td>MessageId:</td><td><span style="color: black;">#($ZCVT(tMsgId,"O","HTML"))#</span></td></tr>>
	&html<<tr><td>SessionId:</td><td><span style="color: black;">#($ZCVT(tSId,"O","HTML"))#</span></td></tr>>
	&html<<tr><td>Error:</td><td><span style="color: red;">#($ZCVT(tText,"O","HTML"))#</span></td></tr>>
	&html<<tr><td>Stack:</td><td><span style="color: black;">#($ZCVT(tStack,"O","HTML"))#</span></td></tr>>
	//EnsPortal.VisualTrace.zen?$ZEN_POPUP=1&SESSIONID="_curSessionId
	s tSessionId = ""
	&sql(select SessionId into :tSessionId From Ens_Util.Log Where %ID = :tID)
	if tSessionId '=""{
		&html<<tr><a href = "http://enstest:57772/csp/#(xNS)#/EnsPortal.VisualTrace.zen?$ZEN_POPUP=1&SESSIONID=#(tSessionId)#">Trace</a></tr>>
	}
	&html<</table>>
	
	
	zn qNS
 	q $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Zen.OnCallMonitor.Home">
<Description>
Created using the page template: Title Page</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>63840,52969.120534</TimeChanged>
<TimeCreated>62418,32246.678305</TimeCreated>
<DependsOn>IIBAENSEMBLE.Zen.ToolkitHeader</DependsOn>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>IIBAENSEMBLE.Zen.Toolkit</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>OnCallMonitor</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENToolKIT</Default>
</Parameter>

<Property name="showMessages">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="show24hours">
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="showToday">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="startDTTM">
<Type>%String</Type>
<InitialExpression>$ZDATE($HOROLOG,3,1)_" 00:00:00.000"</InitialExpression>
</Property>

<Property name="endDTTM">
<Type>%String</Type>
<InitialExpression>$ZDATETIME($HOROLOG,3,1)_".999"</InitialExpression>
</Property>

<Property name="DTTM24hours">
<Type>%String</Type>
<InitialExpression>$ZDATETIME($HOROLOG-1_","_$P($HOROLOG,",",2),3,1)</InitialExpression>
</Property>

<Property name="todayDTTM">
<Type>%String</Type>
<InitialExpression>$ZDATE($HOROLOG,3,1)_" 00:00:00.000"</InitialExpression>
</Property>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
/* style for table */
#OnCallMonitorTable {
	background: #004C8F;
	color: black;
	font-family: Verdana;
	font-size: .9em;
	padding: 8px;
	border-bottom: 1px solid black;
	text-align: center;
}
#OnCallMonitorNav {
	background: #004C8F;
	border-top: 8px solid #004C8F;
	border-left: 8px solid #004C8F;
	border-right: 8px solid #004C8F;
	text-align: center;
}

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns:ZENToolKIT="http://www.intersystems.com/toolkitheader" title="IIBA Support On-Call" id="maintitle">

<ZENToolKIT:ToolkitHeader id="title" title="On-Call Monitor"/>

<fieldSet id="OnCallFormGroup" hidden="false" width="100%" >

    <expando caption="Monitor" framed="true" animate="true" expanded="false" onexpand="zenPage.SetFilters();">
    <spacer height="5px"/>
    <hgroup id="hgrp1">
    <spacer width="5px"/>
    <csMenuBar id="mainMenu" width="5.7%">
  <csMenuBarItem caption="Options" contextKey="O" id="menu">
    <contextMenu id="fileMenu" >
      <csMenuItem id="CheckMsg" caption="Has Message" key="Ctrl-A"
                  contextKey="a" onclick="zenPage.UpdateQuery('msg');" toggleMode="true"/>
      <csMenuItem id="24hrs" caption="Last 24 hours"
                  key="Ctrl-Z" contextKey="z"
                  onclick="zenPage.UpdateQuery('hrs');" toggleMode="true" toggleState="0"/>
      <csMenuItem id="today" caption="Today"
                  key="Ctrl-E" contextKey="t"
                  onclick="zenPage.UpdateQuery('today');" toggleMode="true" toggleState="1"/>
      <csMenuItem id="LogErrors" caption="Hide"
                  key="Ctrl-L" contextKey="h"
                  onclick="zenPage.LogErrors();"/>
      <csMenuItem id="ClearErrors" caption="UnHide"
                  key="Ctrl-Y" contextKey="y"
                  onclick="zenPage.ClearErrors();"/>
      	
     </contextMenu>
  </csMenuBarItem>
  </csMenuBar>
  <hgroup id="hgrp2" align="center">
    <spacer width="670px"/>
    <dateText id="startdttm" title="Start Date/Time" timeCaption="Time: " size="18px" value='' showTime="true" onchange="zenPage.UpdateQuery('TFM');"/>
    <spacer width="2px"/>
	<html id="htmltext1">TO:</html> 
  	<spacer width="2px"/>
  	<dateText id="enddttm" title="End Date/Time" timeCaption="Time: " size="18px" value='' showTime="true" onchange="zenPage.UpdateQuery('TFM');" />
  </hgroup>
  </hgroup>
	<spacer height="5px"/>
	<tableNavigator id="OnCallMonitorNav" tablePaneId="OnCallMonitorTable" />
 	
 	<hgroup valign="top">
 	
    <tablePane 
   id="OnCallMonitorTable" 
   	useSnapshot="true"
	showZebra="true"
	valueColumn="details"
	pageSize="20"
	maxRows="10000"
	showQuery="false"
	nowrap="true" 
	enableToggleSelect="true"
	queryClass="IIBAENSEMBLE.Zen.OnCallMonitor.Home" 
	queryName="ErrorQuery"
	initialExecute="false"
	showFilters="false"
	ondblclick=""
	multiSelect="true"
	rowSelect="true"
	showRowNumbers="true"
	showRowSelector="false"


		
	>
<column header="ID" colName="ID" width="1px" filterType="text" filterOp="=" hidden="true" />
<column id="NameSpace" header="NameSpace" colName="Namespace" width="100px" filterType="enum" filterEnum="" filterOp="=" hidden="false" />
<column id="BusinessItem" header="Business Item" colName="ConfigName" width="435px" filterOp="=" filterType="text" hidden="false" />
<column header="Type" width="50px" colName="Type" filterType="text" filterOp="=" style="color: red;"/>
<column header="Entry Date" width="200px" colName="TimeLogged" filterType="text" filterOp="="/>
<column header="Identifier" width="300px" colName="SourceClass" filterType="text" filterOp="="/>
<column header="Error Message" width="485px" colName="Text" filterType="text" onclick="//alert('#(%query.ID)#');" filterOp="="/>
<column header="SessionId" width="75px" colName="SessionId" hidden="true"/>
<column colName="MessageId" hidden="true"/>
<column header="" width="55px" linkCaption="Details" link="javascript:zenPage.launchErrors('#(%query.ID)#','#(%query.Namespace)#');" style="color: green;"/>
<column id="MsgResend" header="" width="55px" linkCaption="Resend" link="javascript:zenPage.ResendErrors('#(%query.SessionId)#','#(%query.Namespace)#','#(%query.MessageId)#');" style="color: blue;" hidden="true"/>
<column id="MsgLog" hidden="true" header="" width="25px" linkCaption="Log" link="javascript:zenPage.LogErrors('#(%query.MessageId)#','#(%query.Namespace)#','#(%query.SessionId)#');" style="color: blue;"/>    
<column colName="details" hidden="true"/>
<column id="ItemStatus" header=" " colName="Status" OnDrawCell="DrawItemStatus" width="20px"/>

    </tablePane>
    </hgroup>
    
	<iframe id="MsgiFrame" src="" width="100%" height="0px" frameAlign="center" dragEnabled="true" scrolling="yes" hidden="false" />
	 
	</expando>
	</fieldSet>
</page>
]]></Data>
</XData>

<Method name="DrawItemStatus">
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//find item status to set light indicator
	set tStatus = $P(%query(pName),"~",1)
	set tNameSpace = $P(%query(pName),"~",2)
	if tStatus="OK" {
    	&html<
    		<a href='/csp/#(tNameSpace)#/EnsPortal.ProductionConfig.zen?$NAMESPACE=#(tNameSpace)#' target='_blank'><img src='customimages/aGreenLight.jpg'/></a>
    	>
	}elseif tStatus="Error" {
		&html<
    		<a href='/csp/#(tNameSpace)#/EnsPortal.ProductionConfig.zen?$NAMESPACE=#(tNameSpace)#' target='_blank'><img src='customimages/RedLight.jpg'/></a>
    	>
	}else{
		&html<
    		<a href='/csp/#(tNameSpace)#/EnsPortal.ProductionConfig.zen?$NAMESPACE=#(tNameSpace)#' target='_blank'><img src='customimages/YellowLight.jpg'/></a>
    	>
	
	}
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ClearErrors">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
   var pAlert = confirm("Are you sure you want to clear Unhide logged errors?");
   
   if (pAlert == 1)
   {
	 zenPage.ClearErrorsLog();   
   }
   var table = zenPage.getComponentById('OnCallMonitorTable');
   table.executeQuery();
]]></Implementation>
</Method>

<Method name="LogErrors">
<FormalSpec>id,gtNS,sId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	//alert(id+"/"+gtNS+"/"+"/"+sId);
	var rows = zenPage.getComponentById('OnCallMonitorTable').getProperty('selectedRows').split(',');
	var reason = prompt("Please enter log reason for error "+id, "benign error");
	for (i = 0; i < rows.length; i++) {
		if (rows[i].split('~',1)!=""){
			
			var id = rows[i].replace(/~/gi,',').split(',')[0];
			var gtNS = rows[i].replace(/~/gi,',').split(',')[1];
			var sId = rows[i].replace(/~/gi,',').split(',')[2];
					
			switch(reason){
				case "":
					text = "log reason cannot be blank";
					break;
				case null:
					break;
				default:
					this.LogError(id,gtNS,reason,sId);
					break; 
    			
			}	
		}
	}
	
		
	var page = zenPage.getComponentById('MsgiFrame');
	page.setProperty('src',"");
	var table = zenPage.getComponentById('OnCallMonitorTable');
	table.executeQuery();
]]></Implementation>
</Method>

<Method name="ResendErrors">
<FormalSpec>id,gtNS,mId</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	this.SendMessage(id,gtNS,"RESEND",mId);
	var table = zenPage.getComponentById('OnCallMonitorTable');
	table.executeQuery();
]]></Implementation>
</Method>

<Method name="getiFrameMsg">
<FormalSpec>id,gtNS</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var page = zenPage.getComponentById('MsgiFrame');
	page.setProperty('src',"/csp/"+gtNS+"/EnsPortal.MessageContents.zen?HeaderClass=Ens.MessageHeader&HeaderId="+id);
]]></Implementation>
</Method>

<Method name="UpdateQuery">
<FormalSpec>pAction</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	
	if (pAction == 'msg'){
		
		var id = zenPage.getComponentById('CheckMsg');
		var toggleState = "";
		if (this.showMessages == id.getProperty('toggleState')){
			
			if (this.showMessages == 0){
				toggleState = 1;
				id.setProperty('toggleState',1);
				zenPage.getComponentById('MsgiFrame').setProperty('height','300px');
			}else{
				toggleState = 0;
				id.setProperty('toggleState',0);
				zenPage.getComponentById('MsgiFrame').setProperty('height','0px');
			}
			
		}else{
			
			toggleState = id.getProperty('toggleState');
			
			}
				
		this.showMessages = toggleState;
		
		if (id.getProperty('toggleState') == 1){
			var page = zenPage.getComponentById('BusinessItem');
			page.setProperty('link',"javascript:zenPage.getiFrameMsg('#(%query.SessionId)#','#(%query.Namespace)#');");
			var page = zenPage.getComponentById('MsgResend');
			page.setProperty('hidden',false);
			zenPage.getComponentById('MsgiFrame').setProperty('height','300px');
		}else{
			var page = zenPage.getComponentById('BusinessItem');
			page.setProperty('link',"");
			var page = zenPage.getComponentById('MsgResend');
			page.setProperty('hidden',true);
			var page = zenPage.getComponentById('MsgiFrame');
			page.setProperty('src',"");
			zenPage.getComponentById('MsgiFrame').setProperty('height','0px');
		}
	}
	if (pAction == 'hrs'){
		var id = zenPage.getComponentById('24hrs');
		var toggleState = "";
		if (this.show24hours == id.getProperty('toggleState')){
			
			if (this.show24hours == 0){
				toggleState = 1;
				id.setProperty('toggleState',1);
			}else{
				toggleState = 0;
				id.setProperty('toggleState',0);
			}
			
		}else{
			
			
			toggleState = id.getProperty('toggleState');
			
			}
			
		if (toggleState == 1){
			zenPage.getComponentById('today').setProperty('toggleState',0);
			zenPage.getComponentById('startdttm').setProperty('value',this.DTTM24hours);
			this.startDTTM = this.DTTM24hours;
			this.show24hours = toggleState;
			this.showToday = 0;
		}else{
			zenPage.getComponentById('today').setProperty('toggleState',1);
			zenPage.getComponentById('startdttm').setProperty('value',this.todayDTTM);
			this.show24hours = toggleState;
			this.startDTTM = this.todayDTTM;
			this.showToday = 1;
			}
				
		
		
			
	}
	if (pAction == 'TFM'){
		var startDTTM = zenPage.getComponentById('startdttm').getProperty('value');
		var endDTTM = zenPage.getComponentById('enddttm').getProperty('value');
		this.startDTTM = startDTTM;
		this.endDTTM = endDTTM;
		zenPage.getComponentById('24hrs').setProperty('toggleState',0);
		this.show24hours = 0;
		this.showToday = 0;
		zenPage.getComponentById('today').setProperty('toggleState',0);
		
		
	}
	if (pAction == 'today'){
		var id = zenPage.getComponentById('today');
		var toggleState = "";
		if (this.showToday == id.getProperty('toggleState')){
			
			if (this.showToday == 0){
				toggleState = 1;
				id.setProperty('toggleState',1);
			}else{
				toggleState = 0;
				id.setProperty('toggleState',0);
			}
			
			}else{
			
			
			toggleState = id.getProperty('toggleState');
			
			}
			
		if (toggleState == 0){
			zenPage.getComponentById('24hrs').setProperty('toggleState',1);
			zenPage.getComponentById('startdttm').setProperty('value',this.DTTM24hours);
			this.show24hours = 1;
			this.startDTTM = this.DTTM24hours;
			this.showToday = toggleState;
		}else{
			zenPage.getComponentById('24hrs').setProperty('toggleState',0);
			zenPage.getComponentById('startdttm').setProperty('value',this.todayDTTM);
			this.show24hours = 0;
			this.startDTTM = this.todayDTTM;
			this.showToday = toggleState;
			
		}
		
		
	}
	var table = zenPage.getComponentById('OnCallMonitorTable');
	table.executeQuery();
]]></Implementation>
</Method>

<Method name="launchErrors">
<FormalSpec>id,gtNS</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	//alert(id);
	zenPage.launchPopupWindow(
    'IIBAENSEMBLE.Zen.OnCallMonitor.ErrorStack.cls?ID='+id+'&NS='+gtNS+'',
    '',
    'status,scrollbars,resizable,width=500,height=450,modal=yes');
]]></Implementation>
</Method>

<Method name="SetFilters">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	
	zenPage.getComponentById('startdttm').setProperty('value',this.startDTTM);
	zenPage.getComponentById('mainMenu').setProperty('hidden',false);		
	zenPage.getComponentById('enddttm').setProperty('value',this.endDTTM);
	zenPage.getComponentById('OnCallMonitorTable').executeQuery();
]]></Implementation>
</Method>

<Query name="ErrorQuery">
<Type>%Query</Type>
<Parameter name="ROWSPEC" value="Namespace:%String,ConfigName:%String,Text:%String,ID:%String,SourceClass:%String,TimeLogged:%String,SessionId:%String,MessageId:%String,details:%String,Status:%String"/>
</Query>

<Method name="ErrorQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
                K NamespaceList
                K SystemInfo
               
                s qCurrentNamespace = $SYSTEM.SYS.NameSpace()
                s qNamespace = ""
                s datetimebegin = %page.startDTTM
                s datetimeend = %page.endDTTM
                s showMessages = " GROUP BY MessageId"
                s tStatus = ""
                s thostTemp = ""
                If (qNamespace="") {
                                d ##class(Ens.Director).GetSystemProductionSummary(.SystemInfo)
                }
                
                s Namespace=""
                s pSC = $$$OK
                
                F  {
                                s Namespace=$O(SystemInfo(Namespace))
                                Q:Namespace=""
                                Continue:$O(SystemInfo(Namespace,""))=""
                                
                                
                                	zn Namespace
                               		
                               		//get host status
									s dt2days = $ZDATETIME($HOROLOG-2_","_$P($HOROLOG,",",2),3,1)
        							&sql(DELETE IIBAENSEMBLE_Zen_OnCallMonitor.ErrorLogging where InputDateTime < :dt2days)
                            		do ..GetItemStatus(.hostTemp)
                               		
                                	set rs = ""
                                	
                                	if %page.showMessages = 1 { s showMessages = " AND SessionId IS NOT NULL GROUP BY SessionId"}
                                	if %page.show24hours = 1 { s datetimebegin = %page.DTTM24hours}
                                
                                	set tSQL = "SELECT * FROM Ens_Util.Log WHERE Type = 'Error' AND ConfigName IS NOT NULL AND TimeLogged BETWEEN '"_datetimebegin_"' AND '"_datetimeend_"'"_showMessages_""
                                	
                                	//unique on messageid
                                	set rs = ##class(%ResultSet).%New()
                                	s pSC = rs.Prepare(tSQL) q:'pSC
                                	s pSC = rs.Execute() q:'pSC
                                                                	                            	
                                	While rs.Next() {
                                               	
                                               	s tConfigName = rs.%GetData(2)
                                               	
                                               if (tConfigName '="") {
	                                               	s tStatus = $GET(hostTemp(rs.%GetData(2)))
	                                            }
	                                            
                                               	s tText = rs.%GetData(9)
                                               	s tID = rs.%GetData(1)
                                               	s tSource = rs.%GetData(6)
                                               	s tLogged = rs.%GetData(10)
                                               	s tSessionId = rs.%GetData(5)
                                               	s tMessageId = rs.%GetData(4)
                                               	s tDetails = tMessageId_"~"_Namespace_"~"_tSessionId
                                               	
                                               	if ##class(IIBAENSEMBLE.Zen.OnCallMonitor.ErrorLogging).IdKeyExists(tMessageId,.id) = 0 {
	                                            	
		                                            	
		                                            	Set iRow=$I(qHandle("row")),qHandle("row",iRow)=$LB(Namespace,tConfigName,tText,tID,tSource,tLogged,tSessionId,tMessageId,tDetails,tStatus_"~"_Namespace)
	                                               	
                                               	}
                                                	
                                	}
                                	
                                
                                	
                                
                               
                }
               
                
                s qHandle("row")=0
                
                zn qCurrentNamespace
                
                Quit $$$OK
]]></Implementation>
</Method>

<Method name="ClearErrorsLog">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	 K NamespaceList
     K SystemInfo
                
     s qCurrentNamespace = $SYSTEM.SYS.NameSpace()
     s qNamespace = ""
     If (qNamespace="") {
     	d ##class(Ens.Director).GetSystemProductionSummary(.SystemInfo)
     }
                
     s Namespace=""
     s tSC = $$$OK
                
     F  {
     	s Namespace=$O(SystemInfo(Namespace))
        Q:Namespace=""
        Continue:$O(SystemInfo(Namespace,""))=""
                                
                                
        zn Namespace
	
		s tRS = ##class(%ResultSet).%New()
		s tSQL = "SELECT %ID FROM IIBAENSEMBLE_Zen_OnCallMonitor.ErrorLogging"
		s tSC = tRS.Prepare(tSQL)
		s tSC = tRS.Execute()
	
		While tRS.Next(){
		
			s tSC = ##class(IIBAENSEMBLE.Zen.OnCallMonitor.ErrorLogging).%DeleteId(tRS.%GetData(1))
			
		}
     }
     
    zn qCurrentNamespace
     	
	Q tSC
]]></Implementation>
</Method>

<Method name="GetItemStatus">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pHostArray:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 Set hRS=##class(%ResultSet).%New("Ens.Util.Statistics:EnumerateHostStatus")
 Set r=hRS.Execute()
 while hRS.Next() {
 	Set pHostArray(hRS.%GetData(1)) = hRS.%GetData(3)
 }
 quit
]]></Implementation>
</Method>

<Method name="ErrorQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>ErrorQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
                Kill qHandle
                Quit $$$OK
]]></Implementation>
</Method>

<Method name="ErrorQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>ErrorQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
                K Row s Row=""
                If ""=$G(qHandle("row")) Set AtEnd=1 Quit $$$OK
                
                s qHandle("row")=$O(qHandle("row",qHandle("row")))
                if (qHandle("row")="") {
                                set AtEnd=1
                } else {
                                s Row=qHandle("row",qHandle("row"))
                }
                
                Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetErrorCount">
<ClassMethod>1</ClassMethod>
<FormalSpec>pAll:%Boolean=1,*pCount:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	
    
    s tCount = 0
    s x = 0
    s tLogged = 0
    s qCurrentNamespace = $SYSTEM.SYS.NameSpace()
    s qNamespace = ""
    s datetimebegin = $ZDATE($HOROLOG,3,1)_" 00:00:00.000"
    s datetimeend = $ZDATE($HOROLOG,3,1)_" 23:59:59.999"
    s dt24hr = $ZDATETIME($HOROLOG-1_","_$P($HOROLOG,",",2),3,1)
                
    If (qNamespace="") {
         d ##class(Ens.Director).GetSystemProductionSummary(.SystemInfo)
    }
                
    s Namespace=""
                
    F  {
                                	
        s Namespace=$O(SystemInfo(Namespace))
        Q:Namespace=""
        Continue:$O(SystemInfo(Namespace,""))=""
                                
        zn Namespace
        
        &sql(DELETE IIBAENSEMBLE_Zen_OnCallMonitor.ErrorLogging where InputDateTime < :dt24hr)
        
        if pAll = 1 {                       
        	&sql(SELECT COUNT(DISTINCT MessageId) into :tCount FROM Ens_Util.Log WHERE Type = 2 AND TimeLogged BETWEEN :datetimebegin AND :datetimeend)
        	&sql(SELECT COUNT(*) into :tLogged FROM IIBAENSEMBLE_Zen_OnCallMonitor.ErrorLogging WHERE InputDateTime BETWEEN :datetimebegin AND :datetimeend)
        	set tCount = tCount - tLogged
        }else{
        	&sql(SELECT COUNT(DISTINCT SessionId) into :tCount FROM Ens_Util.Log WHERE Type = 2 AND TimeLogged BETWEEN :datetimebegin AND :datetimeend AND SessionId IS NOT NULL)
        	&sql(SELECT COUNT(*) into :tLogged FROM IIBAENSEMBLE_Zen_OnCallMonitor.ErrorLogging WHERE InputDateTime BETWEEN :datetimebegin AND :datetimeend AND SessionId IS NOT NULL)
        	set tCount = tCount - tLogged
        }
        
        
        s x = tCount + x 
        
        }
    
    
    s pCount = x     
    
    
    zn qCurrentNamespace
           
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="SendMessage">
<FormalSpec>pId:%String,pNameSpace:%String,pLogReason:%String,pMessageId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	s tCurrNS = $ZNSPACE
	s tSC = $$$OK
	zn pNameSpace
	//do ##class(Ens.MessageHeader).ResendDuplicatedMessage(pId)
	s tSC = ..LogError(pMessageId,pNameSpace,pLogReason,pId)
	s tSC = ##class(Ens.MessageHeader).ResubmitMessage(pId)	
	zn tCurrNS
	//&js<alert('Not sure how this works :) '+'#(pId)#');>
	Quit tSC
]]></Implementation>
</Method>

<Method name="LogError">
<ClassMethod>1</ClassMethod>
<FormalSpec>pId:%String,pNameSpace:%String,pLogReason:%String,pSessionId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	s tCurrNS = $ZNSPACE
	s tSC = $$$OK
	zn pNameSpace
	s tLogError = ##class(IIBAENSEMBLE.Zen.OnCallMonitor.ErrorLogging).%New()
	s tLogError.InputDateTime = $ZDATETIME($HOROLOG,3,1)
	s tLogError.LogReason = pLogReason
	s tLogError.SessionId = pSessionId
	s tLogError.NameSpace = pNameSpace
	s tLogError.MessageId = pId
	s tSC = tLogError.%Save()
	zn tCurrNS
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Zen.ReferencePage">
<ProcedureBlock>1</ProcedureBlock>
<Super>%ZEN.Component.page</Super>
<TimeChanged>63840,53023.466151</TimeChanged>
<TimeCreated>63365,42982.860226</TimeCreated>
<DependsOn>IIBAENSEMBLE.Zen.ToolkitHeader</DependsOn>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Reference</Default>
</Parameter>

<Parameter name="DOMAIN">
<Default>ZENToolKIT</Default>
</Parameter>

<Property name="Table">
<Type>%String</Type>
</Property>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">


	

#bbArea {
  background:	lightgray;
  background-image: url(images/grad-halfblue-10x30.png);
  background-repeat:repeat-x;
}


#DataGrid
 {
 	width: auto;
    height: 660px;
    
      
 }



</style>
]]></Data>
</XData>

<XData name="Contents">
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns:ZENToolKIT="http://www.intersystems.com/toolkitheader" title="IIBA Support Reference" id="maintitle">

<ZENToolKIT:ToolkitHeader id="title" title="Reference Table"/>

<hgroup id="bbArea" align="center">
<form id="ImportForm" hidden="true" align="left">
<html id="fileUpload" OnDrawContent="UploadHTML" hidden="false"/>
</form>
  <buttonBar id="editStuff" >
    <buttonBarItem icon="CustomImages/plus_bold.gif" caption="Add Related"
                   onclick="zenPage.UpdatePage('AddRelated')"  />
               
    <buttonBarItem icon="CustomImages/trash_bold.gif" caption="Delete Related"
                   onclick="zenPage.UpdatePage('DeleteRelated')"  />
                   
    <buttonBarItem icon="ext/examples/shared/icons/arrow-down.gif" caption="Export"
                   onclick="zenPage.UpdatePage('Export')" />
                 
    <buttonBarItem icon="ext/examples/shared/icons/arrow-up.gif" caption="Import"
                   onclick="zenPage.UpdatePage('Import')"  />
                   
   <buttonBarItem icon="CustomImages/Cancel.gif" caption="Exit"
                   onclick="zenPage.UpdatePage('Close')"  />
  </buttonBar>
</hgroup>

<vgroup id="mainv" hidden="false" width="auto" height="auto">
<dataGrid id="DataGrid" 
controllerId="json"
readOnly="false"
selectMode="cells"
currRow=""
currColumn=""
style="text-align: left;"
onchange="zenPage.UpdatePage('Save',zenThis)"
pageSize="30"
multiSelect="true"
currPage="1"
onnotifyView=""
filterKey=""
valueColumn="1"

>

</dataGrid>
<jsonProvider id="json" OnGetArray="GetGridData">
</jsonProvider>
</vgroup>

<hgroup id="utils" hidden="false">
<spacer width="1px"/>
<text id="getPageSiz" value="30" />
<button id="pagerBtn" caption="Ok" onclick="zenPage.UpdatePage('ChgPageSiz',zenThis)"/>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="Alert">
<FormalSpec>message:%String</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	alert(message);
]]></Implementation>
</Method>

<Method name="UpdatePage">
<FormalSpec>pAction:%String,grid</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	 if (pAction == "Refresh"){
	 		location.reload();
	 		
	 	}else if (pAction == "Close"){
		  	window.close();
		 	
		}else if (pAction == "Save"){
		
			alert(pAction);
		
		 	
	 	}else if (pAction == "AddRelated"){
		 	var cell = zenPage.getComponentById('DataGrid');
    		var Column = prompt("Related Value Name:", "Enter Related Name");
    		if (Column == null || Column ==""){
	    		return true;
    		}else if (/[^a-zA-Z0-9]/.test( Column )){
	    			alert("Input is not alphanumeric");
	    			return false;
	    		}else{
       				zenPage.cell = this.AddRelated(Column);
					return true;
    				}
	
	 	}else if (pAction == "DeleteRelated"){
	 		var cell = zenPage.getComponentById('DataGrid');
    		var Column = prompt("Related Value Name:", "Enter Related Name");
    		if (Column == null || Column ==""){
	    		return true;   				
    		}else if (/[^a-zA-Z0-9]/.test( Column )){
	    			alert("Input is not alphanumeric");
	    			return false;
	    		}else{
		    		zenPage.cell = this.DeleteRelated(Column);
					return true;
    				}
    		
	 	}else if (pAction == "Export"){
		 	var value = location.href;
			var cell = zenPage.getComponentById('DataGrid');
			zenPage.cell = this.xRefExport(value);
			
	 	}else if (pAction == "Import"){
		  	if (window.File && window.FileReader && window.FileList && window.Blob) {
					var form = this.getComponentById('ImportForm');
  					form.setProperty('hidden',false);
  				} else {
  					alert('The File APIs are not fully supported by your browser.');
				}
					
	 	}else{
		 	alert("Function Does Not Exist!");
		 	window.close();
	 }
]]></Implementation>
</Method>

<Method name="UploadHTML">
<ClassMethod>1</ClassMethod>
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	//built in csp, not sure if/where zen stores mime data for the file reader. 
	&html<
	<input type="file" id="fileinput" accept="application/csv" />
	<script type="text/javascript">
 	 function readSingleFile(evt) {
    //Retrieve the first (and only!) File from the FileList object
    	var f = evt.target.files[0]; 

    	if (f) {
     	 var r = new FileReader();
     	 r.onload = function(e) {
	     	var contents = e.target.result;
	      	#server(..ImportData(contents,f.name,f.size))#;
             
      }
      //AsText CSP will automatically place in a stream if needed. 
      //BinaryString does not seem to work.
      r.readAsText(f);
   
    } else { 
      alert("Failed to load file");
    }
  }

    document.getElementById('fileinput').addEventListener('change', readSingleFile, false);
	</script>>
 	q $$$OK
]]></Implementation>
</Method>

<Method name="Save">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	//Declare variables
	#dim tSC = $$$OK 
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="AddRelated">
<ClassMethod>1</ClassMethod>
<FormalSpec>RValue:%String</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[	&js<alert('#(RValue)#');>
]]></Implementation>
</Method>

<Method name="DeleteRelated">
<ClassMethod>1</ClassMethod>
<FormalSpec>RValue:%String</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[	&js<alert('#(RValue)#');>
]]></Implementation>
</Method>

<Method name="ImportData">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFileName:%CSP.CharacterStream,pFileType:%String,pFileSize:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	quit $$$OK
	//Write to audit log.
	do ..AuditChanges("ImportData","User Import: "_pFileType,$Get(%session.Data("tTable")),pFileSize)
	
	#dim tSC As %Status = $$$OK
	s tValidOBJ = $CLASSNAME(pFileName)

	if $P(pFileType,".",2) = "csv"{
	
		s tStream = ##class(%GlobalCharacterStream).%New()
		
		if tValidOBJ = "%CSP.CharacterStream"{
			//For larger files use CopyFrom
			//Larger files will be passed as %CSP.CharacterStream reference to the page.
			d tStream.CopyFrom(pFileName)
		}else{
			//This is used with smaller files where the pFileName passes the value as a Text %String and will need to write to %GlobalCharacterStream
			d tStream.Write(pFileName)
		}
	
	//start data processing	
	s count = 0
	
	While 'tStream.AtEnd{
		s tLine = tStream.ReadLine()
		s tList = ##class(IIBAENSEMBLE.Functions).ParseCSV(tLine)
		s count = count +1
			
		if (count=1)
			{
			s colName = tList
			s colCount = $LL(tList)
			
			}
		
		for c=3:1:colCount {
	  
	 	       s pValue = $LG(tList,1)
	 	       s rValue = $LG(tList,2)
	 	       	 	         	    
	 	       		if (count >=1){
	 	          	     		
		          	    	s cellVal = $LG(tList,c)
	 	          	    	s colNum = c - 2
	 	          	      	if ((rValue '= "") && (pValue '= "")){
		 	          	      	//&js<alert("#(colNum)#"+","+"#(cellVal)#"+","+"#(rValue)#"+","+"#(pValue)#");>
		 	          	      	do ..Save(colNum,cellVal,rValue,pValue)
		 	          	      	}else{
			 	          	      	q
			 	          	      	}
	 	          	     	         	    
	 	          	    		}
							
							}
  	
					
								
	}
	
		
		&js<alert("Complete"); location.reload();>
			
			q $$$OK
	}else{
		&js<alert("Not in csv format");>
		q $$$OK
		
	}
]]></Implementation>
</Method>

<Method name="attrExport">
<ClassMethod>1</ClassMethod>
<FormalSpec>sRTID:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	//Write to audit log.
	do ..AuditChanges("attrExport","User Export: "_$Get(%session.Data("tTable")))
	
	#dim rs As %ResultSet
	s xRefTable = $Get(%session.Data("tTable"))
	
	//Use RefDownload to build download file with table name
	&js<
	var filename = "#(xRefTable)#"+".csv";
	//alert(filename);
	window.location = 'IIBAENSEMBLE.csp.RefDownload.cls?filename='+filename;
	>
	
	//Build file in manager directory
	s EnsSysDir = ##class(%File).ParentDirectoryName(##class(%File).ManagerDirectory())
	s filetimestamp = ##class(Ens.Util.Time).FormatDateTime("%Y%m%d%H%M%S")
	//s xRefExportsDir = ##class(%File).NormalizeDirectory(EnsSysDir_"xRefExports")
	
	
	if '##class(%File).DirectoryExists(EnsSysDir_"xRefExports") { 
		
		d ##class(%File).CreateDirectory(EnsSysDir_"xRefExports")
		 
	}

	s file = ##class(%File).%New(EnsSysDir_"xRefExports\"_xRefTable_".csv")
	d file.Open("WSN")
	
	set rs = ..BuildReferenceTable(,"PValue")
	set rsCount = rs.GetColumnCount()
	set ColLines = ""
	for i=1:1:rsCount {
		set arrColNames(i)=rs.GetColumnName(i)
		set ColValues = rs.GetColumnName(i)
		set ColLines = ColLines_$C(34)_##class(IIBAENSEMBLE.Functions).StringReplace(ColValues,$C(34),$C(34,34))_$C(34)_","
		
	}
	d file.WriteLine(ColLines)
	While rs.Next() {
		set strLine = ""
		
		for i=1:1:rsCount {
			
			set strLine=strLine_$C(34)_##class(IIBAENSEMBLE.Functions).StringReplace(rs.Data(arrColNames(i)),$C(34),$C(34,34))_$C(34)_","
		
		}
		
		d file.WriteLine(strLine)
	
	}
	
	
	do rs.Close()
	d file.Close()
	
	kill file
	
	Quit xRefTable_".csv"
]]></Implementation>
</Method>

<Method name="BuildReferenceTable">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pSC:%Status</FormalSpec>
<ReturnType>%ResultSet</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
 	set tRefId = %request.Get("ID")
  	if tRefId = ""{s tRefId = $Get(%session.Data("tRefId"))}
  	
  	set rs = ""
  	set pSC = $$$OK
  	
	  
	set sql = ""
 
	set rs = ##class(%ResultSet).%New("%DynamicQuery:SQL")   
	set pSC = rs.Prepare(sql)
	set pSC = rs.Execute()
	
	set %session.Data("tRefId") = tRefId
	  	
  Quit rs
]]></Implementation>
</Method>

<Method name="GetGridData">
<FormalSpec><![CDATA[&pParameters,*pMetaData,*pData]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 #dim tSC As %Status = $$$OK
 
 set rs = ..BuildReferenceTable()
 set tSC = ..ParseHeaderString(rs,.pMetaData)
 set tSC = ..ParseDataString(rs,.pData)
 
 
 Quit tSC
]]></Implementation>
</Method>

<Method name="ParseHeaderString">
<ClassMethod>1</ClassMethod>
<FormalSpec>pResultSet:%ResultSet,*pHeader</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tSC as %Status = $$$OK
	set cnt = 1
	set cnt1 = pResultSet.GetColumnCount()
	set tCol = ""
	
	for c=1:1:cnt1
	{
		set tCol = tCol_pResultSet.GetColumnHeader(c)
		if c'=cnt1
		{
			set tCol = tCol_$CHAR(2)
		}
							
	}
			
	set pHeader = $LFS(tCol,$CHAR(2))					
	Quit tSC
]]></Implementation>
</Method>

<Method name="ParseDataString">
<ClassMethod>1</ClassMethod>
<FormalSpec>pResultSet:%ResultSet,*pData</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tSC as %Status = $$$OK
	set cnt = 1
	set cnt1 = pResultSet.GetColumnCount()
	set tCol = ""
	
	While pResultSet.Next()
	{
		
		s tList = ""
		for c=1:1:cnt1
		{
			//get each line of the resultset
			set tList = tList_pResultSet.GetData(c)
			if c'=cnt1
			{
				set tList = tList_$CHAR(3)
			}
							
		}
		set pData(cnt) = $LFS(tList,$CHAR(3))
		set cnt = cnt +1	
	}	
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="AuditChanges">
<ClassMethod>1</ClassMethod>
<FormalSpec>method:%String,Description:%String="",pTable:%String="",pfilesize:%String="",pValue:%String="",rValue:%String=""</FormalSpec>
<Implementation><![CDATA[
		
	if $L(Description)>128
		set Description = $E(Description,1,128)
	set Source = "IIBAENSEMBLE.Zen.xRefAttrPage"
	set Type = "TablexRefAttr"
	set Name = "Edit"
	set EventData = "{""method"":"""_method_""",""PValue"":"""_pValue_""",""RValue"":"""_rValue_""",""Table"":"""_pTable_""",""FileSize"":"""_pfilesize_"""}"
	d $SYSTEM.Security.Audit(Source,Type,Name,EventData,Description)
	//JSON---{"method":"rowEditSave","PTName":"MyRefTable","PTId":"1","RTSystem":"","RTId":"","PValue":"dtest","PVId":"50","RValue":"","RVId":""}
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Zen.StatsConversion">
<Description>
Created using the page template: Title Page</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>63840,53032.08825</TimeChanged>
<TimeCreated>62418,32246.678305</TimeCreated>
<DependsOn>IIBAENSEMBLE.Zen.ToolkitHeader</DependsOn>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>IIBAENSEMBLE.Zen.Toolkit</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>StatsConversion</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENToolKIT</Default>
</Parameter>

<Property name="ItemType">
<Type>%String</Type>
</Property>

<Property name="ItemNameFilter">
<Type>%String</Type>
</Property>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
/* style for title bar */
#title {
	background: #C5D6D6;
	color: black;
	font-family: Verdana;
	font-size: 1.5em;
	font-weight: bold;
	padding: 5px;
	border-bottom: 1px solid black;
	text-align: center;
}
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns:ZENToolKIT="http://www.intersystems.com/toolkitheader" title="Conversion Monitor" width="auto" id="maintitle" onshow="zenPage.HTMLUpdate()">

<ZENToolKIT:ToolkitHeader id="title" title="Conversion Monitor"/>
<html id="html1">Show stats and for each client conversion-percentage.</html>
<hgroup id="hgroup">
<spacer width="20px"/>
<html id="html" OnDrawContent="DrawHTML"></html>
<spacer width="10px"/>
<image id="refresh" src="images/reload.png" title="Refresh" onclick="zenPage.UpdatePage()"/>
</hgroup>
<expando caption="Conversion Records" framed="true" animate="true" expanded="false" width="250px">
<form id="patientForm" 
	width="100%" 
	layout="vertical"
	 labelPosition="top"
	cellStyle="padding: 3px;" 
	>

<hgroup>

<dataCombo label="Name:" id="PatientID" name="PatientID" size="24"
	dropdownWidth="450"
	editable="true"
	searchKeyLen="5"
	required="false"
	comboType="button"
	buttonCaption="Search"
	buttonTitle="Search for a record by Patient Name"
	onchange="zenPage.selectPatient(zenThis);"
	sql="SELECT TOP 25 ID,OrgCode,lName,fName,NewMRN,OldMRN FROM IIBAENSEMBLE_MRNConversion.Queue WHERE lName %STARTSWITH ? ORDER BY lName"
	unrestricted="true"
	displayColumns="2,3,4,5,6"
	choiceColumn="3"
	valueColumn="1"
	auxColumn="1"
	/>
	</hgroup>
<text label="Record ID:" id="RecordID" 
	name="RecordID" size="20" readOnly="true" />
<spacer width="20"/>
<text label="iSite Org:" id="iSite Org" 
	name="iSite Org" size="20" readOnly="true" />
<spacer width="20"/>
<text label="First Name:" id="First Name" 
	name="First Name" size="20" readOnly="true" />
<spacer width="20"/>
<text label="Last Name:" id="Last Name" 
	name="Last Name" size="20" readOnly="true" />
<spacer width="20"/>
<text label="New MRN:" id="New MRN" 
	name="New MRN" size="20" readOnly="true" />
<spacer width="20"/>
<text label="Old MRN:" id="Old MRN" 
	name="Old MRN" size="20" readOnly="true" />
<spacer width="20"/>
<text label="Processed Time:" id="Processed Time" 
	name="Processed Time" size="20" readOnly="true" />
<spacer width="20"/>
<text label="Last Service Date:" id="Last Service Date" 
	name="Last Service Date" size="20" readOnly="true" />
<spacer width="20"/>
	</form>
	</expando>
	<spacer width="20"/>
	
</page>
]]></Data>
</XData>

<Method name="selectPatient">
<Description>
User has selected a new Patient from the list.</Description>
<FormalSpec>cb</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var ctrl = zenPage.getComponentById('PatientID');
	var patid = ctrl.getValue();

	// get id of patient
	// this is in the "auxiliary" value of the dataCombo
	var id = cb.getAuxValue();
	// if user has selected a new id, load it
	//if (patid != id) {
		var form = zenPage.getComponentById('patientForm');
		
		// go to server; get patient data
		
		this.LoadPatient(form, id);

	//}
]]></Implementation>
</Method>

<Method name="LoadPatient">
<Description>
Load given patient data into the form.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pForm:%ZEN.Component.form,pID:%ZEN.Datatype.string</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	#; open patient object from database
	Set tPatient = ##class(IIBAENSEMBLE.MRNConversion.Queue).%OpenId(pID)
	If $IsObject(tPatient) {
		Do %page.%SetValueById("RecordID",pID)
		Do %page.%SetValueById("iSite Org",tPatient.OrgCode)
		Do %page.%SetValueById("First Name",tPatient.fName)
		Do %page.%SetValueById("Last Name",tPatient.lName)
		Do %page.%SetValueById("New MRN",tPatient.NewMRN)
		Do %page.%SetValueById("Old MRN",tPatient.OldMRN)
		Do %page.%SetValueById("Processed Time",tPatient.ProcessedTimeLogicalToDisplay(tPatient.ProcessedTime))
		Do %page.%SetValueById("Last Service Date",tPatient.LastServiceDateLogicalToDisplay(tPatient.LastServiceDate))

	}
	Quit
]]></Implementation>
</Method>

<Method name="DrawHTML">
<ClassMethod>1</ClassMethod>
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	set RS = ##class(%ResultSet).%New()
	set sql = "select Distinct OrgCode From IIBAENSEMBLE_MRNConversion.Queue"
	set tSC = RS.Prepare(sql)
	set tSC = RS.Execute()
	set tValid = ""
	&sql(select Top 1 %ID into :tValid From IIBAENSEMBLE_MRNConversion.Queue)
				
	if tValid = ""
		{
			&html<<p>>
			&html<<table>>
			&html<<tr><td>Client:</td><td><span style="color: blue;">None</span></td></tr>>
			&html<</table>>
				
		}
		else
		{
			while RS.Next()
			{
				&html<<p>>
				&html<<table>>
				&html<<tr><td>Client:</td><td><span style="color: blue;">#(RS.Get("OrgCode"))#</span></td></tr>>
				&html<</table>>
			
				s tCount = 0
				s tRunning = 0
				s tProcessed = ""
				&sql(select Count("OrgCode") into :tCount from IIBAENSEMBLE_MRNConversion.Queue Where OrgCode = :RS.Get("OrgCode"))
				&sql(select Count("OrgCode") into :tRunning from IIBAENSEMBLE_MRNConversion.Queue Where ProcessedTime is NOT NULL and OrgCode = :RS.Get("OrgCode"))
				&sql(select TOP 1 ProcessedTime into :tProcessed from IIBAENSEMBLE_MRNConversion.Queue Where ProcessedTime is NOT NULL and OrgCode = :RS.Get("OrgCode") Order by ProcessedTime DESC)
			
				s tStatus = $P(tRunning/tCount*100,".",1)
			
			
				&html<<table>>
				if tStatus = 100 
				{
					//set btnId = RS.Get("OrgCode")
					//&html<<tr><button id="#(btnId)#" onclick="CleanUp()">#(RS.Get("OrgCode"))#</button>
					//<script language=javascript>
					//function CleanUp() {
					//	document.getElementById("#(btnId)#").innerHTML = "Hello World";}
					//</script>
					//>
					&html<<tr>>
				}
				else
				{
					&html<<tr>>
				}
				&html<<td>Status:</td><td><span style="color: green;">#(tStatus)#% at #(tProcessed)#</span></td></tr>>
				&html<</table>>
				&html<</p>>
			}
		
		
			s tcTotal = 0
			s trTotal = 0
			&sql(select Count("OrgCode") into :tcTotal from IIBAENSEMBLE_MRNConversion.Queue)
			&sql(select Count("OrgCode") into :trTotal from IIBAENSEMBLE_MRNConversion.Queue Where ProcessedTime is NOT NULL)
			s tTotal = $P(trTotal/tcTotal*100,".",1)
		
			&html<<table>>
			&html<<tr><td>Total Status:</td><td><span style="color: red;">#(tTotal)#%</span></td></tr>>
			&html<</table>>
		}
		Quit $$$OK
]]></Implementation>
</Method>

<Method name="HTMLUpdate">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var proxy = new zenProxy();
	var current = location.href;
	var last = current.lastIndexOf(".");
	var first = current.lastIndexOf("/");
	var path = current.substring(first,last);
	proxy.production = path;
	
	var html = zenPage.getComponentById('html');
	html.seed = proxy;
	html.refreshContents();
]]></Implementation>
</Method>

<Method name="UpdatePage">
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[location.reload();
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Zen.TableAuditList">
<Description>
This is the Lookup Table Audit List View.</Description>
<Super>IIBAENSEMBLE.Zen.ToolkitTemplate</Super>
<TimeChanged>63271,40905.708201</TimeChanged>
<TimeCreated>63252,61603.772595</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>IIBAENSEMBLE.Zen.Toolkit</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Lookup Table Audit List</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

table.tpTable {
    background: none repeat scroll 0 0 #FFFFFF;
    border: 1px solid #000000;
    empty-cells: show;
    font-family: Verdana;
	font-size: .6em;
    table-layout: fixed;
    width: 100%;
}
.tpEven {
    color: #0C202A;
    background: #A6DBF9;
}
.tpOdd {
    color: #0C202A;
}
</style>
]]></Data>
</XData>

<XData name="tablePane">
<Description>
This XML block defines the contents of this pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane>
<tableNavigatorBar tablePaneId="auditTable" showPageSize="true" width="70%" />
<tablePane showQuery="false" id="auditTable" tableName="%SYS.Audit" orderByClause="UTCTimeStamp DESC"
useSnapshot="true"  
pageSize="25" 
maxRows="500"
filtersDisabled="false"
width="90%"
nowrap="false"
showZebra="true" >
    <column colName="ID" hidden="true"/>
    <column colName="AuditIndex" hidden="true"/>
	<column colName="UTCTimeStamp"/>
	<column colName="Username" 
	cellTitle="Ensemle User Login" 
	style="font-weight:bold;" 
	/>
	<column colName="OSUsername" cellTitle="OS User Login" hidden="true"/>
	<column colName="UserInfo"  hidden="true"/>	
	<column colName="CSPSessionID"/>
	<column colName="ClientExecutableName" hidden="true"/>
	<column colName="ClientIPAddress"/>
	<column colName="Description"/>
	<column colName="Event"/>
	<column colName="EventData"/>
	<column colName="EventSource" hidden="true"/>
	<column colName="EventType" hidden="false" filterType="enum" filterOp="IN" filterEnum="LookupTable,LookupTableHeader" filterValue="LookupTable" />
	<column colName="GroupName" hidden="true"/>
	<column colName="Namespace" filterOp="=" />
	<column colName="Roles"/>
	<column colName="RoutineSpec" hidden="true"/>
	<column colName="Status"/>
	<column colName="SystemID"/>
	<column colName="x__classname" hidden="true"/>
</tablePane>
</pane>
]]></Data>
</XData>

<XData name="detailPane">
<Description>
This XML block defines the contents of this pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen">
<html></html>
</pane>
]]></Data>
</XData>

<Method name="GetUsers">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set rs = ##class(%ResultSet).%New("Security.Users:Detail")
	do rs.Execute("*","*","*")
	set sNames=""
	set counter=1
	While rs.Next() {
		set sName = rs.Data("Name")
		set $P(sNames,counter,",")=sName
		set counter=counter+1		
	}
	
	quit sNames
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
	Method onfilterChange(FilterValue as %String) as %Status
	{
		Set obj=%page.%GetComponentById("auditTable")
	}*/
]]></Content>
</UDLText>
</Class>


<Class name="IIBAENSEMBLE.Zen.TableView">
<Description>
Created using the page template: Default</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>63649,60427.088363</TimeChanged>
<TimeCreated>63649,41669.803485</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>IIBAENSEMBLE.Zen.Toolkit</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>TableView</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

table.tpTable {
    background: none repeat scroll 0 0 #FFFFFF;
    border: 1px solid #000000;
    empty-cells: show;
    font-family: Verdana;
	font-size: .6em;
    table-layout: fixed;
    width: 100%;
}
.tpEven {
    color: #0C202A;
    background: #A6DBF9;
}
.tpOdd {
    color: #0C202A;
}
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="Alerts Table">
<hgroup width="100%">
<vgroup width="5%"></vgroup>
<vgroup width="90%">
<tablePane
    width="1500px"
    id="alertTable" 
    sql="select * from IIBAENSEMBLE_Monitor.ItemParameters param 
join IIBAENSEMBLE_Monitor.tblSchedules sch on param.ID=sch.ParameterID"
    maxRows="1000" 
    pageSize="100" 
    
    showZebra="true" 
    showRowSelector="false"
    useSnapshot="true"
    extraColumnWidth="5%"
    dataSource="columns">    
   <column width="3%" header=" " colName="ParameterID" OnDrawCell="DrawEditCell" link="javascript:zenPage.showEditPage('#(%query.ID)#');"/>
   <column width="3%" linkCaption="Delete" header=" " colName="ParameterID" OnDrawCell="DrawDeleteCell" link="javascript:zenPage.deleteAlert('#(%query.ID)#');"/>
   <column header="Item Name" width="20%" colName="ItemName" filterType="text"/>
   <column header="Parameter" width="9%" colName="Parameter" filterType="text"/>
   <column header="Threshold Value" width="8%" colName="ThresholdDuration"/>
   <column header="Grace Period" width="6%" colName="Threshold"/>
   <column header="Alert Interval" width="6%" colName="AlertDuration"/>
   <column header="Hour Start" width="5%" colName="HourStart"/>
   <column header="Hour End" width="5%" colName="HourEnd"/>
   <column header="Active" width="5%" colName="Active"/>
   <column header="M" width="3%" colName="M"/>
   <column header="T" width="3%" colName="T"/>
   <column header="W" width="3%" colName="W"/>
   <column header="Th" width="3%" colName="Th"/>
   <column header="F" width="3%" colName="F"/>
   <column header="Sa" width="3%" colName="Sa"/>
   <column header="Su" width="3%" colName="Su"/>
   <column header="Holiday" width="6%" colName="Holidays"/>
   <column header="Hol Only" width="4%" colName="HolidayOnly"/>
   <column header="Notification" width="20%" colName="NotificationEmail"/>
 </tablePane>
</vgroup>
<vgroup width="5%"></vgroup>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="DrawEditCell">
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #; Draw HTML to render table cell.
    s tLink = "IIBASupport.csp?PageName=AlertEdit&Mode=Edit&paramID="
    &html<
    	<a href='#(tLink)##(%query(pName))#'><img src='customimages/edit.gif'/></a>
    >
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawDeleteCell">
<FormalSpec>pTable:%ZEN.Component.tablePane,pName:%String,pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
            #; Draw HTML to render table cell.
            &html<
            	<a href='javascript:zenPage.deleteAlert(#(%query(pName))#);'><img src='customimages/trash_bold.gif'/>
            >   
            Quit $$$OK
]]></Implementation>
</Method>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	//Req#5 - PHegel Tab Security Use for page name
	if ##class(%SYSTEM.Security).Check("AlertAdmin","USE"){ 
		set Allowed = 1 
	}
	Quit Allowed
]]></Implementation>
</Method>

<Method name="deleteAlert">
<ClassMethod>1</ClassMethod>
<FormalSpec>pName:%String</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	&javascript<
		var c=confirm('Are you sure you want to delete this alert?');
		if (c ) {
			var remove = #(..Remove(pName))#;
			location.reload(true);
		}
	>
	
	 /*
  	set rs=##class(%ResultSet).%New()
 	Do rs.Prepare("DELETE from IIBAENSEMBLE_Monitor.ItemParameters where ID = "pName"")
 	Do rs.Execute()
 	
 	set rs=##class(%ResultSet).%New()
 	Do rs.Prepare("DELETE from IIBAENSEMBLE_Monitor.tblSchedules where ParameterID = "pName"")
 	Do rs.Execute()
 	*/
]]></Implementation>
</Method>

<Method name="Remove">
<ClassMethod>1</ClassMethod>
<FormalSpec>paramID:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 	set rs=##class(%ResultSet).%New()
 	Do rs.Prepare("DELETE from IIBAENSEMBLE_Monitor.ItemParameters where ID = "_paramID_"")
 	Do rs.Execute()
 	
 	set rs=##class(%ResultSet).%New()
 	Do rs.Prepare("DELETE from IIBAENSEMBLE_Monitor.tblSchedules where ParameterID = "_paramID_"")
 	Do rs.Execute()
 	Q 1
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Zen.TcpPortReport">
<Description>
Created using the page template: Title Page</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>63840,53042.945381</TimeChanged>
<TimeCreated>62418,32246.678305</TimeCreated>
<DependsOn>IIBAENSEMBLE.Zen.ToolkitHeader</DependsOn>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>IIBAENSEMBLE.Zen.Toolkit</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>TcpPortReport</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
<Default>ZENToolKIT</Default>
</Parameter>

<Property name="ItemType">
<Type>%String</Type>
</Property>

<Property name="ItemNameFilter">
<Type>%String</Type>
</Property>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
/* style for title bar */
#title {
	background: #C5D6D6;
	color: black;
	font-family: Verdana;
	font-size: 1.5em;
	font-weight: bold;
	padding: 5px;
	border-bottom: 1px solid black;
	text-align: center;
}
</style>
]]></Data>
</XData>

<UDLText name="T">
<Content><![CDATA[
// <page xmlns="http://www.intersystems.com/zen" title="">

]]></Content>
</UDLText>

<UDLText name="T">
<Content><![CDATA[
// <html id="title">TCP Port Usage</html>

]]></Content>
</UDLText>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns:ZENToolKIT="http://www.intersystems.com/toolkitheader" title="IIBA Support" width="auto" id="maintitle">

<ZENToolKIT:ToolkitHeader id="title" title="TCP Port Usage"/>
<vgroup width="100%">
<!-- put page contents here -->
<tableNavigatorBar tablePaneId="PortTable"/>
<tablePane id='PortTable' 
	queryClass="IIBAENSEMBLE.Zen.TcpPortReport" 
	queryName="PortQuery"
	showZebra="true"
	useSnapshot="true"
	pageSize="25"
	maxRows="500"
	filtersDisabled="false"
	width="90%"
	nowrap="false"
	
>
<parameter name="NameSpace"/>
<parameter name="InterfaceName"/>
<parameter name="Type" id="Type" resource="Type"/>
<column colName="NameSpace" title="Namespace" width="15%" />
<column colName="InterfaceName" title="Interface Name" width="40%"  />
<column colName="Type" 
	title="Type" 
	 width="15%"
	 
/>
<column colName="IP" title="IP Address" width="20%" />
<column colName="PortNumber" title="Port" width="10%" />
</tablePane>
</vgroup>
</page>
]]></Data>
</XData>

<Query name="PortQuery">
<Type>%Query</Type>
<FormalSpec>qNamespace:%String="",qInterfaceName:%String="",qType:%String=""</FormalSpec>
<Parameter name="ROWSPEC" value="Namespace:%String:Namespace,InterfaceName:%String:Interface Name,Type:%String:Type,IP:%String:IP Address,PortNumber:%Integer:Port"/>
</Query>

<Method name="PortQueryExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,qNamespace:%String="",qInterfaceName:%String="",qType:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	K NamespaceList
	K SystemInfo
	
	s qCurrentNamespace = $SYSTEM.SYS.NameSpace()
	
	If (qNamespace="") {
		d ##class(Ens.Director).GetSystemProductionSummary(.SystemInfo)
	} else {
		s SystemInfo(qNamespace)=""
	}
	
	s Namespace=""
	F  {
		s Namespace=$O(SystemInfo(Namespace))
		Q:Namespace=""
		Continue:$O(SystemInfo(Namespace,""))=""
		
		zn Namespace
		Set ProductionName=""
		Set ProductionStatus=""
		Set production = ""
		set status = ##class(Ens.Director).GetProductionStatus(.ProductionName,.ProductionStatus)
		Continue:ProductionName=""
		
		set production=##class(Ens.Config.Production).%OpenId(ProductionName)
		
		for i=1:1:production.Items.Count() {
		
			s item=production.Items.GetAt(i)
			s name=item.Name
		
			s port=""
			s ip=""
			for j=1:1:item.Settings.Count() {
				
				s st = item.Settings.GetAt(j)
				I (st.Name="Port") {
					s port=st.Value
					
				}
				I (st.Name="IPAddress") {
					s ip=st.Value
					
				}
				
			}
			if (port'="") {
				if ((qType="") || ($P("Service,,Operation",",",item.BusinessType())=qType)) {
					Set iRow=$I(qHandle("row")),qHandle("row",iRow)=$LB(Namespace,item.Name,$P("Service,,Operation",",",item.BusinessType()),ip,port)
				}
			}
		
		
		
		}
	}
	
	s qHandle("row")=0
	
	zn qCurrentNamespace
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="PortQueryClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>PortQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill qHandle
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="PortQueryFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>PortQueryExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	K Row s Row=""
	If ""=$G(qHandle("row")) Set AtEnd=1  Quit $$$OK
	
	s qHandle("row")=$O(qHandle("row",qHandle("row")))
	if (qHandle("row")="") {
		set AtEnd=1
	} else {
		s Row=qHandle("row",qHandle("row"))
	}
	
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Zen.Toolkit">
<Description>
Application for the Nuvodia Zen Toolkit.</Description>
<Super>%ZEN.application</Super>
<TimeChanged>63252,55250.794112</TimeChanged>
<TimeCreated>63252,55250.794112</TimeCreated>

<Parameter name="APPLICATIONNAME">
<Description>
This is the name of this application.</Description>
<Default>Nuvodia Zen Toolkit</Default>
</Parameter>

<Parameter name="HOMEPAGE">
<Description>
This is the URL of the main starting page of this application.</Description>
</Parameter>

<XData name="Style">
<Description>
This Style block contains application-wide CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>
</Class>


<Class name="IIBAENSEMBLE.Zen.ToolkitHeader">
<Super>%ZEN.Component.component</Super>
<TimeChanged>63581,41830.241969</TimeChanged>
<TimeCreated>63558,55551.147604</TimeCreated>

<Parameter name="NAMESPACE">
<Description>
XML namespace for this component.</Description>
<Default>http://www.intersystems.com/toolkitheader</Default>
</Parameter>

<Parameter name="DOMAIN">
<Default>ZENToolKIT</Default>
</Parameter>

<Property name="title">
<Description>
Title displayed within this pane.</Description>
<Type>%ZEN.Datatype.caption</Type>
</Property>

<XData name="Style">
<Description>
defines style sheet used by this component</Description>
</XData>

<Method name="%DrawHTML">
<Description>
Draw the HTML contents of this component.</Description>
<Implementation><![CDATA[
	
	&html<<table width="100%" cellspacing="0" cellpadding="0" border="0" style="font-size: 10pt;">
   <tbody><tr>
   <td width="210" valign="bottom" nowrap="" bgcolor="#FFFFFF" align="left" style="background-repeat: no-repeat; background-image: url(customimages/IIBA_logo.jpg);">
   </td>
   <td width="50" valign="top" nowrap="" bgcolor="#FFFFFF" align="left" style="margin-right: 0px; background-repeat: repeat-y; background-image: url(customimages/whitetoyellow.gif);"></td>
   <td valign="top" width="280" nowrap="" bgcolor="#fffae7" align="left">
   <div style="color: #004C8F; margin-top: 18px; font-weight: bold; font-size: 11pt;">Integration Support Toolkit</div>
   <div style="color: #004C8F; margin-top: 5px; font-weight: bold; font-size: 11pt;" id="PageTitle">#($ZCVT(..title,"O","HTML"))#</div>
   </td>
   <td width="50" valign="top" nowrap="" bgcolor="#FFFFFF" align="left" style="margin-right: 0px; background-repeat: repeat-y; background-image: url(customimages/yellowtoblue.gif);"></td>
   <td bgcolor="#004C8F" width="20"></td>
   <td valign="middle" bgcolor="#004C8F">
   <table border="0" bgcolor="#004C8F">

   		<tbody><tr><td nowrap="" style="text-align: left;" class="quote-name" title="Name of the machine this system is running on"><span style="color: rgb(255, 250, 231); font-size: 8pt; padding-right: 5px;">Server:</span><b>
   		<span style="color: #fffae7;">#($zu(110))#</span></b>
   		
   	
   	
   		
   		
   		
   		</td></tr>
   		
   		
   		<tr><td nowrap="" style="text-align: left;" class="quote-name" title="Configuration name of this system"><span style="color: rgb(255, 250, 231); font-size: 8pt; padding-right: 5px;">NameSpace:</span><b><span style="color: #fffae7;">#($ZNSPACE)#</span></b></td></tr>
		<tr><td style="text-align: left;" class="quote-name" title="Name of user logged into this session">
		<span style="color: rgb(255, 250, 231); font-size: 8pt; padding-right: 5px;">User:</span><b><span style="color: #fffae7;">#(%session.Username)#</span></b></td></tr>
			

   </tbody></table>
   </td>
   <td bgcolor="#004C8F"></td>
   <td width="50" valign="top" nowrap="" bgcolor="#FFFFFF" align="left" style="margin-right: 0px; background-repeat: repeat-y; background-image: url(customimages/bluetowhite.gif);"></td>
   <td bgcolor="#FFFFFF" width="20"></td>
   <td width="200" align="left" valign="middle" nowrap="" height="78" bgcolor="#FFFFFF" align="left" style="background-repeat: no-repeat; background-image: url(customimages/Client.jpg);"><p style="color: red;font-size: large;font-weight: bold">#(##class(IIBAENSEMBLE.Functions).TableLookup("text",,,"Clientimagetext"))#</p></td>
   </tr>
	
	</tbody></table>>
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Zen.ToolkitTemplate">
<Description>
Created using the page template: Column 2</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>63650,49549.607636</TimeChanged>
<TimeCreated>63252,55690.747021</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>IIBAENSEMBLE.Zen.Toolkit</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Toolkit Template</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<Property name="Namespace">
<Type>%String</Type>
</Property>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
/* style for title bar */
#title {
	background: White;
	color: black;
	font-family: Verdana;
	font-size: 1.5em;
	font-weight: bold;
	padding: 5px;
	width: 100%;
	text-align: center;
}
#date {
	background: White;
	color: #F2D230;
	font-family: Verdana;
	padding-right: 20px;
	width: 222px;
	text-align: right;
}
#menubar {
	background: #F2D230;
	color: black;
	font-family: Verdana;
	font-size: 1.5em;
	font-weight: bold;
	padding: 5px;
	border-bottom: 1px solid black;
	text-align: left;
}
/* group on left-hand side */
#groupLeft {
	border-right: 1px solid black;
	background: #F2E394;
	height: 600px;
	width: 155px;
	overflow: auto;
}
/* group on right-hand side */
#groupRight {
	border-right: 1px solid black;
	background: #F2F2F2;
	height: 600px;
	overflow: auto;
}
table.menuTable {
	font-size: 0.8em; 
	margin-left: 0px;
	margin-right: 0px;
	margin-top: 0px;
	margin-bottom: 5px;
	padding: 5px;
	/*border-top: 1px gray solid;
	border-bottom: 1px gray solid;*/
	width: 100%;
	background: #F2E394;
	font-family: Arial, Helvetica, sans-serif;
	border: none;
	/*border-top: 1px solid lightgray;
	border-left: 1px solid lightgray;
	border-right: 2px solid gray;
	border-bottom: 2px solid gray;*/
}
/* Default style overrides*/
/* Override default menu item style */
a.menuItem {
	/*background: #356B8D;*/
	background: #3F5F70;
	text-decoration: none; 
	font-family: Arial, Helvetica, sans-serif;
	font-size:12px;
	font-weight:bold;
	color: #E0E0E0;
	padding: 3px;
	padding-top: 1px;
	padding-left: 5px;
	-moz-border-radius: 5px;
	border-radius: 5px;
	width: 100%;
	border: 1px solid lightgray;
	border-top: 1px solid lightgray;
	border-left: 1px solid lightgray;
	border-right: 2px solid gray;
	border-bottom: 2px solid gray;
}

/* @doc="Mouse over menu item." */
a.menuItem:hover {
	background-image: url(portal/button_hover.png);
	background-repeat: repeat-x;
	text-decoration: none; 
	font-family: Arial, Helvetica, sans-serif;
	font-size:12px;
	font-weight:bold;
	color: #E0E0E0;
	padding: 3px;
	padding-top: 1px;
	padding-left: 5px;
	-moz-border-radius: 5px;
	border-radius: 5px;
	border: 1px solid lightgray;
	border-top: 1px solid lightgray;
	border-left: 1px solid lightgray;
	border-right: 2px solid gray;
	border-bottom: 2px solid gray;

}

 a.menuItem:active {
		color: #FF0000;	
}

/* @doc="Disabled menu item." */
a.menuItemDisabled {
	background: #606060;
	font-size:12px;
	font-weight:bold;
	color: #FFFFFF;
	text-decoration: none; 
	font-family: Arial, Helvetica, sans-serif;
	padding: 2px 5px 5px 5px;
	-moz-border-radius: 5px;
	border-radius: 5px;
	border: 1px solid lightgray;
	border-top: 1px solid lightgray;
	border-left: 1px solid lightgray;
	border-right: 2px solid gray;
	border-bottom: 2px solid gray;
}
<link rel="stylesheet" type="text/css" href="/csp/sys/intersystems.css"/>
</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="">
<!-- <html OnDrawContent="DrawTitle"/> -->
<hgroup id="hgrouptop">
<vgroup align="left">
<image align="left" alt="Nuvodia" id="logo" src="http://www.inlandimaging.com/Nuvodia_logo_emailSig.jpg"></image>
</vgroup>
<vgroup align="center" width="100%">
<html id="title" OnDrawContent="DrawTitle"/>
</vgroup>
<vgroup align="right">
<html id="date" OnDrawContent="DrawDate"/>
</vgroup>
</hgroup>
<html id="menubar"></html>
<hgroup id="hgroup" width="100%">
<vgroup id="groupLeft">
<!-- put contents of left column here -->
<pane paneName="menuPane" width="100%">
<menu id="Toolkit" layout="vertical" help="Top" width="100%" >
<menuItem caption="Lookup Table Audit" imageWidth="1px" link="IIBAENSEMBLE.Zen.TableAuditList.cls" target="_top"  />
<menuItem caption="xRef Audit" imageWidth="1px" link="IIBAENSEMBLE.Zen.xRefAuditList.cls" target="_top" />
<menuItem caption="xRefAttr Audit" imageWidth="1px" link="IIBAENSEMBLE.Zen.xRefAttrAuditList.cls" target="_top" />
<menuItem caption="Alert Admin" imageWidth="1px" link="IIBAENSEMBLE.Zen.AlertAdminTable.cls" target="_top"/>
<menuItem caption="Back to Toolkit" imageWidth="1px"  link="IIBASupport.csp" target="_top"  />
<menuItem caption="Manage" imageWidth="1px"  link="%25CSP.Portal.Home.zen" target="_top"  />
</menu>
</pane>
</vgroup>
<vgroup id="groupRight">
<!-- put contents of right column here -->
<pane paneName="tablePane"/>
<spacer height="20"/>
<pane paneName="detailPane"/>
</vgroup>
</hgroup>
</page>
]]></Data>
</XData>

<Method name="onlayoutHandler">
<Description>
This method is called when this page is resized.
In response to a resize, we use JavaScript to dynamically
resize the 2 main groups on this page.
You can modify this method to meet your needs.</Description>
<FormalSpec>load</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	// find enclosing div for the title (if present) and get its height
	var title = zenPage.getComponentById('title');
	var divTitle = title ? title.getEnclosingDiv() : null;
	var hgtTitle = divTitle ? parseInt(divTitle.offsetHeight) : 0;
	// find the enclosing divs for the 2 groups
	var groupLeft = zenPage.getComponentById('groupLeft');
	var groupRight = zenPage.getComponentById('groupRight');
	var divgroupLeft = groupLeft ? groupLeft.getEnclosingDiv() : null;
	var divgroupRight = groupRight ? groupRight.getEnclosingDiv() : null;
	// find height of window
	var winHeight = zenGetWindowHeight();
	var winWidth = zenGetWindowWidth();
	// adjust the size of groups
	var widLeft = divgroupLeft ? parseInt(divgroupLeft.offsetWidth) : 0;
	var widRight = winWidth - widLeft - 10;
	var hgt = winHeight - hgtTitle - 30;
	if (divgroupLeft) {
		divgroupLeft.style.height = hgt + 'px';
	}
	if (divgroupRight) {
		divgroupRight.style.height = hgt + 'px';
		divgroupRight.style.width = widRight + 'px';
	}
]]></Implementation>
</Method>

<Method name="DrawTitle">
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&html<<div>Toolkit - #($ZCVT(..#PAGENAME,"O","HTML"))#</div>>
	set ..Namespace = $ZNSPACE
	quit $$$OK
]]></Implementation>
</Method>

<Method name="DrawDate">
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	&html<<div>#($ZCVT(($ZDATETIME($HOROLOG,3,2)),"O","HTML"))#</div>>
	quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Zen.xRefAttrAuditList">
<Description>
xRef Audit List View.</Description>
<Super>IIBAENSEMBLE.Zen.ToolkitTemplate</Super>
<TimeChanged>63575,59842.940917</TimeChanged>
<TimeCreated>63252,61803.739939</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>IIBAENSEMBLE.Zen.Toolkit</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>xRefAttr Audit List</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

table.tpTable {
    background: none repeat scroll 0 0 #FFFFFF;
    border: 1px solid #000000;
    empty-cells: show;
    font-family: Verdana;
	font-size: .6em;
    table-layout: fixed;
    width: 100%;
}
.tpEven {
    color: #0C202A;
    background: #A6DBF9;
}
.tpOdd {
    color: #0C202A;
}
</style>
]]></Data>
</XData>

<XData name="tablePane">
<Description>
This XML block defines the contents of this pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane>
<tableNavigatorBar tablePaneId="auditTable" showPageSize="true" width="70%" />
<tablePane showQuery="false" id="auditTable" tableName="%SYS.Audit"  orderByClause="UTCTimeStamp DESC"
useSnapshot="true"  
pageSize="25" 
maxRows="500"
filtersDisabled="true"
width="90%"
nowrap="false"
showZebra="true" >
    <column colName="ID" hidden="true"/>
    <column colName="AuditIndex" hidden="true"/>
	<column colName="UTCTimeStamp"/>
	<column colName="Username" 
	cellTitle="Ensemle User Login" 
	style="font-weight:bold;" 
	/>
	<column colName="OSUsername" cellTitle="OS User Login" hidden="true"/>
	<column colName="UserInfo"  hidden="true"/>	
	<column colName="CSPSessionID"/>
	<column colName="ClientExecutableName" hidden="true"/>
	<column colName="ClientIPAddress"/>
	<column colName="Description"/>
	<column colName="Event"/>
	<column colName="EventData"/>
	<column colName="EventSource" hidden="true"/>
	<column colName="EventType" hidden="false" filterValue="TablexRefAttr" />
	<column colName="GroupName" hidden="true"/>
	<column colName="Namespace" />
	<column colName="Roles"/>
	<column colName="RoutineSpec" hidden="true"/>
	<column colName="Status"/>
	<column colName="SystemID"/>
	<column colName="x__classname" hidden="true"/>
</tablePane>
</pane>
]]></Data>
</XData>

<XData name="detailPane">
<Description>
This XML block defines the contents of this pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen">
<html></html>
</pane>
]]></Data>
</XData>

<Method name="GetUsers">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set rs = ##class(%ResultSet).%New("Security.Users:Detail")
	do rs.Execute("*","*","*")
	set sNames=""
	set counter=1
	While rs.Next() {
		set sName = rs.Data("Name")
		set $P(sNames,counter,",")=sName
		set counter=counter+1		
	}
	
	quit sNames
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
	Method onfilterChange(FilterValue as %String) as %Status
	{
		Set obj=%page.%GetComponentById("auditTable")
	}*/
]]></Content>
</UDLText>
</Class>


<Class name="IIBAENSEMBLE.Zen.xRefAttrPage">
<ProcedureBlock>1</ProcedureBlock>
<Super>%ZEN.Component.page</Super>
<TimeChanged>63840,53059.109671</TimeChanged>
<TimeCreated>63365,42982.860226</TimeCreated>
<DependsOn>IIBAENSEMBLE.Zen.ToolkitHeader</DependsOn>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Attributes</Default>
</Parameter>

<Parameter name="DOMAIN">
<Default>ZENToolKIT</Default>
</Parameter>

<Property name="Table">
<Type>%String</Type>
</Property>

<XData name="Style">
<Data><![CDATA[
<style type="text/css">


	

#bbArea {
  background:	lightgray;
  background-image: url(images/grad-halfblue-10x30.png);
  background-repeat:repeat-x;
}


#DataGrid
 {
 	width: auto;
    height: 660px;
    
      
 }



</style>
]]></Data>
</XData>

<XData name="Contents">
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns:ZENToolKIT="http://www.intersystems.com/toolkitheader" title="IIBA Support Attributes" id="maintitle">

<ZENToolKIT:ToolkitHeader id="title" title="Attributes Table"/>

<hgroup id="bbArea" align="center">
<form id="ImportForm" hidden="true" align="left">
<html id="fileUpload" OnDrawContent="UploadHTML" hidden="false"/>
</form>
  
  <buttonBar id="editStuff" >
    <buttonBarItem icon="CustomImages/plus_bold.gif" caption="Add Column" resource="xRefAttrUpdate"
                   onclick="zenPage.UpdatePage('AddColumn')"  />
               
    <buttonBarItem icon="CustomImages/trash_bold.gif" caption="Delete Column" resource="xRefAttrUpdate"
                   onclick="zenPage.UpdatePage('DeleteColumn')"  />
                   
    <buttonBarItem icon="ext/examples/shared/icons/arrow-down.gif" caption="Export"
                   onclick="zenPage.UpdatePage('Export')" />
                 
    <buttonBarItem icon="ext/examples/shared/icons/arrow-up.gif" caption="Import"
                   onclick="zenPage.UpdatePage('Import')"  />
                   
   <buttonBarItem icon="CustomImages/Cancel.gif" caption="Exit"
                   onclick="zenPage.UpdatePage('Close')"  />
  </buttonBar>
  <spacer width="5px"/>
  <checkbox caption="Read Only" value="1" align="left" onclick="zenPage.SwitchEdit(zenThis);"/>
  
</hgroup>

<vgroup id="mainv" hidden="false" width="auto" height="auto">
<dataGrid id="DataGrid" 
controllerId="json"
readOnly="true"
selectMode="cells"
currRow=""
currColumn=""
style="text-align: left;"
onchange="zenPage.UpdatePage('Save',zenThis)"
pageSize="30"
multiSelect="true"
currPage="1"
onnotifyView=""
filterKey=""
valueColumn="1"

>

</dataGrid>
<jsonProvider id="json" OnGetArray="GetGridData">
</jsonProvider>
</vgroup>

<hgroup id="utils" hidden="false">
<spacer width="1px"/>
<text id="getPageSiz" value="30" />
<button id="pagerBtn" caption="Ok" onclick="zenPage.UpdatePage('ChgPageSiz',zenThis)"/>
</hgroup>
<html id="edtMode" containerStyle="color: red;" align="center" hidden="true">***Edit Mode***</html>
</page>
]]></Data>
</XData>

<Method name="SwitchEdit">
<FormalSpec>id</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	var trigger = id.value;
	
	zenPage.getComponentById('edtMode').setProperty('hidden',trigger);
	zenPage.getComponentById('DataGrid').setProperty('readOnly',trigger);
]]></Implementation>
</Method>

<Method name="Alert">
<FormalSpec>message:%String</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[	alert(message);
]]></Implementation>
</Method>

<Method name="UpdatePage">
<FormalSpec>pAction:%String,grid</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
	 if (pAction == "Refresh"){
	 		location.reload();
	 		
	 	}else if (pAction == "Close"){
		  	window.close();
		 	
		}else if (pAction == "readOnly"){
			//using this function will disable the dbl click sort on header columns
			var c = grid.getCurrColumn();
		 	var readOnly = grid.getProperty('readOnly');
		 	var currPage = grid.getProperty('currPage');
		 	if (c <=2){
			 	grid.setProperty('id',true);
		 	}else{
			 	grid.setProperty('readOnly',false);
		 	}
	 	}else if (pAction == "Save"){
		
		 	//valueColumn property is maintained between filtering and paging.
		 	var row = grid.getCurrRow();
		 	var col = grid.getCurrColumn();
		 	grid.setProperty('valueColumn',1);
			var PValue = grid.getRowValue(row);
			grid.setProperty('valueColumn',col);
			var value = grid.getRowValue(row);
			grid.setProperty('valueColumn',2)
			var RValue = grid.getRowValue(row);
			
			
			if (col <= 2){
				alert("Cannot edit Principal or Related Values.");
				location.reload();
			}else{
				this.Save(col-2,value,RValue,PValue);
			}
		}else if (pAction == "ChgPageSiz"){
		 	
		 	var bttn = zenPage.getComponentById('getPageSiz');
		 	var dataGrid = zenPage.getComponentById('DataGrid');
		 	var value = bttn.getValue();
		 	if (/[^0-9]/.test( value )){
			 	alert("Numeric Values Only");
			 	return false;
		 	}else{
		 		dataGrid.setProperty('pageSize',value);
				dataGrid.setProperty('currPage',1);
				return true;
		 	}
		
		 	
	 	}else if (pAction == "AddColumn"){
		 	var cell = zenPage.getComponentById('DataGrid');
    		var Column = prompt("Column Name:", "Enter Column Name");
    		if (Column == null || Column ==""){
	    		return true;
    		}else if (/[^a-zA-Z0-9]/.test( Column )){
	    			alert("Input is not alphanumeric");
	    			return false;
	    		}else{
       				zenPage.cell = this.AddColumnCLS(Column);
					return true;
    				}
	
	 	}else if (pAction == "DeleteColumn"){
	 		var cell = zenPage.getComponentById('DataGrid');
    		var Column = prompt("Column Name:", "Enter Column Name");
    		if (Column == null || Column ==""){
	    		return true;   				
    		}else if (/[^a-zA-Z0-9]/.test( Column )){
	    			alert("Input is not alphanumeric");
	    			return false;
	    		}else{
		    		zenPage.cell = this.DeleteColumnCLS(Column);
					return true;
    				}
    		
	 	}else if (pAction == "Export"){
		 	var value = location.href;
			var cell = zenPage.getComponentById('DataGrid');
			zenPage.cell = this.attrExport(value);
			
	 	}else if (pAction == "Import"){
		  	if (window.File && window.FileReader && window.FileList && window.Blob) {
					var form = this.getComponentById('ImportForm');
  					form.setProperty('hidden',false);
  				} else {
  					alert('The File APIs are not fully supported by your browser.');
				}
					
	 	}else if (pAction == "Filter"){
		 	cell = zenPage.getComponentById('DataGrid');
			value = cell.getProperty('currColumn');
			zenPage.cell = this.SetFilter(value);
						 		
	 	}else{
		 	alert("Function Does Not Exist!");
		 	window.close();
	 }
]]></Implementation>
</Method>

<Method name="UploadHTML">
<ClassMethod>1</ClassMethod>
<FormalSpec>pSeed:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	//built in csp, not sure if/where zen stores mime data for the file reader. 
	&html<
	<input type="file" id="fileinput" accept="application/csv" />
	<script type="text/javascript">
 	 function readSingleFile(evt) {
    //Retrieve the first (and only!) File from the FileList object
    	var f = evt.target.files[0]; 

    	if (f) {
     	 var r = new FileReader();
     	 r.onload = function(e) {
	     	var contents = e.target.result;
	      	#server(..ImportData(contents,f.name,f.size))#;
             
      }
      //AsText CSP will automatically place in a stream if needed. 
      //BinaryString does not seem to work.
      r.readAsText(f);
   
    } else { 
      alert("Failed to load file");
    }
  }

    document.getElementById('fileinput').addEventListener('change', readSingleFile, false);
	</script>>
 	q $$$OK
]]></Implementation>
</Method>

<Method name="Save">
<ClassMethod>1</ClassMethod>
<FormalSpec>pHeader:%Integer,pValue:%String,pRValue:%String,pPValue:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	//Declare variables
	#dim tSC = $$$OK 
	#dim tTable As %String = $Get(%session.Data("tTable"))
	#dim tResource as %String = $Get(%session.Data("tResource"))
	
	//&js<document.getElementById('DataGrid').rows['1'].cells['1'].setAttribute('bgColor', 'red');>
	
		 	          	      	
	if ((##class(%SYSTEM.Security).Check(tResource, "WRITE"))||(tResource = ""))
	{
		
		//Write to audit log.
		if pValue = ""{do ..AuditChanges("Save","User Delete",$Get(%session.Data("tTable")),,pRValue,pPValue)}else{do ..AuditChanges("Save","User Save: "_pValue,$Get(%session.Data("tTable")),,pRValue,pPValue)}
		

		#dim tRow As %ResultSet
		#dim tHeader As %String	= ""
		#dim tId As %Integer = 0
		#dim tAId As %Integer = 0
		#dim tRefId As %Integer = 0
		#dim tRId As %Integer = 0
		
		s tRefId = $Get(%session.Data("tRefId"))
		
		s tPosition = $L(tTable,".")-2
		s tTableSQL = $REPLACE(tTable,".","_",1,tPosition)
			
		&sql(SELECT %ID into :tRId FROM IIBAENSEMBLE_Reference.RelatedType WHERE %ID = :tRefId AND attrClass = :tTable)
		&sql(SELECT attrId, IIBAENSEMBLE_Reference.RelatedValue.%ID into :tAId, :tId FROM IIBAENSEMBLE_Reference.RelatedValue JOIN IIBAENSEMBLE_Reference.PrincipalValue ON IIBAENSEMBLE_Reference.RelatedValue.PrincipalValue = IIBAENSEMBLE_Reference.PrincipalValue.%ID AND PValue = :pPValue AND RValue = :pRValue  AND RelatedType = :tRId)
			
		//Build objects and save values.
		s rs = ##class(%ResultSet).%New()
		s tHeader = rs.Prepare("SELECT * FROM "_tTableSQL_"")
		s tHeader = rs.Execute()
		s tHeader = rs.GetColumnHeader(pHeader)
			
		if $CLASSMETHOD(tTable,"%ExistsId",tAId) '=0 {
			
			//&js<alert("#(pHeader_"|"_pValue_"|"_pRValue_"|"_pPValue_"|"_tAId_"|"_tId)#");>
			s tRow = $CLASSMETHOD(tTable,"%OpenId",tAId)
			s $PROPERTY(tRow,tHeader) = pValue
			s tSC = tRow.%Save()		
			
		}else{
			
			//&js<alert("new"+"#(pHeader_"|"_pValue_"|"_pRValue_"|"_pPValue_"|"_tAId_"|"_tId)#");>
			s tRow = $CLASSMETHOD(tTable,"%New")
			s $PROPERTY(tRow,tHeader) = pValue
			s tSC = tRow.%Save()
			
			s tRelSys = ##class(IIBAENSEMBLE.Reference.RelatedValue).%OpenId(tId)
			
			s tRelSys.attrId = tRow.%Id()
			s tSC = tRelSys.%Save()
							
		}
		
		k %session.Data("tAId")
	}
	else
	{
		&js<
		alert("Sorry, you are not allowed to edit this xRef Attribute {#(tTable)#} table");
		location.reload();>
	}
	q tSC
]]></Implementation>
</Method>

<Method name="AddColumnCLS">
<ClassMethod>1</ClassMethod>
<FormalSpec>cName:%String</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	//Write to audit log.
	do ..AuditChanges("AddColumnCLS","User Add Column: "_cName,$Get(%session.Data("tTable")))
	
	s tTable = $Get(%session.Data("tTable"))
	s tPosition = $L(tTable,".")-2
	s tTable = $REPLACE(tTable,".","_",1,tPosition)
	s sql = "ALTER TABLE "_tTable_" ADD "_cName_" %String"
	s rs = $CLASSMETHOD("%SQL.Statement","%ExecDirect",,sql)
	
	&js<location.reload();>
	q
]]></Implementation>
</Method>

<Method name="DeleteColumnCLS">
<ClassMethod>1</ClassMethod>
<FormalSpec>cName:%String</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	//Write to audit log.
	do ..AuditChanges("DeleteColumnCLS","User Delete Column: "_cName,$Get(%session.Data("tTable")))
	
	s tTable = $Get(%session.Data("tTable"))
	s tPosition = $L(tTable,".")-2
	s tTable = $REPLACE(tTable,".","_",1,tPosition)
	s sql = "ALTER TABLE "_tTable_" DROP COLUMN "_cName_""
	s rs = $CLASSMETHOD("%SQL.Statement","%ExecDirect",,sql)
	
	&js<location.reload();>
	q
]]></Implementation>
</Method>

<Method name="ValidateAttrHeader">
<ClassMethod>1</ClassMethod>
<FormalSpec>pHeader:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	#dim tTable As %String = ""
	#dim rsCount As %Integer = 0
	#dim tReturn As %Boolean = 1
	#dim tProp As %String = ""
	#dim c As %Integer = 0
	#dim tHeader As %String = ""
	#dim tError As %String = ""
	
	s tTable = $Get(%session.Data("tTable"))
	s rs = ##class(%ResultSet).%New()
	s tPosition = $L(tTable,".")-2
	s tTable = $REPLACE(tTable,".","_",1,tPosition)
	s tHeader = rs.Prepare("SELECT * FROM "_tTable_"")
	s tHeader = rs.Execute()  	
	s rsCount = rs.GetColumnCount()
	s pHeader = $Replace(pHeader,$CHAR(34),"")
	
    if $L(pHeader,",")-2 '= rsCount {
		s tReturn = 0
		if $P(pHeader,",",rsCount+3) '= ""{
			s tError = " on: "_$P(pHeader,",",rsCount+3)
		}else{
			s tError = " after: "_$P(pHeader,",",rsCount+2)
		}
	}else{
	
	for c=1:1:rsCount{
		
		s tProp = $P(pHeader,",",c+2)
		s tHeader = rs.GetColumnHeader(c)
		
		if tProp'=tHeader{
			s tReturn = 0
			s tError = " on: "_tProp_"/"_tHeader
			q
			}
	}
	}
	return tReturn_","_tError
	q
]]></Implementation>
</Method>

<Method name="ImportData">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFileName:%CSP.CharacterStream,pFileType:%String,pFileSize:%Integer</FormalSpec>
<ReturnType>%Status</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	//Write to audit log.
	do ..AuditChanges("ImportData","User Import: "_pFileType,$Get(%session.Data("tTable")),pFileSize)
	
	#dim tSC As %Status = $$$OK
	s tValidOBJ = $CLASSNAME(pFileName)

	if $P(pFileType,".",$L(pFileType,".")) = "csv"{
	
		s tStream = ##class(%GlobalCharacterStream).%New()
		
		if tValidOBJ = "%CSP.CharacterStream"{
			//For larger files use CopyFrom
			//Larger files will be passed as %CSP.CharacterStream reference to the page.
			d tStream.CopyFrom(pFileName)
		}else{
			//This is used with smaller files where the pFileName passes the value as a Text %String and will need to write to %GlobalCharacterStream
			d tStream.Write(pFileName)
		}
	
	//validate header before the data is processed.
	s tValidate = ..ValidateAttrHeader(tStream.ReadLine())
		
	if $P(tValidate,",",1)'=1{
		&js<alert("Header validation failed"+"#($P(tValidate,",",2))#");> q
		}
	
	
	//start data processing	
	s count = 0
	
	While 'tStream.AtEnd{
		s tLine = tStream.ReadLine()
		s tList = ##class(IIBAENSEMBLE.Functions).ParseCSV(tLine)
		s count = count +1
			
		if (count=1)
			{
			s colName = tList
			s colCount = $LL(tList)
			
			}
		
		for c=3:1:colCount {
	  
	 	       s pValue = $LG(tList,1)
	 	       s rValue = $LG(tList,2)
	 	       	 	         	    
	 	       		if (count >=1){
	 	          	     		
		          	    	s cellVal = $LG(tList,c)
	 	          	    	s colNum = c - 2
	 	          	      	if ((rValue '= "") && (pValue '= "")){
		 	          	      	//&js<alert("#(colNum)#"+","+"#(cellVal)#"+","+"#(rValue)#"+","+"#(pValue)#");>
		 	          	      	do ..Save(colNum,cellVal,rValue,pValue)
		 	          	      	
		 	          	      	}else{
			 	          	      	q
			 	          	      	}
	 	          	     	         	    
	 	          	    		}
							
							}
  	
					
								
	}
	
		
		&js<alert("Complete"); location.reload();>
			
			q $$$OK
	}else{
		&js<alert("Not in csv format: #($P(pFileType,".",$L(pFileType,".")))#");>
		q $$$OK
		
	}
]]></Implementation>
</Method>

<Method name="attrExport">
<ClassMethod>1</ClassMethod>
<FormalSpec>sRTID:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	//Write to audit log.
	do ..AuditChanges("attrExport","User Export: "_$Get(%session.Data("tTable")))
	
	#dim rs As %ResultSet
	s xRefTable = $Get(%session.Data("tTable"))
	
	//Use RefDownload to build download file with table name
	&js<
	var filename = "#(xRefTable)#"+".csv";
	//alert(filename);
	window.location = 'IIBAENSEMBLE.csp.RefDownload.cls?filename='+filename;
	>
	
	//Build file in manager directory
	s EnsSysDir = ##class(%File).ParentDirectoryName(##class(%File).ManagerDirectory())
	s filetimestamp = ##class(Ens.Util.Time).FormatDateTime("%Y%m%d%H%M%S")
	//s xRefExportsDir = ##class(%File).NormalizeDirectory(EnsSysDir_"xRefExports")
	
	
	if '##class(%File).DirectoryExists(EnsSysDir_"xRefExports") { 
		
		d ##class(%File).CreateDirectory(EnsSysDir_"xRefExports")
		 
	}

	s file = ##class(%File).%New(EnsSysDir_"xRefExports\"_xRefTable_".csv")
	d file.Open("WSN")
	
	set rs = ..BuildAttrTable(,"PValue")
	set rsCount = rs.GetColumnCount()
	set ColLines = ""
	for i=1:1:rsCount {
		
		set arrColNames(i)=rs.GetColumnName(i)
		set ColValues = rs.GetColumnName(i)
		set ColLines = ColLines_$C(34)_##class(IIBAENSEMBLE.Functions).StringReplace(ColValues,$C(34),$C(34,34))_$C(34)_","
		
	}
	if $P(ColLines,",",$L(ColLines,","))=""{s ColLines = $EXTRACT(ColLines,0,*-1)}
	d file.WriteLine(ColLines)
	While rs.Next() {
		set strLine = ""
		
		for i=1:1:rsCount {
			
			set strLine=strLine_$C(34)_##class(IIBAENSEMBLE.Functions).StringReplace(rs.Data(arrColNames(i)),$C(34),$C(34,34))_$C(34)_","
		
		}
		
		if $P(strLine,",",$L(strLine,","))=""{s strLine = $EXTRACT(strLine,0,*-1)}
		
		d file.WriteLine(strLine)
	
	}
	
	
	do rs.Close()
	d file.Close()
	
	kill file
	
	Quit xRefTable_".csv"
]]></Implementation>
</Method>

<Method name="SetFilter">
<ClassMethod>1</ClassMethod>
<FormalSpec>sel:%String</FormalSpec>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[	set %session.Data("tFilter") = sel
]]></Implementation>
</Method>

<Method name="BuildAttrTable">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pSC:%Status,ID:%String</FormalSpec>
<ReturnType>%ResultSet</ReturnType>
<ZenMethod>1</ZenMethod>
<Implementation><![CDATA[
	
	//dynamic sql is the preferred method for building tables. 
	
	#dim tAcls As %String = "" 
	#dim tPId As %String = ""
	#dim tPsys As %String = ""
	#dim tRsys As %String = ""
	#dim tTable As %String = ""
	#dim tResource as %String = ""
			
  	set tRefId = %request.Get("ID")
  	if tRefId = ""{s tRefId = $Get(%session.Data("tRefId"))}
  	
  	set rs = ""
  	set pSC = $$$OK
  
  	&sql(select attrClass into :tAcls from IIBAENSEMBLE_Reference.RelatedType where %ID = :tRefId)
	&sql(select PrincipalType into :tPId from IIBAENSEMBLE_Reference.RelatedType where %ID = :tRefId)
	&sql(select System, Resource into :tPsys, :tResource from IIBAENSEMBLE_Reference.PrincipalType where %ID = :tPId)
	&sql(select System into :tRsys from IIBAENSEMBLE_Reference.RelatedType where attrClass != "" and %ID = :tRefId)
	
	//search and replace to allow correct sql naming.
	s tPosition = $L(tAcls,".")-2
	s tTable = $REPLACE(tAcls,".","_",1,tPosition)
	
	
	  
	set sql = "SELECT PValue As "_tPsys_", RValue As "_tRsys_","_tTable_".*"
	set sql = sql_"FROM IIBAENSEMBLE_Reference.PrincipalValue "
	set sql = sql_"JOIN IIBAENSEMBLE_Reference.RelatedValue ON IIBAENSEMBLE_Reference.PrincipalValue.%ID = IIBAENSEMBLE_Reference.RelatedValue.PrincipalValue "
	set sql = sql_"JOIN IIBAENSEMBLE_Reference.RelatedType ON IIBAENSEMBLE_Reference.RelatedValue.RelatedType = IIBAENSEMBLE_Reference.RelatedType.%ID "
	set sql = sql_"AND attrClass = '"_tAcls_"' LEFT JOIN "_tTable_" ON IIBAENSEMBLE_Reference.RelatedValue.attrID = "_tTable_".%ID order by PValue"
 
	set rs = ##class(%ResultSet).%New("%DynamicQuery:SQL")   
	set pSC = rs.Prepare(sql)
	set pSC = rs.Execute()
	
	
	set %session.Data("tTable") = tAcls
	set %session.Data("tResource") = tResource
	set %session.Data("tRefId") = tRefId
	  	
  Quit rs
]]></Implementation>
</Method>

<Method name="GetGridData">
<FormalSpec><![CDATA[&pParameters,*pMetaData,*pData]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
 #dim tSC As %Status = $$$OK
 
 set rs = ..BuildAttrTable(,"PValue")
 set tSC = ..ParseHeaderString(rs,.pMetaData)
 set tSC = ..ParseDataString(rs,.pData)
 set ..Table = $Get(%session.Data("tTable"))
 
 Quit tSC
]]></Implementation>
</Method>

<Method name="ParseHeaderString">
<ClassMethod>1</ClassMethod>
<FormalSpec>pResultSet:%ResultSet,*pHeader</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tSC as %Status = $$$OK
	set cnt = 1
	set cnt1 = pResultSet.GetColumnCount()
	set tCol = ""
	
	for c=1:1:cnt1
	{
		set tCol = tCol_pResultSet.GetColumnHeader(c)
		if c'=cnt1
		{
			set tCol = tCol_$CHAR(2)
		}
							
	}
			
	set pHeader = $LFS(tCol,$CHAR(2))					
	Quit tSC
]]></Implementation>
</Method>

<Method name="ParseDataString">
<ClassMethod>1</ClassMethod>
<FormalSpec>pResultSet:%ResultSet,*pData</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tSC as %Status = $$$OK
	set cnt = 1
	set cnt1 = pResultSet.GetColumnCount()
	set tCol = ""
	
	While pResultSet.Next()
	{
		
		s tList = ""
		for c=1:1:cnt1
		{
			//get each line of the resultset
			set tList = tList_pResultSet.GetData(c)
			if c'=cnt1
			{
				set tList = tList_$CHAR(3)
			}
							
		}
		set pData(cnt) = $LFS(tList,$CHAR(3))
		set cnt = cnt +1	
	}	
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="AuditChanges">
<ClassMethod>1</ClassMethod>
<FormalSpec>method:%String,Description:%String="",pTable:%String="",pfilesize:%String="",pValue:%String="",rValue:%String=""</FormalSpec>
<Implementation><![CDATA[
		
	if $L(Description)>128
		set Description = $E(Description,1,128)
	set Source = "IIBAENSEMBLE.Zen.xRefAttrPage"
	set Type = "TablexRefAttr"
	set Name = "Edit"
	set EventData = "{""method"":"""_method_""",""PValue"":"""_pValue_""",""RValue"":"""_rValue_""",""Table"":"""_pTable_""",""FileSize"":"""_pfilesize_"""}"
	d $SYSTEM.Security.Audit(Source,Type,Name,EventData,Description)
	//JSON---{"method":"rowEditSave","PTName":"MyRefTable","PTId":"1","RTSystem":"","RTId":"","PValue":"dtest","PVId":"50","RValue":"","RVId":""}
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.Zen.xRefAuditList">
<Description>
xRef Audit List View.</Description>
<Super>IIBAENSEMBLE.Zen.ToolkitTemplate</Super>
<TimeChanged>63271,40913.421355</TimeChanged>
<TimeCreated>63252,61803.739939</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>IIBAENSEMBLE.Zen.Toolkit</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>xRef Audit List</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">

table.tpTable {
    background: none repeat scroll 0 0 #FFFFFF;
    border: 1px solid #000000;
    empty-cells: show;
    font-family: Verdana;
	font-size: .6em;
    table-layout: fixed;
    width: 100%;
}
.tpEven {
    color: #0C202A;
    background: #A6DBF9;
}
.tpOdd {
    color: #0C202A;
}
</style>
]]></Data>
</XData>

<XData name="tablePane">
<Description>
This XML block defines the contents of this pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane>
<tableNavigatorBar tablePaneId="auditTable" showPageSize="true" width="70%" />
<tablePane showQuery="false" id="auditTable" tableName="%SYS.Audit"  orderByClause="UTCTimeStamp DESC"
useSnapshot="true"  
pageSize="25" 
maxRows="500"
filtersDisabled="true"
width="90%"
nowrap="false"
showZebra="true" >
    <column colName="ID" hidden="true"/>
    <column colName="AuditIndex" hidden="true"/>
	<column colName="UTCTimeStamp"/>
	<column colName="Username" 
	cellTitle="Ensemle User Login" 
	style="font-weight:bold;" 
	/>
	<column colName="OSUsername" cellTitle="OS User Login" hidden="true"/>
	<column colName="UserInfo"  hidden="true"/>	
	<column colName="CSPSessionID"/>
	<column colName="ClientExecutableName" hidden="true"/>
	<column colName="ClientIPAddress"/>
	<column colName="Description"/>
	<column colName="Event"/>
	<column colName="EventData"/>
	<column colName="EventSource" hidden="true"/>
	<column colName="EventType" hidden="false" filterValue="xRef" />
	<column colName="GroupName" hidden="true"/>
	<column colName="Namespace" />
	<column colName="Roles"/>
	<column colName="RoutineSpec" hidden="true"/>
	<column colName="Status"/>
	<column colName="SystemID"/>
	<column colName="x__classname" hidden="true"/>
</tablePane>
</pane>
]]></Data>
</XData>

<XData name="detailPane">
<Description>
This XML block defines the contents of this pane.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<pane xmlns="http://www.intersystems.com/zen">
<html></html>
</pane>
]]></Data>
</XData>

<Method name="GetUsers">
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set rs = ##class(%ResultSet).%New("Security.Users:Detail")
	do rs.Execute("*","*","*")
	set sNames=""
	set counter=1
	While rs.Next() {
		set sName = rs.Data("Name")
		set $P(sNames,counter,",")=sName
		set counter=counter+1		
	}
	
	quit sNames
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
	Method onfilterChange(FilterValue as %String) as %Status
	{
		Set obj=%page.%GetComponentById("auditTable")
	}*/
]]></Content>
</UDLText>
</Class>


<Class name="IIBAENSEMBLE.bp.PreProcess">
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>63623,61596.146213</TimeChanged>
<TimeCreated>63291,51746.642807</TimeCreated>

<Property name="RoutableFieldsTable">
<Description>
Name of the lookup table with fields on which to route</Description>
<Type>%String</Type>
</Property>

<Property name="RoutingTargetsTable">
<Description>
Name of the lookup table to map routing field values to targets</Description>
<Type>%String</Type>
</Property>

<Parameter name="SETTINGS">
<Type>%String</Type>
<Default>RoutableFieldsTable,RoutingTargetsTable</Default>
</Parameter>

<Method name="OnInit">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #DIM tSC as %Status

	//Set up lookups for routing
	s ^||RoutableFields = ""
	s ^||RoutingTargets = ""
	
	If ..RoutableFieldsTable="" 
    {
    	$$$LOGERROR("No value specified for Routable Fields Table. Initialization failed.'")
    	return -1
    }
	s tSC = ..getRoutableFields()
	If $SYSTEM.Status.IsError(tSC) // if there was an error, process that
     {
     	$$$LOGERROR("Error for Routable Fields Table '"_..RoutableFieldsTable_"' during process initialization") // perform error processing
     }
    
    If ..RoutingTargetsTable="" 
    {
    	$$$LOGERROR("No value specified for Routable Targets Table. Initialization failed.'")
    }
	s tSC = ..getRoutingTargets()
	If $SYSTEM.Status.IsError(tSC) // if there was an error, process that
     {
     	$$$LOGERROR("Error for Routing Targets Table '"_..RoutingTargetsTable_"' during process initialization") // perform error processing
     	return -1
     }
     
     s tSC = ..dumpRoutingTable()
     $$$LOGERROR("Initialization complete.")
     Quit tSC
]]></Implementation>
</Method>

<Method name="OnRequest">
<FormalSpec>pRequest:Ens.Request,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #Dim tSC as %Status
    #Dim alreadyRoutedTo as %String = ""
    #Dim segmentSpec as %String
    #Dim fieldSpec as %String
    
    set tSC = $$$OK
    
	//Iterate over all the routable fields
	Set currentFieldSubscript = $Order(^||RoutableFields(""))
	While (currentFieldSubscript '= "") {
		Set pathToField = ^||RoutableFields(currentFieldSubscript)
		$$$TRACE("Processing value from "_pathToField)
		
		//See if this field should process repeats
		set fieldSpec = $p(pathToField, ":",2)	//Get just the field part of the path
		if $f(fieldSpec, "()") '= 0
		{
			set segmentSpec = $p(pathToField, ":",1)_":"	//Get just the segment part of the path
			set splitField = $ListFromString(fieldSpec, "()")  //Split the field spec around the "()"
			
			//Create virtual path to retrieve repeat value count
			set sTemp = segmentSpec_$P(fieldSpec, "()", 1)_"(*)"
			$$$TRACE("Count retrieved by "_sTemp_" = '"_pRequest.GetValueAt(sTemp)_"'")
			
			// Iterate over the repeat values for this field
			for k1=1:1:pRequest.GetValueAt(sTemp) 
			{
				// Build virtual path to current value
				set sTemp = segmentSpec_$ListToString(splitField, "("_k1_")")
				
				//We can finally attempt to route it
				set tSC = ..doRouting(pRequest, sTemp, .alreadyRoutedTo)
			}
		} 
		else
		{
			set tSC = ..doRouting(pRequest, pathToField, .alreadyRoutedTo)
		}
		
		q:$$$ISERR(tSC)
		// get subscript for next field specification
		Set currentFieldSubscript = $Order(^||RoutableFields(currentFieldSubscript))
	}
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="doRouting">
<Description>
Handles routing to all specified targets of the specified value.
If supplied, will first check current target against the array in alreadyRoutedTo
If the current target exists as a subscript in this array, will not route an additional copy</Description>
<FormalSpec>pRequest:Ens.Request,pathToField:%String,*alreadyRoutedTo</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#Dim tSC as %Status
	#Dim routableValue As %String
	
	set tSC = $$$OK
	//get the field value
	Set routableValue = pRequest.GetValueAt(pathToField)
	if routableValue '= "" 
	{
		$$$TRACE("Retrieved value: '"_routableValue_"'")
		
		set routingTarget = $Order(^||RoutingTargets(routableValue, ""))
		$$$TRACE("Initial target : '"_routingTarget_"'")
		while routingTarget '= ""
		{
			if $Data(alreadyRoutedTo($ZCONVERT(routingTarget,"U"))) = 0 
			{
				$$$TRACE("Routing message to "_routingTarget)
				Set tSC = ..SendRequestAsync(routingTarget,pRequest,0)
				q:$$$ISERR(tSC)
  			
    			// Add to array of already-routed values
				Set alreadyRoutedTo($ZCONVERT(routingTarget,"U")) = "1"
			} 
			else 
			{
				$$$TRACE("Already routed to "_routingTarget)
			}
			
			q:$$$ISERR(tSC)
			set routingTarget = $Order(^||RoutingTargets(routableValue, routingTarget))
		}
		
		q:$$$ISERR(tSC)
		// Add to array of already-routed values
		Set alreadyRoutedTo($ZCONVERT(routableValue,"U")) = "1"
	}
	else 
	{
		$$$TRACE("No value gotten at "_pathToField)
	}
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="getRoutableFields">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set rset = ##class(%ResultSet).%New()
	Do rset.Prepare("SELECT LeftID1, LeftID2, RightID FROM IIBAENSEMBLE.LookupTable WHERE LeftID1 NOT LIKE '.%' AND LookupID = '"_..RoutableFieldsTable_"'")
	
	set sc = rset.Execute()
 	While (rset.Next(.sc)) {
		If ($SYSTEM.Status.IsOK(sc)) // check if this succeeded without errors
            {
	        set ^||RoutableFields($get(rset.Data("LeftID1"))) = $get(rset.Data("RightID"))
	        }
        Else // if there was an error, break out of the While loop
            {
            Quit
            }		
	}
	
	If $SYSTEM.Status.IsError(sc) // if there was an error, process that
    	{
     	$$$LOGERROR("Table Lookup Error in getRoutableFields()") // perform error processing
     	}
     
	Quit sc
]]></Implementation>
</Method>

<Method name="getRoutingTargets">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set rset = ##class(%ResultSet).%New()
	Do rset.Prepare("SELECT LeftID1, LeftID2, RightID FROM IIBAENSEMBLE.LookupTable WHERE LeftID1 NOT LIKE '.%' AND LookupID = '"_..RoutingTargetsTable_"'")
	
	set sc = rset.Execute()
	While (rset.Next(.sc)) {
		If ($SYSTEM.Status.IsOK(sc)) // check if this succeeded without errors
		{
			s RoutingTarget = $get(rset.Data("LeftID1"))
			s refType = $get(rset.Data("LeftID2"))
			s value = $get(rset.Data("RightID"))
			
			// See what sort of value we have in the LeftID2 value
			if refType = "CLIENT" {
				// Processs directly as comma separated values
				set lenValList = $L(value,",")
				for i=1:1:lenValList {
					set nextKey = $p(value,",",i)
					if nextKey="" {
						$$$LOGERROR("Attempted to create routing target for an empty ID<br>RoutingTarget: "_RoutingTarget_"<br>value: "_value)
					} else {
						set ^||RoutingTargets(nextKey, RoutingTarget) = ""
					}
				}
			} elseif refType = "TABLE" {
				// go read the values from the indicated table
				set sc = ..LoadFromTable(value, RoutingTarget)
				If $SYSTEM.Status.IsError(sc) // if there was an error, log it and exit
    				{
     				$$$LOGERROR("Table Lookup Error in getRoutingTargets()") // perform error processing
     				Quit
			     	}
			} elseif refType = "XREF" {
				// go read the values from the indicated table
				set sc = ..LoadFromXref($p(value,"^",1),$p(value,"^",2),RoutingTarget)
				If $SYSTEM.Status.IsError(sc) // if there was an error, log it and exit
    				{
     				$$$LOGERROR("Cross reference table error in getRoutingTargets()") // perform error processing
     				Quit
			     	}
			}
			else {
				w "INVALID VALUE FOR REFERENCE TYPE: "_refType
			}
		}
		Else // if there was an error, break out of the While loop 
		{	
			$$$LOGERROR("Table Lookup Error in getRoutingTargets()") // perform error processing
			Quit
		}		
	}
	q sc
]]></Implementation>
</Method>

<Method name="LoadFromTable">
<FormalSpec>tableName,RoutingTarget</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set rset = ##class(%ResultSet).%New()
	Do rset.Prepare("SELECT LeftID1 FROM IIBAENSEMBLE.LookupTable WHERE LeftID1 NOT LIKE '.%' AND LookupID = '"_tableName_"'")
	
	set sc = rset.Execute()
	While (rset.Next(.sc)) {
		If ($SYSTEM.Status.IsOK(sc)) // check if this succeeded without errors
			{
				s clientID = $get(rset.Data("LeftID1"))
				s ^||RoutingTargets(clientID,RoutingTarget) = ""
			}
		Else // if there was an error, break out of the While loop
			{
				$$$LOGERROR("Table Lookup Error in LoadFromTable()") // perform error processing
				Quit
			}		
	}
	q sc
]]></Implementation>
</Method>

<Method name="LoadFromXref">
<FormalSpec>tableName,columnName,RoutingTarget</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Make sure we have clean input
	if (tableName="")||(columnName="") {
		$$$LOGERROR("LoadFromXref called with invalid values;Table Name:"_tableName_"Column Name:"_columnName) // perform error processing
		return 0
	}
	
	Set rset = ##class(%ResultSet).%New()
	set queryString = "SELECT RValue FROM IIBAENSEMBLE_Reference.RelatedValue "
	set queryString = queryString_"WHERE PrincipalValue->PrincipalType->Name='"_tableName_"' AND "
	set queryString = queryString_"RelatedType->System='"_columnName_"'"
	Do rset.Prepare(queryString)
	
	set sc = rset.Execute()
	While (rset.Next(.sc)) {
		If ($SYSTEM.Status.IsOK(sc)) // check if this succeeded without errors
			{
				s clientID = $get(rset.Data("RValue"))
				s ^||RoutingTargets(clientID,RoutingTarget) = ""
			}
		Else // if there was an error, break out of the While loop
			{
				$$$LOGERROR("Table Lookup Error in LoadFromXref()") // perform error processing
				Quit
			}		
	}
	q sc
]]></Implementation>
</Method>

<Method name="dumpRoutingTable">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#Dim tSC as %Status
	#Dim routableValue As %String
	
	set tSC = $$$OK
	//get the field value
	Set routableValue = $Order(^||RoutingTargets(""))
	if routableValue = "" 
	{
		$$$TRACE("Top level of RoutingTargets was empty")
	} 
	while routableValue '= ""
	{
		$$$TRACE("Routable value: '"_routableValue_"'")
		
		set routingTarget = $Order(^||RoutingTargets(routableValue, ""))
		while routingTarget '= ""
		{
			$$$TRACE("Routing target: '"_routingTarget_"'")
			set routingTarget = $Order(^||RoutingTargets(routableValue, routingTarget))
		}
		
		Set routableValue = $Order(^||RoutingTargets(routableValue))
	
	}
	
	Quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>PreProcessDefaultData</DefaultData>
<Data name="PreProcessDefaultData">
<Subscript>"PreProcess"</Subscript>
<Value name="1">
<Value>RoutableFieldsTable</Value>
</Value>
<Value name="2">
<Value>RoutingTargetsTable</Value>
</Value>
<Value name="3">
<Value>RoutableFields</Value>
</Value>
<Value name="4">
<Value>RoutingTargets</Value>
</Value>
</Data>
<Data name="alreadyRoutedTo">
<Attribute>alreadyRoutedTo</Attribute>
<Structure>subnode</Structure>
<Subscript>"IIBAENSEMBLE.bp.PreProcess.alreadyRoutedTo"</Subscript>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.bp.PreProcessDEBUG">
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>63358,43103</TimeChanged>
<TimeCreated>63291,51746.642807</TimeCreated>

<Property name="RoutableFieldsTable">
<Description>
Name of the lookup table with fields on which to route</Description>
<Type>%String</Type>
</Property>

<Property name="RoutingTargetsTable">
<Description>
Name of the lookup table to map routing field values to targets</Description>
<Type>%String</Type>
</Property>

<Parameter name="SETTINGS">
<Type>%String</Type>
<Default>RoutableFieldsTable,RoutingTargetsTable</Default>
</Parameter>

<Method name="OnInit">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #DIM tSC as %Status

	//Set up lookups for routing
	s ^||RoutableFields = ""
	s ^||RoutingTargets = ""
	
	//s tSC = ..getTableValues("INCYTE RESULTS ROUTABLE FIELDS", "^||RoutableFields", 0)
	s tSC = ..getTableValues(..RoutableFieldsTable, "^||RoutableFields", 0)
	If $SYSTEM.Status.IsError(tSC) // if there was an error, process that
     {
     	$$$LOGERROR("Error for Routable Fields Table '"_..RoutableFieldsTable_"' during process initialization") // perform error processing
     }
     
    //s tSC = ..getTableValues("INCYTE RESULTS ROUTING", "^||RoutingTargets", 1)
	s tSC = ..getTableValues(..RoutingTargetsTable, "^||RoutingTargets", 1)
	If $SYSTEM.Status.IsError(tSC) // if there was an error, process that
     {
     	$$$LOGERROR("Error for Routing Targets Table '"_..RoutingTargetsTable_"' during process initialization") // perform error processing
     }
     
     Quit tSC
]]></Implementation>
</Method>

<Method name="OnRequest">
<FormalSpec>pRequest:Ens.Request,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #Dim tSC as %Status
    #Dim alreadyRoutedTo as %String
    #Dim segmentSpec as %String
    #Dim fieldSpec as %String
    
    // Array for already-routed values to avoid duplicates
    Kill alreadyRoutedTo
	Set alreadyRoutedTo = ""

	//Iterate over all the routable fields
	Set currentFieldSubscript = $Order(^||RoutableFields(""))
	While (currentFieldSubscript '= "") {
		Set pathToField = ^||RoutableFields(currentFieldSubscript)
		$$$TRACE("Processing value from "_pathToField)
		
		//See if this field should process repeats
		set fieldSpec = $p(pathToField, ":",2)	//Get just the field part of the path
		if $f(fieldSpec, "()") '= 0
		{
			set segmentSpec = $p(pathToField, ":",1)_":"	//Get just the segment part of the path
			set splitField = $ListFromString(fieldSpec, "()")  //Split the field spec around the "()"
			
			//Create virtual path to retrieve repeat value count
			set sTemp = segmentSpec_$P(fieldSpec, "()", 1)_"(*)"
			$$$TRACE("Count retrieved by "_sTemp_" = '"_pRequest.GetValueAt(sTemp)_"'")
			
			// Iterate over the repeat values for this field
			for k1=1:1:pRequest.GetValueAt(sTemp) 
			{
				// Build virtual path to current value
				set sTemp = segmentSpec_$ListToString(splitField, "("_k1_")")
				
				//We can finally attempt to route it
				set tSC = ..doRouting(pRequest, sTemp, .alreadyRoutedTo)
			}
		} 
		else
		{
			set tSC = ..doRouting(pRequest, pathToField, .alreadyRoutedTo)
		}
		
		// get subscript for next field specification
		Set currentFieldSubscript = $Order(^||RoutableFields(currentFieldSubscript))
	}
	
	set tSC = $$$OK
	Quit tSC
]]></Implementation>
</Method>

<Method name="doRouting">
<Description>
Handles routing to all specified targets of the specified value.
If supplied, will first check current target against the array in alreadyRoutedTo
If the current target exists as a subscript in this array, will not route an additional copy</Description>
<FormalSpec>pRequest:Ens.Request,pathToField:%String,*alreadyRoutedTo</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#Dim tSC as %Status
	#Dim routableValue As %String
	
	set tSC = $$$OK
	//get the field value
	Set routableValue = pRequest.GetValueAt(pathToField)
	if routableValue '= "" 
	{
		$$$TRACE("Retrieved value: '"_routableValue_"'")
		
		set routingTarget = $Order(^||RoutingTargets(routableValue, ""))
		$$$TRACE("Initial target : '"_routingTarget_"'")
		while routingTarget '= ""
		{
			if $Data(alreadyRoutedTo($ZCONVERT(routingTarget,"U"))) = 0 
			{
				$$$TRACE("Routing message to "_routingTarget)
				// Set tSC = ..SendRequestAsync(routingTarget,pRequest,0)
				// if $$$ISERR(tSC) $$$LOGERROR(tSC)
  			
    			// Add to array of already-routed values
				Set alreadyRoutedTo($ZCONVERT(routingTarget,"U")) = "1"
			} 
			else 
			{
				$$$TRACE("Already routed to "_routingTarget)
			}

			set routingTarget = $Order(^||RoutingTargets(routableValue, routingTarget))
		}		
		
		// Add to array of already-routed values
		Set alreadyRoutedTo($ZCONVERT(routableValue,"U")) = "1"
	}
	else 
	{
		$$$TRACE("No value gotten at "_pathToField)
	}
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="getTableValues">
<ClassMethod>1</ClassMethod>
<FormalSpec>tableName:%String="",returnValue,isMultiValue</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// k returnValue
	
	Set rset = ##class(%ResultSet).%New()
	Do rset.Prepare("SELECT LeftID1, LeftID2, RightID FROM IIBAENSEMBLE.LookupTable WHERE LeftID1 NOT LIKE '.%' AND LookupID = '"_tableName_"'")
	
	set sc = rset.Execute()
 	While (rset.Next(.sc)) {
		If ($SYSTEM.Status.IsOK(sc)) // check if this succeeded without errors
            {
	            if isMultiValue {
	            	set @returnValue@($get(rset.Data("LeftID1")),$get(rset.Data("RightID"))) = ""
	            } else {
		            set @returnValue@($get(rset.Data("LeftID1"))) = $get(rset.Data("RightID"))
	            }
            }
        Else // if there was an error, break out of the While loop
            {
                Quit
            }		
	}
	
	If $SYSTEM.Status.IsError(sc) // if there was an error, process that
     {
     $$$LOGERROR("Table Lookup Error in getTableValues()") // perform error processing
     }
     
	Quit sc
]]></Implementation>
</Method>

<Method name="dumpArray">
<ClassMethod>1</ClassMethod>
<FormalSpec>toDump</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set a = ""
	for {
		set a = $Order(@toDump@(a))
		q:a=""
		w a," data is ", $d(@toDump@(a)),!
		if ($d(@toDump@(a))=1) {
			w toDump,"(",a,")=",@toDump@(a),!
		} else {
			set b = ""
			for {
				set b = $Order(@toDump@(a,b))
				q:b=""
				w "A=",a,!,"B=","'",b,"'",!," data is ", $d(@toDump@(a,b)),!
				w b,"=",@toDump@(a,b),!
			}
		}
	}
	quit 1
]]></Implementation>
</Method>

<Method name="fakeInit">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#DIM tSC as %Status
	
	//Set up lookups for routing
	k ^||RoutableFields
	s ^||RoutableFields = ""
	k ^||RoutingTargets
	s ^||RoutingTargets = ""
	
	s tSC = ..getTableValues("INCYTE RESULTS ROUTABLE FIELDS", "^||RoutableFields", 0)
	w "RoutableFields Finished",!
	s tSC = ..dumpArray("^||RoutableFields")

	s tSC = ..getTableValues("INCYTE RESULTS ROUTING", "^||RoutingTargets", 1)
	w "RoutingTargets Finished",!
	s tSC = ..dumpArray("^||RoutingTargets")
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>PreProcessDEBUGDefaultData</DefaultData>
<Data name="PreProcessDEBUGDefaultData">
<Structure>listnode</Structure>
<Subscript>"PreProcessDEBUG"</Subscript>
<Value name="1">
<Value>RoutableFieldsTable</Value>
</Value>
<Value name="2">
<Value>RoutingTargetsTable</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.bp.PreProcessTest">
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>63735,29557.641697</TimeChanged>
<TimeCreated>63291,51746.642807</TimeCreated>

<Property name="RoutableFieldsTable">
<Description>
Name of the lookup table with fields on which to route</Description>
<Type>%String</Type>
</Property>

<Property name="RoutingTargetsTable">
<Description>
Name of the lookup table to map routing field values to targets</Description>
<Type>%String</Type>
</Property>

<Parameter name="SETTINGS">
<Type>%String</Type>
<Default>RoutableFieldsTable,RoutingTargetsTable</Default>
</Parameter>

<Method name="OnInit">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #DIM tSC as %Status

	//Set up lookups for routing
	s ^||RoutableFields = ""
	s ^||RoutingTargets = ""
	
	If ..RoutableFieldsTable="" 
    {
    	$$$LOGERROR("No value specified for Routable Fields Table. Initialization failed.'")
    	return -1
    }
	s tSC = ..getRoutableFields()
	If $SYSTEM.Status.IsError(tSC) // if there was an error, process that
     {
     	$$$LOGERROR("Error for Routable Fields Table '"_..RoutableFieldsTable_"' during process initialization") // perform error processing
     }
    
    If ..RoutingTargetsTable="" 
    {
    	$$$LOGERROR("No value specified for Routable Targets Table. Initialization failed.'")
    }
	s tSC = ..getRoutingTargets()
	If $SYSTEM.Status.IsError(tSC) // if there was an error, process that
     {
     	$$$LOGERROR("Error for Routing Targets Table '"_..RoutingTargetsTable_"' during process initialization") // perform error processing
     	return -1
     }
     
     s tSC = ..dumpRoutingTable()
     $$$TRACE("Initialization complete.")
     Quit tSC
]]></Implementation>
</Method>

<Method name="OnRequest">
<FormalSpec>pRequest:Ens.Request,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    #Dim tSC as %Status
    #Dim alreadyRoutedTo as %String = ""
    #Dim segmentSpec as %String
    #Dim fieldSpec as %String
    
    set tSC = $$$OK
    
	//Iterate over all the routable fields
	Set currentFieldSubscript = $Order(^||RoutableFields(""))
	While (currentFieldSubscript '= "") {
		Set pathToField = ^||RoutableFields(currentFieldSubscript)
		$$$TRACE("Processing value from "_pathToField)
		
		//See if this field should process repeats
		set fieldSpec = $p(pathToField, ":",2)	//Get just the field part of the path
		if $f(fieldSpec, "()") '= 0
		{
			set segmentSpec = $p(pathToField, ":",1)_":"	//Get just the segment part of the path
			set splitField = $ListFromString(fieldSpec, "()")  //Split the field spec around the "()"
			
			//Create virtual path to retrieve repeat value count
			set sTemp = segmentSpec_$P(fieldSpec, "()", 1)_"(*)"
			$$$TRACE("Count retrieved by "_sTemp_" = '"_pRequest.GetValueAt(sTemp)_"'")
			
			// Iterate over the repeat values for this field
			for k1=1:1:pRequest.GetValueAt(sTemp) 
			{
				// Build virtual path to current value
				set sTemp = segmentSpec_$ListToString(splitField, "("_k1_")")
				
				//We can finally attempt to route it
				set tSC = ..doRouting(pRequest, sTemp, .alreadyRoutedTo)
			}
		} 
		else
		{
			set tSC = ..doRouting(pRequest, pathToField, .alreadyRoutedTo)
		}
		
		q:$$$ISERR(tSC)
		// get subscript for next field specification
		Set currentFieldSubscript = $Order(^||RoutableFields(currentFieldSubscript))
	}
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="doRouting">
<Description>
Handles routing to all specified targets of the specified value.
If supplied, will first check current target against the array in alreadyRoutedTo
If the current target exists as a subscript in this array, will not route an additional copy</Description>
<FormalSpec>pRequest:Ens.Request,pathToField:%String,*alreadyRoutedTo</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#Dim tSC as %Status
	#Dim routableValue As %String
	
	set tSC = $$$OK
	//get the field value
	Set routableValue = pRequest.GetValueAt(pathToField)
	if routableValue '= "" 
	{
		$$$TRACE("Retrieved value: '"_routableValue_"'")
		
		set routingTarget = $Order(^||RoutingTargets(routableValue, ""))
		$$$TRACE("Initial target : '"_routingTarget_"'")
		while routingTarget '= ""
		{
			if $Data(alreadyRoutedTo($ZCONVERT(routingTarget,"U"))) = 0 
			{
				$$$TRACE("Routing message to "_routingTarget)
				// Set tSC = ..SendRequestAsync(routingTarget,pRequest,0)
				q:$$$ISERR(tSC)
  			
    			// Add to array of already-routed values
				Set alreadyRoutedTo($ZCONVERT(routingTarget,"U")) = "1"
			} 
			else 
			{
				$$$TRACE("Already routed to "_routingTarget)
			}
			
			q:$$$ISERR(tSC)
			set routingTarget = $Order(^||RoutingTargets(routableValue, routingTarget))
		}
		
		q:$$$ISERR(tSC)
		// Add to array of already-routed values
		Set alreadyRoutedTo($ZCONVERT(routableValue,"U")) = "1"
	}
	else 
	{
		$$$TRACE("No value gotten at "_pathToField)
	}
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="getRoutableFields">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set rset = ##class(%ResultSet).%New()
	Do rset.Prepare("SELECT LeftID1, LeftID2, RightID FROM IIBAENSEMBLE.LookupTable WHERE LeftID1 NOT LIKE '.%' AND LookupID = '"_..RoutableFieldsTable_"'")
	
	set sc = rset.Execute()
 	While (rset.Next(.sc)) {
		If ($SYSTEM.Status.IsOK(sc)) // check if this succeeded without errors
            {
	        set ^||RoutableFields($get(rset.Data("LeftID1"))) = $get(rset.Data("RightID"))
	        }
        Else // if there was an error, break out of the While loop
            {
            Quit
            }		
	}
	
	If $SYSTEM.Status.IsError(sc) // if there was an error, process that
    	{
     	$$$LOGERROR("Table Lookup Error in getRoutableFields()") // perform error processing
     	}
     
	Quit sc
]]></Implementation>
</Method>

<Method name="getRoutingTargets">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set rset = ##class(%ResultSet).%New()
	Do rset.Prepare("SELECT LeftID1, LeftID2, RightID FROM IIBAENSEMBLE.LookupTable WHERE LeftID1 NOT LIKE '.%' AND LookupID = '"_..RoutingTargetsTable_"'")
	
	set sc = rset.Execute()
	While (rset.Next(.sc)) {
		If ($SYSTEM.Status.IsOK(sc)) // check if this succeeded without errors
		{
			s RoutingTarget = $get(rset.Data("LeftID1"))
			s refType = $get(rset.Data("LeftID2"))
			s value = $get(rset.Data("RightID"))
			
			// See what sort of value we have in the LeftID2 value
			if refType = "CLIENT" {
				// Processs directly as comma separated values
				set lenValList = $L(value,",")
				for i=1:1:lenValList {
					set nextKey = $p(value,",",i)
					if nextKey="" {
						$$$LOGERROR("Attempted to create routing target for an empty ID<br>RoutingTarget: "_RoutingTarget_"<br>value: "_value)
					} else {
						set ^||RoutingTargets(nextKey, RoutingTarget) = ""
					}
				}
			} elseif refType = "TABLE" {
				// go read the values from the indicated table
				set sc = ..LoadFromTable(value, RoutingTarget)
				If $SYSTEM.Status.IsError(sc) // if there was an error, log it and exit
    				{
     				$$$LOGERROR("Table Lookup Error in getRoutingTargets()") // perform error processing
     				Quit
			     	}
			} elseif refType = "XREF" {
				// go read the values from the indicated table
				set sc = ..LoadFromXref($p(value,"^",1),$p(value,"^",2),RoutingTarget)
				If $SYSTEM.Status.IsError(sc) // if there was an error, log it and exit
    				{
     				$$$LOGERROR("Cross reference table error in getRoutingTargets()") // perform error processing
     				Quit
			     	}
			}
			else {
				w "INVALID VALUE FOR REFERENCE TYPE: "_refType
			}
		}
		Else // if there was an error, break out of the While loop 
		{	
			$$$LOGERROR("Table Lookup Error in getRoutingTargets()") // perform error processing
			Quit
		}		
	}
	q sc
]]></Implementation>
</Method>

<Method name="LoadFromTable">
<FormalSpec>tableName,RoutingTarget</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set rset = ##class(%ResultSet).%New()
	Do rset.Prepare("SELECT LeftID1 FROM IIBAENSEMBLE.LookupTable WHERE LeftID1 NOT LIKE '.%' AND LookupID = '"_tableName_"'")
	
	set sc = rset.Execute()
	While (rset.Next(.sc)) {
		If ($SYSTEM.Status.IsOK(sc)) // check if this succeeded without errors
			{
				s clientID = $get(rset.Data("LeftID1"))
				s ^||RoutingTargets(clientID,RoutingTarget) = ""
			}
		Else // if there was an error, break out of the While loop
			{
				$$$LOGERROR("Table Lookup Error in LoadFromTable()") // perform error processing
				Quit
			}		
	}
	q sc
]]></Implementation>
</Method>

<Method name="LoadFromXref">
<FormalSpec>tableName,columnName,RoutingTarget</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	// Make sure we have clean input
	if (tableName="")||(columnName="") {
		$$$LOGERROR("LoadFromXref called with invalid values;Table Name:"_tableName_"Column Name:"_columnName) // perform error processing
		return 0
	}
	
	Set rset = ##class(%ResultSet).%New()
	set queryString = "SELECT RValue FROM IIBAENSEMBLE_Reference.RelatedValue "
	set queryString = queryString_"WHERE PrincipalValue->PrincipalType->Name='"_tableName_"' AND "
	set queryString = queryString_"RelatedType->System='"_columnName_"'"
	Do rset.Prepare(queryString)
	
	set sc = rset.Execute()
	While (rset.Next(.sc)) {
		If ($SYSTEM.Status.IsOK(sc)) // check if this succeeded without errors
			{
				s clientID = $get(rset.Data("RValue"))
				s ^||RoutingTargets(clientID,RoutingTarget) = ""
			}
		Else // if there was an error, break out of the While loop
			{
				$$$LOGERROR("Table Lookup Error in LoadFromXref()") // perform error processing
				Quit
			}		
	}
	q sc
]]></Implementation>
</Method>

<Method name="dumpRoutingTable">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#Dim tSC as %Status
	#Dim routableValue As %String
	
	set tSC = $$$OK
	//get the field value
	Set routableValue = $Order(^||RoutingTargets(""))
	if routableValue = "" 
	{
		$$$TRACE("Top level of RoutingTargets was empty")
	} 
	while routableValue '= ""
	{
		$$$TRACE("Routable value: '"_routableValue_"'")
		
		set routingTarget = $Order(^||RoutingTargets(routableValue, ""))
		while routingTarget '= ""
		{
			$$$TRACE("Routing target: '"_routingTarget_"'")
			set routingTarget = $Order(^||RoutingTargets(routableValue, routingTarget))
		}
		
		Set routableValue = $Order(^||RoutingTargets(routableValue))
	
	}
	
	Quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>PreProcessDefaultData</DefaultData>
<Data name="PreProcessDefaultData">
<Subscript>"PreProcess"</Subscript>
<Value name="1">
<Value>RoutableFieldsTable</Value>
</Value>
<Value name="2">
<Value>RoutingTargetsTable</Value>
</Value>
<Value name="3">
<Value>RoutableFields</Value>
</Value>
<Value name="4">
<Value>RoutingTargets</Value>
</Value>
</Data>
<Data name="alreadyRoutedTo">
<Attribute>alreadyRoutedTo</Attribute>
<Structure>subnode</Structure>
<Subscript>"IIBAENSEMBLE.bp.PreProcess.alreadyRoutedTo"</Subscript>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.cls.FixedWidth">
<Description>
In order to control width, justification, and filler character for a fixed width lines, specify the associated parameters in the property defintion.
Example: (JUSTIFIED = "L", FILLER = " ", MAXLEN = 12)
The MAXLEN parameter specifies the fixed width of the column
JUSTIFIED should be either L or R to specify left or right justified.  The default value is "L".
FILLER should be the filler character that is used to fill in columns to the specified fixed width.  The default value is " ".</Description>
<Super>%RegisteredObject</Super>
<TimeChanged>62074,33408.982041</TimeChanged>
<TimeCreated>61866,61418.705591</TimeCreated>

<Method name="FixedWidthLineToMsgObject">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pInput:%String,&pOutput:%RegisteredObject]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tSC As %Status = $$$OK
	#dim sMsgClsName As %String
	#dim sJustified As %String = "L"
	#dim sFiller As %String = " "
	#dim iMaxLen As %Integer = 0
	#dim iCurrentPosition As %Integer = 1
	#dim sCurrentValue As %String
	
	if '$ISOBJECT(pOutput) Quit $$$ERROR($$$GeneralError,"pOutput must be passed in as an instance of an object.")

	s sMsgClsName = $CLASSNAME(pOutput)
	
	Set rs = ##class(%ResultSet).%New()
	s tSC = rs.Prepare("Select Name, InitialExpression, Parameters from %Dictionary.PropertyDefinition where parent = '"_sMsgClsName_"' AND Name <> 'CreatedOn' Order by SequenceNumber")
	if $$$ISERR(tSC) Quit tSC
	d rs.Execute()
	
	While (rs.Next()) {
		//re-initialize the parameters to the default values for each property
		s sJustified = "L"
		s sFiller = " "
		s iMaxLen = 0
	
		s PropertyParams = rs.Data("Parameters")
		for i=1:1:$L(PropertyParams,",") { 
			if $P($P(PropertyParams,",",i),"=",1)="MAXLEN" {
				s iMaxLen = $P($P(PropertyParams,",",i),"=",2)
			}
			if $P($P(PropertyParams,",",i),"=",1)="JUSTIFIED" {
				s sJustified = $P($P(PropertyParams,",",i),"=",2)
			}
			if $P($P(PropertyParams,",",i),"=",1)="FILLER" {
				s sFiller = $P($P(PropertyParams,",",i),"=",2)
			}
		}
		
		s sCurrentValue = $E(pInput,iCurrentPosition,iCurrentPosition+iMaxLen-1)
		if sJustified = "L" {
			s sCurrentValue = $ZSTRIP(sCurrentValue,">",sFiller)
		} ElseIf sJustified = "R" {
			s sCurrentValue = $ZSTRIP(sCurrentValue,"<",sFiller)
		}
		s $PROPERTY(pOutput,rs.Data("Name")) = sCurrentValue
		s iCurrentPosition = iCurrentPosition+iMaxLen
	}
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="msgObjectToFixedWidthLine">
<ClassMethod>1</ClassMethod>
<FormalSpec>pInput:%RegisteredObject</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim sMsgClsName As %String
	#dim sJustified As %String = "L"
	#dim sFiller As %String = " "
	#dim iMaxLen As %Integer = 0
	#dim sFixedWidthLine As %String = ""
	
	s sMsgClsName = $CLASSNAME(pInput)
	
	
	
	
	Set rs = ##class(%ResultSet).%New()
	Do rs.Prepare("Select Name, InitialExpression, Parameters from %Dictionary.PropertyDefinition where parent = '"_sMsgClsName_"' AND Name <> 'CreatedOn' Order by SequenceNumber")
	d rs.Execute()
	
	While (rs.Next()) {
		
		//re-initialize the parameters to the default values for each property
		s sJustified = "L"
		s sFiller = " "
		s iMaxLen = 0
	
		s PropertyParams = rs.Data("Parameters")
		for i=1:1:$L(PropertyParams,",") { 
			if $P($P(PropertyParams,",",i),"=",1)="MAXLEN" {
				s iMaxLen = $P($P(PropertyParams,",",i),"=",2)
			}
			if $P($P(PropertyParams,",",i),"=",1)="JUSTIFIED" {
				s sJustified = $P($P(PropertyParams,",",i),"=",2)
			}
			if $P($P(PropertyParams,",",i),"=",1)="FILLER" {
				s sFiller = $P($P(PropertyParams,",",i),"=",2)
			}
		}
		
		s FillerString = ""
		s FixedWidthValue = ""
		s $P(FillerString,sFiller,iMaxLen+1)=""
		
		if sJustified="L" {
			s FixedWidthValue = $PROPERTY(pInput,rs.Data("Name"))_FillerString
			s FixedWidthValue = $E(FixedWidthValue,1,iMaxLen)
		}
		if sJustified="R" {
			
			s FixedWidthValue = FillerString_$PROPERTY(pInput,rs.Data("Name"))
			s FixedWidthValue = $E(FixedWidthValue,$L(FixedWidthValue)-iMaxLen+1,$L(FixedWidthValue))
		}
		
		s sFixedWidthLine = sFixedWidthLine_FixedWidthValue
		
		
	}
	
	Quit sFixedWidthLine
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.cls.JSON">
<Super>%Persistent</Super>
<TimeChanged>62546,33660.132942</TimeChanged>
<TimeCreated>61429,35225.407821</TimeCreated>

<Property name="TOKENNONE">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="TOKENCURLYOPEN">
<Type>%Integer</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="TOKENCURLYCLOSE">
<Type>%Integer</Type>
<InitialExpression>2</InitialExpression>
</Property>

<Property name="TOKENSQUAREDOPEN">
<Type>%Integer</Type>
<InitialExpression>3</InitialExpression>
</Property>

<Property name="TOKENSQUAREDCLOSE">
<Type>%Integer</Type>
<InitialExpression>4</InitialExpression>
</Property>

<Property name="TOKENCOLON">
<Type>%Integer</Type>
<InitialExpression>5</InitialExpression>
</Property>

<Property name="TOKENCOMMA">
<Type>%Integer</Type>
<InitialExpression>6</InitialExpression>
</Property>

<Property name="TOKENSTRING">
<Type>%Integer</Type>
<InitialExpression>7</InitialExpression>
</Property>

<Property name="TOKENNUMBER">
<Type>%Integer</Type>
<InitialExpression>8</InitialExpression>
</Property>

<Property name="TOKENTRUE">
<Type>%Integer</Type>
<InitialExpression>9</InitialExpression>
</Property>

<Property name="TOKENFALSE">
<Type>%Integer</Type>
<InitialExpression>10</InitialExpression>
</Property>

<Property name="TOKENNULL">
<Type>%Integer</Type>
<InitialExpression>11</InitialExpression>
</Property>

<Property name="lastErrorIndex">
<Type>%Integer</Type>
<InitialExpression>-1</InitialExpression>
</Property>

<Property name="lastDecode">
<Type>%String</Type>
</Property>

<Method name="JsonDecode">
<ClassMethod>1</ClassMethod>
<FormalSpec>json:%String</FormalSpec>
<ReturnType>%ArrayOfDataTypes</ReturnType>
<Implementation><![CDATA[
	set JSON = ##class(IIBAENSEMBLE.cls.JSON).%New()
	set JSON.lastDecode = json
	
	if json '= "" {
		set index = 1
		set tSC = 1
		set returnValue = JSON.ParseValue(json, .index, .tSC)
		if tSC {
			Quit returnValue
		} else {
			//handle error
			Quit ""
		}				
	}
]]></Implementation>
</Method>

<Method name="EatWhiteSpace">
<FormalSpec><![CDATA[json:%String,&index:%Integer]]></FormalSpec>
<Implementation><![CDATA[
	WHILE index < $L(json) {
		if ($A($E(json,index))=9)||($A($E(json,index))=32)||($A($E(json,index))=160)||($A($E(json,index))=13)||($A($E(json,index))=10) {
			set z = $I(index)
		} else {
			Quit
		}
	}
]]></Implementation>
</Method>

<Method name="GetLastIndexOfNumber">
<FormalSpec>json:%String,index:%Integer</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set lastIndex = index
	WHILE $I(lastIndex) < $L(json) {
		if '$ISVALIDDOUBLE($E(json,index,lastIndex)) Quit
	}
	set z = $I(lastIndex,-1)
	Quit lastIndex
]]></Implementation>
</Method>

<Method name="LookAhead">
<FormalSpec>json:%String,index:%Integer</FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	set saveIndex = index
	Quit ..NextToken(json, .saveIndex)
]]></Implementation>
</Method>

<Method name="NextToken">
<FormalSpec><![CDATA[json:%String,&index:%Integer]]></FormalSpec>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	do ..EatWhiteSpace(json, .index)
	if index = $L(json) {
		Quit ..TOKENNONE
	}
	set c = $E(json,index)
	set z = $I(index)
	
	if c = "{" {
		Quit ..TOKENCURLYOPEN
	} elseif c = "}" {
		Quit ..TOKENCURLYCLOSE
	} elseif c = "[" {
		Quit ..TOKENSQUAREDOPEN
	} elseif c = "]" {
		Quit ..TOKENSQUAREDCLOSE
	} elseif c = "," {
		Quit ..TOKENCOMMA
	} elseif c = """" {
		Quit ..TOKENSTRING
	} elseif (c = 0)||(c = 1)||(c = 2)||(c = 3)||(c = 4)||(c = 5)||(c = 6)||(c = 7)||(c = 8)||(c = 9)||(c = "-"){
		Quit ..TOKENNUMBER
	} elseif c = ":" {
		Quit ..TOKENCOLON
	}
	
	set z = $I(index,-1)
	
	set remainingLength = $L(json) - index
	
	// false
	if (remainingLength >= 5)&&($E(json,index,index+5) = "false") {
		set z = $I(index,5)
		Quit ..TOKENFALSE
	}
	
	// true
	if (remainingLength >= 4)&&($E(json,index,index+4) = "true") {
		set z = $I(index,4)
		Quit ..TOKENTRUE
	}
	
	// null
	if (remainingLength >= 4)&&($E(json,index,index+4) = "null") {
		set z = $I(index,4)
		Quit ..TOKENFALSE
	}
	
	Quit ..TOKENNONE
]]></Implementation>
</Method>

<Method name="ParseArray">
<FormalSpec><![CDATA[json:%String,&index:%Integer]]></FormalSpec>
<ReturnType>%ArrayOfDataTypes</ReturnType>
<Implementation><![CDATA[
	set returnObject = ##class(%ArrayOfDataTypes).%New()
	do ..NextToken(json,.index)
	set arrCounter = -1
	set done = 0
	Do {
		set token = ..LookAhead(json,index)
		if token = ..TOKENNONE {
			set done = 1
			CONTINUE
		} elseif token = ..TOKENCOMMA {
			do ..NextToken(json,.index)
		} elseif token = ..TOKENSQUAREDCLOSE {
			do ..NextToken(json,.index)
			set done = 1
			CONTINUE
		} else {
			set success = 1
			set value = ..ParseValue(json, .index, .success)
			if 'success {
				set done = 1
				CONTINUE
			}
			do returnObject.SetAt(value,$I(arrCounter))
		}
	} WHILE 'done
	
	if returnObject.Count() > 0 {
		Quit returnObject
	} else {
		Quit "" 
	}
]]></Implementation>
</Method>

<Method name="ParseNumber">
<FormalSpec><![CDATA[json:%String,&index:%Integer]]></FormalSpec>
<ReturnType>%Double</ReturnType>
<Implementation><![CDATA[
	do ..EatWhiteSpace(json,.index)
	set lastIndex = ..GetLastIndexOfNumber(json,index)
	set returnValue = $E(json,index,lastIndex)
	set index = lastIndex + 1
	Quit returnValue
]]></Implementation>
</Method>

<Method name="ParseObject">
<FormalSpec><![CDATA[json:%String,&index:%Integer]]></FormalSpec>
<ReturnType>%ArrayOfDataTypes</ReturnType>
<Implementation><![CDATA[
	set returnObject = ##class(%ArrayOfDataTypes).%New()
	do ..NextToken(json,.index)
	set done = 0
	Do {
		set token = ..LookAhead(json,index)
		if token = ..TOKENNONE {
			set done = 1
			CONTINUE
		} elseif token = ..TOKENCOMMA {
			do ..NextToken(json,.index)
		} elseif token = ..TOKENCURLYCLOSE {
			do ..NextToken(json,.index)
			set done = 1
			CONTINUE
		} else {
			set name = ..ParseString(json, .index)
			if name = "" {
				set done = 1
				CONTINUE
			}
			
			set token = ..LookAhead(json,index)
			if token '= ..TOKENCOLON {
				set done = 1
				CONTINUE 
			} else {
				do ..NextToken(json,.index)
			}
			
			set success = 1
			set value = ..ParseValue(json, .index, .success)
			if 'success {
				set done = 1
				CONTINUE
			}
			
			do returnObject.SetAt(value,name)
			
		}
	} WHILE 'done
	
	if returnObject.Count() > 0 {
		Quit returnObject
	} else {
		Quit "" 
	}
]]></Implementation>
</Method>

<Method name="ParseString">
<FormalSpec><![CDATA[json:%String,&index:%Integer]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set s = ""
	do ..EatWhiteSpace(json,.index)
	
	// first "
	//set c = $E(json,$I(index))
	
	set complete = 0
	Do {
		if index = $L(json) {
			set complete = 1
			set s = ""
			CONTINUE
		}
		set c = $E(json,$I(index))
		if c = """" {
			set complete = 1
			CONTINUE
		} elseif c = "\" {
			if index = $L(json) {
				set complete = 1
				set s = ""
				CONTINUE
			}
			set c = $E(json,$I(index))
			if c = """" {
				set s = s_c
			} elseif c = "\" {
				set s = s_c
			} elseif c = "/" {
				set s = s_c
			} else {
				set s = s_"\"_c
			}
		} else {
			set s = s_c				
		}
		
	} WHILE 'complete
	set z = $I(index)
	Quit s
]]></Implementation>
</Method>

<Method name="ParseValue">
<FormalSpec><![CDATA[json:%String,&index:%Integer,&tSC:%Boolean]]></FormalSpec>
<ReturnType>%ArrayOfDataTypes</ReturnType>
<Implementation><![CDATA[
	set token = ..LookAhead(json, index)
	if token = ..TOKENSTRING {
		Quit ..ParseString(json, .index)
	} elseif token = ..TOKENNUMBER {
		Quit ..ParseNumber(json, .index)
	} elseif token = ..TOKENCURLYOPEN {
		Quit ..ParseObject(json, .index)
	} elseif token = ..TOKENSQUAREDOPEN {
		Quit ..ParseArray(json, .index)
	} elseif token = ..TOKENTRUE {
		d ..NextToken(json, .index)
		Quit 1
	} elseif token = ..TOKENFALSE {
		d ..NextToken(json, .index)
		Quit 0
	} elseif token = ..TOKENNULL {
		d ..NextToken(json, .index)
		Quit ""
	} elseif token = ..TOKENNONE {
		set tSC = 0
		Quit ""
	}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^IIBAENSEMBLE.cls.JSOND</DataLocation>
<DefaultData>JSONDefaultData</DefaultData>
<IdLocation>^IIBAENSEMBLE.cls.JSOND</IdLocation>
<IndexLocation>^IIBAENSEMBLE.cls.JSONI</IndexLocation>
<StreamLocation>^IIBAENSEMBLE.cls.JSONS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="JSONDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>TOKENNONE</Value>
</Value>
<Value name="3">
<Value>TOKENCURLYOPEN</Value>
</Value>
<Value name="4">
<Value>TOKENCURLYCLOSE</Value>
</Value>
<Value name="5">
<Value>TOKENSQUAREDOPEN</Value>
</Value>
<Value name="6">
<Value>TOKENSQUAREDCLOSE</Value>
</Value>
<Value name="7">
<Value>TOKENCOLON</Value>
</Value>
<Value name="8">
<Value>TOKENCOMMA</Value>
</Value>
<Value name="9">
<Value>TOKENSTRING</Value>
</Value>
<Value name="10">
<Value>TOKENNUMBER</Value>
</Value>
<Value name="11">
<Value>TOKENTRUE</Value>
</Value>
<Value name="12">
<Value>TOKENFALSE</Value>
</Value>
<Value name="13">
<Value>TOKENNULL</Value>
</Value>
<Value name="14">
<Value>lastErrorIndex</Value>
</Value>
<Value name="15">
<Value>lastDecode</Value>
</Value>
<Value name="16">
<Value>JSON</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.cls.ScrollableResultSet">
<Super>%Library.ScrollableResultSet</Super>
<TimeChanged>61403,44896.941345</TimeChanged>
<TimeCreated>61403,42108.891986</TimeCreated>

<Method name="OpenIdFiltered">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[id:%String,arrFilter:%ArrayOfDataTypes="",&sc:%Status=$$$OK]]></FormalSpec>
<ReturnType>%ObjectHandle</ReturnType>
<Implementation><![CDATA[
	If '$ISOBJECT(arrFilter) Quit ""
	Set oref=..%New()
	Set sc=oref.LoadFiltered(id, arrFilter)
	If $$$ISERR(sc) Quit ""
	Quit oref
]]></Implementation>
</Method>

<Method name="LoadFiltered">
<FormalSpec>id:%String,arrFilter:%ArrayOfDataTypes</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If '$data(^CacheTempRSet(id)) Quit $$$ERROR($$$LoadObjectNotFound)
	Set ..TempIndex=id,..IsSaved=0
		
	//Build multi-dimensional string from filter array prior to determining index of filter fields
	set Field=""
	set filtercount = 0
	for { set Field = $O(arrFilter.Data(Field))  Q:Field="" 
		set filtercount = filtercount + 1
		set filter(filtercount,"Field") = Field
		set filter(filtercount,"Value") = arrFilter.Data(Field)
		
	}
	
	//For each filter field, find the index for that field and add it as a node to the filter m-d string
	for i=1:1:filtercount {
		for j=1:1:^CacheTempRSet(..TempIndex,"Index") {
			if filter(i,"Field")=^CacheTempRSet(..TempIndex,"Index",j) set filter(i,"Index")=j
		}
	}
	
	//Build a TempData multi-dimensional string that holds only those rows that match the set of filters
	set RowCount = +$order(^CacheTempRSet(..TempIndex,"Data",""),-1)
	set FilteredRowCount = 0
	
	//Loop through every row in the record set looking for rows that match the set of filters and add them to the TempData m-d string
	for i=1:1:RowCount {
		
		set RowList = ^CacheTempRSet(..TempIndex,"Data",i)
		
		set filtermatch = 0
		for j=1:1:filtercount {
			if $FIND($ZCVT($LG(RowList,filter(j,"Index")),"U"),$ZCVT(filter(j,"Value"),"U"))>0 {
				set filtermatch = 1
			}
		}
		if filtermatch {
			set FilteredRowCount = FilteredRowCount + 1
			set TempData(FilteredRowCount)=^CacheTempRSet(..TempIndex,"Data",i)
		}
	}
	
	
	Merge i%ColIndex=^CacheTempRSet(..TempIndex,"Index"),i%QHandle=^CacheTempRSet(..TempIndex,"QHandle"),i%Data=TempData
	Set data=^CacheTempRSet(..TempIndex,"Info")
	Set ..ClassName=$listget(data),..QueryName=$listget(data,2),..RuntimeMode=$listget(data,3),..HasInfo=$listget(data,4),..ParamInfo=$listget(data,5)
	Set ..ColInfo=$listget(data,6),..IdInfo=$listget(data,7),..AtEnd=$listget(data,8),..IsOpened=$listget(data,9),i%CurrRow=$listget(data,10)
	Set ..Row=^CacheTempRSet(..TempIndex,"Row")
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="%Save">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If ..TempIndex="" Set sc=..PopulateData() If $$$ISERR(sc) Quit sc
	Set ..IsSaved=1
	Merge ^CacheTempRSet(..TempIndex,"Index")=i%ColIndex,^CacheTempRSet(..TempIndex,"QHandle")=i%QHandle
	//This line commented out so that the current filtered data does not replace the original data
	//,^CacheTempRSet(..TempIndex,"RowData")=i%Data
	Set ^CacheTempRSet(..TempIndex,"Info")=$listbuild(..ClassName,..QueryName,..RuntimeMode,..HasInfo,..ParamInfo,..ColInfo,..IdInfo,..AtEnd,..IsOpened,..CurrRow)
	Set ^CacheTempRSet(..TempIndex,"Row")=..Row,^CacheTempRSet(..TempIndex)=$listbuild($zdt($horolog,3),$job)
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Count">
<Description>
Returns the number of rows contained in this ResultSet.</Description>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	If ..TempIndex="" Set sc=..PopulateData() If $$$ISERR(sc) Quit 0
	//This line is changed to use the current Data property rather than the original rset to get the count
	Quit $select(..TempIndex="":0,1:+$order(i%Data(""),-1))
]]></Implementation>
</Method>

<Method name="CurrRowSet">
<FormalSpec>val:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	If ..TempIndex="" Set sc=..PopulateData() If $$$ISERR(sc) Quit sc
	Set Row = $get(i%Data(+val))
	If (Row = "") {
		Quit $$$OK
	}
	
	Set i%CurrRow=+val

	#; move data into row buffer
	For i=1:1:..ColIndex Set i%Data(i%ColIndex(i))=$listget(Row,i)
	Set ..Row=Row,..AtEnd=1
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.cls.xRefImport">
<Super>%Persistent</Super>
<TimeChanged>62546,33660.514361</TimeChanged>
<TimeCreated>62074,61415.812406</TimeCreated>

<Method name="Test">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	h 5
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="ProcessNewFiles">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tSC As %Status = $$$OK
	
	s EnsSysDir = ##class(%File).ParentDirectoryName(##class(%File).ManagerDirectory())
	s xRefImportDir = ##class(%File).NormalizeDirectory(EnsSysDir_"xRefImports\new\")
	s xRefWorkingDir = ##class(%File).NormalizeDirectory(EnsSysDir_"xRefImports\working\")
	
	if '##class(%File).DirectoryExists(xRefImportDir) { 
		d ##class(%File).CreateDirectoryChain(xRefImportDir) 
	}
	if '##class(%File).DirectoryExists(xRefWorkingDir) { 
		d ##class(%File).CreateDirectoryChain(xRefWorkingDir) 
	}
	
	Set rset = ##class(%ResultSet).%New()
	set rset.ClassName = "%File"
	set rset.QueryName = "FileSet"
	Do rset.Execute(xRefImportDir,"*","",0)
	While (rset.Next()) {
		
		if ($ZB(##class(%File).Attributes(rset.Data("Name")),16,1)=0) {
		
			set tfilefullname = rset.Data("Name")
			set tname = ##class(%File).GetFilename(rset.Data("Name"))
			
			set NewFileFullname = xRefWorkingDir_tname
			set tSC = ##class(%File).Rename(tfilefullname,NewFileFullname)
			if $$$ISERR(tSC) Quit
						
			set tSC = ..NewFile(tname,NewFileFullname)
			if $$$ISERR(tSC) Quit
		
		}
	}

	Quit tSC
]]></Implementation>
</Method>

<Method name="NewFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>tname:%String,NewFileFullname:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set importType = $P($P(tname,".",1),"_",1)
	set SessionId = $P($P(tname,".",1),"_",2)
	set filetimestamp = $P($P(tname,".",1),"_",3)
	set filename = NewFileFullname
		
	Set tSC = ..OnNewFile(importType, SessionId, filetimestamp, filename)
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="OnNewFile">
<ClassMethod>1</ClassMethod>
<FormalSpec>importType:%String,SessionId:%String,filetimestamp:%String,filename:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	d ##class(IIBAENSEMBLE.csp.Reference).initImportData(SessionId)
	
	set pFileStream = ##class(%FileCharacterStream).%New()
	Set pFileStream.Filename = filename
	
	set count = 0
	
	while 'pFileStream.AtEnd {
		d ##class(IIBAENSEMBLE.csp.Reference).collectImportData(pFileStream.ReadLine(),SessionId) 
		set count = count+1
	}
	
	if importType = "Replace" { d ##class(IIBAENSEMBLE.csp.Reference).removeExisting(SessionId) }
	
	kill pFileStream
	
	set ^CacheTempImportStatus(SessionId,"totalcount") = count
	
	set tSC = ..processImportData(SessionId)
	if $$$ISERR(tSC) Quit tSC
	
	set ^CacheTempImportStatus(SessionId,"status") = "Complete"
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="processImportData">
<ClassMethod>1</ClassMethod>
<FormalSpec>SessionId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set ^CacheTempImportStatus(SessionId,"status") = "Processing..."
	set RVCount = 0
	set tSC = 1
	set sPTName=""
	For  { Set sPTName=$O(^CacheTempaImport(SessionId,sPTName)) Q:sPTName=""
 	
		set oPT = ##class(IIBAENSEMBLE.csp.Reference).getPTobj(sPTName,^CacheTempaPTAttr(SessionId,sPTName,"PrincipalRole"),^CacheTempaPTAttr(SessionId,sPTName,"System"),.tSC)
		set sPTID=oPT.%Id()
 
		set sPV=""
		For  { Set sPV=$O(^CacheTempaImport(SessionId,sPTName,sPV)) Q:sPV=""

 			set oPV = ##class(IIBAENSEMBLE.csp.Reference).getPVobj(sPV, sPTID,.tSC)
			set sPVID=oPV.%Id()
 
			set sRTSystem=""
			For  { Set sRTSystem=$O(^CacheTempaImport(SessionId,sPTName,sPV,sRTSystem)) Q:sRTSystem=""
			
				set oRT = ##class(IIBAENSEMBLE.csp.Reference).getRTobj(sRTSystem, sPTID,.tSC)
				set sRTID=oRT.%Id()
 				set sRV=""
				For  { Set sRV=$O(^CacheTempaImport(SessionId,sPTName,sPV,sRTSystem,sRV)) Q:sRV=""
 					
 					set RVCount = RVCount + 1
 					set ^CacheTempImportStatus(SessionId,"rvcount") = RVCount
 					
 					set sRVID=##class(IIBAENSEMBLE.csp.Reference).getRVID(sRV, sPVID, sRTID)
					
					if sRVID="" {
						set tSC = ##class(IIBAENSEMBLE.csp.Reference).doRVUpSert(oPT, oRT, oPV, sRV,.tSC)
					}
				}	
			}
		}
	}
	
	Quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^IIBAENSEMBLE.cls.xRefImportD</DataLocation>
<DefaultData>xRefImportDefaultData</DefaultData>
<IdLocation>^IIBAENSEMBLE.cls.xRefImportD</IdLocation>
<IndexLocation>^IIBAENSEMBLE.cls.xRefImportI</IndexLocation>
<StreamLocation>^IIBAENSEMBLE.cls.xRefImportS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="xRefImportDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.csp.AlertAdmin">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>63574,59600</TimeChanged>
<TimeCreated>60908,31118.460678</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	//Req#5 - PHegel Tab Security Use for page name
	if ##class(%SYSTEM.Security).Check("AlertAdmin","USE"){ 
		set Allowed = 1 
	}
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
   <script language=javascript>
	<!--
	function Initialize()
	{

	}
	function SortTable(sortby1,sortby2) {
		//alert(sortby1);
		//alert(sortby2);
		
		alert('before calling the sort');
		var newtable = #server(..SortTable(sortby1,sortby2))#;
		document.getElementById('tablediv').innerHTML = newtable;
		alert('after sort');
			
	}
	
	function removeAlert(paramID) {
		
		var c=confirm('Are you sure you want to delete this alert?');
		if (c ) {
			var remove = #server(..Remove(paramID))#;
			location.reload(true);
		}
		
		//self.document.location="IIBASupport.csp?PageName=AlertAdmin"
		
	}
	
	function FilterTable() {
		
		var selecteditem = document.FilterForm.Items.selectedIndex;
		var itemname = document.FilterForm.Items.options[selecteditem].value;
		
		var selectedparam = document.FilterForm.Parameters.selectedIndex;
		var parameter = document.FilterForm.Parameters.options[selectedparam].value;
		//alert(itemname);
		//alert(parameter);
		var newtable = #server(..FilterTable(itemname,parameter))#;
		document.getElementById('tablediv').innerHTML = newtable;
	}
	
	
	function ModifyEmail() {
		
		var OldEmail=prompt("Old E-Mail address","");
		
		if ( OldEmail != null && OldEmail != "" ) {
		
			var NewEmail=prompt("New E-Mail Address","");
			if ( NewEmail == null ) {
				NewEmail=""
			}
			
			var Update=confirm("Replace '"+OldEmail+"' with '"+NewEmail+"'")
			if (Update==true) {
				a=#server(..EmailReplace(OldEmail,NewEmail))#;
			}

			
		}
		
		
	}
	

	
	
  -->
   </script>
  >
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	&html<

	<style type="text/css">
    /*Style classes for use on this page */

      img{
   cursor:pointer;
       cursor:hand;
       display: block ;
     
     } 

   </style>
    
    >
	Set Mode=%request.Get("Mode")


	if Mode = "Remove" { 

	Set paramID=%request.Get("paramID")
	
	set rs=##class(%ResultSet).%New()
	Do rs.Prepare("DELETE from IIBAENSEMBLE_Monitor.ItemParameters where ID = "_paramID_"")
	Do rs.Execute()
	
	set rs=##class(%ResultSet).%New()
	Do rs.Prepare("DELETE from IIBAENSEMBLE_Monitor.tblSchedules where ParameterID = "_paramID_"")
	Do rs.Execute()
		
	set %response.Redirect="IIBASupport.csp?PageName=AlertAdmin"
		
	}

	

	w ..SubMenu()

	W "<Form Name=""FilterForm"" id=""FilterForm"">"
	w "<table id=""FilterTable"" class=""FilterTable"" border=""0"" cellpadding=""3"" cellspacing=""0"">"
	w "<tr><td align=""left"" nowrap>Filter by Item Name:&nbsp;&nbsp;"
	w "<Select Name=""Items"" id=""Items"" OnChange=""FilterTable()"">"
	W "<Option Value="""">All"
	set rs=##class(%ResultSet).%New()
	Do rs.Prepare("SELECT DISTINCT ItemName from IIBAENSEMBLE_Monitor.ItemParameters order by ItemName")
	Do rs.Execute()
	While(rs.Next()) {
		W "<Option Value="""_rs.Data("ItemName")_""">"_rs.Data("ItemName")
	}
	W "</Select>"
	w "&nbsp;&nbsp;&nbsp;&nbsp;Filter by Parameter:&nbsp;&nbsp;"
	w "<Select Name=""Parameters"" id=""Parameters"" alt='test' OnChange=""FilterTable()"">"
	W "<Option Value="""">All"
	set rs=##class(%ResultSet).%New()
	Do rs.Prepare("SELECT DISTINCT itemvalue from IIBAENSEMBLE_Monitor.tblItems where itemtype = 'Parameter' order by itemvalue")
	Do rs.Execute()
	While(rs.Next()) {
		W "<Option Value="""_rs.Data("itemvalue")_""">"_rs.Data("itemvalue")
	}
	W "</Select>"

	//w "<span class=""FilterMsg"" style=""color: darkblue; font-weight: bold; width:150px;"" id=""found""><i>Loading...</i></span>"
	w "</td>"
	// W "</tr><tr><td><input type=""Button"" value=""Modify Email"" onclick=""ModifyEmail()""/></td>"
	W "</tr></table>"
	w "</Form>"
	w $C(13,10)
	w $C(13,10)



	w $C(13,10)
	w $C(13,10)

	w "<span id=""tablediv"">"

	//do ..BuildTable("p.ItemName","p.Parameter","pageload")

	set TableHTML = ..BuildHeaderHTML()

	Set rs=##class(%ResultSet).%New()
	set ParamSelect = ""
	set ParamSelect = ParamSelect_"Select "
	set ParamSelect = ParamSelect_"i.itemdescription as ThresholdDesc, "
	set ParamSelect = ParamSelect_"p.ID, p.Active, p.AlertDuration/60 as AlertDuration, p.ItemName, p.NotificationEmail, p.Parameter, p.Threshold, p.ThresholdDuration, "
	set ParamSelect = ParamSelect_"p.Holidays, p.HolidayOnly, "
	set ParamSelect = ParamSelect_"s.HourStart, s.HourEnd, s.M, s.T, s.W, s.Th, s.F, s.Sa, s.Su "
	set ParamSelect = ParamSelect_"from IIBAENSEMBLE_Monitor.ItemParameters P "
	set ParamSelect = ParamSelect_"inner join IIBAENSEMBLE_Monitor.tblSchedules S "
	set ParamSelect = ParamSelect_"on P.ID = S.ParameterID "
	set ParamSelect = ParamSelect_"inner join IIBAENSEMBLE_Monitor.tblItems I "
	set ParamSelect = ParamSelect_"on P.ThresholdID = I.ID "
	set ParamSelect = ParamSelect_"order by p.ItemName, p.Parameter"
	Do rs.Prepare(ParamSelect)
	Do rs.Execute()
	set i = 1
	//w ParamSelect
	While(rs.Next()) {
	
		if i#2=0 {
			set TableHTML = TableHTML_"<tr class=""EvenRow""  >"
		} Else {
			set TableHTML = TableHTML_"<tr class=""OddRow""  >"
		}
		set TableHTML = TableHTML_"<td nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" ><img src='customimages/edit.gif' alt='Edit' onclick='window.location=""IIBASupport.csp?PageName=AlertEdit&Mode=Edit&paramID="_rs.Data("ID")_"""'/></td>"
		set TableHTML = TableHTML_"<td nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" ><img src='customimages/trash_bold.gif' alt='Delete' onclick='removeAlert("""_rs.Data("ID")_""")'/></td>"
		set TableHTML = TableHTML_"<td nowrap>"_rs.Data("ItemName")_"</td>"
		set TableHTML = TableHTML_"<td nowrap>"_rs.Data("Parameter")_"</td>"
		set TableHTML = TableHTML_"<td nowrap>"_rs.Data("ThresholdDesc")_"</td>"
		set TableHTML = TableHTML_"<td nowrap>"_rs.Data("ThresholdDuration")_"</td>"
		set TableHTML = TableHTML_"<td nowrap>"_rs.Data("AlertDuration")_"</td>"
		set TableHTML = TableHTML_"<td nowrap>"_rs.Data("HourStart")_"</td>"
		set TableHTML = TableHTML_"<td nowrap>"_rs.Data("HourEnd")_"</td>"
		set TableHTML = TableHTML_"<td nowrap>"_$CASE(rs.Data("Active"),1:"Y",:"N")_"</td>"
		set TableHTML = TableHTML_"<td nowrap>"_rs.Data("M")_"</td>"
		set TableHTML = TableHTML_"<td nowrap>"_rs.Data("T")_"</td>"
		set TableHTML = TableHTML_"<td nowrap>"_rs.Data("W")_"</td>"
		set TableHTML = TableHTML_"<td nowrap>"_rs.Data("Th")_"</td>"
		set TableHTML = TableHTML_"<td nowrap>"_rs.Data("F")_"</td>"
		set TableHTML = TableHTML_"<td nowrap>"_rs.Data("Sa")_"</td>"
		set TableHTML = TableHTML_"<td nowrap>"_rs.Data("Su")_"</td>"
		set TableHTML = TableHTML_"<td nowrap>"
		If ($ASCII(rs.Data("Holidays"))>32) {
			Set TableHTML=TableHTML_"<center>yes</center>"
		}
		Set TableHTML=TableHTML_"</td>"
		set TableHTML = TableHTML_"<td nowrap>"
		If (rs.Data("HolidayOnly")="1") {
			Set TableHTML=TableHTML_"Y"
		} else {
			If (rs.Data("Holidays")'="") {
				Set TableHTML=TableHTML_"N"
			}
		}
		Set TableHTML=TableHTML_"</td>"
		set TableHTML = TableHTML_"<td nowrap>"_rs.Data("NotificationEmail")_"</td>"
		set TableHTML = TableHTML_"</tr>"
	
	
		set i = i+1
	
		if $LENGTH(TableHTML) > 30000 {
		    w TableHTML	
		    set TableHTML = ""
		}	
	 }		
 	set TableHTML = TableHTML_"</table>"
	w TableHTML_"</span>"


	//w "<table class=""DetailTable""  cellpadding=""2"" cellspacing=""0"" ><tr><td>"
	//w "<Input Type=""Button"" Style=""width:100"" Name=""Add"" id=""Add"" Value=""Add New"" onclick='self.document.location=""IIBASupport.csp?PageName=AlertNew&Mode=New""'>"
	//w "<Input Type=""Button"" Style=""width:100"" Name=""Refresh"" id=""Refresh"" Value=""Refresh"" onclick='self.document.location=""IIBASupport.csp?PageName=AlertAdmin""'>"
	//w "<Input Type=""Button"" Style=""width:100"" Name=""Test"" id=""Test"" Value=""Test"" onclick='FilterTable(""MattTest.svc.TCP"","""")'>"
	//w "</td></tr></table>"
]]></Implementation>
</Method>

<Method name="BuildHeaderHTML">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 set TableHTML = ""
 
 set TableHTML = TableHTML_"<table class=""DetailTable"" border=""1"" cellpadding=""2"" cellspacing=""0"" >"
 
 set TableHTML = TableHTML_"<tr>"
 set TableHTML = TableHTML_"<th></th>"
 set TableHTML = TableHTML_"<th></th>"
 set TableHTML = TableHTML_"<th nowrap  align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" onclick=""SortTable('p.ItemName','p.Parameter');""><a title=""Click to sort by this column."">Item Name</a></th>"
 set TableHTML = TableHTML_"<th nowrap  align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" onclick=""SortTable('p.Parameter','p.ItemName');""><a title=""Click to sort by this column."">Parameter</a></th>"
 set TableHTML = TableHTML_"<th nowrap  align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" onclick=""SortTable('p.Threshold','p.ItemName');""><a title=""Click to sort by this column."">Threshold Value</a></th>"
 set TableHTML = TableHTML_"<th nowrap  align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" onclick=""SortTable('p.ThresholdDuration','p.ItemName');""><a title=""Click to sort by this column."">Grace Period</a></th>"
 set TableHTML = TableHTML_"<th nowrap  align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" onclick=""SortTable('p.AlertDuration','p.ItemName');""><a title=""Click to sort by this column."">Alert Interval</a></th>"
 set TableHTML = TableHTML_"<th nowrap  align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" onclick=""SortTable('s.HourStart','p.ItemName');""><a title=""Click to sort by this column."">HourStart</a></th>"
 set TableHTML = TableHTML_"<th nowrap  align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" onclick=""SortTable('s.HourEnd','p.ItemName');""><a title=""Click to sort by this column."">HourEnd</a></th>"
 set TableHTML = TableHTML_"<th nowrap  align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" onclick=""SortTable('p.Active','p.ItemName');""><a title=""Click to sort by this column."">Active</a></th>"
 set TableHTML = TableHTML_"<th nowrap  align=""left"" style=""text-align:center;cursor:pointer;cursor:hand;width=25;"" onclick=""SortTable('s.M','p.ItemName');""><a title=""Click to sort by this column."">M</a></th>"
 set TableHTML = TableHTML_"<th nowrap  align=""left"" style=""text-align:center;cursor:pointer;cursor:hand;width=25;"" onclick=""SortTable('s.T','p.ItemName');""><a title=""Click to sort by this column."">T</a></th>"
 set TableHTML = TableHTML_"<th nowrap  align=""left"" style=""text-align:center;cursor:pointer;cursor:hand;width=25;"" onclick=""SortTable('s.W','p.ItemName');""><a title=""Click to sort by this column."">W</a></th>"
 set TableHTML = TableHTML_"<th nowrap  align=""left"" style=""text-align:center;cursor:pointer;cursor:hand;width=25;"" onclick=""SortTable('s.Th','p.ItemName');""><a title=""Click to sort by this column."">Th</a></th>"
 set TableHTML = TableHTML_"<th nowrap  align=""left"" style=""text-align:center;cursor:pointer;cursor:hand;width=25;"" onclick=""SortTable('s.F','p.ItemName');""><a title=""Click to sort by this column."">F</a></th>"
 set TableHTML = TableHTML_"<th nowrap  align=""left"" style=""text-align:center;cursor:pointer;cursor:hand;width=25;"" onclick=""SortTable('s.Sa','p.ItemName');""><a title=""Click to sort by this column."">Sa</a></th>"
 set TableHTML = TableHTML_"<th nowrap  align=""left"" style=""text-align:center;cursor:pointer;cursor:hand;width=25;"" onclick=""SortTable('s.Su','p.ItemName');""><a title=""Click to sort by this column."">Su</a></th>"
 set TableHTML = TableHTML_"<th nowrap  align=""left"" style=""text-align:center;cursor:pointer;cursor:hand;width=25;"" onclick=""SortTable('s.Su','p.ItemName');""><a title=""Click to sort by this column."">Holiday</a></th>"
 set TableHTML = TableHTML_"<th nowrap  align=""left"" style=""text-align:center;cursor:pointer;cursor:hand;width=25;"" onclick=""SortTable('s.Su','p.ItemName');""><a title=""Click to sort by this column."">Hol Only</a></th>"
 set TableHTML = TableHTML_"<th nowrap  align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" onclick=""SortTable('p.NotificationEmail','p.ItemName');""><a title=""Click to sort by this column."">Notification&nbsp&nbsp</a><input type=""Button"" value=""Bulk Modify"" onclick=""ModifyEmail()""/></th>"
 /**/
 set TableHTML = TableHTML_"</tr>"
 
 Quit TableHTML
]]></Implementation>
</Method>

<Method name="BuildTable">
<ClassMethod>1</ClassMethod>
<FormalSpec>sortby1:%String,sortby2:%String,action:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 
 set TableHTML = ..BuildHeaderHTML()
 
 Set rs=##class(%ResultSet).%New()
 set ParamSelect = ""
 set ParamSelect = ParamSelect_"Select "
 set ParamSelect = ParamSelect_"i.itemdescription as ThresholdDesc, "
 set ParamSelect = ParamSelect_"p.ID, p.Active, p.AlertDuration/60 as AlertDuration, p.ItemName, p.NotificationEmail, p.Parameter, p.Threshold, p.ThresholdDuration, "
 set ParamSelect = ParamSelect_"p.Holidays, p.HolidayOnly, "
 set ParamSelect = ParamSelect_"s.HourStart, s.HourEnd, s.M, s.T, s.W, s.Th, s.F, s.Sa, s.Su "
 set ParamSelect = ParamSelect_"from IIBAENSEMBLE_Monitor.ItemParameters P "
 set ParamSelect = ParamSelect_"inner join IIBAENSEMBLE_Monitor.tblSchedules S "
 set ParamSelect = ParamSelect_"on P.ID = S.ParameterID "
 set ParamSelect = ParamSelect_"inner join IIBAENSEMBLE_Monitor.tblItems I "
 set ParamSelect = ParamSelect_"on P.ThresholdID = I.ID "
 set ParamSelect = ParamSelect_"order by "_sortby1_", "_sortby2
 Do rs.Prepare(ParamSelect)
 Do rs.Execute()
 set i = 1
 //w ParamSelect
 While(rs.Next()) {
 	
 	if i#2=0 {
 		set TableHTML = TableHTML_"<tr class=""EvenRow""  >"
 	} Else {
 		set TableHTML = TableHTML_"<tr class=""OddRow""  >"
 	}
 	set TableHTML = TableHTML_"<td nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" ><img src='customimages/edit.gif' alt='Edit' onclick='window.location=""IIBASupport.csp?PageName=AlertEdit&Mode=Edit&paramID="_rs.Data("ID")_"""'/></td>"
	set TableHTML = TableHTML_"<td nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" ><img src='customimages/trash_bold.gif' alt='Delete' onclick='removeAlert("""_rs.Data("ID")_""")'/></td>"
	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("ItemName")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("Parameter")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("ThresholdDesc")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("ThresholdDuration")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("AlertDuration")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("HourStart")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("HourEnd")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_$CASE(rs.Data("Active"),1:"Y",:"N")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("M")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("T")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("W")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("Th")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("F")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("Sa")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("Su")_"</td>"
 		set TableHTML = TableHTML_"<td nowrap>"
 	If ($ASCII(rs.Data("Holidays"))>32) {
 		Set TableHTML=TableHTML_"<center>yes</center>"
 	}
 	Set TableHTML=TableHTML_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"
 	If (rs.Data("HolidayOnly")="1") {
 		Set TableHTML=TableHTML_"Y"
 	} else {
 		If (rs.Data("Holidays")'="") {
 			Set TableHTML=TableHTML_"N"
 		}
 	}
 	Set TableHTML=TableHTML_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("NotificationEmail")_"</td>"
 	set TableHTML = TableHTML_"</tr>"
 	
 	
 	set i = i+1
 }		
 set TableHTML = TableHTML_"</table>"
 if action = "pageload" {
 	w TableHTML_"</span>"
 } 
 
 Quit 1
]]></Implementation>
</Method>

<Method name="EmailReplace">
<ClassMethod>1</ClassMethod>
<FormalSpec>OldEmail:%String,NewEmail:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 	set rs=##class(%ResultSet).%New()
 	do rs.Prepare("Select ID,NotificationEmail from IIBAENSEMBLE_Monitor.ItemParameters where NotificationEmail like '%"_OldEmail_"%'")
 	do rs.Execute()
 
 	while (rs.Next()) {
 		set id=rs.Get("ID")
 		set notify=rs.Get("NotificationEmail")
 		
 		set Elist=$LFS(notify,",")
 		set p=$LF(Elist,OldEmail)
 		if ( p>0) {	
 			Set NewNotify=""
 			Set ptr=0
 			Set ptr=0
 			While $LISTNEXT(Elist,ptr,email) {
 				if ( email '= OldEmail ) {
 					Set NewNotify=NewNotify_","_email
 				} else {
 					If (NewEmail '="" ) {
 						Set NewNotify=NewNotify_","_NewEmail
 					}
 				}
 			}
 			Set NewNotify=$E(NewNotify,2,$LENGTH(NewNotify))
 			
 			Set Urs=##class(%ResultSet).%New()
 			set UpdateStatement="Update IIBAENSEMBLE_Monitor.ItemParameters set NotificationEmail='"_NewNotify_"' where ID="_id
 			
 
 			If ( NewNotify '= "" ) {
 				set UpdateStatement="Update IIBAENSEMBLE_Monitor.ItemParameters set NotificationEmail='"_NewNotify_"' where ID="_id
 				do Urs.Prepare(UpdateStatement)
 				do Urs.Execute()
 			} else {
 				&js<(alert('Alert row must have at least on e-mail notification. Delete failed for row id: '+#(id)#))>
 			}
 
 			
 						
 			
 		}
 	}
]]></Implementation>
</Method>

<Method name="FilterTable">
<ClassMethod>1</ClassMethod>
<FormalSpec>itemname:%String,parameter:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 
 set TableHTML = ..BuildHeaderHTML()
 
 set sortby1 = "p.ItemName"
 set sortby2 = "p.Parameter"
 
 Set rs=##class(%ResultSet).%New()
 set ParamSelect = ""
 set ParamSelect = ParamSelect_"Select "
 set ParamSelect = ParamSelect_"i.itemdescription as ThresholdDesc, "
 set ParamSelect = ParamSelect_"p.ID, p.Active, p.AlertDuration/60 as AlertDuration, p.ItemName, p.NotificationEmail, p.Parameter, p.Threshold, p.ThresholdDuration, "
 set ParamSelect = ParamSelect_"p.Holidays, p.HolidayOnly, "
 set ParamSelect = ParamSelect_"s.HourStart, s.HourEnd, s.M, s.T, s.W, s.Th, s.F, s.Sa, s.Su "
 set ParamSelect = ParamSelect_"from IIBAENSEMBLE_Monitor.ItemParameters P "
 set ParamSelect = ParamSelect_"inner join IIBAENSEMBLE_Monitor.tblSchedules S "
 set ParamSelect = ParamSelect_"on P.ID = S.ParameterID "
 set ParamSelect = ParamSelect_"inner join IIBAENSEMBLE_Monitor.tblItems I "
 set ParamSelect = ParamSelect_"on P.ThresholdID = I.ID "
 
 if (itemname'="")&(parameter'="") {
 	set ParamSelect = ParamSelect_"where p.ItemName = '"_itemname_"' "
 	set ParamSelect = ParamSelect_"AND p.Parameter = '"_parameter_"' "
 } Elseif (itemname'="")&(parameter="") {
 	set ParamSelect = ParamSelect_"where p.ItemName = '"_itemname_"' "
 } Elseif (itemname="")&(parameter'="") {
 	set ParamSelect = ParamSelect_"where p.Parameter = '"_parameter_"' "
 }
 
 set ParamSelect = ParamSelect_"order by "_sortby1_", "_sortby2
 
 //set TableHTML = TableHTML_ParamSelect
 
 Do rs.Prepare(ParamSelect)
 Do rs.Execute()
 set i = 1
 //w ParamSelect
 While(rs.Next()) {
 	
 		
 	if i#2=0 {
 		set TableHTML = TableHTML_"<tr class=""EvenRow""  >"
 	} Else {
 		set TableHTML = TableHTML_"<tr class=""OddRow""  >"
 	}
 	set TableHTML = TableHTML_"<td nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" ><img src='customimages/edit.gif' alt='Edit' onclick='window.location=""IIBASupport.csp?PageName=AlertEdit&Mode=Edit&paramID="_rs.Data("ID")_"""'/></td>"
	set TableHTML = TableHTML_"<td nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" ><img src='customimages/trash_bold.gif' alt='Delete' onclick='removeAlert("""_rs.Data("ID")_""")'/></td>"
	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("ItemName")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("Parameter")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("ThresholdDesc")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("ThresholdDuration")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("AlertDuration")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("HourStart")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("HourEnd")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_$CASE(rs.Data("Active"),1:"Y",:"N")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("M")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("T")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("W")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("Th")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("F")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("Sa")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("Su")_"</td>"
 		set TableHTML = TableHTML_"<td nowrap>"
 	If ($ASCII(rs.Data("Holidays"))>32) {
 		Set TableHTML=TableHTML_"<center>yes</center>"
 	}
 	Set TableHTML=TableHTML_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"
 	If (rs.Data("HolidayOnly")="1") {
 		Set TableHTML=TableHTML_"Y"
 	} else {
 		If (rs.Data("Holidays")'="") {
 			Set TableHTML=TableHTML_"N"
 		}
 	}
 	Set TableHTML=TableHTML_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("NotificationEmail")_"</td>"
 	set TableHTML = TableHTML_"</tr>"
 	
 	
 	set i = i+1
 }		
 set TableHTML = TableHTML_"</table>"
 
 Quit TableHTML
]]></Implementation>
</Method>

<Method name="Remove">
<ClassMethod>1</ClassMethod>
<FormalSpec>paramID:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 		
 	set rs=##class(%ResultSet).%New()
 	Do rs.Prepare("DELETE from IIBAENSEMBLE_Monitor.ItemParameters where ID = "_paramID_"")
 	Do rs.Execute()
 	
 	set rs=##class(%ResultSet).%New()
 	Do rs.Prepare("DELETE from IIBAENSEMBLE_Monitor.tblSchedules where ParameterID = "_paramID_"")
 	Do rs.Execute()
]]></Implementation>
</Method>

<Method name="SortTable">
<ClassMethod>1</ClassMethod>
<FormalSpec>sortby1:%String,sortby2:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 
 set TableHTML = ..BuildHeaderHTML()
 
 Set rs=##class(%ResultSet).%New()
 set ParamSelect = ""
 set ParamSelect = ParamSelect_"Select "
 set ParamSelect = ParamSelect_"i.itemdescription as ThresholdDesc, "
 set ParamSelect = ParamSelect_"p.ID, p.Active, p.AlertDuration/60 as AlertDuration, p.ItemName, p.NotificationEmail, p.Parameter, p.Threshold, p.ThresholdDuration, "
 set ParamSelect = ParamSelect_"p.Holidays, p.HolidayOnly, "
 set ParamSelect = ParamSelect_"s.HourStart, s.HourEnd, s.M, s.T, s.W, s.Th, s.F, s.Sa, s.Su "
 set ParamSelect = ParamSelect_"from IIBAENSEMBLE_Monitor.ItemParameters P "
 set ParamSelect = ParamSelect_"inner join IIBAENSEMBLE_Monitor.tblSchedules S "
 set ParamSelect = ParamSelect_"on P.ID = S.ParameterID "
 set ParamSelect = ParamSelect_"inner join IIBAENSEMBLE_Monitor.tblItems I "
 set ParamSelect = ParamSelect_"on P.ThresholdID = I.ID "
 set ParamSelect = ParamSelect_"order by "_sortby1_", "_sortby2
 Do rs.Prepare(ParamSelect)
 Do rs.Execute()
 set i = 1
 //w ParamSelect
 While(rs.Next()) {
 	
 	
 	
 	if i#2=0 {
 		set TableHTML = TableHTML_"<tr class=""EvenRow""  >"
 	} Else {
 		set TableHTML = TableHTML_"<tr class=""OddRow""  >"
 	}
	set TableHTML = TableHTML_"<td nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" ><img src='customimages/edit.gif' alt='Edit' onclick='window.location=""IIBASupport.csp?PageName=AlertEdit&Mode=Edit&paramID="_rs.Data("ID")_"""'/></td>"
	set TableHTML = TableHTML_"<td nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" ><img src='customimages/trash_bold.gif' alt='Delete' onclick='removeAlert("""_rs.Data("ID")_""")'/></td>"
	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("ItemName")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("Parameter")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("ThresholdDesc")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("ThresholdDuration")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("AlertDuration")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("HourStart")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("HourEnd")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_$CASE(rs.Data("Active"),1:"Y",:"N")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("M")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("T")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("W")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("Th")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("F")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("Sa")_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("Su")_"</td>"
 		set TableHTML = TableHTML_"<td nowrap>"
 	If ($ASCII(rs.Data("Holidays"))>32) {
 		Set TableHTML=TableHTML_"<center>yes</center>"
 	}
 	Set TableHTML=TableHTML_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"
 	If (rs.Data("HolidayOnly")="1") {
 		Set TableHTML=TableHTML_"Y"
 	} else {
 		If (rs.Data("Holidays")'="") {
 			Set TableHTML=TableHTML_"N"
 		}
 	}
 	Set TableHTML=TableHTML_"</td>"
 	set TableHTML = TableHTML_"<td nowrap>"_rs.Data("NotificationEmail")_"</td>"
 	set TableHTML = TableHTML_"</tr>"
 	
 	
 	set i = i+1
 	
 	
 }		
 set TableHTML = TableHTML_"</table>"
 
 Quit TableHTML
]]></Implementation>
</Method>

<Method name="SubMenu">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set sHTML = ""
	set sHTML=sHTML_"<table><tr><td class=""LayoutContentCol"" width=""20%"" ><div class=""DetailCommand"">"
	set sHTML=sHTML_"<a id=""linkAlertNew"" class=""DetailCommand"" target=""_top"" href='IIBASupport.csp?PageName=AlertNew&Mode=New'><nobr>&nbsp;Add New Alert&nbsp;</nobr></A>"
	set sHTML=sHTML_"|"
	set sHTML=sHTML_"<a id=""linkHolidayDefinition"" class=""DetailCommand"" target=""_top"" href='IIBASupport.csp?PageName=HolidayDefinition'><nobr>&nbsp;Add Holiday&nbsp;</nobr></A>"
	set sHTML=sHTML_"|"
	set sHTML=sHTML_"<a id=""linkAlertExceptionDefinition"" class=""DetailCommand"" target=""_top"" href='IIBASupport.csp?PageName=AlertExceptionDefinition'><nobr>&nbsp;Define Alert Exception&nbsp;</nobr></A>"
	set sHTML=sHTML_"|"
	set sHTML=sHTML_"<a id=""linkAlertExceptionView"" class=""DetailCommand"" target=""_top"" href='IIBASupport.csp?PageName=AlertExceptionView'><nobr>&nbsp;View Alert Exceptions&nbsp;</nobr></A>"
	set sHTML=sHTML_"</div></td></tr></table>"
	
	Quit sHTML
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.AlertEdit">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>62655,41795</TimeChanged>
<TimeCreated>60908,31118.460678</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	if ##class(%SYSTEM.Security).Check("%All") = "READ,WRITE,USE" { set Allowed = 1 }
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
   <script language=javascript>
	<!--
	function Initialize()
	{

	}
	function Hello() {
		alert('Hello');
	}
	
	function activatesave() {
		
		document.getElementById('SaveChanges').disabled=false;
		
	}
	
	function applyItemAlertNotes(itemName) {
		
		var EmailText=document.getElementById('EmailText').value.substr(0,250);
		alert("Apply notes to all alerts for "+itemName+": "+EmailText)
		
		
		var save=#server(..ApplyNotesToItemAlerts(itemName,EmailText))#;
		
		
	}
	
	function savechanges(paramID) {
		
		var val = validatesave();
		
		if (val==1) {
			//var selectedparam = document.InterfaceMonitorParameters.Parameters.selectedIndex;
			//var paramID = document.InterfaceMonitorParameters.Parameters.options[selectedparam].value;
			
			var ThresholdID = document.getElementById('ThresholdValue').value;
			var ThresholdDuration = document.getElementById('ThresholdDuration').value;
			var AlertInterval = document.getElementById('AlertInterval').value*60;
			var NotificationEmail = document.getElementById('NotificationEmail').value;
			var Active = document.getElementById('Active').checked;
			var hourstart = document.getElementById('HourStart').selectedIndex;
			var hourend = document.getElementById('HourEnd').selectedIndex;
			var M = document.getElementById('M').checked;
			var T = document.getElementById('T').checked;
			var W = document.getElementById('W').checked;
			var Th = document.getElementById('Th').checked;
			var F = document.getElementById('F').checked;
			var Sa = document.getElementById('Sa').checked;
			var Su = document.getElementById('Su').checked;
			var HolidayOnly=document.getElementById('OnHolidayOnly').checked;
			var EmailText=document.getElementById('EmailText').value.substr(0,250);
			
			
			var HList=#server(..GetHolidayCount())#;
			var HItems=HList.split(",");
			var holidays='';

			if (HList=='') {
				alert("No holidays defined");
			}

			
			for (i=1; i<=HItems.length; i++) {
				
				if (document.getElementById('Holiday'+HItems[i-1]).checked ) {
					
					if ( holidays != '' ) {
						holidays=holidays+"^";
					}
					holidays=holidays+HItems[i-1];
				}
			}
				
			
			var save = #server(..SaveChanges(paramID,ThresholdID,ThresholdDuration,AlertInterval,NotificationEmail,EmailText,Active,hourstart,hourend,M,T,W,Th,F,Sa,Su,HolidayOnly,holidays))#;
			document.getElementById('SaveChanges').disabled=true;
			
			self.document.location="IIBASupport.csp?PageName=AlertAdmin"
		
			
		}
					
	}
	

		
	function validatesave() {
		
		var errorMsg = "";
		
		var daycount = 0;
				
		if (document.getElementById('M').checked==true)
			daycount += 1
			
		if (document.getElementById('T').checked==true)
			daycount += 1
			
		if (document.getElementById('W').checked==true)
			daycount += 1
			
		if (document.getElementById('Th').checked==true)
			daycount += 1
			
		if (document.getElementById('F').checked==true)
			daycount += 1
			
		if (document.getElementById('Sa').checked==true)
			daycount += 1
			
		if (document.getElementById('Su').checked==true)
			daycount += 1
			
		if (daycount == 0)
			errorMsg += "At least one day must be selected.\n";
			
		if (!((document.getElementById('HourEnd').selectedIndex) > (document.getElementById('HourStart').selectedIndex)))
				errorMsg += "The 'Start Time' must be greater than the 'End Time.'\n";	
		
		
		
		if (!(document.InterfaceMonitorParameters.ThresholdValue.value))
			errorMsg += "A Threshold Value must be entered.\n";
		
		if (!(document.InterfaceMonitorParameters.ThresholdDuration.value))
			errorMsg += "A Grace Period must be entered.\n";
		
		if (!(document.InterfaceMonitorParameters.AlertInterval.value))
			errorMsg += "An Alert Interval must be entered.\n";
			
		if (!(document.InterfaceMonitorParameters.NotificationEmail.value))
			errorMsg += "A Notification Email must be entered.\n";
			
		if ( document.InterfaceMonitorParameters.EmailText.value.length>250 )
			errorMsg += "Instructions must be 250 characters or less.\n";
		
		
		if (errorMsg)
        {
            alert(errorMsg);
            return(0);
        }
        else
        {
	        
	        return(1);
	        			
        }
			
	}


  -->
   </script>
  >
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	w ##class(IIBAENSEMBLE.csp.AlertAdmin).SubMenu()
	Set Mode=%request.Get("Mode")
	Set paramID=%request.Get("paramID")


	if Mode = "Edit" { 
		w "<b>Edit Alert</b>"
	}
	w "<br>"
	

	Set rs=##class(%ResultSet).%New()
	set ParamSelect = ""
	set ParamSelect = ParamSelect_"Select "
	set ParamSelect = ParamSelect_"p.ID, p.Active, p.AlertDuration/60 as AlertDuration, p.ItemName, p.NotificationEmail, p.Parameter, p.Threshold, p.ThresholdDuration, p.Holidays, p.HolidayOnly, p.EmailText, "
	set ParamSelect = ParamSelect_"s.HourStart, s.HourEnd, s.M, s.T, s.W, s.Th, s.F, s.Sa, s.Su "
	set ParamSelect = ParamSelect_"from IIBAENSEMBLE_Monitor.ItemParameters P "	
	set ParamSelect = ParamSelect_"inner join IIBAENSEMBLE_Monitor.tblSchedules S "
	set ParamSelect = ParamSelect_"on P.ID = S.ParameterID "
	set ParamSelect = ParamSelect_"where p.ID = "_paramID
	Do rs.Prepare(ParamSelect)
	Do rs.Execute()
	Do rs.Next()
	//w ParamSelect

	set rsItemDesc=##class(%ResultSet).%New()
	do rsItemDesc.Prepare("select itemdescription from IIBAENSEMBLE_Monitor.tblItems where itemvalue = '"_rs.Data("Parameter")_"' and itemtype = 'Parameter'")
	do rsItemDesc.Execute()
	do rsItemDesc.Next()


	W "<Form Name=""InterfaceMonitorParameters"" Id=""InterfaceMonitorParameters"">"
	W "<Table cellpadding=10><TR><TD>"
	W "<Table><TR><TD>Interface Name</TD><TD>"
	if Mode = "Edit" { 
		W "<Select Name=""InterfaceS"" Id=""InterfaceS"" DISABLED>"
		W "<Option Value="""_rs.Data("ID")_""">"_rs.Data("ItemName")
		W "</Select></TD></TR>"	
	}

	W "<TR><TD>Parameter</TD><TD>"
	if Mode = "Edit" { 
		W "<Table><TR><TD>"
		W "<Select Name=""Parameters"" Id=""Parameters"" DISABLED >"
		W "<Option Value="""_rs.Data("Parameter")_""" >"_rs.Data("Parameter")
		W "</Select></TD><TD>&nbsp;</TD><TD style='font-size:70%;font-style=italic'>"_rsItemDesc.Data("itemdescription")_"</TD></Table></TD></TR>"
	}

	if Mode = "Edit" { 
		W "<TR><TD>Threshold Value</TD><TD><Select Name=""ThresholdValue"" Id=""ThresholdValue"" OnChange=""activatesave()"" >"
	
		set rsThresholdValues=##class(%ResultSet).%New()
		do rsThresholdValues.Prepare("select ID, itemdescription, itemvalue, itemtype from IIBAENSEMBLE_monitor.tblitems where itemtype = '"_rs.Data("Parameter")_"Value'")
		//w "select itemdescription, itemvalue, itemtype from IIBAENSEMBLE_monitor.tblitems where itemtype = '"_rs.Data("Parameter")_"Value'"
		do rsThresholdValues.Execute()
		while rsThresholdValues.Next() {
			if rsThresholdValues.Data("itemvalue") = rs.Data("Threshold") {
				W "<Option Value="""_rsThresholdValues.Data("ID")_""" SELECTED>"_rsThresholdValues.Data("itemdescription")
			} Else {
				W "<Option Value="""_rsThresholdValues.Data("ID")_""">"_rsThresholdValues.Data("itemdescription")
			}
		}
		W "</Select></TD></TR>"
	}

	if Mode = "Edit" { 
		W "<TR><TD>Grace Period</TD><TD><Input Type=""Text"" Name=""ThresholdDuration"" Id=""ThresholdDuration"" Value="""_rs.Data("ThresholdDuration")_""" title='Amount of time the alert condition should persist before triggering an alert' OnChange=""activatesave()"" > (seconds)</TD></TR>"
	}

	if Mode = "Edit" { 
		W "<TR><TD>Alert Interval</TD><TD><Input Type=""Text"" Name=""AlertInterval"" Id=""AlertInterval"" Value="""_rs.Data("AlertDuration")_""" title='How often the alert is re-reported' OnChange=""activatesave()"" > (minutes)</TD></TR>"
	}

  If Mode = "Edit" {
	W "<TR><TD>Schedule</TD><TD>"
	w "Hour Start:&nbsp;&nbsp;<select NAME=""HourStart"" Id=""HourStart"" OnChange=""activatesave()"">"
	For i = 0:1:24 {
		If i = rs.Data("HourStart") {
			w "<option VALUE="""_i_""" selected>"_i
		} Else {
			w "<option VALUE="""_i_""">"_i
		}
	}
	w "</select>&nbsp;&nbsp;"
	w "Hour End:&nbsp;&nbsp;<select NAME=""HourEnd"" Id=""HourEnd"" OnChange=""activatesave()"">"
	For i = 0:1:24 {
		If i = rs.Data("HourEnd") {
			w "<option VALUE="""_i_""" selected>"_i
		} Else {
			w "<option VALUE="""_i_""">"_i
		}
	}
	w "</select><br>"
	
	if rs.Data("M") = 1 {
		w "M: <Input Type=""checkbox"" Name=""M"" Id=""M"" checked=true OnClick=""activatesave()""> "
	} Else {
		w "M: <Input Type=""checkbox"" Name=""M"" Id=""M"" OnClick=""activatesave()""> "
	}
	if rs.Data("T") = 1 {
		w "T: <Input Type=""checkbox"" Name=""T"" Id=""T"" checked=true OnClick=""activatesave()""> "
	} Else {
		w "T: <Input Type=""checkbox"" Name=""T"" Id=""T"" OnClick=""activatesave()""> "
	}
	if rs.Data("W") = 1 {
		w "W: <Input Type=""checkbox"" Name=""W"" Id=""W"" checked=true OnClick=""activatesave()""> "
	} Else {
		w "W: <Input Type=""checkbox"" Name=""W"" Id=""W"" OnClick=""activatesave()""> "
	}
	if rs.Data("Th") = 1 {
		w "Th: <Input Type=""checkbox"" Name=""Th"" Id=""Th"" checked=true OnClick=""activatesave()""> "
	} Else {
		w "Th: <Input Type=""checkbox"" Name=""Th"" Id=""Th"" OnClick=""activatesave()""> "
	}
	if rs.Data("F") = 1 {
		w "F: <Input Type=""checkbox"" Name=""F"" Id=""F"" checked=true OnClick=""activatesave()""> "
	} Else {
		w "F: <Input Type=""checkbox"" Name=""F"" Id=""F"" OnClick=""activatesave()""> "
	}
	if rs.Data("Sa") = 1 {
		w "Sa: <Input Type=""checkbox"" Name=""Sa"" Id=""Sa"" checked=true OnClick=""activatesave()""> "
	} Else {
		w "Sa: <Input Type=""checkbox"" Name=""Sa"" Id=""Sa"" OnClick=""activatesave()""> "
	}
	if rs.Data("Su") = 1 {
		w "Su: <Input Type=""checkbox"" Name=""Su"" Id=""Su"" checked=true OnClick=""activatesave()""> "
	} Else {
		w "Su: <Input Type=""checkbox"" Name=""Su"" Id=""Su"" OnClick=""activatesave()""> "
	}
	
	
	w "</TD></TR>"
  }

	/*
			set tM = rs.Data("M")
			set tT = rs.Data("T")
			set tW = rs.Data("W")
			set tTh = rs.Data("Th")
			set tF = rs.Data("F")
			set tSa = rs.Data("Sa")
			set tSu = rs.Data("Su")

	*/

	if Mode = "Edit" { 
		W "<TR><TD>Notification Email</TD><TD><Input Type=""Text"" Style=""width:500"" Name=""NotificationEmail"" Id=""NotificationEmail"" Value="""_rs.Data("NotificationEmail")_""" OnChange=""activatesave()"" ></TD></TR>"
	}

	W "</TABLE>"
	W "</TD><TD>"
	W "<Table>"
	Set hrs=##class(%ResultSet).%New()
	Set HolidayList="Select * from IIBAENSEMBLE_Monitor.tblItems where itemtype='Holiday'"
	D hrs.Prepare(HolidayList)
	D hrs.Execute()

  If (hrs'="") {
	S AlertHolidays=$LFS(rs.Data("Holidays"),"^")
	// S AlertHolidays=$LFS("1^3^6","^")
	
	W "<TR><TD>&nbsp;</TD></TR>"
	W !,"<TR><TD>Holiday Alert Only</TD>"
	// W "<TD>*",rs.Data("HolidayOnly"),"*</TD>"
	W "<TD><Input Type=""checkbox"" Name=""OnHolidayOnly"" Id=""OnHolidayOnly"" OnClick=""activatesave()"""
	If ( rs.Data("HolidayOnly")="1") {
		W " checked=true "
	}
	W "></TD></TR>"
	W "<TR><TD></TD></TR><TR><TD>Holidays</TD></TR>"
	
	
	While ( hrs.Next() ) {
		Set HolidayName=hrs.Data("itemdescription")
		Set HolidayID=hrs.Data("itemvalue")
		//W HolidayName,!
		W !,"<TR><TD>&nbsp;&nbsp;&nbsp;&nbsp;",HolidayName,"</TD>"
		W "<TD><Input Type=""checkbox"" Name=""Holiday"_HolidayID,""" Id=""Holiday"_HolidayID,""" OnClick=""activatesave()"""
		If ( $LF(AlertHolidays,HolidayID) ) {
			W " checked=true "
		}
		W ">"
		W "</TD></TR>"
	} 
	W "</Table></TD></TR><TR><TD>"
	W "<Table>"
  }
  
  //Email Text
  w "<TR><TD colSpan=2><Table><TR><TD>Notes (optional)&nbsp;&nbsp;&nbsp;&nbsp;</TD></TR><TR><TD style='fontSize=""small"";font=""italic""'>(Max 250 characters)</TD></TR></Table></TD>"
  W "<TD><TextArea id='EmailText' rows='5' cols='45' title='Optional Email Text (250 chars max)' OnChange='activatesave()'>"_rs.Data("EmailText")_"</TextArea></TD></TR>"
  W "<TR><TD colspan=2>&nbsp;</TD><TD><Input type='button' value='Apply Notes to all alerts for this item' onclick='applyItemAlertNotes("""_rs.Data("ItemName")_""")'/></TD></TR>"
  
  if Mode = "Edit" { 
	if rs.Data("Active") = 1 {
		W "<TR><TD>Active</TD><TD><Input Type=""checkbox"" Name=""Active"" Id=""Active"" checked=true OnClick=""activatesave()""></TD></TR>"
	} Else {
		W "<TR><TD>Active</TD><TD><Input Type=""checkbox"" Name=""Active"" Id=""Active"" OnClick=""activatesave()""></TD></TR>"
	}
  }


	w "<TR><TD></TD><TD>"

	
	w "<Input DISABLED Type=""Button"" Style=""width:100"" Name=""SaveChanges"" Id=""SaveChanges"" Value=""Save Changes"" onclick=""savechanges('"_paramID_"')"">"
	w "<Input Type=""Button"" Style=""width:100"" Name=""Cancel"" Id=""Cancel"" Value=""Cancel"" onclick='self.document.location=""IIBASupport.csp?PageName=AlertAdmin""'>"

	W "</Table>"
	W "</Table>"
	W "</Form>"
	&html<
	<script language=javascript>
	
	document.getElementById('linkAlertAdmin').style.color = 'red';
	
	</script>	
	>
]]></Implementation>
</Method>

<Method name="GetHolidayCount">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 		
 	Set HList=""
 	
 	Set rs=##class(%ResultSet).%New()
 	Do rs.Prepare("select itemvalue From IIBAENSEMBLE_Monitor.tblItems where itemtype='Holiday'")
 	Do rs.Execute()
 	
 	While rs.Next() {
 		If (HList="") {
 			S HList=rs.Get("itemvalue")
 		} else {
 			S HList=HList_","_rs.Get("itemvalue")
 		}
 	}
 	
 	/*		
 	// Get ThresholdValue using threshold ID
 	&sql(Select count (*) 
 		into :Count 
 		From IIBAENSEMBLE_Monitor.tblItems
 		Where itemtype='Holiday')
 	*/
 	
 	
 	Quit HList
]]></Implementation>
</Method>

<Method name="SaveChanges">
<ClassMethod>1</ClassMethod>
<FormalSpec>paramID:%String,ThresholdID:%String,ThresholdDuration:%String,AlertInterval:%String,NotificationEmail:%String,EmailText:%String,Active:%String,hourstart:%String,hourend:%String,M:%String,T:%String,W:%String,Th:%String,F:%String,Sa:%String,Su:%String,HolidayOnly:%String,holidays:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 		
 	Set ThresholdValue=""
 			
 	// Get ThresholdValue using threshold ID
 	&sql(Select Top 1 itemvalue 
 		into :ThresholdValue 
 		From IIBAENSEMBLE_Monitor.tblItems
 		Where ID=:ThresholdID)
 	
 	set rs=##class(%ResultSet).%New()
 	Set UpdateString="UPDATE IIBAENSEMBLE_Monitor.ItemParameters set Threshold = '"_ThresholdValue_"'"
 	Set UpdateString=UpdateString_", ThresholdID = '"_ThresholdID_"', ThresholdDuration = '"_ThresholdDuration_"', AlertDuration = '"_AlertInterval_"'"
 	Set UpdateString=UpdateString_", NotificationEmail = '"_NotificationEmail_"', EmailText='"_EmailText_"', Active = "_Active_", HolidayOnly="_HolidayOnly_", Holidays='"_holidays_"'"
 	Set UpdateString=UpdateString_" where ID = "_paramID_""
 	Do rs.Prepare(UpdateString)
 	Do rs.Execute()
 	
 	set rs=##class(%ResultSet).%New()
 	Do rs.Prepare("UPDATE IIBAENSEMBLE_Monitor.tblSchedules set HourStart="_hourstart_", HourEnd="_hourend_",M="_M_",T="_T_",W="_W_",Th="_Th_",F="_F_",Sa="_Sa_",Su="_Su_" where ParameterID="_paramID_"")
 	Do rs.Execute()
 	
 	
 	set updatestatus = "ok"
 	
 	Quit updatestatus
]]></Implementation>
</Method>

<Method name="ApplyNotesToItemAlerts">
<ClassMethod>1</ClassMethod>
<FormalSpec>itemName:%String,emailText:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if (itemName'="") {
		s rs=##class(%ResultSet).%New()
		Set UpdateString="UPDATE IIBAENSEMBLE_Monitor.ItemParameters set EmailText='"_emailText_"' "
		set UpdateString=UpdateString_" Where ItemName='"_itemName_"'"
		Do rs.Prepare(UpdateString)
 		Do rs.Execute()
	}
	
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.AlertNew">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>63186,27803.313367</TimeChanged>
<TimeCreated>60908,31118.460678</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	if ##class(%SYSTEM.Security).Check("%All") = "READ,WRITE,USE" { set Allowed = 1 }
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
   <script language=javascript>
	<!--
	function Initialize()
	{

	}
	function Hello() {
		alert('Hello');
	}
	
	function activatesave() {
		
		document.getElementById('SaveChanges').disabled=false;
		
	}
	
	function applyItemAlertNotes() {
		
		var selecteditem = document.InterfaceMonitorParameters.InterfaceS.selectedIndex;
		var itemName = document.InterfaceMonitorParameters.InterfaceS.options[selecteditem].value;
		var EmailText=document.getElementById('EmailText').value.substr(0,250);
		alert("Apply notes to all alerts for "+itemName+": "+EmailText)
		
		
		var save=#server(..ApplyNotesToItemAlerts(itemName,EmailText))#;
		
		
	}

	function loadparamters() {
		
		var selecteditem = document.InterfaceMonitorParameters.InterfaceS.selectedIndex;
		var itemname = document.InterfaceMonitorParameters.InterfaceS.options[selecteditem].value;
		var s=document.getElementById("Parameters");
		s.disabled = true;
		while (s.length>0)
		{
				s.remove(s.length-1);
		}
		var s=document.getElementById("ThresholdValue");
		s.disabled = true;
		while (s.length>0)
		{
				s.remove(s.length-1);
		}
		document.getElementById('ThresholdValue').disabled=true;
		document.getElementById('ThresholdDuration').disabled=true;
		document.getElementById('AlertInterval').disabled=true;
		document.getElementById('NotificationEmail').disabled=true;
		document.getElementById('EmailText').disabled=true;
		document.getElementById('Active').disabled=true;
		document.getElementById('SaveChanges').disabled=true;
		document.getElementById('Remove').disabled=true;
		
		document.getElementById('HourStart').disabled=true;
		document.getElementById('HourEnd').disabled=true;
		document.getElementById('M').disabled=true;
		document.getElementById('T').disabled=true;
		document.getElementById('W').disabled=true;
		document.getElementById('Th').disabled=true;
		document.getElementById('F').disabled=true;
		document.getElementById('Sa').disabled=true;
		document.getElementById('Su').disabled=true;
		
		document.getElementById('HourStart').selectedIndex=0;
		document.getElementById('HourEnd').selectedIndex=0;
		document.getElementById('M').checked=false;
		document.getElementById('T').checked=false;
		document.getElementById('W').checked=false;
		document.getElementById('Th').checked=false;
		document.getElementById('F').checked=false;
		document.getElementById('Sa').checked=false;
		document.getElementById('Su').checked=false;	
				
				
		//document.getElementById('ThresholdValue').selectedIndex=0;
		document.getElementById('ThresholdDuration').value='';
		document.getElementById('AlertInterval').value='';
		document.getElementById('NotificationEmail').value='';
		document.getElementById('Active').checked=false;


		var paramlistbuild = #server(..LoadParameters(itemname))#;
	
	//alert(paramlistbuild);	
			
	}
	
	function loadthreshvalues(element) {
		
		
		var selectedparam = document.getElementById('Parameters'+element).selectedIndex;
		var paramname = document.getElementById('Parameters'+element).options[selectedparam].text;

		var s=document.getElementById('ThresholdValue'+element);
		
		s.disabled = true;
		while (s.length>0)
		{
				s.remove(s.length-1);
		}
		
		document.getElementById('ThresholdValue'+element).disabled=true;
		
		var settinglistbuild = #server(..LoadThresholdValues(paramname,element))#;
		
		document.getElementById('RemoveParam'+element).disabled=false;
		
	}
	
	function loadsettings() {
		
		var selecteditem = document.InterfaceMonitorParameters.InterfaceS.selectedIndex;
		var itemname = document.InterfaceMonitorParameters.InterfaceS.options[selecteditem].value;
		
		var selectedparam = document.InterfaceMonitorParameters.Parameters.selectedIndex;
		var paramID = document.InterfaceMonitorParameters.Parameters.options[selectedparam].value;
		
		document.getElementById('ThresholdValue').disabled=true;
		document.getElementById('ThresholdDuration').disabled=true;
		document.getElementById('AlertInterval').disabled=true;
		document.getElementById('NotificationEmail').disabled=true;
		document.getElementById('EmailText').disabled=true;
		document.getElementById('Active').disabled=true;
		document.getElementById('SaveChanges').disabled=true;
		document.getElementById('Remove').disabled=true;
		
		document.getElementById('HourStart').disabled=true;
		document.getElementById('HourEnd').disabled=true;
		document.getElementById('M').disabled=true;
		document.getElementById('T').disabled=true;
		document.getElementById('W').disabled=true;
		document.getElementById('Th').disabled=true;
		document.getElementById('F').disabled=true;
		document.getElementById('Sa').disabled=true;
		document.getElementById('Su').disabled=true;
		
		document.getElementById('HourStart').selectedIndex=0;
		document.getElementById('HourEnd').selectedIndex=0;
		document.getElementById('M').checked=false;
		document.getElementById('T').checked=false;
		document.getElementById('W').checked=false;
		document.getElementById('Th').checked=false;
		document.getElementById('F').checked=false;
		document.getElementById('Sa').checked=false;
		document.getElementById('Su').checked=false;	
		
		//document.getElementById('ThresholdValue').selectedIndex=0;
		document.getElementById('ThresholdDuration').value='';
		document.getElementById('AlertInterval').value='';
		document.getElementById('NotificationEmail').value='';
		document.getElementById('Active').checked=false;


		var settinglistbuild = #server(..LoadSettings(paramID))#;
	
	//alert(settinglistbuild);	
	
	}
	
	function selectthresh(thresholdvalue) {
		
		var s=document.getElementById("ThresholdValue");
		s.disabled = false;
		var i = 0;
		while (i<s.length)
		{
			if (s.options[i].value == thresholdvalue)
			{
				s.selectedIndex=i;
			}
			i += 1
			
		}
	
	}
	
	
	function remove() {
		var selectedparam = document.InterfaceMonitorParameters.Parameters.selectedIndex;
		var paramID = document.InterfaceMonitorParameters.Parameters.options[selectedparam].value;
		
		var remove = #server(..Remove(paramID))#;
		
		self.document.location="IIBASupport.csp?PageName=AlertNew"
		
	}
	
	function savechanges() {
		
		
		var val = validatesave()
		
		if (val==1) {
			var selectedparam = document.InterfaceMonitorParameters.Parameters.selectedIndex;
			var paramID = document.InterfaceMonitorParameters.Parameters.options[selectedparam].value;
			
			var ThresholdValue = document.getElementById('ThresholdValue').value;
			var ThresholdDuration = document.getElementById('ThresholdDuration').value;
			var AlertInterval = document.getElementById('AlertInterval').value*60;
			var NotificationEmail = document.getElementById('NotificationEmail').value;
			var EmailText = document.getElementById('EmailText').value;
			var Active = document.getElementById('Active').checked;
			var hourstart = document.getElementById('HourStart').selectedIndex;
			var hourend = document.getElementById('HourEnd').selectedIndex;
			var M = document.getElementById('M').checked;
			var T = document.getElementById('T').checked;
			var W = document.getElementById('W').checked;
			var Th = document.getElementById('Th').checked;
			var F = document.getElementById('F').checked;
			var Sa = document.getElementById('Sa').checked;
			var Su = document.getElementById('Su').checked;
			var HolidayOnly=document.getElementById('OnHolidayOnly').checked;
			
			var HList=#server(..GetHolidayCount())#;
			var HItems=HList.split(",");
			var holidays='';
			
			for (i=1; i<=HItems.length; i++) {
				if (document.getElementById('Holiday'+HItems[i-1]).checked ) {
					
					if ( holidays != '' ) {
						holidays=holidays+"^";
					}
					holidays=holidays+HItems[i-1];
				}
			}
				
			
			
			
			
			var save = #server(..SaveChanges(paramID,ThresholdValue,ThresholdDuration,AlertInterval,NotificationEmail,EmailText,Active,hourstart,hourend,M,T,W,Th,F,Sa,Su,HolidayOnly,holidays))#;
			document.getElementById('SaveChanges').disabled=true;
		
			
		}
					
	}
	
	function savenew() {
		var val = validatenewsave()
		
		if (val==1) {
			
			var selecteditem = document.InterfaceMonitorParameters.InterfaceS.selectedIndex;
			var itemname = document.InterfaceMonitorParameters.InterfaceS.options[selecteditem].value;
			
			//var selectedparam = document.InterfaceMonitorParameters.Parameters.selectedIndex;
			//var paramname = document.InterfaceMonitorParameters.Parameters.options[selectedparam].value;
			
			//var selectedThreshold = document.InterfaceMonitorParameters.ThresholdValue.selectedIndex;
			//var ThresholdID = document.InterfaceMonitorParameters.ThresholdValue.options[selectedThreshold].value;
			
			var ThresholdDuration = document.getElementById('ThresholdDuration').value;
			var AlertInterval = document.getElementById('AlertInterval').value*60;
			var NotificationEmail = document.getElementById('NotificationEmail').value;
			var EmailText = document.getElementById('EmailText').value;
			var Active = document.getElementById('Active').checked;
			var hourstart = document.getElementById('HourStart').selectedIndex;
			var hourend = document.getElementById('HourEnd').selectedIndex;
			var M = document.getElementById('M').checked;
			var T = document.getElementById('T').checked;
			var W = document.getElementById('W').checked;
			var Th = document.getElementById('Th').checked;
			var F = document.getElementById('F').checked;
			var Sa = document.getElementById('Sa').checked;
			var Su = document.getElementById('Su').checked;
			var HolidayOnly=document.getElementById('OnHolidayOnly').checked;
			
			var HolCount=#server(..GetHolidayCount())#;
			var holidays='';
			
			for (i=1; i<=HolCount; i++) {
				
				if (document.getElementById('Holiday'+i).checked ) {
					
					if ( holidays != '' ) {
						holidays=holidays+"^";
					}
					holidays=holidays+i;
				}
			}
			
			
			paramTable=document.getElementById('MonitoredParams');
			rowCount=paramTable.rows.length;
			for (i=0; i<rowCount; i++) {
				
				var r=paramTable.rows[i].id;
				r=r.substr(8,r.length);
				
				selectedparam = document.getElementById('Parameters'+r).selectedIndex;
				if (selectedparam>0) {
					paramname = document.getElementById('Parameters'+r).options[selectedparam].value;
					selectedThreshold = document.getElementById('ThresholdValue'+r).selectedIndex;
					ThresholdID = document.getElementById('ThresholdValue'+r).options[selectedThreshold].value;
			
					//alert(selectedparam+', '+paramname+', '+selectedThreshold+', '+ThresholdID);
					var save = #server(..InsertNew(itemname,paramname,ThresholdID,ThresholdDuration,AlertInterval,NotificationEmail,EmailText,Active,hourstart,hourend,M,T,W,Th,F,Sa,Su,HolidayOnly,holidays))#;
				}
			}
		
			self.document.location="IIBASupport.csp?PageName=AlertAdmin";
		
		}
		
		
	}
	
	function addnew() {
		var buildparms = #server(..BuildParameters())#;
	}

	function validatenewsave() {
		
		var errorMsg = "";
			
		
		if (!(document.InterfaceMonitorParameters.InterfaceS.selectedIndex > 0))
			errorMsg += "An Interface Name must be selected.\n";
		
		var k=document.getElementById('MonitoredParams').rows[0].id;
		var firstCount=parseInt(k.substr(8,k.length));
		if (!(document.getElementById('Parameters'+firstCount).selectedIndex > 0))
			errorMsg += "A Parameter must be selected.\n";
	
		var daycount = 0;
				
		if (document.getElementById('M').checked==true)
			daycount += 1
			
		if (document.getElementById('T').checked==true)
			daycount += 1
			
		if (document.getElementById('W').checked==true)
			daycount += 1
			
		if (document.getElementById('Th').checked==true)
			daycount += 1
			
		if (document.getElementById('F').checked==true)
			daycount += 1
			
		if (document.getElementById('Sa').checked==true)
			daycount += 1
			
		if (document.getElementById('Su').checked==true)
			daycount += 1
			
		if (daycount == 0)
			errorMsg += "At least one day must be selected.\n";
			
		if (!((document.getElementById('HourEnd').selectedIndex) > (document.getElementById('HourStart').selectedIndex)))
				errorMsg += "The 'Start Time' must be greater than the 'End Time.'\n";	
		
	
		for (i=0;i<document.getElementById('MonitoredParams').rows.length;i++) {
			k=document.getElementById('MonitoredParams').rows[i].id;
			firstCount=parseInt(k.substr(8,k.length));
			if (!(document.getElementById('ThresholdValue'+firstCount).selectedIndex >= 0))
				errorMsg += "A Threshold must be selected.\n";
		}
		
		if (!(document.InterfaceMonitorParameters.AlertInterval.value))
			errorMsg += "An Alert Interval must be entered.\n";
			
		if (!(document.InterfaceMonitorParameters.NotificationEmail.value))
			errorMsg += "A Notification Email must be entered.\n";
		
		if (errorMsg)
        {
            alert(errorMsg);
            return(0);
        }
        else
        {
	        
	        return(1);
	        			
        }
			
	}
		
	function validatesave() {
		
		var errorMsg = "";
		
		var daycount = 0;
				
		if (document.getElementById('M').checked==true)
			daycount += 1
			
		if (document.getElementById('T').checked==true)
			daycount += 1
			
		if (document.getElementById('W').checked==true)
			daycount += 1
			
		if (document.getElementById('Th').checked==true)
			daycount += 1
			
		if (document.getElementById('F').checked==true)
			daycount += 1
			
		if (document.getElementById('Sa').checked==true)
			daycount += 1
			
		if (document.getElementById('Su').checked==true)
			daycount += 1
			
		if (daycount == 0)
			errorMsg += "At least one day must be selected.\n";
			
		if (!((document.getElementById('HourEnd').selectedIndex) > (document.getElementById('HourStart').selectedIndex)))
				errorMsg += "The 'Start Time' must be greater than the 'End Time.'\n";	
		
		for (i=0;i<document.getElementById('MonitoredParams').rows.length;i++) {
			k=document.getElementById('MonitoredParams').rows[i].id;
			firstCount=parseInt(k.substr(8,k.length));
			if (!(document.getElementById('ThresholdValue'+firstCount).selectedIndex >= 0))
				errorMsg += "A Threshold must be selected.\n";
		}
		
		if (!(document.InterfaceMonitorParameters.ThresholdValue.value))
			errorMsg += "A Threshold Value must be entered.\n";
		
		if (!(document.InterfaceMonitorParameters.ThresholdDuration.value))
			errorMsg += "A Grace Period must be entered.\n";
		
		if (!(document.InterfaceMonitorParameters.AlertInterval.value))
			errorMsg += "An Alert Interval must be entered.\n";
			
		if (!(document.InterfaceMonitorParameters.NotificationEmail.value))
			errorMsg += "A Notification Email must be entered.\n";
		
		if (errorMsg)
        {
            alert(errorMsg);
            return(0);
        }
        else
        {
	        
	        return(1);
	        			
        }
			
	}
	
	
	function addParameter(count) {
		
		var paramTable=document.getElementById('MonitoredParams');
		var rowCount=paramTable.rows.length;
		
		
		var k=document.getElementById('MonitoredParams').rows[rowCount-1].id;
		var nextCount=parseInt(k.substr(8,k.length));
		nextCount=nextCount+1;
		
		
		if (document.getElementById('Parameters'+(nextCount-1)).selectedIndex > 0 ) {
		
			
			var newRow=paramTable.insertRow(rowCount);
			newRow.id='ParamRow'+nextCount;	
			var ps=document.getElementById('Parameters'+(nextCount-1))
			id='Parameters'+nextCount;
			newRow.insertCell(0);
			
		
			newRow.insertCell(1);
	
			select='<SELECT id="'+id+'" OnChange="loadthreshvalues('+nextCount+')">';
			for (i=0;i<ps.length;i++) {
				select=select+'<option value="'+ps.options[i].value+'" title="'+ps.options[i].text+'"> '+ps.options[i].text+'</OPTION>';
			}
			select=select+'</select>';
			newRow.cells[1].innerHTML=select;
		
			newRow.insertCell(2);
			newRow.insertCell(3);
			newRow.insertCell(4);
			newRow.cells[4].innerHTML='<Select Name="ThresholdValue'+nextCount+'" id="ThresholdValue'+nextCount+'" DISABLED></Select></TD>'
			newRow.insertCell(5);
			newRow.insertCell(6);
			newRow.cells[6].innerHTML='<IMG id="RemoveParam'+nextCount+'" src="CustomImages/trash.gif" alt="Remove Parameter" onclick="removeParameter('+nextCount+')" />'
			newRow.insertCell(7);
			newRow.insertCell(8);
			
		} else {
			
			alert('Please select a parameter');
		}
		
	}
	
	function removeParameter(element) {
		
		var mp=document.getElementById('MonitoredParams');
		var row=document.getElementById('ParamRow'+element).rowIndex;
		
		if ( mp.rows.length > 1 ) {
			mp.deleteRow(row);
			
			
			if (row == 0) {
								
				document.getElementById('MonitoredParams').rows[0].cells[0].innerHTML='Parameter';
				document.getElementById('MonitoredParams').rows[0].cells[3].innerHTML='Grace Period';
				document.getElementById('MonitoredParams').rows[0].cells[8].innerHTML='<IMG  src="CustomImages/plus.gif" alt="add Parameter" onclick="addParameter(0)" />';
			}
		
				
		} else {
			alert('At least one parameter must be defined');
		}
	
	
	}




	
  -->
   </script>
  >
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    Set Mode=%request.Get("Mode")
	
	w ##class(IIBAENSEMBLE.csp.AlertAdmin).SubMenu()

	if Mode = "" { 
		//w "Review and Edit Alerts<"
		s Mode="New"
	
	}
	w "<BR>"

	

	Set ProductionName=""
	Set ProductionStatus=""
	set status = ##class(Ens.Director).GetProductionStatus(.ProductionName,.ProductionStatus)

	set ParamString = ""
	set paramstringrs=##class(%ResultSet).%New()
	Do paramstringrs.Prepare("SELECT DISTINCT ItemName from IIBAENSEMBLE_Monitor.ItemParameters")
	Do paramstringrs.Execute()
		while paramstringrs.Next() {
			set ParamString = ParamString_paramstringrs.Data("ItemName")_","
		}
	Do paramstringrs.Close()

	W "<Form Name=""InterfaceMonitorParameters"" id=""InterfaceMonitorParameters"">"
	W "<Table cellpadding=10><TR><TD>"
	W "<Table><TR><TD>Interface Name</TD><TD>"
	if Mode = "" { 
		W "<Select Name=""InterfaceS"" id=""InterfaceS"" OnChange=""loadparamters()"">"
	} ElseIf Mode = "New" {
		W "<Select Name=""InterfaceS"" id=""InterfaceS"" >"
	}
	W "<Option Value="""">"

	set production=##class(Ens.Config.Production).%OpenId(ProductionName)
	K ^||ItemNames
	for i=1:1:production.Items.Count() {	
	  	s item=production.Items.GetAt(i)
	  	s ^||ItemNames(item.Name) = item.Name
	}
	Set key = $Order(^||ItemNames(""))
	While (key '= "") {
	   	if Mode = "" { 
			if $FIND(ParamString,$ZCONVERT(^||ItemNames(key),"U"))'=0 {
				W "<Option Value="""_^||ItemNames(key)_""">"_^||ItemNames(key)
			}
		} Elseif Mode = "New" { 
	   		W "<Option Value="""_^||ItemNames(key)_""">"_^||ItemNames(key)
		}
	   	Set key = $Order(^||ItemNames(key))
	}
	K ^||ItemNames
	W "</Select></TD></TR>"	
	W "<TR>"
	
	//  ### one row per parameter / threshold
	W "<TABLE id='MonitoredParams' name='MonitoredParams'><TR id='ParamRow0'>"
	W "<TD width=110>Parameter</TD><TD><Select Name='Parameters0' id='Parameters0' "
	if Mode = "" { 
		W " DISABLED OnChange='loadsettings(0)'>"
	} Elseif Mode = "New" { 
		W " OnChange='loadthreshvalues(0)'>"
		W "<Option Value=''>"
		set rs=##class(%ResultSet).%New()
		Do rs.Prepare("SELECT itemvalue, itemdescription from IIBAENSEMBLE_Monitor.tblItems where itemtype = 'Parameter' order by itemdescription")
		Do rs.Execute()
		while rs.Next() {
			set tParam = rs.Data("itemvalue")
			set tParamdesc = rs.Data("itemdescription")
			W "<Option Value="""_tParam_""" "
			W " title='"_tParamdesc_"'"
			//W ">"_tParamdesc
			W ">"_tParam
		}
	}
	W "</Select></TD>"
	
	W "<TD width=5>&nbsp;</TD><TD>Threshold Value</TD><TD><Select Name='ThresholdValue0' id='ThresholdValue0' "
	if Mode = "" { 
		W " OnChange=""activatesave()"" DISABLED>"
	} ElseIf Mode = "New" {
		W " DISABLED></Select></TD>"
	}
	
	w "</TD><TD length=5>&nbsp;</TD><TD><IMG id='RemoveParam0' src='CustomImages/trash.gif' alt='Remove Parameter' onclick='removeParameter(0)' DISABLED />"

	w "</TD><TD length=5>&nbsp;</TD><TD><IMG src='CustomImages/plus.gif' alt='Add Parameter' onclick='addParameter(0)' />"
	
	w "</TR><Table>"

	W "<TR><TD>Grace Period</TD><TD><Input Type='Text' Name='ThresholdDuration' id='ThresholdDuration' Value='' title='Number of seconds the alert condition must persist before sending an alert' "
	if Mode = "" { 
		W " OnChange=""activatesave()"" DISABLED"

	}
	W " >(seconds)</TD></TR>"

	W "<TR><TD>Alert Interval</TD><TD><Input Type=""Text"" Name='AlertInterval' id='AlertInterval' Value='' title='When the alert condition persists, how long to wait between alert notifications' "
	if Mode = "" { 
		W " OnChange=""activatesave()"" DISABLED> "
	} 
	W "> (minutes)</TD></TR>"
	
	W "<TR><TD>Cycle Interface</TD><TD><Input type='checkbox' name='CycleIf' id='CycleIf' OnClick='activatesave()' title='if not disabled, stop and start the interface when an alert is sent' disabled></TD></TR>"

	if Mode = "" { 
		W "<TR><TD>Schedule</TD><TD>"
		w "Hour Start:&nbsp;&nbsp;<select NAME=""HourStart"" ID=""HourStart"" OnChange=""activatesave()"" DISABLED>"
		For i = 0:1:24 {
			w "<option VALUE="""_i_""">"_i
		}
		w "</select>&nbsp;&nbsp;"
		w "Hour End:&nbsp;&nbsp;<select NAME=""HourEnd"" ID=""HourEnd"" OnChange=""activatesave()"" DISABLED>"
		For i = 0:1:24 {
			w "<option VALUE="""_i_""">"_i
		}
		w "</select><br>"
		w "M: <Input Type=""checkbox"" Name=""M"" id='M' OnClick=""activatesave()"" DISABLED> "
		w "T: <Input Type=""checkbox"" Name=""T"" id='T' OnClick=""activatesave()"" DISABLED> "
		w "W: <Input Type=""checkbox"" Name=""W"" id='W' OnClick=""activatesave()"" DISABLED> "
		w "Th: <Input Type=""checkbox"" Name=""Th"" id='Th'OnClick=""activatesave()"" DISABLED> "
		w "F: <Input Type=""checkbox"" Name=""F"" id='F' OnClick=""activatesave()"" DISABLED> "
		w "Sa: <Input Type=""checkbox"" Name=""Sa"" id='Sa' OnClick=""activatesave()"" DISABLED> "
		w "Su: <Input Type=""checkbox"" Name=""Su"" id='Su' OnClick=""activatesave()"" DISABLED> "
		w "</TD></TR>"
	} ElseIf Mode = "New" {
		W "<TR><TD>Schedule</TD><TD>"
		w "Hour Start:&nbsp;&nbsp;<select NAME=""HourStart"" id='HourStart'>"
		For i = 0:1:24 {
			If i = 0 {
				w "<option VALUE="""_i_""" selected>"_i
			} Else {
				w "<option VALUE="""_i_""">"_i
			}
		}
		w "</select>&nbsp;&nbsp;"
		w "Hour End:&nbsp;&nbsp;<select NAME=""HourEnd"" id='HourEnd'>"
		For i = 0:1:24 {
			If i = 24 {
				w "<option VALUE="""_i_""" selected>"_i
			} Else {
				w "<option VALUE="""_i_""">"_i
			}
		}
		w "</select><br>"
		w "M: <Input Type=""checkbox"" Name=""M"" id='M' checked=true> "
		w "T: <Input Type=""checkbox"" Name=""T"" id='T' checked=true> "
		w "W: <Input Type=""checkbox"" Name=""W"" id='W' checked=true> "
		w "Th: <Input Type=""checkbox"" Name=""Th"" id='Th' checked=true> "
		w "F: <Input Type=""checkbox"" Name=""F"" id='F' checked=true> "
		w "Sa: <Input Type=""checkbox"" Name=""Sa"" id='Sa'checked=true> "
		w "Su: <Input Type=""checkbox"" Name=""Su"" id='Su' checked=true> "
		w "</TD></TR>"
	}


	if Mode = "" { 
		W "<TR><TD>Notification Email</TD><TD><Input Type=""Text"" Style=""width:500"" Name=""NotificationEmail"" id='NotificationEmail' Value="""" OnChange=""activatesave()"" DISABLED></TD></TR>"
	} ElseIf Mode = "New" {
		W "<TR><TD>Notification Email</TD><TD><Input Type=""Text"" Style=""width:500"" Name=""NotificationEmail"" id='NotificationEmail' Value=""""></TD></TR>"
	}

	W "</TABLE>"
	W "</TD><TD>"
	W "<Table>"
	Set hrs=##class(%ResultSet).%New()
	Set hrs=##class(%ResultSet).%New()
	Set HolidayList="Select * from IIBAENSEMBLE_Monitor.tblItems where itemtype='Holiday'"
	D hrs.Prepare(HolidayList)
	D hrs.Execute()

	If (hrs'="") {
	
		// S AlertHolidays=$LFS("1^3^6","^")
		
		W "<TR><TD>&nbsp;</TD></TR>"
		W !,"<TR><TD>Holiday Alert Only</TD>"
		// W "<TD>*",rs.Data("HolidayOnly"),"*</TD>"
		W "<TD><Input Type=""checkbox"" Name=""OnHolidayOnly"" id=""OnHolidayOnly"" OnClick=""activatesave()"""
	
		W "></TD></TR>"
		W "<TR><TD></TD></TR><TR><TD>Holidays</TD></TR>"
	
	
		While ( hrs.Next() ) {
			Set HolidayName=hrs.Data("itemdescription")
			Set HolidayID=hrs.Data("itemvalue")
			//W HolidayName,!
			W !,"<TR><TD>&nbsp;&nbsp;&nbsp;&nbsp;",HolidayName,"</TD>"
			W "<TD><Input Type=""checkbox"" Name='Holiday"_HolidayID_"' id='Holiday"_HolidayID_"' OnClick=""activatesave()"">"
			W "</TD></TR>"
		} 
		W "</Table></TD></TR><TR><TD>"
		W "<Table>"
	}
	
  	//Email Text
  	w "<TR><TD colSpan=2><Table><TR><TD>Notes (optional)&nbsp;&nbsp;&nbsp;&nbsp;</TD></TR><TR><TD style='fontSize=""small"";font=""italic""'>(Max 250 characters)</TD></TR></Table></TD>"
  	W "<TD><TextArea id='EmailText' rows='5' cols='45' title='Optional Email Text (250 chars max)' OnChange='activatesave()'></TextArea></TD></TR>"
 	W "<TR><TD colspan=2>&nbsp;</TD><TD><Input type='button' value='Apply Notes to all alerts for this item' onclick='applyItemAlertNotes()'/></TD></TR>"

	if Mode = "" { 
		W "<TR><TD>Active</TD><TD><Input Type=""checkbox"" Name=""Active"" id=""Active"" OnClick=""activatesave()"" DISABLED></TD></TR>"
	} ElseIf Mode = "New" {
		W "<TR><TD>Active</TD><TD><Input Type=""checkbox"" Name=""Active"" id='Active'></TD></TR>"
	}

	w "<TR><TD></TD><TD>"
	
	if Mode = "" { 
		w "<Input DISABLED Type=""Button"" Style=""width:100"" Name=""SaveChanges"" id='SaveChanges' Value=""Save Changes"" onclick=""savechanges()"">"
	} ElseIf Mode = "New" {
	}

	if Mode = "" { 
		w "<Input DISABLED Type=""Button"" Style=""width:100"" Name=""Remove"" id='Remove' Value=""Remove"" onclick=""remove()"">"
	} ElseIf Mode = "New" {
	}

	if Mode = "" { 
		w "<Input Type=""Button"" Style=""width:100"" Name=""Add"" id=""Add"" Value=""Add New"" onclick='self.document.location=""IIBASupport.csp?PageName=AlertNew&Mode=New""'>"
	} ElseIf Mode = "New" {
		w "<Input Type=""Button"" Style=""width:100"" Name=""Save"" id=""Save"" Value=""Save New"" onclick=""savenew()"">"
	}

	if Mode = "" { 
		w "<Input Type=""Button"" Style=""width:100"" Name=""Home"" id=""Home"" Value=""Home"" onclick='self.document.location=""IIBASupport.csp?PageName=AlertNew""'></TD></TR>"
	} ElseIf Mode = "New" {
	}


	W "</Table>"
	W "</Table>"
	W "</Form>"
	&html<
	<script language=javascript>
	
	document.getElementById('linkAlertAdmin').style.color = 'red';
	document.getElementById('link'+'#(%request.Get("PageName"))#').style.color = 'red';

	</script>	
	>
]]></Implementation>
</Method>

<Method name="BuildParameters">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 	&js<
 	var s=document.getElementById("Parameters");
 	var o=document.createElement('option');
 	o.text = ' '
 	o.value = ' '
 	s.add(o);	
 	s.disabled = false;
 	>
 	//&js<document.getElementById('ThresholdValue').disabled=false;>
 	&js<document.getElementById('ThresholdDuration').disabled=false;>
 	&js<document.getElementById('AlertInterval').disabled=false;>
 	&js<document.getElementById('NotificationEmail').disabled=false;>
 	&js<document.getElementById('EmailText').disabled=false;>
 	&js<document.getElementById('Active').disabled=false;>
 	&js<document.getElementById('Save').disabled=false;>
 	&js<document.getElementById('Add').disabled=true;>
 			
 	
 	set rs=##class(%ResultSet).%New()
 	Do rs.Prepare("SELECT itemvalue from IIBAENSEMBLE_Monitor.tblItems where itemtype = 'Parameter' order by itemdescription")
 	Do rs.Execute()
 	while rs.Next() {
 		set tParam = rs.Data("itemvalue")
 		&js<
 		var s=document.getElementById("Parameters");
 		var o=document.createElement('option');
 		o.text = '#(tParam)#'
 		o.value = '#(tParam)#'
 		s.add(o);	
 		>
 		
 	}
 	Do rs.Close()
]]></Implementation>
</Method>

<Method name="GetHolidayCount">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 		
 	Set HList=""
 	
 	Set rs=##class(%ResultSet).%New()
 	Do rs.Prepare("select itemvalue From IIBAENSEMBLE_Monitor.tblItems where itemtype='Holiday'")
 	Do rs.Execute()
 	
 	While rs.Next() {
 		If (HList="") {
 			S HList=rs.Get("itemvalue")
 		} else {
 			S HList=HList_","_rs.Get("itemvalue")
 		}
 	}
 	
 	
 	
 	Quit HList
]]></Implementation>
</Method>

<Method name="InsertNew">
<ClassMethod>1</ClassMethod>
<FormalSpec>itemname:%String,paramname:%String,ThresholdID:%String,ThresholdDuration:%String,AlertInterval:%String,NotificationEmail:%String,EmailText:%String,Active:%String,hourstart:%String,hourend:%String,M:%String,T:%String,W:%String,Th:%String,F:%String,Sa:%String,Su:%String,HolidayOnly:%String,holidays:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 		
 	Set ThresholdValue=""
 			
 	// Get ThresholdValue using threshold ID
 	&sql(Select Top 1 itemvalue 
 		into :ThresholdValue 
 		From IIBAENSEMBLE_Monitor.tblItems
 		Where ID=:ThresholdID)
 	
 	set rs=##class(%ResultSet).%New()
 	Do rs.Prepare("INSERT INTO IIBAENSEMBLE_Monitor.ItemParameters (ItemName,Parameter,Threshold,ThresholdID,ThresholdDuration,AlertDuration,NotificationEmail,EmailText,Active,HolidayOnly,Holidays) VALUES ('"_itemname_"','"_paramname_"','"_ThresholdValue_"','"_ThresholdID_"','"_ThresholdDuration_"','"_AlertInterval_"','"_NotificationEmail_"','"_EmailText_"',"_Active_","_HolidayOnly_",'"_holidays_"')")
 	Do rs.Execute()
 	
 	set rs=##class(%ResultSet).%New()
 	Do rs.Prepare("SELECT MAX(ID) as ID from IIBAENSEMBLE_Monitor.ItemParameters where ItemName = '"_itemname_"' and Parameter = '"_paramname_"'")
 	Do rs.Execute()
 	while rs.Next() {
 			set paramID = rs.Data("ID")
 	}
 	
 	set rs=##class(%ResultSet).%New()
 	Do rs.Prepare("INSERT INTO IIBAENSEMBLE_Monitor.tblSchedules (ParameterID,HourStart,HourEnd,M,T,W,Th,F,Sa,Su) VALUES ("_paramID_","_hourstart_","_hourend_","_M_","_T_","_W_","_Th_","_F_","_Sa_","_Su_")")
 	Do rs.Execute()
 	
 	set updatestatus = "ok"
 	
 	Quit updatestatus
]]></Implementation>
</Method>

<Method name="LoadParameters">
<ClassMethod>1</ClassMethod>
<FormalSpec>itemname:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 		
 	set rs=##class(%ResultSet).%New()
 	Do rs.Prepare("SELECT ID, Parameter from IIBAENSEMBLE_Monitor.ItemParameters where ItemName = '"_itemname_"' order by Parameter")
 	Do rs.Execute()
 	set i = 0
 	while rs.Next() {
 		set tParam = rs.Data("Parameter")
 		set tPID = rs.Data("ID")
 		if i=0 { set paramID = tPID }
 		set i = i+1
 	//&js<alert('#(tParam)#');>	
 		&js<
 		var s=document.getElementById("Parameters");
 		var o=document.createElement('option');
 		o.text = '#(tParam)#'
 		o.value = '#(tPID)#'
 		s.add(o);	
 		s.disabled = false;
 		>
 		
 	}
 	Do rs.Close()
 	
 	if i > 0 {
 		
 		&js<loadthreshvalues();>
 		
 		set rs=##class(%ResultSet).%New()
 		Do rs.Prepare("SELECT Threshold, ThresholdDuration, AlertDuration, NotificationEmail, Active from IIBAENSEMBLE_Monitor.ItemParameters where ID = '"_paramID_"'")
 		Do rs.Execute()
 		while rs.Next() {
 			set tThreshold = rs.Data("Threshold")
 			set tThresholdDuration = rs.Data("ThresholdDuration")
 			set tAlertDuration = rs.Data("AlertDuration")/60
 			set tNotificationEmail = rs.Data("NotificationEmail")
 			set tActive = rs.Data("Active")
 			&js<document.getElementById('ThresholdValue').disabled=false;>
 			&js<document.getElementById('ThresholdDuration').disabled=false;>
 			&js<document.getElementById('AlertInterval').disabled=false;>
 			&js<document.getElementById('NotificationEmail').disabled=false;>
 			&js<document.getElementById('EmailText').disabled=false;>
 			&js<document.getElementById('Active').disabled=false;>
 			//&js<document.getElementById('SaveChanges').disabled=false;>
 			&js<document.getElementById('Remove').disabled=false;>
 			&js<selectthresh('#(tThreshold)#');>
 			&js<document.getElementById('ThresholdDuration').value='#(tThresholdDuration)#';>
 			&js<document.getElementById('AlertInterval').value='#(tAlertDuration)#';>
 			&js<document.getElementById('NotificationEmail').value='#(tNotificationEmail)#';>
 			&js<document.getElementById('Active').checked=#(tActive)#;>
 		}
 		do rs.Close()
 		
 		&js<document.getElementById('HourStart').selectedIndex=0;>
 		&js<document.getElementById('HourEnd').selectedIndex=24;>
 		&js<document.getElementById('HourStart').disabled=false;>
 		&js<document.getElementById('HourEnd').disabled=false;>
 		&js<document.getElementById('M').disabled=false;>
 		&js<document.getElementById('T').disabled=false;>
 		&js<document.getElementById('W').disabled=false;>
 		&js<document.getElementById('Th').disabled=false;>
 		&js<document.getElementById('F').disabled=false;>
 		&js<document.getElementById('Sa').disabled=false;>
 		&js<document.getElementById('Su').disabled=false;>
 
 		set rs=##class(%ResultSet).%New()
 		Do rs.Prepare("SELECT s.HourStart, s.HourEnd, s.M, s.T, s.W, s.Th, s.F, s.Sa, s.Su from IIBAENSEMBLE_Monitor.ItemParameters P inner join IIBAENSEMBLE_Monitor.tblSchedules S on P.ID = S.ParameterID where P.ID = "_paramID_"")
 		Do rs.Execute()
 		
 		while rs.Next() {
 			set tHourStart = rs.Data("HourStart")
 			set tHourEnd = rs.Data("HourEnd")
 			set tM = rs.Data("M")
 			set tT = rs.Data("T")
 			set tW = rs.Data("W")
 			set tTh = rs.Data("Th")
 			set tF = rs.Data("F")
 			set tSa = rs.Data("Sa")
 			set tSu = rs.Data("Su")
 			&js<document.getElementById('HourStart').selectedIndex=#(tHourStart)#;>
 			&js<document.getElementById('HourEnd').selectedIndex=#(tHourEnd)#;>
 			&js<document.getElementById('M').checked=#(tM)#;>
 			&js<document.getElementById('T').checked=#(tT)#;>
 			&js<document.getElementById('W').checked=#(tW)#;>
 			&js<document.getElementById('Th').checked=#(tTh)#;>
 			&js<document.getElementById('F').checked=#(tF)#;>
 			&js<document.getElementById('Sa').checked=#(tSa)#;>
 			&js<document.getElementById('Su').checked=#(tSu)#;>	
 		}
 		do rs.Close()
 		
 	}
 	
 	
 	set paramlistbuild = "ok"
 	
 	Quit paramlistbuild
]]></Implementation>
</Method>

<Method name="LoadSettings">
<ClassMethod>1</ClassMethod>
<FormalSpec>paramID:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 		
 	&js<loadthreshvalues();>
 	
 	set rs=##class(%ResultSet).%New()
 	Do rs.Prepare("SELECT Threshold, ThresholdDuration, AlertDuration, NotificationEmail, EmailText, Active from IIBAENSEMBLE_Monitor.ItemParameters where ID = "_paramID_"")
 	Do rs.Execute()
 	while rs.Next() {
 		set tThreshold = rs.Data("Threshold")
 		set tThresholdDuration = rs.Data("ThresholdDuration")
 		set tAlertDuration = rs.Data("AlertDuration")/60
 		set tNotificationEmail = rs.Data("NotificationEmail")
 		set tEmailText = rs.Data("EmailText")
 		set tActive = rs.Data("Active")
 		&js<document.getElementById('ThresholdValue').disabled=false;>
 		&js<document.getElementById('ThresholdDuration').disabled=false;>
 		&js<document.getElementById('AlertInterval').disabled=false;>
 		&js<document.getElementById('NotificationEmail').disabled=false;>
 		&js<document.getElementById('EmailText').disabled=false;>
 		&js<document.getElementById('Active').disabled=false;>
 		//&js<document.getElementById('SaveChanges').disabled=false;>
 		&js<document.getElementById('Remove').disabled=false;>
 		&js<selectthresh('#(tThreshold)#');>
 		&js<document.getElementById('ThresholdDuration').value='#(tThresholdDuration)#';>
 		&js<document.getElementById('AlertInterval').value='#(tAlertDuration)#';>
 		&js<document.getElementById('NotificationEmail').value='#(tNotificationEmail)#';>
 		&js<document.getElementById('EmailText').value='#(tEmailText)#';>
 		&js<document.getElementById('Active').checked=#(tActive)#;>
 	}
 	
 	do rs.Close()
 	
 	
 		&js<document.getElementById('HourStart').selectedIndex=0;>
 		&js<document.getElementById('HourEnd').selectedIndex=24;>
 		&js<document.getElementById('HourStart').disabled=false;>
 		&js<document.getElementById('HourEnd').disabled=false;>
 		&js<document.getElementById('M').disabled=false;>
 		&js<document.getElementById('T').disabled=false;>
 		&js<document.getElementById('W').disabled=false;>
 		&js<document.getElementById('Th').disabled=false;>
 		&js<document.getElementById('F').disabled=false;>
 		&js<document.getElementById('Sa').disabled=false;>
 		&js<document.getElementById('Su').disabled=false;>
 	
 		set rs=##class(%ResultSet).%New()
 		Do rs.Prepare("SELECT s.HourStart, s.HourEnd, s.M, s.T, s.W, s.Th, s.F, s.Sa, s.Su from IIBAENSEMBLE_Monitor.ItemParameters P left outer join IIBAENSEMBLE_Monitor.tblSchedules S on P.ID = S.ParameterID where P.ID = "_paramID_"")
 		Do rs.Execute()
 		
 		while rs.Next() {
 			set tHourStart = rs.Data("HourStart")
 			set tHourEnd = rs.Data("HourEnd")
 			set tM = rs.Data("M")
 			set tT = rs.Data("T")
 			set tW = rs.Data("W")
 			set tTh = rs.Data("Th")
 			set tF = rs.Data("F")
 			set tSa = rs.Data("Sa")
 			set tSu = rs.Data("Su")
 			&js<document.getElementById('HourStart').selectedIndex=#(tHourStart)#;>
 			&js<document.getElementById('HourEnd').selectedIndex=#(tHourEnd)#;>
 			&js<document.getElementById('M').checked=#(tM)#;>
 			&js<document.getElementById('T').checked=#(tT)#;>
 			&js<document.getElementById('W').checked=#(tW)#;>
 			&js<document.getElementById('Th').checked=#(tTh)#;>
 			&js<document.getElementById('F').checked=#(tF)#;>
 			&js<document.getElementById('Sa').checked=#(tSa)#;>
 			&js<document.getElementById('Su').checked=#(tSu)#;>	
 		}
 		do rs.Close()
 	
 	set settinglistbuild = "ok"
 	
 	Quit settinglistbuild
]]></Implementation>
</Method>

<Method name="LoadThresholdValues">
<ClassMethod>1</ClassMethod>
<FormalSpec>paramname:%String,element:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 	set rs=##class(%ResultSet).%New()
 	Do rs.Prepare("SELECT ID, itemvalue, itemdescription from IIBAENSEMBLE_Monitor.tblItems where itemtype = '"_paramname_"Value' order by itemdescription")
 	Do rs.Execute()
 	while rs.Next() {
 		set tID = rs.Data("ID")
 		set tDesc = rs.Data("itemdescription")
 		set elmentId="ThresholdValue"_element
 		
 	//&js<alert('#(tParam)#');>	
 		&js<
 		var s=document.getElementById('#(elmentId)#');
 		var o=document.createElement('option');
 		o.text = '#(tDesc)#';
 		o.value = '#(tID)#';
 		try {
 			s.add(o,null);
 		} catch(ex) {
	 		s.add(o);
 		}	
 		s.disabled = false;
 		>
 		
 		
 	}
]]></Implementation>
</Method>

<Method name="Remove">
<ClassMethod>1</ClassMethod>
<FormalSpec>paramID:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 		
 	set rs=##class(%ResultSet).%New()
 	Do rs.Prepare("DELETE from IIBAENSEMBLE_Monitor.ItemParameters where ID = "_paramID_"")
 	Do rs.Execute()
 	
 	set rs=##class(%ResultSet).%New()
 	Do rs.Prepare("DELETE from IIBAENSEMBLE_Monitor.tblSchedules where ParameterID = "_paramID_"")
 	Do rs.Execute()
 		
 	set removestatus = "ok"
 	
 	Quit removestatus
]]></Implementation>
</Method>

<Method name="SaveChanges">
<ClassMethod>1</ClassMethod>
<FormalSpec>paramID:%String,ThresholdValue:%String,ThresholdDuration:%String,AlertInterval:%String,NotificationEmail:%String,EmailText:%String,Active:%String,hourstart:%String,hourend:%String,M:%String,T:%String,W:%String,Th:%String,F:%String,Sa:%String,Su:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 		
 	set rs=##class(%ResultSet).%New()
 	Do rs.Prepare("UPDATE IIBAENSEMBLE_Monitor.ItemParameters set Threshold = '"_ThresholdValue_"', ThresholdDuration = '"_ThresholdDuration_"', AlertDuration = '"_AlertInterval_"', NotificationEmail = '"_NotificationEmail_"', EmailText='"_EmailText_"', Active = "_Active_" where ID = "_paramID_"")
 	Do rs.Execute()
 	
 	set rs=##class(%ResultSet).%New()
 	Do rs.Prepare("UPDATE IIBAENSEMBLE_Monitor.tblSchedules set HourStart="_hourstart_", HourEnd="_hourend_",M="_M_",T="_T_",W="_W_",Th="_Th_",F="_F_",Sa="_Sa_",Su="_Su_" where ParameterID="_paramID_"")
 	Do rs.Execute()
 	
 	
 	set updatestatus = "ok"
 	
 	Quit updatestatus
]]></Implementation>
</Method>

<Method name="ApplyNotesToItemAlerts">
<ClassMethod>1</ClassMethod>
<FormalSpec>itemName:%String,emailText:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if (itemName'="") {
		s rs=##class(%ResultSet).%New()
		Set UpdateString="UPDATE IIBAENSEMBLE_Monitor.ItemParameters set EmailText='"_emailText_"' "
		set UpdateString=UpdateString_" Where ItemName='"_itemName_"'"
		Do rs.Prepare(UpdateString)
 		Do rs.Execute()
	}
	
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.DTLAutoDoc">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>62683,35701.822185</TimeChanged>
<TimeCreated>60908,31118.460678</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	if ##class(%SYSTEM.Security).Check("%All") = "READ,WRITE,USE" { set Allowed = 1 }
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	&html<
   <script language=javascript>
   function Initialize()
	{

	}
	</script>
  >
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    
    
    &html<
    
	    <style type="text/css">
		#transformHdr, #transformDetail
		{
		font-family:"Trebuchet MS", Arial, Helvetica, sans-serif;
		width:100%;
		border-collapse:collapse;
		border: 1px solid #008Fff;
		}
		#transformHdr th, #transformHdr td, #transformDetail th, #transformDetail td
		{
		border: 1px solid #008Fff;
		padding-right:5px;
		padding-left:5px;
		}
		#transformHdr td, #transformDetail td
		{
		font-size:.8em;
		}
		#transformDetail td.if, #transformDetail td.true, #transformDetail td.false, #transformDetail td.foreach, #transformDetail td.code
		{
		background-color:#A8D3FF;

		}

		#transformHdr th, #transformDetail th
		{
		font-size:1.4em;
		text-align:left;
		padding-top:5px;
		padding-bottom:4px;
		background-color:#4DA6FF;
		color:#fff;
		}
		#transformDetail tr.alt
		{
		color:#000;
		background-color:#D5EAFF;
		}
		#transformHdr tr, #transformDetail tr
		{
		color:#000;
		background-color:#D5EAFF;
		}
	</style>   
    
    >
    
    
    
    Set DTL=%request.Get("DTL")
    
    w DTL,"<p>"
    
    s tSC = $System.OBJ.ExportToStream(DTL,.stream)
	
	set tSC = ##class(%XML.TextReader).ParseStream(.stream,.TR)
	d TR.Rewind()
	s tSC = TR.ReadStartElement("Data")
	
	s newstream = ##class(%GlobalCharacterStream).%New()
	
	While TR.Read() {
		if (TR.Name = "Data") && (TR.NodeType = "endelement") Quit
		//w tResult.Name_" - "_tResult.NodeType,!
		d newstream.Write(TR.Value)
	}
	
	d newstream.Rewind()
	
	set tSC = ##class(%XML.TextReader).ParseStream(.newstream,.tResult)
	
	set indent = 5
	s tHeaderRow = "", tTransformRow = ""
	
	
	While tResult.Read() {
	//	w tResult.Name_" - "_tResult.NodeType,!

		if tResult.NodeType = "element" {
			if tResult.Name = "transform" {
				//w "Transform:",!
				
				For j=1:1:tResult.AttributeCount
				{
					Do tResult.MoveToAttributeIndex(j)
					s tHeaderRow = $CASE(tResult.Name,
						"targetClass":tHeaderRow_"<th class='transformHdr'>"_tResult.Name_"</th>",
						"targetDocType":tHeaderRow_"<th class='transformHdr'>"_tResult.Name_"</th>",
						"sourceClass":tHeaderRow_"<th class='transformHdr'>"_tResult.Name_"</th>",
						"sourceDocType":tHeaderRow_"<th class='transformHdr'>"_tResult.Name_"</th>",
						"create":tHeaderRow_"<th class='transformHdr'>"_tResult.Name_"</th>",
						:tHeaderRow_""
					)
					s tTransformRow = $CASE(tResult.Name,
						"targetClass":tTransformRow_"<td class='transformSig'>"_tResult.Value_"</td>",
						"targetDocType":tTransformRow_"<td class='transformSig'>"_tResult.Value_"</td>",
						"sourceClass":tTransformRow_"<td class='transformSig'>"_tResult.Value_"</td>",
						"sourceDocType":tTransformRow_"<td class='transformSig'>"_tResult.Value_"</td>",
						"create":tTransformRow_"<td class='transformSig'>"_tResult.Value_"</td>",
						:tTransformRow_""
					)
				}
				w "<table class='transformHdr' id='transformHdr'>",!
				w "<tr>"
				w tHeaderRow
				w "</tr>",!
				w "<tr>"
				w tTransformRow
				w "</tr>",!
				w "</table><br>",!
				
				w "<table class='transformDetail' id='transformDetail'>",!
				w "<tr class='header'><th>Target</th><th>Source</th></tr>",!
			
			}
			
			if tResult.Name = "assign" {
				//w indent_"assign: "
				w "<tr class='assign'>"
				For j=1:1:tResult.AttributeCount
				{
					Do tResult.MoveToAttributeIndex(j)
					w $CASE(tResult.Name,
						"property":"<td class='assignT' style='padding-left:"_indent_"px;'>"_$TR($REPLACE($REPLACE(tResult.Value,"target.",""),"##class(IIBAENSEMBLE.Functions).",""),"{}")_"</td>",
						"value":"<td class='assignS'>"_$TR($REPLACE($REPLACE(tResult.Value,"source.",""),"##class(IIBAENSEMBLE.Functions).",""),"{}")_"</td>",
						:""
					)
				}
				w "</tr>",!
				
			}
			
			if tResult.Name = "code" {
				w "<tr class='code'>"
				w "<td class='code' style='padding-left:"_indent_"px;'>"_"CODE</td><td/>"
				w "</tr>",!
				set indent = indent+15
				w "<tr class='code'>"
				w "<td class='codeValue' colspan='2' style='padding-left:"_indent_"px;'>"
				While tResult.Read() {
					w $REPLACE($REPLACE(tResult.Value,$C(10),"<br>"),$C(9),"&nbsp;&nbsp"),!
					if (tResult.Name = "code") && (tResult.NodeType = "endelement") Quit
				}
				w "</td>"
				w "</tr>",!
			}

			if tResult.Name = "annotation" {
				set indent = indent+15
				w "<tr class='annotation'>"
				w "<td class='annotationValue' colspan='2' style='padding-left:"_indent_"px;'>"
				While tResult.Read() {
					w "//"_$REPLACE($REPLACE(tResult.Value,$C(10),"<br>//"),$C(9),"&nbsp;&nbsp"),!
					if (tResult.Name = "annotation") && (tResult.NodeType = "endelement") Quit
				}
				w "</td>"
				w "</tr>",!
			}
			
			if tResult.Name = "if" {
				//w indent_"if: "
				w "<tr class='if'>"
				For j=1:1:tResult.AttributeCount
				{
					Do tResult.MoveToAttributeIndex(j)
					w $CASE(tResult.Name,
						"condition":"<td class='if' colspan='2' style='padding-left:"_indent_"px;'>"_"IF: "_$TR($REPLACE($REPLACE(tResult.Value,"source.",""),"##class(IIBAENSEMBLE.Functions).",""),"{}")_"</td>",
						:""
					)
				}
				w "</tr>",!
			}
			if tResult.Name = "true" {
				w "<tr class='true'>"
				w "<td class='true' style='padding-left:"_indent_"px;'>"_"TRUE</td><td/>"
				w "</tr>",!
				set indent = indent+15
			}
			if tResult.Name = "false" {
				w "<tr class='false'>"
				w "<td class='false' style='padding-left:"_indent_"px;'>"_"FALSE</td><td/>"
				w "</tr>",!
				set indent = indent+15
			}
			if tResult.Name = "foreach" {
				//w indent_"for each: "
				w "<tr class='foreach'>"
				For j=1:1:tResult.AttributeCount
				{
					Do tResult.MoveToAttributeIndex(j)
					w $CASE(tResult.Name,
						"property":"<td class='foreach' colspan='2' style='padding-left:"_indent_"px;'>"_"FOREACH: "_$TR($REPLACE($REPLACE(tResult.Value,"source.",""),"##class(IIBAENSEMBLE.Functions).",""),"{}")_"</td>",
						:""
					)
				}
				w "</tr>",!
				set indent = indent+15
			}
			
			

		}
		if tResult.NodeType = "endelement" {
			if tResult.Name = "true" {
				set indent = indent - 15
			}
			if tResult.Name = "false" {
				set indent = indent - 15
			}
			if tResult.Name = "code" {
				set indent = indent - 15
			}
			if tResult.Name = "annotation" {
				set indent = indent - 15
			}
			if tResult.Name = "foreach" {
				set indent = indent - 15
			}
		}


		
		
	}
	
	w "</table>",!
	
	s TR = ""
	s newstream = ""
	s stream = ""
	s tResult = ""
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.ExceptionDef">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%CSP.Page</Super>
<TimeChanged>62675,38483.831976</TimeChanged>
<TimeCreated>61062,59286.195636</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	if ##class(%SYSTEM.Security).Check("%All") = "READ,WRITE,USE" { set Allowed = 1 }
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
  
  <!-- Tigra Calendar American format mm/dd/yyyy -->
<script language="JavaScript" src="calendar2.js"></script>
<script language="JavaScript" src="date.js"></script><!-- Date only with year scrolling -->
<script type="text/JavaScript">
<!--
	function Hello() {
		alert('Hello');
	}
	
	function Initialize()
	{
	
	}
	

	function TDate(strElement) {
		var tvalue = document.getElementById(strElement).value;
		var tvaluefirst = tvalue.substr(0,1)
		
		
		if (tvaluefirst.toUpperCase() == 'T')
		{
			var tdate = new Date();
			if (tvalue.length == 1)
			{
				document.getElementById(strElement).value = tdate.format('MM/dd/yyyy');
				
			} 
			else 
			{
				var tdays = tvalue.substr(1,tvalue.length)
				tdate.add('d',tdays);
				document.getElementById(strElement).value = tdate.format('MM/dd/yyyy');
			}
		} else if (tvalue !="") {
			
			var tdate=tvalue.split("/");
			var month=tdate[0];
			var day=tdate[1];
			var year=tdate[2];
						
			if ( (month != "" ) && (day != "" ) ) {
				if ( (tdate.length == 2) || (year.length == 0) ) {
					var d=new Date()
					year=d.getFullYear()
					document.getElementById(strElement).value=month+"/"+day+"/"+year;
					
				} else if (year.length == 2) {
					document.getElementById(strElement).value=month+"/"+day+"/20"+year;
				}
			}
						
		}		
	}
	
	
	function MoveRight(option) {
   
   
   f=document.getElementById("FromList");
   t=document.getElementById("ToList");
   var SelectionCount=f.options.length
   
   for (i=0;i<SelectionCount;i=i+1) {
     if (f.options[i].selected == 1 ) {
	var y=document.createElement('option');
	y.text=f.options[i].text;
	t.add(y);
     }
   }
   
   for (j=SelectionCount-1;j>=0;j=j-1) {
      
      if (f.options[j].selected == 1 ) {
      	f.options[j]=null;
      }
   }
}

function MoveLeft(option) {
   
   
   f=document.getElementById("FromList");
   t=document.getElementById("ToList");
   var SelectionCount=t.options.length
   
   for (i=0;i<SelectionCount;i=i+1) {
     if (t.options[i].selected == 1 ) {
		var y=document.createElement('option');
		y.text=t.options[i].text;
		f.add(y);
     }
   }
   
   for (j=SelectionCount-1;j>=0;j=j-1) {
      
      if (t.options[j].selected == 1 ) {
      	t.options[j]=null;
      }
   }
}


function AddExceptions(exceptionId) {
	

	
	var errMsg='';
	t=document.getElementById("ToList");
	SelectionCount=t.options.length;
	
	if ( SelectionCount == 0) {
		errMsg='Please select interface(s). ';
	}
	
	if (!document.getElementById("DateStart").value) {
		errMsg=errMsg+'Start Date is required. ';
	} else {
	
		if ( !document.getElementById("DateEnd").value ) {
		document.getElementById("DateEnd").value=document.getElementById("DateStart").value;
		
		}
		
		
		var tmp='';
		
		var startDttm=document.getElementById("DateStart").value+' '+document.getElementById("TimeStart").value+':00';
		tmp=new Date(startDttm);
		var OdbcStartDttm=tmp.format('yyyy-MM-dd HH:mm:ss');
		
		var endDttm=document.getElementById("DateEnd").value+' '+document.getElementById("TimeEnd").value+':00';
		tmp=new Date(endDttm);
		var OdbcEndDttm=tmp.format('yyyy-MM-dd HH:mm:ss');
		
		// Start date/time must be greater than the end date/time
		if ( (Date.parse(startDttm)) >= (Date.parse(endDttm)) ) {
			errMsg='The end Date/Time must be greater than the start Date/Time. ';
		}
		
		// End date/time must be in the future
		if ( (Date.parse(Date())>Date.parse(endDttm))) {
			errMsg=errMsg+'Please enter a future date for the end date/time. ';
			
		}
	}
	
	if ( errMsg ) {
		alert(errMsg);	
	
		
	} else {	
   		
   		if (exceptionId+0<1) {
			exceptionId=#server(..GetExceptionID())#;
			
			
		} else {
			var rv=#server(..DeleteException(exceptionId))#;
		}
		
		

   		
   		for (selection=0;selection<SelectionCount;selection=selection+1) {
			
			
			var ExportData = #server(..AddException(exceptionId,t.options[selection].text,OdbcStartDttm,OdbcEndDttm,document.getElementById("comment").value))#;
			
			
			location.replace('IIBASupport.csp?PageName=AlertExceptionView');
     		
   		}
	
		
	}
	
}




 //-->
</script>

  >
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	w ##class(IIBAENSEMBLE.csp.AlertAdmin).SubMenu()
	
	set Mode = %request.Get("Mode")
	set ExceptionId=%request.Get("id")
	If Mode = "edit" {
	
	
		set start="",end="",comment=""
		&sql(select distinct StartDttm,EndDttm,comment into :start,:end,:comment from IIBAENSEMBLE_Monitor.AlertExceptions where ExceptionID=:ExceptionId)
		s sDateStart=$P(start," ",1)
		s sDateStart=$P(sDateStart,"-",2)_"/"_$P(sDateStart,"-",3)_"/"_$P(sDateStart,"-",1)
		s sTimeStart=$P(start," ",2)
		s sTimeStart=($P(sTimeStart,":",1)+0)_":"_$P(sTimeStart,":",2)
		s sDateEnd=$P(end," ",1)
		s sDateEnd=$P(sDateEnd,"-",2)_"/"_$P(sDateEnd,"-",3)_"/"_$P(sDateEnd,"-",1)
		s sTimeEnd=$P(end," ",2)
		s sTimeEnd=($P(sTimeEnd,":",1)+0)_":"_$P(sTimeEnd,":",2)
	
	} else {

		set sDateStart = ""
		set sDateEnd = ""
		set sTimeSstart = ""
		set sTimeEnd = ""
		set direction = ""
		set comment=""
	
	}
	
	
	w "<form name=""QueryBuilder"" id=""QueryBuilder"">"
	

	w "<TABLE><TR><TD>Select Date Range:</TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD><TD>Select Time Range:</TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD></TR>"
	w "<TR><TD>"
	w "<input type=""Text"" id=""DateStart"" value="""_sDateStart_""" onblur=""TDate('DateStart')"">&nbsp;"
	w "<a href=""javascript:cal1.popup();""><img src=""img/cal.gif"" width=""16"" height=""16"" border=""0"" alt=""From Date""></a><br>"
	w "<input type=""Text"" id='DateEnd' value="""_sDateEnd_""" onblur=""TDate('DateEnd')"">&nbsp;"
	w "<a href=""javascript:cal2.popup();""><img src=""img/cal.gif"" width=""16"" height=""16"" border=""0"" alt=""To Date""></a>"
	w "</TD><TD></TD><TD>"
	w "<TABLE><TR><TD>Start Time:&nbsp;&nbsp;</TD><TD>"
	w "<select ID='TimeStart'>"
	For i = 0:1:23 {
		w "<option  VALUE="""_i_":00"""
		if ( (Mode="edit") && (sTimeStart=(i_":00"))) {
			w " selected=""1"" "
		}
		w ">"_i_":00"
		w "<option  VALUE="""_i_":30"""
				if ( (Mode="edit") && (sTimeStart=(i_":30"))) {
			w " selected=""1"" "
		}
		w ">"_i_":30"
	}
	w "<option VALUE=""24:00"""
	if ( (Mode="edit") && (sTimeStart=("24:00"))) {
			w " selected=""1"" "
		}
	w ">24:00"
	w "</select></TD></TR>"
	w "<TR><TD>End Time:&nbsp;&nbsp;</TD><TD>"
	w "<select ID='TimeEnd'>"
	For i = 0:1:24 {
		w "<option  VALUE="""_i_":00"""
		if ( (Mode="edit") && (sTimeEnd=(i_":00"))) {
			w " selected=""1"" "
		}
		w ">"_i_":00"
		w "<option  VALUE="""_i_":30"""
				if ( (Mode="edit") && (sTimeEnd=(i_":30"))) {
			w " selected=""1"" "
		}
		w ">"_i_":30"
	}
	w "<option VALUE=""24:00"""
	if ( (Mode="edit") && (sTimeEnd=("24:00"))) {
			w " selected=""1"" "
		}
	w ">24:00"
	w "</select></TD></TR></TABLE></TD><TD></TD>"

	// Get List of Exception Interfaces
	k Exceptions
	set rs=##class(%ResultSet).%New()
	Do rs.Prepare("Select distinct ItemName from IIBAENSEMBLE_Monitor.AlertExceptions where ExceptionId='"_ExceptionId_"'")
	Do rs.Execute()
	While(rs.Next()) {
		s Exceptions(rs.Data("ItemName"))=1
	}
	
	w "</TR></TABLE><BR>"
	W "<Table><TR><TD>&nbsp;&nbsp;Monitored Inerfaces</TD><TD>&nbsp;</TD><TD>&nbsp;&nbsp;Exception Interfaces</TD></TR>"
	W "<TR><TD>"
	W "<Select id='FromList' size='10' multiple='1' style='width:450px' >"
	set rs=##class(%ResultSet).%New()
	Do rs.Prepare("SELECT DISTINCT ItemName from IIBAENSEMBLE_Monitor.ItemParameters order by ItemName")
	Do rs.Execute()
	While(rs.Next()) {
		if '$DATA(Exceptions(rs.Data("ItemName"))) {
			W "<Option Value="""_rs.Data("ItemName")_""">"_rs.Data("ItemName")
		}
	}
	W "</Select></TD>"
	W "<TD><table><tr><td>&nbsp;"
	W "<input type='button' id='right' name='right' value='&nbsp;&gt;&nbsp;' onclick='MoveRight();'/>&nbsp;</td></tr>"
    W "<tr><td>&nbsp;<input type='button' id='left' value='&nbsp;&lt;&nbsp;' onclick='MoveLeft();' />&nbsp;</td></tr>"
    W "</table>"
	W "</td>"
	
	W "<TD><Select id='ToList' size='10' multiple='1' style='width:450px'>"
	S in=""
	for {
		set in=$O(Exceptions(in))
		Q:in=""
		W "<Option value="""_in_""">"_in
	}
	W "</Select>"
	W "</TD></TR></TABLE><BR>"
	W "Reason: <Input Type='text' id='comment' style='width:375px' value="""_comment_""">"
	W "<BR>"
	

	
	w "<Input Type=""button"" Name=""SubmitException"" id=""SubmitException"" Value=""Submit"" onclick='AddExceptions("""_ExceptionId_""")'>"
	w "</form>"
	&html<
	<script language=javascript>
	
	document.getElementById('linkAlertAdmin').style.color = 'red';
	document.getElementById('link'+'#(%request.Get("PageName"))#').style.color = 'red';

	</script>	
	>
]]></Implementation>
</Method>

<Method name="jsCalfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
  
  <script language="JavaScript">
			<!-- // create calendar object(s) just after form tag closed
				 // specify form element as the only parameter (document.forms['formname'].elements['inputname']);
				 // note: you can have as many calendar objects as you need for your application
				var cal1 = new calendar2(document.forms['QueryBuilder'].elements['DateStart']);
				cal1.year_scroll = true;
				cal1.time_comp = false;
				var cal2 = new calendar2(document.forms['QueryBuilder'].elements['DateEnd']);
				cal2.year_scroll = false;
				cal2.time_comp = false;
document.QueryBuilder.comment.onkeydown = enterKey;
document.QueryBuilder.DateStart.onkeydown = enterKeyDateStart;
document.QueryBuilder.DateEnd.onkeydown = enterKeyDateEnd;

function enterKey(e) {
	//check to see if the return key was pressed ...
	if ((event.keyCode == 13)||(event.keyCode == 9))
	{ 
		//call the ValidateSearch function ...
		document.QueryBuilder.btnSearch.focus();
		ValidateSearch();
		//prevent the page from reloading ...
		return false;
	}
}
function enterKeyDateStart(e) {

	if ((event.keyCode == 13)||(event.keyCode == 9))
	{ 
		TDate('DateStart');
		document.QueryBuilder.TimeStart.focus();
		return false;
	}
}
function enterKeyDateEnd(e) {
	if ((event.keyCode == 13)||(event.keyCode == 9))
	{ 
		TDate('DateEnd');
		document.QueryBuilder.TimeEnd.focus();
		return false;
	}	
}
	

//-->
			
</script>
  
  >
]]></Implementation>
</Method>

<Method name="AddException">
<ClassMethod>1</ClassMethod>
<FormalSpec>ExceptionID:%Integer,itemname:%String,StartDttm:%String,EndDttm:%String,comment:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	&sql( Insert into IIBAENSEMBLE_Monitor.AlertExceptions 
	           (ExceptionId,   itemname, startdttm, enddttm, comment)
		Values (:ExceptionID, :itemname,:StartDttm,:EndDttm,:comment)  )
	

	Quit SQLCODE
]]></Implementation>
</Method>

<Method name="DeleteException">
<ClassMethod>1</ClassMethod>
<FormalSpec>ExceptionID:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	&sql(Delete From IIBAENSEMBLE_Monitor.AlertExceptions
    	 where ExceptionID=:ExceptionID  )
     
	Quit SQLCODE
]]></Implementation>
</Method>

<Method name="GetExceptionID">
<ClassMethod>1</ClassMethod>
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[
	&sql(select max(ExceptionId) into :ExceptionId from IIBAENSEMBLE_Monitor.AlertExceptions)
	s ExceptionId=ExceptionId+1



	Quit ExceptionId
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.ExceptionView">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%CSP.Page</Super>
<TimeChanged>61460,40863.996939</TimeChanged>
<TimeCreated>61062,57720.179691</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	if ##class(%SYSTEM.Security).Check("%All") = "READ,WRITE,USE" { set Allowed = 1 }
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
  
<script language="JavaScript" src="calendar2.js"></script>
<script language="JavaScript" src="date.js"></script><!-- Date only with year scrolling -->

<script type="text/JavaScript">
<!--

	function Initialize()
	{
		//alert('init view');
	}
	
	function remove(objectId) {
		
		var x=objectId.split(".");
		exceptionId=x[0];
		childIndex=x[1];
		itemName="";
		
		if ( childIndex ) {
			var rs=document.getElementById('childRow'+objectId);
			var cs=rs.cells[1];
			itemName=cs.innerHTML;
			
		}
		
		//alert('Exception id: '+exceptionId);
		//alert('item Name: '+itemName);
		
		var remove=#server(..Remove(exceptionId,itemName))#;
		
		//now remove the row from the table
		var rowIndex="";
		if (childIndex) {
			rowIndex=document.getElementById('childRow'+objectId).rowIndex;
		} else {
			var r=document.getElementById('exceptionRow'+objectId);
			rowIndex=r.rowIndex;
			
			
			//colapse the exceptions
			if ( document.getElementById('rowAction'+objectId).value == "-" ) {
				changeRow(objectId);
			}
		}
		
		if (rowIndex) {
			document.getElementById('Detailview').deleteRow(rowIndex);
		}
			
		
		
	}
	
	function editComment(exceptionId) {
		
		var comment=document.getElementById('Comment'+exceptionId).innerHTML
		var newComment=prompt('Edit Comment',comment);
		
		if ( newComment!=null && newComment!="" ) {
			var rv=#server(..EditComment(exceptionId,newComment))#
			document.getElementById('Comment'+exceptionId).innerHTML=newComment;
			
		}
		
		
	}
	
	function editException(exceptionId) {
		
		document.location='IIBASupport.csp?PageName=AlertExceptionDefinition&Mode=edit&id='+exceptionId;
		
		
		
	}
	
	
	function changeRow(rowId) {
		
		//alert('row: '+rowId);
		var rowIndex=document.getElementById("exceptionRow"+rowId).rowIndex;
		if ( document.getElementById('rowAction'+rowId).value == "+" ) {
			
			// expand this exception - displaying items...
			document.getElementById('rowAction'+rowId).value="-";
			var start=document.getElementById('StartDttm'+rowId).innerHTML
			var end=document.getElementById('EndDttm'+rowId).innerHTML
			var comment=document.getElementById('Comment'+rowId).innerHTML
			var itemList=#server(..GetItemList(start,end,comment))#;
			
			//alert('rowIndex: '+rowIndex);
			var itemArray=itemList.split(",");
			for (i=0; i<itemArray.length; i++) {
				
				//insert a row with the item information
				var x=document.getElementById('DetailView').insertRow(rowIndex+1);
				x.id='childRow'+rowId+'.'+i;
				var y=x.insertCell(0);
				y.innerHTML='&nbsp;';
				y.width='4%';
				y.id='exceptionChild'+rowId+'.'+i;
				var z=x.insertCell(1);
				z.colSpan=4;
				z.width='94%';
				z.id='childName'+rowId+'.'+i;
				z.innerHTML=itemArray[i];
				var w=x.insertCell(2);
				w.innerHTML='<img Title="Delete" src="customimages/trash_bold.gif" id="removeChild'+rowId+'.'+i+'" onclick="remove(\''+rowId+'.'+i+'\');">'
			}
			
		} else {
			//colapse items into exception row.
			document.getElementById('rowAction'+rowId).value="+";
			i=rowIndex+1;
			do {
				//get the row id
				rs=document.getElementById('DetailView').rows[i];
				cs=rs.cells[0];
				r=cs.id;
				if ( r.match('exceptionChild'+rowId+".") ) {
					document.getElementById('DetailView').deleteRow(i);
				} 
			}
			while ( r.match('exceptionChild'+rowId+".") && (document.getElementById('DetailView').rows.length>i) )
			
		}
		
		
	}
	
	
	function TDate(strElement) {
		var tvalue = document.getElementById(strElement).value;
		var tvaluefirst = tvalue.substr(0,1)
		
		
		if (tvaluefirst.toUpperCase() == 'T')
		{
			var tdate = new Date();
			if (tvalue.length == 1)
			{
				document.getElementById(strElement).value = tdate.format('MM/dd/yyyy');
				
			} 
			else 
			{
				var tdays = tvalue.substr(1,tvalue.length)
				tdate.add('d',tdays);
				document.getElementById(strElement).value = tdate.format('MM/dd/yyyy');
			}
		} else if (tvalue !="") {
			
			var tdate=tvalue.split("/");
			var month=tdate[0];
			var day=tdate[1];
			var year=tdate[2];
						
			if ( (month != "" ) && (day != "" ) ) {
				if ( (tdate.length == 2) || (year.length == 0) ) {
					var d=new Date()
					year=d.getFullYear()
					document.getElementById(strElement).value=month+"/"+day+"/"+year;
					
				} else if (year.length == 2) {
					document.getElementById(strElement).value=month+"/"+day+"/20"+year;
				}
			}
						
		}
		//alert('calling view page with new after'+document.getElementById(strElement).value);
		document.location='IIBASupport.csp?PageName=AlertExceptionView&after='+document.getElementById(strElement).value;		
	}
	



//-->
</script>
  
  >
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	
	Set Mode=%request.Get("Mode")
	set after=%request.Get("after")

	if ( after '= "") {
		s a=$ZDTH(after)
		s after=$ZDT(a,3)
		s afterDisplay=$ZDATE(a)
	} else {
		s after=$ZDT($P($H,",",1)-3,3)
		s afterDisplay=$ZDT($P($H,",",1)-3)
	}



	w ##class(IIBAENSEMBLE.csp.AlertAdmin).SubMenu()


	w "<form id='DisplayExceptions'>"
	w "<table border=0>"
	w "<tr ><td width='40' >&nbsp;</td><td width='250' align='Right' >Exceptions After (MM/DD/YYYY):&nbsp;</td><td width='50'>"
	w "<input type='text' name='after' id='after' style='width: 75px; '"
	w "Value='"_afterDisplay_"' onblur='TDate(""after"");' onchange='TDate(""after"");return false;'>"
	//w "Value='"_afterDisplay_"' onblur='TDate(""after"");' ></td>"
	w "<td><input type='image' src='customimages/searchblue.gif' onclick='TDate(""after"");return false;' alt='Search'>"
	w "</td></tr>"
	w "</table>"


	w "<table id='DetailView' class=""DetailTable"" border=""1"" cellpadding=""2"" cellspacing=""0"" >"
	w "<tr>"
	w "<th width='40'>&nbsp;</th>"
	w "<th nowrap align='left' style='text-align:left;cursor:pointer;cursor:hand;' width='150'>Start</th>"
	w "<th nowrap align='left' style='text-align:left;cursor:pointer;cursor:hand;' width='150'>End</th>"
	w "<th nowrap align='left' style='text-align:left;cursor:pointer;cursor:hand;' width='550'>Reason</th>"
	w "<th width='25'>&nbsp;</th>"
	w "<th width='25'>&nbsp;</th>"
	w "</tr>"

	Set rs=##class(%ResultSet).%New()
	Do rs.Prepare("select distinct ExceptionId, StartDttm, EndDttm, Comment from IIBAENSEMBLE_Monitor.AlertExceptions  where EndDttm >'"_after_"' Order By StartDttm,EndDttm")
	Do rs.Execute()
	set i = 1
	While(rs.Next()) {
	
		if i#2=0 {
			w "<tr id=""exceptionRow"_rs.Data("ExceptionId")_""" class=""EvenRow""  >"
		} Else {
			w "<tr id=""exceptionRow"_rs.Data("ExceptionId")_""" class=""OddRow""  >"
		}
		w "<td><input id=""rowAction"_rs.Data("ExceptionId")_""" type=""button"" value=""+"" onclick='changeRow("""_rs.Data("ExceptionId")_""");'></td>"
		w "<td><div id='startDttm"_rs.Data("ExceptionId")_"'>"_$ZDT($ZDTH(rs.Data("StartDttm"),3))_"</div></td>"
		w "<td><div id='EndDttm"_rs.Data("ExceptionId")_"' >"_$ZDT($ZDTH(rs.Data("EndDttm"),3))_"</div></td>"
		w "<td><div id='Comment"_rs.Data("ExceptionId")_"'  >"
		w rs.Data("Comment")
		w "</div></td>"
		w "<td><img Title='Edit' src='customimages/edit.gif' onclick='editException("""_rs.Data("ExceptionId")_""");'></td>"
		w "<td><img Title='Delete' src='customimages/trash_bold.gif' input id=""remove"_rs.Data("ExceptionId")_""" onclick=""remove('"_rs.Data("ExceptionId")_"');""></td>"
	
		w "</tr>"
		w "<div id='child"_rs.Data("ExceptionId")_"'></div>"
		s i=i+1


	}		
	w "</table>"
	w "</form>"
	&html<
	<script language=javascript>
	
	document.getElementById('linkAlertAdmin').style.color = 'red';
	document.getElementById('link'+'#(%request.Get("PageName"))#').style.color = 'red';

	</script>	
	>
]]></Implementation>
</Method>

<Method name="Remove">
<ClassMethod>1</ClassMethod>
<FormalSpec>ExceptionID:%String,ItemName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set rs=##class(%ResultSet).%New()
	
	s sql="Delete from IIBAENSEMBLE_Monitor.AlertExceptions where Exceptionid='"_ExceptionID_"'"
	if ( ItemName '= "" ) {
		s sql=sql_" and ItemName='"_ItemName_"'"
	}
	
	Do rs.Prepare(sql)
	Do rs.Execute()
	
	Q $$$OK
]]></Implementation>
</Method>

<Method name="EditComment">
<ClassMethod>1</ClassMethod>
<FormalSpec>ExceptionID:%String,NewComment:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
		
	set rs=##class(%ResultSet).%New()
	
	s sql="Update IIBAENSEMBLE_Monitor.AlertExceptions "
	s sql=sql_"set Comment='"_NewComment_"' "
	s sql=sql_"where Exceptionid='"_ExceptionID_"'"
	
	Do rs.Prepare(sql)
	Do rs.Execute()
	
	Q $$$OK
]]></Implementation>
</Method>

<Method name="GetItemList">
<ClassMethod>1</ClassMethod>
<FormalSpec>StartDttm:%TimeStamp,EndDttm:%TimeStamp,Comment:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set rs=##class(%ResultSet).%New()
	Do rs.Prepare("Select Distinct ItemName from IIBAENSEMBLE_Monitor.AlertExceptions where StartDttm = '"_$ZDT($ZDTH(StartDttm),3)_"' and EndDttm='"_$ZDT($ZDTH(EndDttm),3)_"' and Comment='"_Comment_"'")
	Do rs.Execute()
	s items=""
	while (rs.Next()) {
		if (items'="") {
			s items=items_","
		}
		s items=items_rs.Data("ItemName")
		
	}
	
	Quit items
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.FileDownload">
<Description>
</Description>
<Super>%CSP.Page</Super>
<TimeChanged>61331,43625.552038</TimeChanged>
<TimeCreated>61229,39958.946012</TimeCreated>

<Method name="OnPreHTTP">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set %response.ContentType = "application/force-download"
	d %response.SetHeader("Content-disposition", "attachment; filename="_%request.Get("filename"))
	Quit 1
]]></Implementation>
</Method>

<Method name="OnPage">
<Description><![CDATA[
Event handler for <b>PAGE</b> event: this is invoked in order to  
generate the content of a csp page.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	s EnsSysDir = ##class(%File).ParentDirectoryName(##class(%File).ManagerDirectory())
	
	set pFileStream = ##class(%FileCharacterStream).%New()
	Set pFileStream.Filename = EnsSysDir_"IIBAExports\"_%request.Get("filename")
	set pGlobalStream = ##class(%GlobalCharacterStream).%New()
	d pGlobalStream.CopyFrom(pFileStream)
	while 'pGlobalStream.AtEnd {
		w pGlobalStream.ReadLine(),!		
	}
	
	kill pFileStream
	kill pGlobalStream
	d ##class(%File).Delete(EnsSysDir_"IIBAExports\"_%request.Get("filename"))
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.FileUpload">
<Description>
</Description>
<Super>%CSP.Page</Super>
<TimeChanged>61523,50468.974746</TimeChanged>
<TimeCreated>61229,39958.946012</TimeCreated>

<Method name="OnPreHTTP">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set %response.ContentType = "text/html; charset=UTF-8"
	//d %response.SetHeader("Content-disposition", "attachment; filename="_%request.Get("filename"))
	Quit 1
]]></Implementation>
</Method>

<Method name="OnPage">
<Description><![CDATA[
Event handler for <b>PAGE</b> event: this is invoked in order to  
generate the content of a csp page.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//Posts to the FileUpload class must include the following parameters
		//Class - the name of a class containing a class method that will receive the character stream as a parameter
		//Method - the name of the class method
	//Posts to this class must use the text "uploadfilename" as the name of the field that containes the file data
	
	s importstream = ##class(%GlobalCharacterStream).%New()
	d importstream.CopyFrom(%request.GetMimeData("uploadfilename"))
	s response = $ZOBJCLASSMETHOD(%request.Get("Class"),%request.Get("Method"),%request.Get("MethodParams"),importstream)
	w response
 	
		
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.HolidayDef">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%CSP.Page</Super>
<TimeChanged>62675,38629.87424</TimeChanged>
<TimeCreated>61061,49124.548261</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	if ##class(%SYSTEM.Security).Check("%All") = "READ,WRITE,USE" { set Allowed = 1 }
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
  
  <!-- Tigra Calendar American format mm/dd/yyyy -->
<script language="JavaScript" src="calendar2.js"></script>
<script language="JavaScript" src="date.js"></script><!-- Date only with year scrolling -->
<script language="JavaScript">
			<!-- 

function Initialize(){
	
}

function AddHolidayDate() {
	
	
	var hd=document.getElementById('HolidayDate').value;
	var selectObj=document.getElementById('HolidayName');
	var hn=selectObj.options[selectObj.selectedIndex].value;
	
	//alert("hn= "+hn+" / hd "+hd);
	
	if (hn == "NewName") {
		
		NewHoliday();
		hn=selectObj.options[selectObj.selectedIndex].text;
		
	}
	
	
	hn=selectObj.options[selectObj.selectedIndex].text;
	

	if ( (hn != "") && (hd != "") ) {
		//alert("setting Holiday: "+hd+"/ code: "+hn);
		var check=#server(..GetHolidayId(hn))#;
		//alert('the id is: '+check);
		var a = #server(..SaveHoliday(hn,hd))#;
		
		
		// Add the row to the table
		if ( a != "" ) {
			d=a.split('|');
			hn=d[1];
			hd=d[0];
			rowAdded=-1;
		
			tableObj=document.getElementById('HolidayDateTable');
			tableLength=tableObj.rows.length;
		
			for (r=0;r<tableObj.rows.length;r++) {
			
				row=tableObj.rows;
				columns=row[r].cells;
				cd=columns[1].innerHTML;
				cn=columns[0].innerHTML;
				cda=cd.split('/');
				cds=cda[2]+cda[1]+cda[0];
				if ( ( rowAdded < 0 ) && (cds>hd) ) {
					rowAdded=r;
				}
			
			}
			if (rowAdded < 0 ) {
				rowAdded=tableLength;
			}
			tableObj.insertRow(rowAdded);
		
			row=tableObj.rows[rowAdded];
			row.insertCell(0);
			row.insertCell(1);
			row.insertCell(2);
			row.cells[0].innerHTML=hn;
			row.cells[1].innerHTML=hd.substr(4,2)+'/'+hd.substr(6,2)+'/'+hd.substr(0,4);
			row.cells[2].innerHTML='<img Title="Delete" src="customimages/trash_bold.gif" id="Delete"  onclick=\'RemoveHoliday("'+hd+'")\'>';
		
			ZebraHolidayTable();
		
		}
		
		
		
	} else {
		alert("Holiday Date and Name are required");
		
	}
	
	
	
}

function RemoveHoliday(Holiday) {
	
	//alert("Need to delete: "+Holiday);
	var a=#server(..DeleteHoliday(Holiday))#;
	window.location.reload();
	
}

function ZebraHolidayTable() {
	
	
	var tableObj=document.getElementById('HolidayDateTable');
	var tableLength=tableObj.rows.length;
		
	for (r=0;r<tableLength;r++) {
		
		
		
		if ( (r%2)== 0) {
			tableObj.rows[r].className='EvenRow';	
		} else {
			tableObj.rows[r].className='OddRow';
				
		}
	}	
	
}

function NewHoliday() {
	
	//alert('adding a new holiday');
	var selectObj=document.getElementById('HolidayName');
	var hn=selectObj.options[selectObj.selectedIndex].value;
	
	
	if (hn == "NewName") {
		
		hn=prompt("Please Enter the Holiday Name: ");
		
		if ( hn !=null && hn != ''  ) {
			//hn=#server(..GetHolidayId(hn))#;
			//alert("New Value: "+hn);
			for (i=0;i<selectObj.length;i++) {
				var index=-1;
				
				if ( selectObj[i].text.toUpperCase() == hn.toUpperCase() ) {
					index=i;
				}
			}
			//alert('index='+index);
			if (index < 0 ) {
				
				no=document.createElement('option');
				no.text=hn;
				no.value=hn;
				
				try {
					selectObj.add(no,null);
					
				} catch (ex) {
					selectObj.add(no);
					
				}
				index=selectObj.length-1;
			}
				
			selectObj.selectedIndex=index;
			
			
		}
		
		
	}
	
	
	function TDate(strElement) {
		var tvalue = document.getElementById(strElement).value;
		var tvaluefirst = tvalue.substr(0,1)
		
		
		if (tvaluefirst.toUpperCase() == 'T')
		{
			var tdate = new Date();
			if (tvalue.length == 1)
			{
				document.getElementById(strElement).value = tdate.format('MM/dd/yyyy');
				
			} 
			else 
			{
				var tdays = tvalue.substr(1,tvalue.length)
				tdate.add('d',tdays);
				document.getElementById(strElement).value = tdate.format('MM/dd/yyyy');
			}
		} else if (tvalue !="") {
			
			var tdate=tvalue.split("/");
			var month=tdate[0];
			var day=tdate[1];
			var year=tdate[2];
						
			if ( (month != "" ) && (day != "" ) ) {
				if ( (tdate.length == 2) || (year.length == 0) ) {
					var d=new Date()
					year=d.getFullYear()
					document.getElementById(strElement).value=month+"/"+day+"/"+year;
					
				} else if (year.length == 2) {
					document.getElementById(strElement).value=month+"/"+day+"/20"+year;
				}
			}
						
		}		
	}
}
	

			//-->
			
</script>
  
  
  
  >
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    w ##class(IIBAENSEMBLE.csp.AlertAdmin).SubMenu()
	K HolidayList
	S rowNum=0
	set rs=##class(%ResultSet).%New()
	Do rs.Prepare("Select itemdescription,itemvalue from IIBAENSEMBLE_Monitor.tblItems where itemtype='Holiday'")
	Do rs.Execute()
	
	while rs.Next() {
		Set HolidayList(rs.Data("itemvalue"))=rs.Data("itemdescription")
		
	}
	
	
	w "<form name='QueryBuilder' id='QueryBuilder'>"

	w "<TABLE><TR><TD>Select Holiday Date</TD>"
	w "<TD>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</TD>"
	w "<TD>Select Holiday Name</TD></TR>"
	w "<TR><TD>"
	w "<input type='Text' name='HolidayDate' id='HolidayDate' value='' onblur=""TDate('HolidayDate')"" >&nbsp;"
	w "<a href=""javascript:cal1.popup();""><img src=""img/cal.gif"" width=""16"" height=""16"" border=""0"" alt=""Holiday Date""></a><br>"
	w "</TD><TD></TD><TD>"
	w "<select NAME='HolidayName' id='HolidayName' onchange='NewHoliday()'>"
	w "<option value='empty' >"
	w "<option VALUE='NewName'>&lt;New Holiday&gt;"
	

	Set h=""
	For {
		Set h=$O(HolidayList(h))
		Q:h=""
		
		W "<option value='"_h_"'>"_HolidayList(h)
		//W "<option >"_HolidayList(h)
	}
	W "</TD>"
			

	w "</TR>"
	w "<TR></TR><TR><TD><input type='button' name='AddHoliday' id='AddHoliday' value='Add Holiday' onclick='AddHolidayDate()'/></TD></TR>"
	
	w "</TABLE>"
	w "</form>"
	
	W "<Table class='DetailTable' id='HolidayDateTable' padding=5 border=1>"
	S date=""
	s rowNum=0
	For {
		Set date=$O(^ZAlert.Holiday(date))
		Q:date=""
		
		s dd=$E(date,5,6)_"/"_$E(date,7,8)_"/"_$E(date,1,4)
		s rowNum=rowNum+1
		W "<TR "
		if rowNum#2=0 {
 			W " class=""EvenRow"" "
 		} Else {
 			W " class=""OddRow"" "
 		}
		W "><TD>",HolidayList(^ZAlert.Holiday(date)),"</TD><TD>",dd,"</TD>"
		//W "<TD><input type='button' name='",date,"' value='Delete' onclick='RemoveHoliday(",date,")'/></TD></TR>"
		W "<TD><img Title='Delete' src='customimages/trash_bold.gif' id='Delete' onclick='RemoveHoliday("""_date_""")'/></TD></TR>"
		
	}
	
	w "</TABLE>"
	&html<
	<script language=javascript>
	
	document.getElementById('linkAlertAdmin').style.color = 'red';
	document.getElementById('link'+'#(%request.Get("PageName"))#').style.color = 'red';

	</script>	
	>
]]></Implementation>
</Method>

<Method name="jsCalfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
   <script language=javascript>
			<!-- // create calendar object(s) just after form tag closed
				 // specify form element as the only parameter (document.forms['formname'].elements['inputname']);
				 // note: you can have as many calendar objects as you need for your application
				//var cal1 = new calendar2(document.forms['QueryBuilder'].elements['HolidayDate']);
				var cal1 = new calendar2(document.getElementById('HolidayDate'));
				cal1.year_scroll = true;
				cal1.time_comp = false;
document.QueryBuilder.HolidayDate.onkeydown = enterKeyHolidayDate;

function enterKeyHolidayDate(e) {

	if ((event.keyCode == 13)||(event.keyCode == 9))
	{ 
		TDate('Date1');
		document.HolidayName.focus();
		return false;
	}
}

	

			//-->
   </script>
  >
]]></Implementation>
</Method>

<Method name="SaveHoliday">
<ClassMethod>1</ClassMethod>
<FormalSpec>HolidayName:%String,HolidayDate:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[

		S HolidayValue=..GetHolidayId(HolidayName)
		
		
		S year="20"_$P(HolidayDate,"/",3)
		s year=$E(year,$L(year)-3,$L(year))
		s month="0"_$P(HolidayDate,"/",1)
		s month=$E(month,$L(month)-1,$L(month))
		s day="0"_$P(HolidayDate,"/",2)
		s day=$E(day,$L(day)-1,$L(day))
		
		S d=year_month_day
		Set v=""
		If ( d?8N && ($G(^ZAlert.Holiday(d))="") ) {
			
			s ^ZAlert.Holiday(d)=HolidayValue
			s v=d_"|"_HolidayName
		}
		
		Q v
]]></Implementation>
</Method>

<Method name="DeleteHoliday">
<ClassMethod>1</ClassMethod>
<FormalSpec>HolidayDate:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if (HolidayDate?8N) {
		K ^ZAlert.Holiday(HolidayDate)
	}
	
	Q 1
]]></Implementation>
</Method>

<Method name="GetHolidayId">
<ClassMethod>1</ClassMethod>
<FormalSpec>HolidayName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	set rs=##class(%ResultSet).%New()
	Do rs.Prepare("Select itemdescription,itemvalue from IIBAENSEMBLE_Monitor.tblItems where itemtype='Holiday' order by itemvalue desc")
	Do rs.Execute()
	
	s NameUpper=$ZCONVERT($TR(HolidayName," ",""),"U")
	S ItemValue=""
	S LastItemValue=""
	while rs.Next() {
		
		if ( (LastItemValue="" ) || ( rs.Get("itemvalue") > LastItemValue ) ) {
			set LastItemValue=rs.Get("itemvalue")
		}
		
		S name=rs.Get("itemdescription")
		if ( $ZCONVERT($TR(name," ",""),"U")=NameUpper ) {
			S ItemValue=rs.Get("itemvalue")
			
			QUIT
		}
			
	}
			

	If ( ItemValue = "" ) {
		S ItemValue=LastItemValue+1
		s rs=##class(%ResultSet).%New()
		Do rs.Prepare("Insert into IIBAENSEMBLE_Monitor.tblItems (itemvalue,itemdescription,itemtype) values ('"_ItemValue_"','"_HolidayName_"','Holiday')")
		D rs.Execute()
	}

	Q ItemValue
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.ICProvUpload">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>62675,38783.299142</TimeChanged>
<TimeCreated>60908,31118.460678</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	if ##class(%SYSTEM.Security).Check("%All") = "READ,WRITE,USE" { set Allowed = 1 }
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
   <script language=javascript>
	<!--
	function Initialize()
	{
		CheckAccess()
	}
	function Hello() {
		alert('Hello');
	}

	
	function GetProviderFile() {
		
		var line,i,v;
		
		
		document.getElementById('StatusMessage').innerHTML=':  Load File....';
		
		var cdl=new ActiveXObject("UserAccounts.CommonDialog");

  		cdl.Filter="CSV Files (*.csv)|*.csv|All Files|*.*";
  		cdl.ShowOpen();
  		
  		if (cdl.Filename != "") {
			

			var jsFileName = cdl.Filename;

			document.getElementById('ProviderFileName').value=jsFileName;
			
			PreviewProviderFile();
		
		    // alert('File: '+jsFileName)
  		}
	}
	
function PreviewProviderFile() {
		
	var line,i,v;
		
	document.getElementById('StatusMessage').innerHTML=':  Load File....';
			
  	var jsFileName = document.getElementById("ProviderFileName").value;
  	
  	// alert('File: '+jsFileName);
  	
  	if (jsFileName != "" ) {
  		var fso = new ActiveXObject("Scripting.FileSystemObject");
  		
  		if ( fso.FileExists(jsFileName) ) {
	  		
	  		var PreviewText='<BR>File Preview  <i>(first 10 rows)</i><BR><Table Border=1 NOWRAP>';

	  		
  			var ObjTextFile=fso.OpenTextFile(jsFileName,1);
  		
  			// alert("opened the file");
  		
  			var BadLineCount=0;
  			var RecordCount=0;
  			var ProviderHeader="";
  			var reg=/^\s*$/;
  			while ( ! ObjTextFile.AtEndOfStream  ) {
				line=ObjTextFile.ReadLine();
	 			if (! reg.exec(line)) {
	  				RecordCount++;
	  				
	  				if ( RecordCount > 11 ) {
		  				break;
	  				}
	  				
	  				if ( RecordCount == 1 ) {
						// alert("first line: "+line);
						
						IsValid=#server(..ValidateHeader(line))#;
		  				if ( IsValid != 0 ) {
			  			
		  					alert("The Provider Upload file could not be processed.\nThe following header(s) are not valid: "+IsValid.replace(/0;/,""));
			  				break;
		  				}
		  				ProviderHeader=#server(..FormatHeader(line))#;
		  				PreviewText=PreviewText+ #server(..PreviewHTML(line))#;
		  				
	  				} else {
  						// alert("line "+RecordCount+": "+line);
  						x=#server(..ValidateData(ProviderHeader,line,"N"))#;
  						PreviewText=PreviewText+ #server(..PreviewHTML(line))#;
	  				}
	  			}
  			}
  		
  		
  			// document.getElementById('StatusMessage').innerHTML=CompleteMsg;
  			PreviewText=PreviewText+"</Table>";
  			// alert("Preview Text: ");
  			document.getElementById('Preview').innerHTML=PreviewText;
  			// document.getElementById('Preview').innerHTML="Test";
  		
  			fso.close;
  		
  		} else {
	  		alert("File does not exist");
  		}
  	}
  		
  		
  				
}
	
	function ProcessProviderFile() {
		
	var line,i,v;
		
	document.getElementById('StatusMessage').innerHTML=':  Load File....';
			
  	var jsFileName = document.getElementById("ProviderFileName").value;
  	
  	// alert('File: '+jsFileName);
  	
  	if (jsFileName != "" ) {
  		var fso = new ActiveXObject("Scripting.FileSystemObject");
  		
  		if ( fso.FileExists(jsFileName) ) {
  			var ObjTextFile=fso.OpenTextFile(jsFileName,1);
 		
  			// alert("opened the file");
  		
  			var BadLineCount=0;
  			var RecordCount=0;
  			var ProviderHeader="";
  			var reg=/^\s*$/;
  			while ( ! ObjTextFile.AtEndOfStream  ) {
				line=ObjTextFile.ReadLine();
	 			if (! reg.exec(line)) {
	  				RecordCount++;
	  				if ( RecordCount == 1 ) {
						// alert("first line: "+line);
						
						IsValid=#server(..ValidateHeader(line))#;
		  				if ( IsValid != 0 ) {
			  			
		  					alert("The Provider Upload file could not be processed.\nThe following header(s) are not valid: "+IsValid.replace(/0;/,""));
			  				break;
		  				}
		  				ProviderHeader=#server(..FormatHeader(line))#;
	  				} else {
  						// alert("line "+RecordCount+": "+line);
  						
  						x=#server(..ValidateData(ProviderHeader,line,"Y"))#;
  						
  						if (x == "") {

  						} else {
	  						BadLineCount++;
  						}
	  				}
	  			}
  			}
  		
  			RecordCount--;
  			var CompleteMsg="<BR><BR><B>Processing Complete</B><BR>File: "+jsFileName+"<BR>  Records Processed: "+RecordCount;
  			var AlertMessage='Processing Complete '+jsFileName+'\nRecords Processed: '+RecordCount;
  			if (BadLineCount > 0 ) {
	 			CompleteMsg=CompleteMsg+"<BR>  Records Missing Data: "+BadLineCount;
	  			CompleteMsg=CompleteMsg+'<BR> <a href="/csp/iibasupport/IIBAWFTasks.csp" >Error Workflow</a>';
	  			AlertMessage=AlertMessage+'\nRecords Missing Data: '+BadLineCount
  			}
  			alert(AlertMessage);
  		
  			document.getElementById('StatusMessage').innerHTML=CompleteMsg;
  		
  			fso.close;
  		
  		} else {
	  		alert("File does not exist");
  		}
  	}
  		
  		
  				
}

function CheckAccess(flag) {
	
	flag=#server(..GetAccessInfo())#;
	
	// alert('Testing access');
	if (flag==0) {
		alert("You do not have access");
		location.href='IIBATaskMgmt.csp';
	}
	
}


function downloadheaders() {
	
	var line=#server(..GetHeaders())#;
	
	var cdl=new ActiveXObject("UserAccounts.CommonDialog");

  	cdl.Filter="Text Files (*.csv)|*.csv|All Files|*.*";
  	cdl.ShowOpen();
  		
  	if (cdl.Filename != "") {
	  	
	  	if ( cdl.FileName.match(".")!=null ) {
		  	cdl.FileName=cdl.FileName+".csv";
	  	}
	  	
	  	
	  	var fso = new ActiveXObject("Scripting.FileSystemObject");
	  	var newFileObject = fso.OpenTextFile(cdl.Filename, 8, true);
	  	newFileObject.WriteLine(line);
	  	newFileObject.Close();
  	}
	
	//location.href='IIBASupport.csp?PageName=ICProvUpload';
}	
  -->
   </script>
  >
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    // <a class="DetailCommand" target="_top" href='IIBASupport.csp?PageName=ICProvUpload&Mode="DownloadHeaders"'><nobr>&nbsp;Download&nbsp;Headers&nbsp;</nobr></A>
    &html<
    <table><tr><td class="LayoutContentCol" width="5%" ><br><div class="DetailCommand">
	
	<a class="DetailCommand" target="_top" onclick='downloadheaders()'><nobr>&nbsp;Download&nbsp;Headers&nbsp;</nobr></A>
	</div></td></tr></table><BR>
    >
    Set Mode=%request.Get("Mode")
	Set ColumnHeaders=""
	
	If (%request.Get("Mode")="DownloadHeaders") {
		w "<HR>Test<HR></BR>"
		Set rs = ##class(%ResultSet).%New()
		Do rs.Prepare("Select Name from %Dictionary.PropertyDefinition where parent = 'ICOrderResult.ProviderUpload.Msg.NonHL7'")
		set tSC = rs.Execute() 
	
		S ColumnHeaders=""
		While (rs.Next()) {
			if ( ColumnHeaders="" ) {
				S ColumnHeaders=rs.Get("Name")
			} else{
				S ColumnHeaders=ColumnHeaders_$CHAR(9)_rs.Get("Name")
			}
		}
		w "<span id=headers>"_ColumnHeaders_"</span>"
		&js<downloadheaders(ColumnHeaders)>
	}
	&html<
	<Center>
	<Input Type="Text" Name="ProviderFileName" id="ProviderFileName" size="60" Value="">
	<Input Type="Button" Style="width:100" Name="GetProviderFile" id="GetProviderFile" Value="Select File" onclick="GetProviderFile()">
	<Input Type="Button" Style="width:100" Name="ProcessProviderFile" id="ProcessProviderFile" Value="Process File" onclick="ProcessProviderFile()">
	<Input Type="Button" Style="width:100" Name="PreviewProviderFile" id="PreviewProviderFile" Value="Preview File" onclick="PreviewProviderFile()">
	</Center><BR><BR><HR><B>Status</B>
	<Span id=StatusMessage>
	:  Load File....
	</script>
	</Span>

	<BR><BR><HR>
	<span id=Preview>
	</span>

	>
]]></Implementation>
</Method>

<Method name="FormatHeader">
<ClassMethod>1</ClassMethod>
<FormalSpec>ProvHeader:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 		Set NewTitles="", NewTitleList = ""
 		
 		set lCSV = ##class(IIBAENSEMBLE.Functions).ParseCSV(ProvHeader)
 				
 		for j=1:1:$LL(lCSV) { 
 			Set $LI(NewTitleList,j)=$ZCONVERT($ZSTRIP($LI(lCSV,j),"*E'A'N"),"U") 
 		}
 		
 		set NewTitles = $LTS(NewTitleList,$C(9))
 		
         Quit NewTitles
]]></Implementation>
</Method>

<Method name="GetHeaders">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//&js<alert('Getting Header');>
		Set rs = ##class(%ResultSet).%New()
		Do rs.Prepare("Select Name from %Dictionary.PropertyDefinition where parent = 'ICOrderResult.ProviderUpload.Msg.NonHL7' order by SequenceNumber")
		set tSC = rs.Execute() 
	
		S ColumnHeaders=""
		While (rs.Next()) {
			if ( ColumnHeaders="" ) {
				S ColumnHeaders=$C(34)_rs.Get("Name")_$C(34)
			} else{
				S ColumnHeaders=ColumnHeaders_","_$CHAR(34)_rs.Get("Name")_$C(34)
			}
		}
		
		//S ColumnHeaders=..FormatHeader(ColumnHeaders)
		//W "Headers: "_ColumnHeaders
		
		
			
		
		Quit ColumnHeaders
]]></Implementation>
</Method>

<Method name="GetAccessInfo">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 		
 		Set ReturnVal=$SYSTEM.Security.Check("IIBAImagecastUpdate", "USE")
 		// &js<alert('#("Retrun Value: "_ReturnVal)#')>
 			
 		
 		Quit ReturnVal
]]></Implementation>
</Method>

<Method name="PreviewHTML">
<ClassMethod>1</ClassMethod>
<FormalSpec>line:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 		set lCSV = ##class(IIBAENSEMBLE.Functions).ParseCSV(line)
 		
 		set ReturnVal = "<TR>"
 		
 		for j=1:1:$LL(lCSV) {
 			set ReturnVal = ReturnVal_"<TD NOWRAP>"
 			if $LI(lCSV,j) '= "" { 
 				set ReturnVal = ReturnVal_$LI(lCSV,j) 
 			} else {
 				set ReturnVal = ReturnVal_"&nbsp;"
 			}
 			set ReturnVal = ReturnVal_"</TD>"
 		}	
 		
 		
 		set ReturnVal = ReturnVal_"</TR>"
 		
 		Quit ReturnVal
]]></Implementation>
</Method>

<Method name="ValidateData">
<ClassMethod>1</ClassMethod>
<FormalSpec>ProvHeader:%String,ProvData:%String,InvokeServiceFlag:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 		If ( ProvData="" ) {
 			Set ReturnVal="NoData"
 			
 		} else {
 			
 			// &js<alert('#(ProvHeader)#')>
 			// &js<alert('#(ProvData)#')>
 			Set sep=$CHAR(9)
 			Set ColumnTitles=$LISTFROMSTRING(ProvHeader,sep)
 			Set pRequest=##class(ICOrderResult.ProviderUpload.Msg.NonHL7).%New()
 			Set DataList=##class(IIBAENSEMBLE.Functions).ParseCSV(ProvData)
 			Set DataLength=$LISTLENGTH(DataList)
 			IF ($LISTLENGTH(DataList)>$LISTLENGTH(ColumnTitles)) {
 				Set Message="The number of data fields is greater than the number of column headers ! \n("_$E(ProvData,1,40)_")"
 				//&js<alert('The number of data fields does not match the number of column headers !')>
 				&js<alert('#(Message)#')>
 			}
 			For j=1:1:$LISTLENGTH(ColumnTitles) {	
 				if ( j <= DataLength ) {
 					set $ZOBJPROPERTY(pRequest,$LIST(ColumnTitles,j))=$LIST(DataList,j)
 				}
 			}
 
 			
 			Set ReturnVal=##class(ICOrderResult.ProviderUpload.Functions).ValidateProviderDataExpr(pRequest)
 		
 			 //&js<alert('#("Retrun Value: "_ReturnVal)#')>
 			
 			if (InvokeServiceFlag="Y") {
 				do ##class(IIBAENSEMBLE.Utilities).InvokeService("ICOrderResult.ProviderUpload.Bsvc.CspInbound",pRequest)
 			}
 			
 		}
 		
 		Quit ReturnVal
]]></Implementation>
</Method>

<Method name="ValidateHeader">
<ClassMethod>1</ClassMethod>
<FormalSpec>ProvHeader:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 		If ( ProvHeader="" ) {
 			Set ReturnVal="NoData"
 			
 		} else {
 			Set ReturnVal=##class(ICOrderResult.ProviderUpload.Functions).ValidateProviderFileHeaderExpr(ProvHeader)
 		}
 		
 		Quit ReturnVal
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.InterfaceStatus">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>63613,37867.658249</TimeChanged>
<TimeCreated>60908,31118.460678</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	if ##class(%SYSTEM.Security).Check("%All") = "READ,WRITE,USE" { set Allowed = 1 }
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
   <script language=javascript>
	<!--
	function Initialize()
	{
		
		window.focus();
	}
	function changeScreenSize(w,h)  {   
		window.resizeTo( w,h )     
	}
	
	function jClearQueue(interfaceName) {
		var c=confirm('Clear message Queue for interfce: '+interfaceName+'?');
		if ( c == true) {
			var x=#server(..cClearQueue(interfaceName))#;
		}
	}
	
	function eventLogView(namespace,interfaceName) {
		
		var d=#server(..cEventLogView(interfaceName))#;
		
		window.open('EnsPortal.EventLog.zen?$NAMESPACE='+namespace);
	}
	
  -->
   </script>
  >
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    Set Mode=%request.Get("Mode")
	If (Mode="ToggleStatus") {
		/**/
		Set InterfaceName=%request.Get("InterfaceName")
		
		If ( %request.Get("Istatus")="Enabled") {
			
			Job ##class(Ens.Director).EnableConfigItem(InterfaceName,0)::10
			// Wait up to 30 seconds until the item has stopped.
			For i=1:1:10 {
				Q:'##class(Ens.Director).IsItemEnabled(InterfaceName)
				Hang 3
				
			}
			/*
			set status = ##class(Ens.Director).EnableConfigItem(%request.Get("InterfaceName"),0)
			if (status=$$$OK) {
				&js<'status: OK'>
			} else {
				&js<'status: #(status)#'>
			}
			*/
			
			
		} else {
			Job ##class(Ens.Director).EnableConfigItem(InterfaceName,1)::10
			// Wait up to 30 seconds until the item has started.
			For i=1:1:10 {
				Q:##class(Ens.Director).IsItemEnabled(InterfaceName)
				Hang 3
				
			}
			/*
			set status = ##class(Ens.Director).EnableConfigItem(%request.Get("InterfaceName"),1)
			if (status=$$$OK) {
				&js<'status: OK'>
			} else {
				&js<'status: #(status)#'>
			}
			*/
		}
		
		//set curRoles=$ROLES
		//set $ROLES=$ROLES_",IIBA_UpdateProduction"
		//set upstatus = ##class(Ens.Director).UpdateProduction()
		//set $ROLES=curRoles
		
	}
	
	Set Mode="ViewStatus"
	
	Set ProductionName=""
	Set ProductionStatus=""
	set status = ##class(Ens.Director).GetProductionStatus(.ProductionName,.ProductionStatus)

	Set Name=%request.Get("InterfaceName")
	Set InterfaceId=%request.Get("InterfaceId")
	
	Write "<CENTER><H1>"_Name_"</H1></CENTER>"
	Write "<BR><HR><BR>"
	
	Set Category=""
	Set ClassName=""
	Set Comment=""
	Set Enabled=""
	Set QueueSize=0
	&sql(Select Category, ClassName, Comment, Enabled
			into :Category, :ClassName, :Comment, :Enabled
			from Ens_config.Item
			where Name=:Name)
			
	set rs=##class(%ResultSet).%New("Ens.Queue:Enumerate")
	Set r=rs.Execute()
	
	while rs.Next() {
		if ( rs.Get("Name") = Name ) {
			Set QueueSize=rs.Get("Count")
		}
	} 

	W "<Form name='InterfaceStatusForm' id='InterfaceStatusForm'><TABLE  CellPadding=3>"
	W "<TR><TD>Name: </TD>"
	W "<TD><INPUT Type='Text' Name=Iname id=Iname size=50 readonly value='"_Name_"'></TD></TR>"
	W "<TR><TD>Production:</TD>"
	W "<TD>"
	IF ( ProductionStatus '= 1 ) {
		W "<Font Color=RED>"
	}
	W ProductionName_" ("_$P("Running,Stopped,Suspended,Troubled",",",ProductionStatus)_")"
	IF ( ProductionStatus '= 1 ) {
		W "</Font>"
	}
	W "</TD>"
	W "<TR><TD>Category: </TD>"
	W "<TD><INPUT Type='Text' size=50 readonly value='"_Category_"'></TD></TR>"
	W "<TR><TD>ClassName: </TD>"
	W "<TD><INPUT Type='Text' size=50 readonly value='"_ClassName_"'></TD></TR>"
	W "<TR><TD>Comment</TD>"
	W "<TD><INPUT Type='Text' size=50 readonly value='"_Comment_"'></TD></TR>"
	W "<TR><TD>Status</TD>"
	W "<TD><INPUT Type='Text' Name=Ienabled id=Ienabled size=50 readonly value='"
	If ( Enabled=1) {
		W "Enabled"
		S NewStatus="Disable"
	} Else {
		W "Disabled"
		S NewStatus="Enable"
	}
	W "'/INPUT></TD></TR>"
	W "<TR><TD>"
		If ( QueueSize > 0 ) {
		//W "<A HREF='IIBAUtilEnsQlist.csp?$ID1="_Name_"&$NAMESPACE=.Production' target='_blank'>"
		W "<A HREF='EnsPortal.QList.cls?QUEUE="_Name_"' target='_blank'>"
	}
	W "Queue Size"
		If ( QueueSize > 0 ) {
		W "</A>"
	}
	W "</TD><TD>"
	W "<INPUT Type='Text' size=50 readonly value='"_QueueSize_"'></TD>"
	if ( (QueueSize > 0) && (##class(%SYSTEM.Security).Check("%All") = "READ,WRITE,USE")) {
		W "<TD><Input Type='Button' Name='btnClearQ' id='btnClearQ' Value='Clear Queue' onclick='jClearQueue("""_%request.Get("InterfaceName")_""")' ></TD>"
	}
	W "</TR>"
	
	//w "<tr><td>InterfaceId:"_InterfaceId_"</td></tr>"
	if ( InterfaceId '= "" ) {
		set item = ##class(Ens.Config.Item).%OpenId(InterfaceId)
		for i=1:1:item.Settings.Count() {
			s st = item.Settings.GetAt(i)
			If ( st.Value '="" ) { 
				W "<TR><TD>"_st.Name,"</TD>"
				W "<TD><INPUT Type='Text' size=50 readonly value='"_##class(%CSP.Page).EscapeHTML(st.Value)_"'</TD>"
				if (st.Name="BusinessRuleName"){
					
					s RulePackage=""
					S RulePackage=$P(st.Value,".",1,$L(st.Value,".")-1)
					W "<TD><Input Type='Button' Name='ViewRule' id='ViewRule' Value='View Rules' onclick='window.open(""EnsPortal.RuleEditor.zen?RULE="_st.Value_""")' ></TD>"
					
				}
				W "</TR>",!
			}
		}
	}
	
	Set DocumentationRoot=##class(IIBAENSEMBLE.Functions).TableLookup(".Root Directories","Document Path","","INTERFACEMAPS")
	
	Set DocumentationPath=##class(IIBAENSEMBLE.Functions).TableLookup(%request.Get("InterfaceName"),"Document Path",,"InterfaceMaps")
	Set FullDocumentPath=""
	
	If (DocumentationPath="") {
		S DocDisabled="disabled"
	} else {
		s DocDisabled=""
		If ( DocumentationRoot="" ) {
			S FullDocumentPath=..QuoteJS(DocumentationPath)
		} else {
			S FullDocumentPath=..QuoteJS(DocumentationRoot_"\"_DocumentationPath)
		}
	}
	
	Set DiagramRoot=##class(IIBAENSEMBLE.Functions).TableLookup(".Root Directories","Diagram Path","","INTERFACEMAPS")
	
	
	Set DiagramPath=##class(IIBAENSEMBLE.Functions).TableLookup(%request.Get("InterfaceName"),"Diagram Path",,"InterfaceMaps")
	Set FullDiagramPath=""
	
	if ( DiagramPath="" ) {
		s DiagramDisabled="disabled"
	} else {
		S DiagramDisabled=""
		If ( DiagramRoot="") {
			S FullDiagramPath=..QuoteJS(DiagramPath)
		} else {
			S FullDiagramPath=..QuoteJS(DiagramRoot_"\"_DiagramPath)
		}
	}

	Set VisioPath=DocumentationPath_"\EnsInterfaceMap.vsd"
	
	 if ##class(%SYSTEM.Security).Check("IIBAcycleinterface","READ") {
		 s disabled=""
	 } else {
		 s disabled="disabled='disabled'"
	 }
	
	
	
	&html<
	<TR><TD></TD>
	<TD>
	<Input Type="Button" Name="btnStatus" id="btnStatus" #(disabled)# Value=#(NewStatus)# onclick='self.document.location="IIBASupportDetail.csp?PageName=InterfaceStatus&InterfaceName=#(Name)#&InterfaceId=#(InterfaceId)#&Mode=ToggleStatus&Istatus="+document.InterfaceStatusForm.Ienabled.value' >
	<Input Type="Button" Name="btnDoc" id="btnDoc" #($G(DocDisabled))# Value="Documentation" onclick="window.open(#(FullDocumentPath)#)" > 
	<Input Type="Button" Name="btnImg" id="btnImg" #($G(DiagramDisabled))# Value="Diagram" onclick="window.open(#(FullDiagramPath)#)" >
	<Input Type="Button" Name="BtnEvenLog" id="BtnEvenLog" Value="Event Log" onclick='eventLogView("#(ProductionName)#","#(Name)#")'>
	</TD>
	</TR>
	<TR><TD>
	>
	
	
	&html<
	</TABLE>
	
	>
]]></Implementation>
</Method>

<Method name="cClearQueue">
<ClassMethod>1</ClassMethod>
<FormalSpec>InterfaceName:%String</FormalSpec>
<Implementation><![CDATA[
	//&js<alert('in cClearQueue'+#(InterfaceName)#);>
	d ##class(IIBAENSEMBLE.Utilities).ClearQueue(InterfaceName)
	
	Quit 1
]]></Implementation>
</Method>

<Method name="cEventLogView">
<ClassMethod>1</ClassMethod>
<FormalSpec>InterfaceName:%String</FormalSpec>
<Implementation><![CDATA[
	// Set default sort criteria for Even Log Pane
	s ^CacheTemp.EnsPortal($username,"EventLog","SearchCriteria")="Newest First^999^"_InterfaceName_",,,,,,,,,,^0,0,0,0,0,0^500^0,0,1,0^None"
	
	Quit 1
]]></Implementation>
</Method>

<Method name="cosmethod">
<ClassMethod>1</ClassMethod>
<FormalSpec>param:%String</FormalSpec>
<Implementation><![CDATA[
	
	&js<alert('Hello');>
	Quit 1
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.LookUpTableAdmin">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>63705,35325.449276</TimeChanged>
<TimeCreated>60908,31118.460678</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	// Req#1 - Phegel Changed to use the LookupTable resource so you don't need to have %All permissions to use.
	if ##class(%SYSTEM.Security).Check("LookUpTableAdmin","USE")
	{ 
	 	set Allowed = 1 
	}
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
  <script type="text/javascript" src="modalbox/modalbox.js"></script>
  <script type="text/javascript" src="ext/adapter/ext/ext-base.js"></script>
  <script type="text/javascript" src="ext/ext-all.js"></script>
  <link rel="stylesheet" href="modalbox/modalbox.css" type="text/css" />
  <link rel="stylesheet" href="ext/resources/css/ext-all.css" />
	
   <script language=javascript>
	
	function Initialize()
	{

	}
		
	function SortTable(table,sortby1,sortby2) {
		//alert(sortby1);
		//alert(sortby2);
		//document.getElementById('tablediv').innerHTML='';
		
			
		var newtable = #server(..SortTable(table,sortby1,sortby2))#;
		document.getElementById('tablediv').innerHTML = newtable;
		
		if (newtable == '</TABLE>') {
			self.document.location="IIBASupport.csp?PageName=LookUp&Mode=Display&LookupTable="+table;
		}
		
		
			
	}

	
	function Display() {
		
		
		var LookupTable = document.getElementById('LookupTable').options[document.getElementById('LookupTable').selectedIndex].value;
		
		
		
		self.document.location="IIBASupport.csp?PageName=LookUp&Mode=Display&LookupTable="+LookupTable;
		
			
	}
	
	function InsertSave(table) {
		
		var leftid1 = '';
		var leftid2 = '';
		var leftid3 = '';
		var rightid = '';
		
		leftid1 = document.getElementById('InsLeftID1').value;
		leftid2 = document.getElementById('InsLeftID2').value;
		leftid3 = document.getElementById('InsLeftID3').value;
		rightid = document.getElementById('RightID').value;
		
		if ( (rightid == '') || (leftid1=='') ) {
			alert('LeftId1 and RightID are required...');
		
		} else {
		
			//alert('left id1 is >'+leftid1+'<');		
			var newRowId = #server(..InsertSaveAction(table,leftid1,leftid2,leftid3,rightid))#;
		
			if (newRowId=='exists'){
				alert('A translation for this combination of Left ID\'s already exist.');
			} else {
			
				// Add a row to the web page
				tableObj=document.getElementById('TableValues');
			
				row=tableObj.insertRow(3);
			
			
				tableObj.rows[3].id='Tablevalues.Id'+newRowId;
			
			
			
			
				row.insertCell(0);
				row.insertCell(1);
				row.insertCell(2);
				row.insertCell(3);
				row.insertCell(4);
				row.insertCell(5);
				
				row.cells[0].innerHTML=leftid1.replace(/ /g,'&nbsp;');
				if (leftid2 == '' ) {
					leftid2='&nbsp';
				} else {
					leftid2=leftid2.replace(/ /g,'&nbsp;');
				}
				row.cells[1].innerHTML=leftid2;
				if (leftid3 == '' ) {
					leftid3='&nbsp';
				} else {
					leftid3=leftid3.replace(/ /g,'&nbsp;');
				}
				row.cells[2].innerHTML=leftid3;
				if (rightid == '' ) {
					rightid='&nbsp';
				} else {
					rightid=rightid.replace(/ /g,'&nbsp;');
				}
				
				row.cells[3].innerHTML=rightid;
				row.cells[4].innerHTML='<a id="edit'+newRowId+'" value="Edit" onclick="rowEdit(\''+table+'\',\''+newRowId+'\');" ><img src=\'customimages/edit.gif\' alt=\'edit\' /></a>';
				row.cells[5].innerHTML='<a id="del'+newRowId+'" value="Delete" onclick=\'RemoveRow("'+table+'","'+newRowId+'");\' ><img src=\'customimages/trash_bold.gif\' alt=\'Delete\' /></a> ';
			
				document.getElementById('InsLeftID1').value=''
				document.getElementById('InsLeftID2').value=''
				document.getElementById('InsLeftID3').value=''
				document.getElementById('RightID').value=''
			}
		}
			
	}
	
	function EditSave(itemid,table) {
		
		var leftid1 = '';
		var leftid2 = '';
		var leftid3 = '';
		var rightid = '';
		
		leftid1 = document.getElementById('InsLeftID1').value;
		leftid2 = document.getElementById('InsLeftID2').value;
		leftid3 = document.getElementById('InsLeftID3').value;
		rightid = document.getElementById('RightID').value;
		
		//alert(table+itemid+leftid1+leftid2+leftid3+rightid);
		
		var editrow = #server(..EditSaveAction(table,itemid,leftid1,leftid2,leftid3,rightid))#;
		
		if (editrow=='exists'){
			alert('This translation appears to already exist.');
		}
		
	}
	// Req#4 - PHegel - delete table method.
	function Delete(table) {
		var delOK = confirm("Delete " + table + " Lookup Table? \n Click OK to delete.");
		if (delOK){
			var deleted = #server(..DeleteTable(table))#;	
			//alert(deleted);
			self.document.location="IIBASupport.csp?PageName=LookUp";
		}
		else {
			alert( table + " Lookup Table, not deleted.");
		}
		
	}
	
	function DefValueSave(table) {
		
		defvalue = document.getElementById('defaultvalue').value;
		
		var insertdefvalue = #server(..DefValueAction(table,defvalue))#;
		
		alert('Default Value Saved');
		
		
		
	}
	function deleteDefault(table) {
		
		var defvalue = document.getElementById('defaultvalue').value;
		
		Ext.MessageBox.confirm(table,'Delete Default value for this table? ',defValueDelete);
		
		var table=document.getElementById('LookupTable').options[document.getElementById('LookupTable').selectedIndex].text;
		
		//var confirmDel=confirm('Delete default Value "'+defvalue+'" for table '+table)
		
		//if (confirmDel==true) {
			//var insertdefvalue = #server(..DefValueAction(table,''))#;
			//document.getElementById('defaultvalue').value='';
			//alert('Default Value Saved');
		//}
		
		//alert('Default Value Saved');
		
		
		
	}
	function defValueDelete(btn) {
		
		var table=document.getElementById('LookupTable').options[document.getElementById('LookupTable').selectedIndex].text;
		
		if (btn=='yes') {
			var insertdefvalue = #server(..DefValueAction(table,''))#;
			document.getElementById('defaultvalue').value='';
			//alert('Default Value Saved');
		}
		
		//alert('Default Value Saved');
		
		
		
	}
	function editDefault(table) {
		
		defvalue = document.getElementById('defaultvalue').value;
		
		Ext.MessageBox.prompt(table,'Please Enter Default value: ',saveDefault,'',false,defvalue);
		
		
		
	}
	function saveDefault(btn,newDef) {
		
		
		
		var table=document.getElementById('LookupTable').options[document.getElementById('LookupTable').selectedIndex].text;
		
		
		if ( btn=='ok') {
			var insertdefvalue = #server(..DefValueAction(table,newDef))#;
			document.getElementById('defaultvalue').value=newDef;
		}
		
		
		
	}
	function importFormShow()
	{
		sm('modalImport',500,300)
	}
	function Export(Table) {
		var filename = #server(..ExportData(Table))#
		window.location = 'IIBAENSEMBLE.csp.FileDownload.cls?filename='+filename
	}
		
	function RemoveRow(table,itemId) {
		
		var leftId1=document.getElementById('Tablevalues.Id'+itemId).cells[0].innerHTML;
		leftId1=leftId1.replace(/\&nbsp;/g,'');
		var leftId2=document.getElementById('Tablevalues.Id'+itemId).cells[1].innerHTML;
		leftId2=leftId2.replace(/\&nbsp;/g,'');
		var leftId3=document.getElementById('Tablevalues.Id'+itemId).cells[2].innerHTML;
		leftId3=leftId3.replace(/\&nbsp;/g,'');
		var rightId=document.getElementById('Tablevalues.Id'+itemId).cells[3].innerHTML;
		rightId=rightId.replace(/\&nbsp;/,'');
		
		
		var check=confirm('Delete translation: '+leftId1+'_'+leftId2+'_'+leftId3+'->'+rightId+'?');
		
		if ( check== true ) {
			
			var del=#server(..DeleteTranslation(table,itemId))#;
		
			var tableObj=document.getElementById('TableValues');
			
			//alert('ItemId: '+itemId);
			for (r=0;r<tableObj.rows.length;r++) {
				//alert('row: '+r+' id: '+tableObj.rows[r].id);
				if ( tableObj.rows[r].id == 'Tablevalues.Id'+itemId ) {
					//alert("delete row: "+r);
					tableObj.deleteRow(r);
					
				}
			}
		}
		
		
	}
	
	function rowEdit(table,itemId) {
		
		//alert('In rowEdit, table='+table+', itemId='+itemId);

		
		row=document.getElementById('Tablevalues.Id'+itemId);
		leftId1=row.cells[0].innerHTML;
		if (leftId1=='&nbsp;') {
			leftId1=''
		}
		row.cells[0].innerHTML='<input type="text" id="leftid1Edit.'+itemId+'" value="'+leftId1+'" >';
		
		leftId2=row.cells[1].innerHTML;
		if (leftId2=='&nbsp;') {
			leftId2=''
		}
		row.cells[1].innerHTML='<input type="text" id="leftid2Edit.'+itemId+'" value="'+leftId2+'" >';
		
		leftId3=row.cells[2].innerHTML;
		if (leftId3=='&nbsp;') {
			leftId3=''
		}
		row.cells[2].innerHTML='<input type="text" id="leftid3Edit.'+itemId+'" value="'+leftId3+'" >';
		
		rightId=row.cells[3].innerHTML;
		if (rightId=='&nbsp;') {
			rightId=''
		}
		row.cells[3].innerHTML='<input type="text" id="rightIdEdit.'+itemId+'" value="'+rightId+'" >';
				
		row.cells[4].innerHTML='<a id="Tablevalues.save.'+itemId+'" value="save" onclick="rowSaveEdit(\''+table+'\',\''+itemId+'\');" ><img src=\'customimages/save.gif\' alt=\'Save\' /></a> ';
		row.cells[5].innerHTML='<a id="Tablevalues.cancel.'+itemId+'" value="Cancel" onclick="rowCancelEdit(\''+table+'\',\''+itemId+'\');" ><img src=\'customimages/cancel.gif\' alt=\'Cancel\' /></a>';
		
	
		
	}
	
	function rowSaveEdit(table,itemId) {
		
		//alert('Save Edit for Item: '+itemId);
		var row=document.getElementById('Tablevalues.Id'+itemId);
		var leftid1=document.getElementById('leftid1Edit.'+itemId).value;
		var leftid2=document.getElementById('leftid2Edit.'+itemId).value;
		var leftid3=document.getElementById('leftid3Edit.'+itemId).value;
		var rightid=document.getElementById('rightIdEdit.'+itemId).value;
		
		//alert('calling EditSaveAction with: >'+itemId+'<,>'+leftid1+'<,>'+leftid2+'<,>'+leftid3+'<,>'+rightid+'<');
		var r=#server(..EditSaveAction(table,itemId,leftid1,leftid2,leftid3,rightid))#;
		
		if (r=='exists' ) {
			alert('This row appears to exist. Cannot save this edit');
		} else {
			if ( leftid1 == "" ) {
				leftid1="&nbsp;"
			} else {
				leftid1=leftid1.replace(/ /g,'&nbsp;');
			}
			row.cells[0].innerHTML=leftid1;
			if ( leftid2 == "" ) {
				leftid2="&nbsp;"
			} else {
				leftid2=leftid2.replace(/ /g,'&nbsp;');
			}
			row.cells[1].innerHTML=leftid2;
		
			if ( leftid3 == "" ) {
				leftid3="&nbsp;"
			} else {
				leftid3=leftid3.replace(/ /g,'&nbsp;');
			}
			row.cells[2].innerHTML=leftid3;
		
			if ( rightid == "" ) {
				rightid="&nbsp;"
			} else {
				rightid=rightid.replace(/ /g,'&nbsp;');
			}
			row.cells[3].innerHTML=rightid;
		
			row.cells[4].innerHTML='<a id="edit'+itemId+'" value="Edit" onclick="rowEdit(\''+table+'\',\''+itemId+'\');" ><img src=\'customimages/edit.gif\' alt=\'edit\' /></a>';
		
			row.cells[5].innerHTML='<a id="del'+itemId+'" value="Delete" onclick=\'RemoveRow("'+table+'","'+itemId+'");\' ><img src=\'customimages/trash_bold.gif\' alt=\'Delete\' /></a>';
		}
		
		//alert('saving >'+leftid1+'< >'+rightid+'<');
		
	}
	
	
	function rowCancelEdit(table,itemId) {
		//alert('Cancel Edit for Item: '+itemId);
		
		// get old values
		var y=#server(..ReloadRowData(table,itemId))#;
		
		
		
		// update buttons
		var row=document.getElementById('Tablevalues.Id'+itemId);
		row.cells[4].innerHTML='<a id="edit'+itemId+'" value="Edit" onclick="rowEdit(\''+table+'\',\''+itemId+'\');" ><img src=\'customimages/edit.gif\' alt=\'edit\' /></a>'
		row.cells[5].innerHTML='<a id="del'+itemId+'" value="Delete" onclick=\'RemoveRow("'+table+'","'+itemId+'");\' ><img src=\'customimages/trash_bold.gif\' alt=\'Delete\' /></a>';
		
	}
	
	function columnFilter(table,column) {
		
		// alert('In filter function: '+table);
		var filterId1=document.getElementById('filterLeftID1').value;
		// alert('filter LeftID1:'+filterId1);
		var filterId2=document.getElementById('filterLeftID2').value;
		// alert('filter LeftID2:'+filterId2);
		var filterId3=document.getElementById('filterLeftID3').value;
		// alert('filter LeftID3:'+filterId3);
		var filterIdR=document.getElementById('filterRightID').value;
		// alert('filter RightID:'+filterIdR);
		
		

		if ( (filterId1+filterId2+filterId3+filterIdR) == ""  ) {
			window.location.reload();
		} else {
			var newtable = #server(..FilterByColumn(table,filterId1,filterId2,filterId3,filterIdR))#;
			// alert(newtable);
			document.getElementById('tablediv').innerHTML = newtable;
		
			if (newtable == '</TABLE>') {
				self.document.location="IIBASupport.csp?PageName=LookUp&Mode=Display&LookupTable="+table;
			}
		
			//alert('filter LeftID1:'+filterId1);
			document.getElementById('filterLeftID1').value=filterId1;
			document.getElementById('filterLeftID2').value=filterId2;
			document.getElementById('filterLeftID3').value=filterId3;
			document.getElementById('filterRightID').value=filterIdR;
			//alert('column: '+column);
			if ( column != "" ) {
				document.getElementById(column).select();
			}
		}
	}
	

  
   </script>
  >
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Quit:'..CheckPermissions() $$$OK
	
    set Mode = %request.Get("Mode")
	
	w "<div class='dialog' id=""modalImport"" >"
 	w ..buildmodalImport()
 	w "</div>"
 	
 	//Reg #1 - Phegel - Define objects used for table header.
	#DIM headers as %ListOfObjects
	#DIM header as IIBAENSEMBLE.LookupTableHeader
	#DIM currentHeader as IIBAENSEMBLE.LookupTableHeader
	
	If Mode = "" {
		// Req #1 - PHegel - Only show commands to create new tables or delete existing if they have Write access to the LookUpTableAdmin resource.
		if ( ##class(%SYSTEM.Security).Check("LookUpTableAdmin","WRITE"))
		{
			w "<table><tr><td class=""LayoutContentCol"" width=""20%"" ><div class=""DetailCommand"">"		
			w "<a class=""DetailCommand"" target=""_top"" href=""#"" onclick=""importFormShow(); return false;""><nobr>&nbsp;Import Table&nbsp;</nobr></A>"
			w "|"
			w "<a class=""DetailCommand"" target=""_top"" href=""IIBASupport.csp?PageName=LookUp&Mode=SetTable""><nobr>&nbsp;Create New Table&nbsp;</nobr></A>"
			// Req #2 - Phegel - Add the View Audit List button
			w "|"
			w "<a class=""DetailCommand"" target=""_top"" href=""IIBAENSEMBLE.Zen.TableAuditList.cls""><nobr>&nbsp;View Audit List&nbsp;</nobr></A>"
			w "</div></td></tr></table>"
		}
		w "<table id=""TableName"" class=""FilterTable"" border=""0"" cellpadding=""3"" cellspacing=""0"">"
		w "<tr><td align=""left"" nowrap>Select Table:&nbsp;&nbsp;"
		
		w "<select NAME=""LookupTable"" id=""LookupTable"" onchange='Display()'>"
		
		
		// Req #1 - PHegel - Change to get %ListOfObjects from Header object based on permisisons.
		set sc = ##class(IIBAENSEMBLE.LookupTableHeader).GetListByPermissions(.headers)
		quit:$$$ISERR(sc) sc
		
		w:sc=1 "<option VALUE=''>Select a Lookup Table...</option>"
		For i=1:1:headers.Count() {
      		Set header = headers.GetAt(i)
			set tablename = header.LookupTableName
			set tableID = header.%Id()
			w "<option VALUE="""_tablename_""">"_tablename_"</option>"
		}
	
		w "</select>"
		w "</td></tr></table>"



		
	} ElseIf Mode = "Display" {
		set Table = %request.Get("LookupTable")
		
		// Req #1 - PHegel - Only show commands to create new tables or delete existing if they have Write access to the LookUpTableAdmin resource.
		w "<table><tr><td class=""LayoutContentCol"" width=""20%"" ><div class=""DetailCommand"">"		
		if ( ##class(%SYSTEM.Security).Check("LookUpTableAdmin","WRITE"))
		{		
			w "<a class=""DetailCommand"" target=""_top"" href=""#"" onclick=""importFormShow(); return false;""><nobr>&nbsp;Import Table&nbsp;</nobr></A>"
			w "|"
			w "<a class=""DetailCommand"" target=""_top"" href=""#"" onclick=""Export('"_Table_"'); return false;""><nobr>&nbsp;Export Table&nbsp;</nobr></A>"
			w "|"
			w "<a class=""DetailCommand"" target=""_top"" href=""IIBASupport.csp?PageName=LookUp&Mode=SetTable""><nobr>&nbsp;Create New Table&nbsp;</nobr></A>"
			// Req #1 - Phegel - Add the Edit Table Detail Command
			w "|"
			w "<a class=""DetailCommand"" target=""_top"" href=""IIBASupport.csp?PageName=LookUp&Mode=SetTable&Table="_Table_"""><nobr>&nbsp;Edit Table Header&nbsp;</nobr></A>"
			// Req #4 - Phegel - Add Delete Table Command
			w "|"
			w "<a class=""DetailCommand"" target=""_top"" href=""#"" onclick=""Delete('"_Table_"'); return false;""><nobr>&nbsp;Delete Table&nbsp;</nobr></A>"
		}
		w "|&nbsp; Select Table:&nbsp;&nbsp;"
		
		w "<select NAME=""LookupTable"" id=""LookupTable"" onchange='Display()'>"
		
		// Req #1 - PHegel - Change to get %ListOfObjects from Header object based on permisisons.		
		set sc = ##class(IIBAENSEMBLE.LookupTableHeader).GetListByPermissions(.headers)
		quit:$$$ISERR(sc) sc
		
		For i=1:1:headers.Count() {
      		Set header = headers.GetAt(i)
			set tablename = header.LookupTableName
    	    if tablename = %request.Get("LookupTable") {
        	    w "<option VALUE="""_tablename_""" selected>"_tablename
        	    s currentHeader = header
    	    } else {
    	    	w "<option VALUE="""_tablename_""">"_tablename
    	    }

		}
	
		w "</select>"
		// Req #2 - Phegel - Add the View Audit List button
		w "|"
		w "<a class=""DetailCommand"" target=""_top"" href=""IIBAENSEMBLE.Zen.TableAuditList.cls""><nobr>&nbsp;View Audit List&nbsp;</nobr></A>"
		w "</div></td></tr></table>"
				
		w "<H3 id='tablename' title=''>"_Table_"</H3>"
		if (currentHeader.LookupTableDescription'="")
		{
			w "&nbsp&nbsp&nbsp-&nbsp<i>"_ currentHeader.LookupTableDescription _ " </i><br/>"	
		}
			
		set DefValueHTML = ""
		set TableHTML = ""
		
		
		set DefValueHTML = DefValueHTML_"<table id=""TableName"" class=""FilterTable"" border=""0"" cellpadding=""3"" cellspacing=""0"">"
		set DefValueHTML = DefValueHTML_"<tr><td align=""left"" nowrap>Default Value:&nbsp;&nbsp;"
		;set DefValueHTML = DefValueHTML_"<Input Type=""Text"" Name=""defaultvalue"" id=""defaultvalue"" OnChange=""DefValueSave('"_Table_"')"" Value="""
		set DefValueHTML = DefValueHTML_"<Input Type=""Text"" id='defaultvalue' Name=""defaultvalue"" readOnly='true' Value="""
		
		// Req#1 - Phegel - Set to currentHeader's DefaultValue
		set DefValueHTML = DefValueHTML_$ZCVT(currentHeader.DefaultValue,"O","HTML")
		
		set DefValueHTML = DefValueHTML_""">"
		set DefValueHTML = DefValueHTML_"</td>"
		
		// Reg#1 - Phegel - Check write permisions to render edit and delete buttons.
		// Bug#3 - Fix Default button visible to copath test user (change to current resource rather than page resource LookUpTableAdmin)
		if ( ##class(%SYSTEM.Security).Check(currentHeader.Resource,"WRITE"))
		{
			//set DefValueHTML = DefValueHTML_"<td colspan='2'/>"	
			set DefValueHTML = DefValueHTML_"<td nowrap align='left' style='text-align:left;cursor:pointer;cursor:hand;' ><A id='EditDefVal' value='Edit' onclick=""editDefault("_..QuoteJS(Table)_");""><img src='customimages/edit.gif' alt='Edit' /></a>  </td>"
			set DefValueHTML = DefValueHTML_"<td nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" ><A id='DelDefVal' value='Delete' onclick=""deleteDefault("_..QuoteJS(Table)_");""><img src='customimages/trash_bold.gif' alt='Delete' /></a>  </td>"
		}
		else
		{
			set DefValueHTML = DefValueHTML_"<td colspan='2'/>"	
		}
		set DefValueHTML = DefValueHTML_"</tr></table>"		

		w DefValueHTML		
		
		set TableHTML = TableHTML_"<span id=""tablediv"">"

		set TableHTML = TableHTML_..BuildHeaderHTML(currentHeader)
		// Reg#1 - Phegel - Check write permisions to render edit and delete buttons.
		if ( ##class(%SYSTEM.Security).Check(currentHeader.Resource,"WRITE"))
		{
			set TableHTML = TableHTML_"<tr class=""OddRow"" >"
			set TableHTML = TableHTML_"<TD nowrap><Input Type=""Text"" Name=""InsLeftID1"" id=""InsLeftID1"" Value=""""></TD>"
			set TableHTML = TableHTML_"<TD nowrap><Input Type=""Text"" Name=""InsLeftID2"" id=""InsLeftID2"" Value=""""></TD>"
			set TableHTML = TableHTML_"<TD nowrap><Input Type=""Text"" Name=""InsLeftID3"" id=""InsLeftID3"" Value=""""></TD>"
			set TableHTML = TableHTML_"<TD nowrap><Input Type=""Text"" Name=""RightID"" id=""RightID"" Value=""""></TD>"
			set TableHTML = TableHTML_"<td nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" ><a id='SaveNewRow' value='save' onclick=""InsertSave('"_Table_"');""/><img src='customimages/save.gif' alt='Save' /></a></td>"
			set TableHTML = TableHTML_"<td>&nbsp;</td>"
			set TableHTML = TableHTML_"</TR>"
		}
		w TableHTML
		
		set TableHTML = ""
		
		//set rset.CurrRow = 0
		
		set i=2
		
		Set rset = ##class(%ResultSet).%New()
		Do rset.Prepare("SELECT ID, LeftID1, LeftID2, LeftID3, RightID FROM IIBAENSEMBLE.LookupTable WHERE LookupID = '"_Table_"' ORDER BY LeftID1, LeftID2, LeftID3")
		Do rset.Execute()
		
		While (rset.Next()) {
			
			
			if '(($ZCVT(rset.Data("LeftID1"),"U")="DEFAULTVALUE")&&($ZCVT(rset.Data("LeftID2"),"U")="DEFAULTVALUE")&&($ZCVT(rset.Data("LeftID3"),"U")="DEFAULTVALUE")) {
			
		  		if i#2=0 {
				set TableHTML = TableHTML_"<tr class=""EvenRow"" id='Tablevalues.Id"_rset.Data("ID")_"' >"
				} Else {
				set TableHTML = TableHTML_"<tr class=""OddRow"" id='Tablevalues.Id"_rset.Data("ID")_"' >"
				}		

				s LeftId1=##class(IIBAENSEMBLE.Functions).StringReplace(rset.Data("LeftID1")," ","&nbsp;") s:LeftId1="" LeftId1="&nbsp;"
				s LeftId2=##class(IIBAENSEMBLE.Functions).StringReplace(rset.Data("LeftID2")," ","&nbsp;") s:LeftId2="" LeftId2="&nbsp;"
				s LeftId3=##class(IIBAENSEMBLE.Functions).StringReplace(rset.Data("LeftID3")," ","&nbsp;") s:LeftId3="" LeftId3="&nbsp;"
				s RightId=##class(IIBAENSEMBLE.Functions).StringReplace(rset.Data("RightID")," ","&nbsp;") s:RightId="" RightId="&nbsp;"
				
				
				set TableHTML = TableHTML_"<TD nowrap>"_LeftId1_"</TD>"
	        	set TableHTML = TableHTML_"<TD nowrap>"_LeftId2_"</TD>"
	        	set TableHTML = TableHTML_"<TD nowrap>"_LeftId3_"</TD>"
	        	set TableHTML = TableHTML_"<TD nowrap>"_RightId_"</TD>"
				
				// Reg#1 - Phegel - Check write permisions to render edit and delete buttons.
				if ( ##class(%SYSTEM.Security).Check(currentHeader.Resource,"WRITE"))
				{
						set TableHTML = TableHTML_"<td nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" ><A id=edit"_rset.Data("ID")_" value='Edit' onclick=""rowEdit("_..QuoteJS(Table)_","_..QuoteJS(rset.Data("ID"))_");""><img src='customimages/edit.gif' alt='Edit' /></a>  </td>"
						set TableHTML = TableHTML_"<td nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" ><a id='del"_rset.Data("ID")_"' value='Delete' onclick=""RemoveRow("_..QuoteJS(Table)_","_..QuoteJS(rset.Data("ID"))_");"" ><img src='customimages/trash_bold.gif' alt='Delete' /></a></td>"
				}
				else
				{
					set TableHTML = TableHTML_"<td colspan='2'/>"	
				}    	        	
				set TableHTML = TableHTML_"</TR>"
	        	set i=i+1
	        
	        //set %session.Data("tablelength") = $LENGTH(TableHTML)
			}
	        
	        if $LENGTH(TableHTML) > 30000 {
		        w TableHTML	
		        set TableHTML = ""
	        }
			
		}	
		
		w TableHTML
          
		w "</TABLE>"
		w "</span>"
		
		
	} ElseIf Mode = "Edit" {
		
		
		set Table = %request.Get("Table")
		Set EditItemID = %request.Get("transID")
		
		Set currentHeader = ##class(IIBAENSEMBLE.LookupTableHeader).GetObjectByName(Table)
				
		w "<H3>"_Table_"</H3>" 
		
		set TableHTML = ""
		
		set TableHTML = TableHTML_"<span id=""tablediv"">"
		
		set TableHTML = TableHTML_..BuildHeaderHTML(currentHeader)
		
		Set rset = ##class(%ResultSet).%New()
		Do rset.Prepare("SELECT ID, LeftID1, LeftID2, LeftID3, RightID FROM IIBAENSEMBLE.LookupTable WHERE ID = "_EditItemID_"")
		Do rset.Execute()
		Do rset.Next()
			
		set TableHTML = TableHTML_"<tr class=""OddRow"" >"
		set TableHTML = TableHTML_"<TD nowrap><Input Type=""Text"" Name=""InsLeftID1"" id=""InsLeftID1"" Value='"_$ZCVT(rset.Data("LeftID1"),"O","HTML")_"'></TD>"
		set TableHTML = TableHTML_"<TD nowrap><Input Type=""Text"" Name=""InsLeftID2"" id=""InsLeftID2"" Value='"_$ZCVT(rset.Data("LeftID2"),"O","HTML")_"'></TD>"
		set TableHTML = TableHTML_"<TD nowrap><Input Type=""Text"" Name=""InsLeftID3"" id=""InsLeftID3"" Value='"_$ZCVT(rset.Data("LeftID3"),"O","HTML")_"'></TD>"
		set TableHTML = TableHTML_"<TD nowrap><Input Type=""Text"" Name=""RightID"" id=""RightID"" Value='"_$ZCVT(rset.Data("RightID"),"O","HTML")_"'></TD>"
		// Reg#1 - Phegel - Check write permisions to render edit and delete buttons.
		if ( ##class(%SYSTEM.Security).Check(currentHeader.Resource,"WRITE"))
		{
			set TableHTML = TableHTML_"<td nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" ><a href=""IIBASupport.csp?PageName=LookUp&Mode=Display&LookupTable="_Table_""" target=""_top"" onclick=""EditSave('"_EditItemID_"','"_Table_"');"">save</a></td>"
			set TableHTML = TableHTML_"<td nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" ><a href=""IIBASupport.csp?PageName=LookUp&Mode=Display&LookupTable="_Table_""" target=""_top"" >cancel</a></td>"
		}
		else
		{
			set TableHTML = TableHTML_"<td colspan='2'/>"	
		}    	        	

		set TableHTML = TableHTML_"</TR>"
		
		set TableHTML = TableHTML_"</TABLE>"
		set TableHTML = TableHTML_"</span>"
		
		w TableHTML
		
	} ElseIf Mode = "Import" {

		s importstream = ##class(%GlobalCharacterStream).%New()
		d importstream.CopyFrom(%request.GetMimeData("importfile"))
		s tSC = ..InsertData(importstream)
		if tSC = "OK" {
			d ..ImportData(%request.Get("overwrite"),%request.Get("overwritetrans"))
			w "<META HTTP-EQUIV=""Refresh"" CONTENT=""0; URL=IIBASupport.csp?PageName=LookUp"">"
		} else {
			w tSC
		}
		
	} ElseIf Mode = "Remove" {
		
		set Table = %request.Get("Table")
		Set RemoveItemID = %request.Get("transID")
		
		Set rset = ##class(%ResultSet).%New()
		Do rset.Prepare("DELETE FROM IIBAENSEMBLE.LookupTable WHERE ID = "_RemoveItemID_"")
		Do rset.Execute()
		
		w "<META HTTP-EQUIV=""Refresh"" CONTENT=""0; URL=IIBASupport.csp?PageName=LookUp&Mode=Display&LookupTable="_Table_""">"
		w "This page should auto redirect to the table you have edited. If it doesn't, please click here: "_"<a href=""IIBASupport.csp?PageName=LookUp"">Home</a>"

		
	} ElseIf Mode = "InsertSave" {
		
		set Table = %request.Get("Table")
		&js<InsertSave('#(Table)#');>
			
	// Req #1 - Phegel changed from Insert Table to Set Table (so it can insert or update a table).  Also, changed to capture properties for LookupTableHeader
	//  		Note that the Table name cannot be updated.
	} ElseIf (Mode="SetTable") {
		
		// Req #1 - Phegel - Change to insert Lookup Table Header values
		
		w "<table><tr><td class=""LayoutContentCol"" width=""20%"" ><div class=""DetailCommand"">"		
		w "<a class=""DetailCommand"" target=""_top"" href=""#"" onclick=""importFormShow(); return false;""><nobr>&nbsp;Import Table&nbsp;</nobr></A>"
		w "|"
		w "<a class=""DetailCommand"" id=""linkSetTable"" target=""_top"" href=""IIBASupport.csp?PageName=LookUp&Mode=SetTable""><nobr>&nbsp;Create New Table&nbsp;</nobr></A>"
		w "</div></td></tr></table>"
		
		s Table = %request.Get("Table")	
		
		if (Table '="")
		{
			set currentHeader = ##class(IIBAENSEMBLE.LookupTableHeader).GetObjectByName(Table, .tSC)
			set LookupTableDescription = currentHeader.LookupTableDescription 
			set ColumnNameLeftID1 = currentHeader.ColumnNameLeftID1 
			set ColumnNameLeftID2 = currentHeader.ColumnNameLeftID2
			set ColumnNameLeftID3 = currentHeader.ColumnNameLeftID3
			set ColumnNameRightID = currentHeader.ColumnNameRightID 
			set Resource = currentHeader.Resource
		}
		set:'$Data(LookupTableDescription) LookupTableDescription = " "
		set:'$Data(ColumnNameLeftID1) ColumnNameLeftID1 = "Left ID 1"
		set:'$Data(ColumnNameLeftID2) ColumnNameLeftID2 = "Left ID 2"
		set:'$Data(ColumnNameLeftID3) ColumnNameLeftID3 = "Left ID 3"
		set:'$Data(ColumnNameRightID) ColumnNameRightID = "Right ID"
		set:'$Data(Resource) Resource = "LookUpTableAdmin"
		
					
		w "<br/><h3>"
		w:Table'="" "<i>Edit</i> "_ Table _" - "
		w "Lookup Table Header</h3><br/><Form name=""LookupTableAdminForm"" id=""LookupTableAdminForm"" METHOD=POST ACTION=""IIBASupport.csp?PageName=LookUp"">"
		w "<TABLE class=""DetailTable"">"
		if (Table '= "")
			{w "<tr><td>Edit Table Name:&nbsp;</td><td>"
			w Table_" <INPUT TYPE='HIDDEN' NAME=""LookupTableName"" id=""LookupTableName"" SIZE=""30"" VALUE="""_Table_"""></td></tr>"}
		else
			{w "<tr><td>Create New Table Name:&nbsp;</td><td>"
			w "<INPUT NAME=""LookupTableName"" id=""LookupTableName"" SIZE=""30"" VALUE=""""></td></tr>"}
		w "<tr><td>Table Description:&nbsp;</td><td><INPUT NAME=""LookupTableDescription"" id=""LookupTableDescription"" SIZE=""100"" VALUE='"_LookupTableDescription_"'></td></tr>"
		w "<tr><td>Column Name Left ID1:&nbsp;</td><td><INPUT NAME=""ColumnNameLeftID1"" id=""ColumnNameLeftID1"" SIZE=""30"" VALUE='"_ColumnNameLeftID1_"'></td></tr>"
		w "<tr><td>Column Name Left ID2:&nbsp;</td><td><INPUT NAME=""ColumnNameLeftID2"" id=""ColumnNameLeftID2"" SIZE=""30"" VALUE='"_ColumnNameLeftID2_"'></td></tr>"
		w "<tr><td>Colum nName Left ID3:&nbsp;</td><td><INPUT NAME=""ColumnNameLeftID3"" id=""ColumnNameLeftID3"" SIZE=""30"" VALUE='"_ColumnNameLeftID3_"'></td></tr>"
		w "<tr><td>ColumnName Right ID:&nbsp;</td><td><INPUT NAME=""ColumnNameRightID"" id=""ColumnNameRightID"" SIZE=""30"" VALUE='"_ColumnNameRightID_"'></td></tr>"
		if ##class(%SYSTEM.Security).Check("%All","READ,WRITE,USE")
		{
			w "<tr><td>Resource:&nbsp;</td><td><INPUT NAME=""Resource"" id=""Resource"" SIZE=""30"" VALUE='"_Resource_"'></td></tr>"
		}
		w "</TABLE>"
		w "<Input TYPE=""HIDDEN"" NAME=""Mode"" id=""Mode"" VALUE='SetTableAction'>"
		w "<br/><Input Type=""Submit"" Name=""btnInsert"" id=""btnInsert"" Value=""Save"">"
		w "</Form>"
		
		
		&html<
		<script language=javascript>
	
			document.getElementById('linkSetTable').style.color = 'red';
	
		</script>	
		>
		
	} ElseIf (Mode = "SetTableAction") {
		// Req #1 - Phegel - Change to insert Lookup Table Header first.
		set Table = %request.Get("LookupTableName")

		// Req #1 - Phegel - Change to use GetIdByName to see if Lookup Table Header exist
		s tableId = ##class(IIBAENSEMBLE.LookupTableHeader).GetIdByName(Table)
		s tSC = 1
		if (($LENGTH(Table)<=3))
			{
				&js<alert('Lookup Table Name cannot be less than 3 characters long!');>
				set tSC = 0
				QUIT
			}
		QUIT:tSC=0
				
		// Req#1 - Phegel - Change to use Object methods to create.
		If tableId = "" 
		{
			//Create new table
			s newHeader = ##class(IIBAENSEMBLE.LookupTableHeader).%New()
			s newHeader.LookupTableName = Table
		}
		else
		{
			//Load existing table to save edits
			s newHeader = ##class(IIBAENSEMBLE.LookupTableHeader).GetObjectByName(Table)
		}
		if 
		set newHeader.LookupTableDescription = %request.Get("LookupTableDescription")
		set newHeader.ColumnNameLeftID1 = %request.Get("ColumnNameLeftID1")
		set newHeader.ColumnNameLeftID2 = %request.Get("ColumnNameLeftID2")
		set newHeader.ColumnNameLeftID3 = %request.Get("ColumnNameLeftID3")
		set newHeader.ColumnNameRightID = %request.Get("ColumnNameRightID")
		set newHeader.Resource = %request.Get("Resource")
		set tSC = newHeader.%Save()
		
		Q:$$$ISERR(tSC) tSC
		
		// Req#1 - Phegel - Add one child object if this is a new table.
		If tableId = "" 
		{
			set newLookup = ##class(IIBAENSEMBLE.LookupTable).%New()
			set newLookup.LookupID = Table
			set tSC = newLookup.%Save()
			Q:$$$ISERR(tSC) tSC
		}
		w "<META HTTP-EQUIV=""Refresh"" CONTENT=""0; URL=IIBASupport.csp?PageName=LookUp&Mode=Display&LookupTable="_Table_""">"
		w "This page should auto redirect to the table you have edited.  If it doesn't, please click here: "_"<a href=""IIBASupport.csp?PageName=LookUp&Mode=Display&LookupTable="_Table_""">Back to Table</a>"
	
	
	}
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Reg #1 - Phegel - Changed to take whole header as parameter to build column names as well

]]></Content>
</UDLText>

<Method name="BuildHeaderHTML">
<ClassMethod>1</ClassMethod>
<FormalSpec>pHeader:IIBAENSEMBLE.LookupTableHeader</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 set TableHTML = ""
 set Table = pHeader.LookupTableName
 
 set TableHTML = TableHTML_"<table id='TableValues' class=""DetailTable"" border=""1"" cellpadding=""2"" cellspacing=""0"" >"
 set TableHTML = TableHTML_"<tr><td><input type=""text"" name=""filterLeftID1"" id=""filterLeftID1"" style=""background-color: Khaki"" value="""" onchange=""columnFilter('"_Table_"','filterLeftID1');""></td>"
 set TableHTML = TableHTML_"<td><input type=""text"" name=""filterLeftID2"" id=""filterLeftID2"" style=""background-color: Khaki"" value="""" onchange=""columnFilter('"_Table_"','filterLeftID2');""></td>"
 set TableHTML = TableHTML_"<td><input type=""text"" name=""filterLeftID3"" id=""filterLeftID3"" style=""background-color: Khaki"" value="""" onchange=""columnFilter('"_Table_"','filterLeftID3');""></td>"
 set TableHTML = TableHTML_"<td><input type=""text"" name=""filterRightID"" id=""filterRightID"" style=""background-color: Khaki"" value="""" onchange=""columnFilter('"_Table_"','filterRightID');""></td>"
 set TableHTML = TableHTML_"<td onclick=""columnFilter('"_Table_"','')"" ><img src='customimages/filter.gif' alt='Filter' /></a>"
 set TableHTML = TableHTML_"</td><td>&nbsp;</td></tr>"
 set TableHTML = TableHTML_"<tr>"
 set TableHTML = TableHTML_"<th nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" onclick=""SortTable('"_Table_"','LeftID1','RightID');""><a title=""Click to sort by this column."">"_pHeader.ColumnNameLeftID1_"</a></th>"
 set TableHTML = TableHTML_"<th nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" onclick=""SortTable('"_Table_"','LeftID2','RightID');""><a title=""Click to sort by this column."">"_pHeader.ColumnNameLeftID2_"</a></th>"
 set TableHTML = TableHTML_"<th nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" onclick=""SortTable('"_Table_"','LeftID3','RightID');""><a title=""Click to sort by this column."">"_pHeader.ColumnNameLeftID3_"</a></th>"
 set TableHTML = TableHTML_"<th nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" onclick=""SortTable('"_Table_"','RightID','LeftID1');""><a title=""Click to sort by this column."">"_pHeader.ColumnNameRightID_"</a></th>"
 set TableHTML = TableHTML_"<th></th>"
 set TableHTML = TableHTML_"<th></th>"
 /**/
 set TableHTML = TableHTML_"</tr>"
 
 Quit TableHTML
]]></Implementation>
</Method>

<Method name="DefValueAction">
<Description>
This method is used to set the default value from within the web page.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Table:%String,DefValue:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// Set the Default value based on Table Name
	#DIM obj as IIBAENSEMBLE.LookupTableHeader
	set obj = ##class(IIBAENSEMBLE.LookupTableHeader).GetObjectByName(Table)
	set oldDefValue = obj.DefaultValue
	set quitvalue= ##class(IIBAENSEMBLE.LookupTableHeader).SetDefaultValue(Table,DefValue)
	set eventData = ..GetHeaderEventData("DefValueAction",obj)
	do ..AuditHeaderChanges("DefaultValue Old:"_oldDefValue_" New:"_DefValue, eventData)
	
	quit quitvalue
]]></Implementation>
</Method>

<Method name="EditSaveAction">
<Description>
Reg#2 - Phegel - Rework EditSaveAction to use object making it more efficient to do auditing.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Table:%String,ItemID:%String,LeftID1:%String,LeftID2:%String,LeftID3:%String,RightID:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 set exists = 0

 // Replace &nbsp; with normal space.
 set LeftID1 = ##class(IIBAENSEMBLE.Functions).StringReplace(LeftID1,$C(160)," ")
 set LeftID2 = ##class(IIBAENSEMBLE.Functions).StringReplace(LeftID2,$C(160)," ")
 set LeftID3 = ##class(IIBAENSEMBLE.Functions).StringReplace(LeftID3,$C(160)," ")
 set RightID = ##class(IIBAENSEMBLE.Functions).StringReplace(RightID,$C(160)," ")
 
 // Use new method to check for existing.	
 set tSC = ##class(IIBAENSEMBLE.LookupTable).CheckExisting(Table, ItemID, LeftID1, LeftID2, LeftID3, RightID, .exists, .foundId)
 		
 If exists = 1 {
 	set quitvalue = "exists"
 	set obj = ##class(IIBAENSEMBLE.LookupTable).%OpenId(foundId)
 	set event = ..GetRowEventData("EditSaveAction", obj, 1)
 } Else {
	
 	set obj = ##class(IIBAENSEMBLE.LookupTable).%OpenId(ItemID)
	set event = ..GetRowEventData("EditSaveAction", obj, 1)
 	Set obj.LeftID1 = LeftID1
 	set obj.LeftID2 = LeftID2
 	set obj.LeftID3 = LeftID3
 	set obj.RightID = RightID
 	
 	s tSC = obj.%Save()
 	
 	set:'$$$ISERR(tSC) event = event_..GetRowEventData("EditSaveAction", obj)
 	
 	set:'$$$ISERR(tSC) quitvalue = "saved"
 	
 }
 set desc = "QuitValue: "_quitvalue_ " - "_ Table_":("_ItemID_"),"_LeftID1_","_LeftID2_","_LeftID3_"->"_RightID
 do ..AuditRowChanges(desc,event)
 
 Quit quitvalue
]]></Implementation>
</Method>

<Method name="ExportData">
<ClassMethod>1</ClassMethod>
<FormalSpec>TableName:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 	
 	s EnsSysDir = ##class(%File).ParentDirectoryName(##class(%File).ManagerDirectory())
	s filetimestamp = ##class(Ens.Util.Time).FormatDateTime("%Y%m%d%H%M%S")
	
	if '##class(%File).DirectoryExists(EnsSysDir_"IIBAExports") { 
		d ##class(%File).CreateDirectory(EnsSysDir_"IIBAExports") 
	}
	s filename = $TR(TableName_"_"_%session.SessionId_".csv"," ","_")
	s file = ##class(%File).%New(EnsSysDir_"IIBAExports\"_filename)
	d file.Open("WSN")
	d file.WriteLine("TableName,LeftID1,LeftID2,LeftID3,RightID")
	
 	set Tablerset=##class(%ResultSet).%New()
 	do Tablerset.Prepare("Select LookupID, LeftID1, LeftID2, LeftID3, RightID from IIBAENSEMBLE.LookupTable WHERE LookupID = '"_TableName_"'")
 	do Tablerset.Execute()
 	While Tablerset.Next() {
 		
 		set strFileText = ""
 		set strFileText = strFileText_$C(34)_##class(IIBAENSEMBLE.Functions).StringReplace(Tablerset.Data("LookupID"),$C(34),$C(34,34))_$C(34)_","
 		set strFileText = strFileText_$C(34)_##class(IIBAENSEMBLE.Functions).StringReplace(Tablerset.Data("LeftID1"),$C(34),$C(34,34))_$C(34)_","
 		set strFileText = strFileText_$C(34)_##class(IIBAENSEMBLE.Functions).StringReplace(Tablerset.Data("LeftID2"),$C(34),$C(34,34))_$C(34)_","
 		set strFileText = strFileText_$C(34)_##class(IIBAENSEMBLE.Functions).StringReplace(Tablerset.Data("LeftID3"),$C(34),$C(34,34))_$C(34)_","
 		set strFileText = strFileText_$C(34)_##class(IIBAENSEMBLE.Functions).StringReplace(Tablerset.Data("RightID"),$C(34),$C(34,34))_$C(34)
 		
 		//&js<newFileObject.WriteLine(#(..QuoteJS(strFileText))#);>
 		d file.WriteLine(strFileText) 
 		
 	}
 	do ..AuditHeaderChanges("Exported: "_TableName,"{LookupTableName:"_TableName_",RowCount:"_Tablerset.%ROWCOUNT_"}")
 	do Tablerset.Close()
 	do file.Close()
 	kill file
 		
 	Quit filename
]]></Implementation>
</Method>

<Method name="FilterByColumn">
<ClassMethod>1</ClassMethod>
<FormalSpec>Table:%String,LeftId1:%String,LeftId2:%String,LeftId3:%String,RightId:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 	
 
 		set TableHTML = ""
 		Set currentHeader = ##class(IIBAENSEMBLE.LookupTableHeader).GetObjectByName(Table)
 		set TableHTML = TableHTML_..BuildHeaderHTML(currentHeader)
 		if ( ##class(%SYSTEM.Security).Check(currentHeader.Resource,"WRITE")){
	 		set TableHTML = TableHTML_"<tr class=""OddRow"" >"
	 		set TableHTML = TableHTML_"<TD nowrap><Input Type=""Text"" Name=""InsLeftID1"" id=""InsLeftID1"" Value=""""></TD>"
	 		set TableHTML = TableHTML_"<TD nowrap><Input Type=""Text"" Name=""InsLeftID2"" id=""InsLeftID2"" Value=""""></TD>"
	 		set TableHTML = TableHTML_"<TD nowrap><Input Type=""Text"" Name=""InsLeftID3"" id=""InsLeftID3"" Value=""""></TD>"
	 		set TableHTML = TableHTML_"<TD nowrap><Input Type=""Text"" Name=""RightID"" id=""RightID"" Value=""""></TD>"
	 		//set TableHTML = TableHTML_"<td nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" ><a href=""IIBASupport.csp?PageName=LookUp&Mode=Display&LookupTable="_Table_""" target=""_top"" onclick=""InsertSave('"_Table_"');"">save</a></td>"
	 		set TableHTML = TableHTML_"<td nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" ><a id='SaveNewRow' value='save' onclick=""InsertSave('"_Table_"');""/><img src='customimages/save.gif' alt='Save' /></a></td>"
	 		set TableHTML = TableHTML_"<td>&nbsp;</td>"
	 		set TableHTML = TableHTML_"</TR>"
 		}
 		
 		set sqlQuery="SELECT ID, LeftID1, LeftID2, LeftID3, RightID FROM IIBAENSEMBLE.LookupTable WHERE LookupID = '"_Table_"' "	
 		if (LeftId1 '= "" ){
 			set sqlQuery=sqlQuery_" AND UPPER(LeftID1) LIKE '%"_$ZCONVERT(LeftId1,"U")_"%'"
 		}
 		if (LeftId2 '= "" ){
 			set sqlQuery=sqlQuery_" AND UPPER(LeftID2) LIKE '%"_$ZCONVERT(LeftId2,"U")_"%'"
 		}
 		if (LeftId3 '= "" ){
 			set sqlQuery=sqlQuery_" AND UPPER(LeftID3) LIKE'%"_$ZCONVERT(LeftId3,"U")_"%'"
 		}
 		if (RightId '= "" ){
 			set sqlQuery=sqlQuery_" AND UPPER(RightID) LIKE'%"_$ZCONVERT(RightId,"U")_"%'"
 		}	
 		set sqlQuery=sqlQuery_" ORDER BY LeftID2, LeftID3, RightID"
 		
 		// Q sqlQuery
 		
 		Set rset = ##class(%ResultSet).%New()
 		Do rset.Prepare(sqlQuery)
 		Do rset.Execute()
 		set i=2
 		While (rset.Next()) {
 		  	if i#2=0 {
 			set TableHTML = TableHTML_"<tr class=""EvenRow"" id='Tablevalues.Id"_rset.Data("ID")_"' >"
 			} Else {
 			set TableHTML = TableHTML_"<tr class=""OddRow"" id='Tablevalues.Id"_rset.Data("ID")_"' >"
 			}
 
             if ((rset.Data("LeftID1")="DefaultValue")&&(rset.Data("LeftID2")="DefaultValue")&&(rset.Data("LeftID3")="DefaultValue")) {
 	            //set DefValueHTML = DefValueHTML_rset.Data("RightID")
             } Else {
	             
	             
	            s LeftId1=##class(IIBAENSEMBLE.Functions).StringReplace(rset.Data("LeftID1")," ","&nbsp;") s:LeftId1="" LeftId1="&nbsp;"
				s LeftId2=##class(IIBAENSEMBLE.Functions).StringReplace(rset.Data("LeftID2")," ","&nbsp;") s:LeftId2="" LeftId2="&nbsp;"
				s LeftId3=##class(IIBAENSEMBLE.Functions).StringReplace(rset.Data("LeftID3")," ","&nbsp;") s:LeftId3="" LeftId3="&nbsp;"
				s RightId=##class(IIBAENSEMBLE.Functions).StringReplace(rset.Data("RightID")," ","&nbsp;") s:RightId="" RightId="&nbsp;"
				 
 	            set TableHTML = TableHTML_"<TD nowrap>"_LeftId1_"</TD>"
 	            set TableHTML = TableHTML_"<TD nowrap>"_LeftId2_"</TD>"
 	            set TableHTML = TableHTML_"<TD nowrap>"_LeftId3_"</TD>"
 	            set TableHTML = TableHTML_"<TD nowrap>"_RightId_"</TD>"
 	            if ( ##class(%SYSTEM.Security).Check(currentHeader.Resource,"WRITE"))
 	            {
 					set TableHTML = TableHTML_"<td nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" ><a id=edit"_rset.Data("ID")_" value='Edit' onclick=""rowEdit("_..QuoteJS(Table)_","_..QuoteJS(rset.Data("ID"))_");""><img src='customimages/edit.gif' alt='Edit' /></a> </td>"
 					set TableHTML = TableHTML_"<td nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" ><a id='del"_rset.Data("ID")_"' value='Delete' onclick=""RemoveRow("_..QuoteJS(Table)_","_..QuoteJS(rset.Data("ID"))_" );"" ><img src='customimages/trash_bold.gif' alt='Delete' /></a></td>"
 	            }
 	            else
 	            {
	 	         	set TableHTML = TableHTML_"<td colspan='2' />" 
 	            }
 	            
 	            
 	            set TableHTML = TableHTML_"</TR>"
 	            set i=i+1
             }
             
             if $LENGTH(TableHTML) > 30000 {
 		        &js<alert('This table is to big to filter - sorry!');>
 		        set TableHTML = ""
 		        Quit
 	        }
         
 		}
 		
 		set TableHTML = TableHTML_"</TABLE>"
 		
 		
 		//&js<document.getElementById('tablediv').innerHTML = document.getElementById('tablediv').innerHTML;>
 		
 Quit TableHTML
]]></Implementation>
</Method>

<Method name="ImportData">
<ClassMethod>1</ClassMethod>
<FormalSpec>overwriteTables:%String,overwriteValues:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	quit ..ImportDataBySession(%session.SessionId, overwriteTables, overwriteValues)
]]></Implementation>
</Method>

<Method name="ImportDataBySession">
<ClassMethod>1</ClassMethod>
<FormalSpec>sessionID:%String,overwriteTables:%String,overwriteValues:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  
 //if overwriteTables is true
 	//select distinct table name and remove all rows from lookuptable with those table names
 	//insert all rows into lookuptable
 //&js<alert('#(overwriteValues)#')>
 
 do ..AuditRowChanges("OverwriteTables:"_overwriteTables_" Overwrite Values:"_overwriteValues,"ImportData()")
 if overwriteTables="true" {
 	Set rstblnames = ##class(%ResultSet).%New()
 	Do rstblnames.Prepare("SELECT DISTINCT LookupID from IIBAENSEMBLE.LookupTableImport where SessionID = '"_sessionID_"'")
 	Do rstblnames.Execute()
 	While rstblnames.Next() {
 		&html< table: #(rstblnames.Data("LookupID"))# session: #(sessionID)# <br/> >
 		Set rsdeltbl = ##class(%ResultSet).%New()
 		Do rsdeltbl.Prepare("DELETE FROM IIBAENSEMBLE.LookupTable WHERE LookupID = '"_rstblnames.Data("LookupID")_"'")
 		Do rsdeltbl.Execute()
 		Do rsdeltbl.Close()
 		//Req#2 - Phegel Audit deleting table
 		do ..AuditRowChanges("Deleted LookupTableName: "_rstblnames.Data("LookupID"),"ImportData()")
 	}
 	Do rstblnames.Close()
 	
 	Set rstblvalues = ##class(%ResultSet).%New()
 	Do rstblvalues.Prepare("SELECT * from IIBAENSEMBLE.LookupTableImport where SessionID = '"_sessionID_"'")
 	Do rstblvalues.Execute()
 	While rstblvalues.Next() {
	 	//Req#2 - Phegel Change to use new insert and Audit insert into table
 		set tSC = ##class(IIBAENSEMBLE.LookupTable).Insert(rstblvalues.Data("LookupID"),rstblvalues.Data("LeftID1"),rstblvalues.Data("LeftID2"),rstblvalues.Data("LeftID3"),rstblvalues.Data("RightID"),.Exists,.ItemId)
 		//&html< #(rstblvalues.Data("RightID"))# - #(tSC)# Item: #(ItemId)#<br/> >
 		&html<#(Exists)#>
 		set EventData = ..GetRowEventDataById("ImportData()",ItemId)
 		do ..AuditRowChanges("Insert row into: "_rstblvalues.Data("LookupID")_"("_ItemId_") Status:"_tSC_" Exists:"_Exists, EventData)
 	}
 	Do rstblvalues.Close()
 }
 	
 //if overwriteTables is false
 	//if overwriteValues is true
 		//perform an insert/update on all rows
 	//if overwriteValues is false
 		//perform an insert on all rows, skipping pre-existing rows
 
 if overwriteTables="false" {
 	if overwriteValues="on" {
 		Set rstblvalues = ##class(%ResultSet).%New()
 		Do rstblvalues.Prepare("SELECT * from IIBAENSEMBLE.LookupTableImport where SessionID = '"_sessionID_"'")
 		Do rstblvalues.Execute()
 		While rstblvalues.Next() {
 			//&js<alert('#(rstblvalues.Data("RightID"))#')>
 			//&html<#(rstblvalues.Data("LeftID1"))# -&gt #(rstblvalues.Data("RightID"))# = >
 			//do ##class(IIBAENSEMBLE.Functions).TableUpdateOrInsertExpr(rstblvalues.Data("LeftID1"),rstblvalues.Data("LeftID2"),rstblvalues.Data("LeftID3"),rstblvalues.Data("RightID"),rstblvalues.Data("LookupID"))
 			//Req#2 - Phegel Change to use new SetRow (Update/Insert) and Audit SetRow on table
 			set tSC = ##class(IIBAENSEMBLE.LookupTable).SetRow(rstblvalues.Data("LookupID"),rstblvalues.Data("LeftID1"),rstblvalues.Data("LeftID2"),rstblvalues.Data("LeftID3"),rstblvalues.Data("RightID"), .Exists,.ItemId)
 			&html<#(Exists)#>
 			set EventData = ..GetRowEventDataById("ImportData()",ItemId)
 			do ..AuditRowChanges("Update/Insert row into: "_rstblvalues.Data("LookupID")_"("_ItemId_") Status:"_tSC_" Exists:"_Exists, EventData)
 		}
 		Do rstblvalues.Close()	
 	} elseif overwriteValues="" {
 		Set rstblvalues = ##class(%ResultSet).%New()
 		Do rstblvalues.Prepare("SELECT * from IIBAENSEMBLE.LookupTableImport where SessionID = '"_sessionID_"'")
 		Do rstblvalues.Execute()
 		While rstblvalues.Next() {
 			//&js< alert('#(rstblvalues.Data("RightID"))#'); >
 			set tSC = ##class(IIBAENSEMBLE.LookupTable).Insert(rstblvalues.Data("LookupID"),rstblvalues.Data("LeftID1"),rstblvalues.Data("LeftID2"),rstblvalues.Data("LeftID3"),rstblvalues.Data("RightID"), .Exists,.ItemId)
 			// Req#2 - Phegel - Audit Insert Event
 			&html<#(Exists)#>
 			set EventData = ..GetRowEventDataById("ImportData()",ItemId)
 			do ..AuditRowChanges("Insert row into: "_rstblvalues.Data("LookupID")_"("_ItemId_") Status:"_tSC_" Exists:"_Exists, EventData)
 		}
 		Do rstblvalues.Close()
 	}
 }
 // Req#2 - Phegel
 #DIM HeaderIDs as %ListOfDataTypes
 
 // Req#1  Phegel - Added function in LookupTableHeader to add the Header Values based on import.
 do ##class(IIBAENSEMBLE.LookupTableHeader).CreateLookupTableHeaderFromImport(sessionID, .HeaderIDs)
 
 // Req#2 - Phegel - Audit adding the new headers.
 for counter=1:1:HeaderIDs.Count()
 {
	set headerID = HeaderIDs.GetAt(counter)
	set audit = ..GetHeaderEventDataById("ImportData()",headerID)
	set desc = "CreateLookupTableHeaderFromImport() ID created: "_headerID
	do ..AuditHeaderChanges(desc,audit)
 }		
 
 Set rsdeltbl = ##class(%ResultSet).%New()
 Do rsdeltbl.Prepare("DELETE FROM IIBAENSEMBLE.LookupTableImport WHERE SessionID = '"_sessionID_"'")
 Do rsdeltbl.Execute()
 Do rsdeltbl.Close()
 	
 Quit "OK"
]]></Implementation>
</Method>

<Method name="InsertData">
<ClassMethod>1</ClassMethod>
<FormalSpec>importstream:%GlobalCharacterStream</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 if '..ValidateHeader(importstream.ReadLine()) {
 	Quit "File Header failed validation.  Please correct the format and try again."	
 }
 
 while 'importstream.AtEnd { 

	 set lCSV = ##class(IIBAENSEMBLE.Functions).ParseCSV(importstream.ReadLine())
 
	 set Table = $LI(lCSV,1)
	 set LeftID1 = $LI(lCSV,2)
	 set LeftID2 = $LI(lCSV,3)
	 set LeftID3 = $LI(lCSV,4)
	 set RightID = $LI(lCSV,5)
 
	 Set rset = ##class(%ResultSet).%New()
 			
	 If (LeftID2 '= "") & (LeftID3 '= "") {
	 	Do rset.Prepare("INSERT INTO IIBAENSEMBLE.LookupTableImport (SessionID, LeftID1, LeftID2, LeftID3, RightID, LookupID) VALUES ('"_%session.SessionId_"', '"_LeftID1_"', '"_LeftID2_"', '"_LeftID3_"', '"_RightID_"', '"_Table_"')")
	 } ElseIf LeftID2 '= "" {
	 	Do rset.Prepare("INSERT INTO IIBAENSEMBLE.LookupTableImport (SessionID, LeftID1, LeftID2, RightID, LookupID) VALUES ('"_%session.SessionId_"', '"_LeftID1_"', '"_LeftID2_"', '"_RightID_"', '"_Table_"')")
	 } Else {
	 	Do rset.Prepare("INSERT INTO IIBAENSEMBLE.LookupTableImport (SessionID, LeftID1, RightID, LookupID) VALUES ('"_%session.SessionId_"', '"_LeftID1_"', '"_RightID_"', '"_Table_"')")
	 }
 		
	 Do rset.Execute()
	 d rset.Close()
	 
 }
 
 Quit "OK"
]]></Implementation>
</Method>

<Method name="InsertSaveAction">
<Description>
Req#2 - Phegel Re-Write method to capture audit data and simplify code.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Table:%String,LeftID1:%String,LeftID2:%String,LeftID3:%String,RightID:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 set exists = 0
 
 // Replace &nbsp; with normal space.
 set LeftID1 = ##class(IIBAENSEMBLE.Functions).StringReplace(LeftID1,$C(160)," ")
 set LeftID2 = ##class(IIBAENSEMBLE.Functions).StringReplace(LeftID2,$C(160)," ")
 set LeftID3 = ##class(IIBAENSEMBLE.Functions).StringReplace(LeftID3,$C(160)," ")
 set RightID = ##class(IIBAENSEMBLE.Functions).StringReplace(RightID,$C(160)," ")
 		
 set quitvalue = ##class(IIBAENSEMBLE.LookupTable).Insert(Table,LeftID1,LeftID2,LeftID3,RightID,.exists,.ItemID)
 
 /// Req#2 - PHegel - record Audit Event for InsertSaveAction

 set EventData = ..GetRowEventDataById("InsertSaveAction",ItemID)
  if (exists){
 	set quitvalue="exists"}
 else {
 	set quitvalue=ItemID}
 	
 set EventDesc = "Table: "_Table_" Inserted Item ID: "_ItemID_" Quit Value:"_quitvalue
 set tSC = ..AuditRowChanges(EventDesc,EventData)

 Quit quitvalue
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Req#4 - PHegel - delete lookup table method.

]]></Content>
</UDLText>

<Method name="DeleteTable">
<ClassMethod>1</ClassMethod>
<FormalSpec>Table:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#dim retVal as %String = ""
	set headerId = ##class(IIBAENSEMBLE.LookupTableHeader).GetIdByName(Table)
	set EventData = ..GetHeaderEventDataById("DeleteTable", headerId, 1)
	set tSC = ##class(IIBAENSEMBLE.LookupTableHeader).DeleteLookupTableHeaderByName(Table, 1)
	if ($$$ISERR(tSC)){
		set retVal = "Failed to delete '"_Table_"' lookup table."
	}else {
		set retVal = "Lookup table, '"_Table_"', deleted successfully."
	}
	set EventDesc = "Table: "_Table_" Quit Value:"_retVal
 	set tSC = ..AuditHeaderChanges(EventDesc, EventData)
	
	quit retVal
]]></Implementation>
</Method>

<Method name="SortTable">
<ClassMethod>1</ClassMethod>
<FormalSpec>Table:%String,sortby1:%String,sortby2:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 	
 
 		set TableHTML = ""
 		set currentHeader = ##class(IIBAENSEMBLE.LookupTableHeader).GetObjectByName(Table, .tSC)
 		if ($$$ISERR(tSC))
 		{
	 		set TableHTML = TableHTML_"Error: "_$$$GETERRORCODE(tSC)_" - "_tsc
 		}
 		else {
	 		set TableHTML = TableHTML_..BuildHeaderHTML(currentHeader)
 		
	 		set TableHTML = TableHTML_"<tr class=""OddRow"" >"
	 		set TableHTML = TableHTML_"<TD nowrap><Input Type=""Text"" Name=""InsLeftID1"" id=""InsLeftID1"" Value=""""></TD>"
	 		set TableHTML = TableHTML_"<TD nowrap><Input Type=""Text"" Name=""InsLeftID2"" id=""InsLeftID2"" Value=""""></TD>"
	 		set TableHTML = TableHTML_"<TD nowrap><Input Type=""Text"" Name=""InsLeftID3"" id=""InsLeftID3"" Value=""""></TD>"
	 		set TableHTML = TableHTML_"<TD nowrap><Input Type=""Text"" Name=""RightID"" id=""RightID"" Value=""""></TD>"
	 		set TableHTML = TableHTML_"<td nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" ><a id='SaveNewRow' value='save' onclick=""InsertSave('"_Table_"');""/><img src='customimages/save.gif' alt='Save' /></a></td>"
	 		set TableHTML = TableHTML_"<td>&nbsp;</td>"
	 		set TableHTML = TableHTML_"</TR>"
 		
 				
	 		Set rset = ##class(%ResultSet).%New()
	 		Do rset.Prepare("SELECT ID, LeftID1, LeftID2, LeftID3, RightID FROM IIBAENSEMBLE.LookupTable WHERE LookupID = '"_Table_"' ORDER BY "_sortby1_", "_sortby2_"")
	 		Do rset.Execute()
	 		set i=2
	 		While (rset.Next()) {
	 		  	if i#2=0 {
	 			set TableHTML = TableHTML_"<tr class=""EvenRow"" id='Tablevalues.Id"_rset.Data("ID")_"' >"
	 			} Else {
	 			set TableHTML = TableHTML_"<tr class=""OddRow"" id='Tablevalues.Id"_rset.Data("ID")_"' >"
	 			}
 
	             if ((rset.Data("LeftID1")="DefaultValue")&&(rset.Data("LeftID2")="DefaultValue")&&(rset.Data("LeftID3")="DefaultValue")) {
	 	            //set DefValueHTML = DefValueHTML_rset.Data("RightID")
	             } Else {
	             
		            s LeftId1=##class(IIBAENSEMBLE.Functions).StringReplace(rset.Data("LeftID1")," ","&nbsp;") s:LeftId1="" LeftId1="&nbsp;"
					s LeftId2=##class(IIBAENSEMBLE.Functions).StringReplace(rset.Data("LeftID2")," ","&nbsp;") s:LeftId2="" LeftId2="&nbsp;"
					s LeftId3=##class(IIBAENSEMBLE.Functions).StringReplace(rset.Data("LeftID3")," ","&nbsp;") s:LeftId3="" LeftId3="&nbsp;"
					s RightId=##class(IIBAENSEMBLE.Functions).StringReplace(rset.Data("RightID")," ","&nbsp;") s:RightId="" RightId="&nbsp;"
				 
	 	            set TableHTML = TableHTML_"<TD nowrap>"_LeftId1_"</TD>"
	 	            set TableHTML = TableHTML_"<TD nowrap>"_LeftId2_"</TD>"
	 	            set TableHTML = TableHTML_"<TD nowrap>"_LeftId3_"</TD>"
	 	            set TableHTML = TableHTML_"<TD nowrap>"_RightId_"</TD>"
 	            
	 				set TableHTML = TableHTML_"<td nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" ><a id=edit"_rset.Data("ID")_" value='Edit' onclick=""rowEdit("_..QuoteJS(Table)_","_..QuoteJS(rset.Data("ID"))_");""><img src='customimages/edit.gif' alt='Edit' /></a>  </td>"
	 				set TableHTML = TableHTML_"<td nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;"" ><a id='del"_rset.Data("ID")_"' value='Delete' onclick=""RemoveRow("_..QuoteJS(Table)_","_..QuoteJS(rset.Data("ID"))_" );"" ><img src='customimages/trash_bold.gif' alt='Delete' /></a></td>"
	 	            set TableHTML = TableHTML_"</TR>"
	 	            set i=i+1
	             }
             
	             if $LENGTH(TableHTML) > 30000 {
	 		        &js<alert('This table is to big to sort - sorry!');>
	 		        set TableHTML = ""
	 		        Quit
	 	        }
         
	 		}
 		
	 		set TableHTML = TableHTML_"</TABLE>"
 		
 		
	 		//&js<document.getElementById('tablediv').innerHTML = document.getElementById('tablediv').innerHTML;>
 		}
 Quit TableHTML
]]></Implementation>
</Method>

<Method name="ValidateHeader">
<ClassMethod>1</ClassMethod>
<FormalSpec>FileHeader:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 
 set lHeader = $LB("TableName","LeftID1","LeftID2","LeftID3","RightID")
 
 set lCSV = ##class(IIBAENSEMBLE.Functions).ParseCSV(FileHeader)
 
 Set ReturnVal=1
 
 for i=1:1:$LL(lHeader) { 
 	if ($LL(lCSV)'=$LL(lHeader))||($LI(lCSV,i)'=$LI(lHeader,i)){
 		Set ReturnVal=0
 	}
 }
 
 
 Quit ReturnVal
]]></Implementation>
</Method>

<Method name="DeleteTranslation">
<Description>
Delete Translation from LookupTableName = Table, ItemID to delete is RemoveItemID</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Table:%String,RemoveItemID:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set tSC = $$$OK		
	// Req#2 - Phegel - before action capture audit event data.
	set EventData = ..GetRowEventDataById("DeleteTranslation",RemoveItemID, 1)
	// Req#2 - Phegel - changed to use object item delete rather than SQL Delete.
	set tSC = ##class(IIBAENSEMBLE.LookupTable).%DeleteId(RemoveItemID)
	Q:$$$ISERR(tSC) tSC
	
	// Req#2 - Phegel - record audit event data.
	set EventDesc = "Table: "_Table_" Deleted Item ID: "_RemoveItemID
	set tSC = ..AuditRowChanges(EventDesc,EventData)
	Q tSC
]]></Implementation>
</Method>

<Method name="ReloadRowData">
<ClassMethod>1</ClassMethod>
<FormalSpec>Table:%String,ItemId:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	
	
	set rs=##class(%ResultSet).%New()
	Do rs.Prepare("Select LeftID1, LeftID2, LeftID3, RightID from IIBAENSEMBLE.LookupTable Where ID="_ItemId_"")
	Do rs.Execute()
	Do rs.Next()
	
	s LeftId1=rs.Data("LeftID1")
	s:LeftId1="" LeftId1="&nbsp;"
	&js<document.getElementById('Tablevalues.Id'+#(ItemId)#).cells[0].innerHTML="#(LeftId1)#";>
	
	s LeftId2=rs.Data("LeftID2")
	s:LeftId2="" LeftId2="&nbsp;"
	&js<document.getElementById('Tablevalues.Id'+#(ItemId)#).cells[1].innerHTML="#(LeftId2)#";>
	
	s LeftId3=rs.Data("LeftID3")
	s:LeftId3="" LeftId3="&nbsp;"
	&js<document.getElementById('Tablevalues.Id'+#(ItemId)#).cells[2].innerHTML="#(LeftId3)#";>
	
	s RidhtId=rs.Data("RightID")
	s:RidhtId="" RidhtId="&nbsp;"
	&js<document.getElementById('Tablevalues.Id'+#(ItemId)#).cells[3].innerHTML="#(RidhtId)#";>
]]></Implementation>
</Method>

<Method name="buildmodalImport">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set sHTML=""
	set sHTML=sHTML_"<form id=""import"" method=""post"" target="""" action=""IIBASupport.csp?PageName=LookUp&Mode=Import"" enctype=""multipart/form-data"">"
	set sHTML=sHTML_"<div style=""margin-bottom: 10px;text-align:center""><h3>Import Lookup Table Data</h3></div>"
	set sHTML=sHTML_"<div style=""margin-left: 20px;margin-right: 20px;"">"
	set sHTML=sHTML_"The import file must be a csv file and must have a header row with the following columns.<br><b>TableName,LeftID1,LeftID2,LeftID3,RightID</b><p>"
	set sHTML=sHTML_"Enter the path and name of the import file:<br>"
	set sHTML=sHTML_"<input type=""file"" size=""50"" id=""importfile"" name=""importfile"" value=""""><p>"
	set sHTML=sHTML_"<input type=""radio"" name=""overwrite"" id=""overwritetrue"" value=""true"" OnClick=""$('overwritetrans').disabled=true;"" checked=true>Overwrite existing tables."
	set sHTML=sHTML_"<br><input type=""radio"" name=""overwrite"" id=""overwritefalse"" value=""false"" OnClick=""$('overwritetrans').disabled=false;"">Update existing tables."
	set sHTML=sHTML_"<br><Input Type=""checkbox"" Name=""overwritetrans"" ID=""overwritetrans"" DISABLED checked=true >Overwrite existing translation values."
	set sHTML=sHTML_"</div>"
	set sHTML=sHTML_"<div style=""margin-left: 20px;margin-top: 10px""><input type=""submit"" value=""Import"" onclick=""hm('modalImport');return true;""><button onclick=""hm('modalImport');return false;"">Cancel</button></div>"
	set sHTML=sHTML_"</form>"
	Quit sHTML
]]></Implementation>
</Method>

<Method name="AuditRowChanges">
<Description>
Req#2 - PHegel - New Method to Audit Row Changes</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Description:%String="",EventData:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set Source = "IIBAENSEMBLE.csp.LookupTableAdmin"
	set Type = "LookupTable"
	set Name = "Edit"
	set EventData = ..CleanupJson(EventData)
	if $L(Description)>128
		set Description = $E(Description,1,128)
	set tSC = $SYSTEM.Security.Audit(Source,Type,Name,EventData,Description)
	Quit tSC
]]></Implementation>
</Method>

<Method name="GetRowEventDataById">
<Description>
Req#2 - PHegel - New Method to Get Event Data for Row Changes by ID.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMethod:%String,ItemID:%String,isBefore:%Boolean=0</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set obj = ##class(IIBAENSEMBLE.LookupTable).%OpenId(ItemID)
	if (obj'=""){
		set EventData = ..GetRowEventData(pMethod, obj, isBefore)	}
	else{
		Set EventData = "LookupTable Object ID: "_ItemID_" doesn't exist."}
	quit EventData
]]></Implementation>
</Method>

<Method name="GetRowEventData">
<Description>
Req#2 - PHegel - New Method to Get Event Data for Row Changes with Obj.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMethod:%String,ItemObj:IIBAENSEMBLE.LookupTable,isBefore:%Boolean=0</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// Bug #4 - Fix JSON formating
	set valueType = $CASE(isBefore,0:"After",1:"Before")
	set EventData = $CASE(isBefore,0:",",1:"{")  
	set EventData = EventData_""""_valueType_"-changes"": {""method"":"""_pMethod_""","
	set EventData = EventData_"""LookupID"":"""_ItemObj.LookupID_""",""ID"":"""_ItemObj.%Id()_""","
	set EventData = EventData_"""LeftID1"":"""_ItemObj.LeftID1_""","
	set EventData = EventData_"""LeftID2"":"""_ItemObj.LeftID2_""","
	set EventData = EventData_"""LeftID3"":"""_ItemObj.LeftID3_""","
	set EventData = EventData_"""RightID"":"""_ItemObj.RightID_"""}"
	
	quit EventData
]]></Implementation>
</Method>

<Method name="AuditHeaderChanges">
<Description>
Req#2 - PHegel - New Method to Audit header changes
06-02-2015 - NPellegrino - Audit table description is limited to 128 characters</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Description:%String="",EventData:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set Source = "IIBAENSEMBLE.csp.LookupTableAdmin"
	set Type = "LookupTableHeader"
	set Name = "Edit"
	set EventData = ..CleanupJson(EventData)
	// Limit description to 128 characters
	if $L(Description)>128
		set Description = $E(Description,1,128)
	set tSC = $SYSTEM.Security.Audit(Source,Type,Name,EventData,Description)
	Quit tSC
]]></Implementation>
</Method>

<Method name="CleanupJson">
<ClassMethod>1</ClassMethod>
<FormalSpec>EventData:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if ($P(EventData,",",1)=""){
		set edList = $LFS(EventData,",")
		set edLen = $LL(edList)
		set newEdList = $LI(edList,2,edLen)
		set EventData = "{"_$LTS(newEdList)	
	}
	set EventData = EventData_"}"	
	QUIT EventData
]]></Implementation>
</Method>

<Method name="GetHeaderEventDataById">
<Description>
Req#2 - PHegel - New Method to get Event data for header changes by Id</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMethod:%String,HeaderId:%String,isBefore:%Boolean=0</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set obj = ##class(IIBAENSEMBLE.LookupTableHeader).%OpenId(HeaderId)
	set EventData = ..GetHeaderEventData(pMethod, obj, isBefore)	
	quit EventData
]]></Implementation>
</Method>

<Method name="GetHeaderEventData">
<Description>
Req#2 - PHegel - New Method to get Event data for header changes</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pMethod:%String,HeaderObj:IIBAENSEMBLE.LookupTableHeader,isBefore:%Boolean=0</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	// Bug #4 - Fix JSON formating
	set valueType = $CASE(isBefore,0:"After",1:"Before")
	set EventData = $CASE(isBefore,0:",",1:"{")  
	set EventData = EventData_""""_valueType_"-changes"": {""method"":"""_pMethod_""","
	set EventData = EventData_"""LookupTableName"":"""_HeaderObj.LookupTableName_""",""ID"":"""_HeaderObj.%Id()_""","
	set EventData = EventData_"""LookupTableDescription"":"""_HeaderObj.LookupTableDescription_""","
	set EventData = EventData_"""ColumnNameLeftID1"":"""_HeaderObj.ColumnNameLeftID1_""","
	set EventData = EventData_"""ColumnNameLeftID2"":"""_HeaderObj.ColumnNameLeftID2_""","
	set EventData = EventData_"""ColumnNameLeftID3"":"""_HeaderObj.ColumnNameLeftID3_""","
	set EventData = EventData_"""ColumnNameRightID"":"""_HeaderObj.ColumnNameRightID_""","
	set EventData = EventData_"""DefaultValue"":"""_HeaderObj.DefaultValue_""","
	set EventData = EventData_"""Resource"":"""_HeaderObj.Resource_"""}"
	
	quit EventData
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.MessageEdit">
<Description>
Copyright 2008 by Inland Imaging Business Associates</Description>
<IncludeCode>EnsHL7</IncludeCode>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>62621,50748.651816</TimeChanged>
<TimeCreated>61157,49359.776878</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*
Message Edit CSP Page

bsg - 5/2/2008 -  Initial development, display the message, prompt by field.
      6/10/2008 - Edit Message Body
      7/17/2008 - Add send, highlight changes, IIBAMsgEdit role/resource
      7/20/1008 - Added trace button

Still to be done
- Add onClick action to original message that will compare old to new...


*/
]]></Content>
</UDLText>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	set:##class(%SYSTEM.Security).Check("IIBAMsgEdit","USE") Allowed=1
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	&html<
	
	<script type="text/javascript" src="modalbox/modalbox.js"></script>
	<link rel="stylesheet" href="modalbox/modalbox.css" type="text/css" />
	>
  &html<
   <script language=javascript>
	<!--
	
	window.onbeforeunload = confirmExit;
	
	function confirmExit() {
		
		if ( document.getElementById("messageSent").value != 'True') {
			return 'This new message was not sent. \nYou will lose your changes if you navigate away from this window.'
		} 
		 
	}
	
	function Initialize()
	{
		
		document.title='Message Edit';
	}
	
	function getNewValue(event,field,orignalValue,fieldTitle,msgObjId)
	{
		document.title='Message Edit';
		
		sm('modalNewValue',300,100,event.clientY + document.body.scrollTop,event.clientX + document.body.scrollLeft)
		
		var tags
		tags = document.getElementsByTagName('div');
		for (var i = 0; i < tags.length; i++) {
			if (tags[i].id == 'newValueFieldName') {
				tags[i].innerHTML = field;
			}
		}

		tags = document.getElementsByTagName('input');
		for (var i = 0; i < tags.length; i++) {
			if (tags[i].id == 'newValueField') {
				tags[i].value = orignalValue;
				
			}
		}
		tags = document.getElementsByTagName('input');
		for (var i = 0; i < tags.length; i++) {
			if (tags[i].id == 'newValueFieldId') {
				tags[i].value = field;
				
			}
		}
		tags = document.getElementsByTagName('input');
		for (var i = 0; i < tags.length; i++) {
			if (tags[i].id == 'newValueFieldTitle') {
				tags[i].value = fieldTitle;
				
			}
		}
		tags = document.getElementsByTagName('input');
		for (var i = 0; i < tags.length; i++) {
			if (tags[i].id == 'newValuemsgObjId') {
				tags[i].value = msgObjId;
				
			}
		}
	}
	function newValueSave()
	{
		var newValue = $('newValueField').value;
		var field = $('newValueFieldId').value;
		var fieldTitle = $('newValueFieldTitle').value;
		var msgObjId = $('newValuemsgObjId').value;
		
		if (newValue == "" ) {
			var displayValue="&nbsp;&middot;";
		} else {
			var displayValue=newValue.replace(/\s/g,"&nbsp;");
		}
		
		document.getElementById(field).innerHTML='<a title="'+fieldTitle+'" style="color:red; background-Color:yellow; cursor: pointer;"  onclick=\'getNewValue(event,"'+field+'","'+newValue+'","'+fieldTitle+'","'+msgObjId+'")\'>'+displayValue+'</a>';
		var rv=#server(..FieldUpdate(msgObjId,newValue,field))#;
		document.getElementById("messageSent").value='False';

	}

	
	function sendNewMsg(origMsgHeader,newMsgBodyId) {
		
		var selectObj=document.getElementById("newTarget");
		var newTarget=selectObj.options[selectObj.selectedIndex].text;
		//alert(origMsgHeader+", "+newMsgBodyId+", "+newTarget);
			
		var x=#server(..SendMessage(origMsgHeader,newMsgBodyId,newTarget))#;
		
		//alert('New Message Header Id: '+x);
		alert('Message id '+newMsgBodyId+' sent to '+newTarget);
		document.getElementById("messageSent").value='True';
		
	}


  -->
   </script>
  >
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[

	if ( '##class(%SYSTEM.Security).Check("IIBAMsgEdit","USE")) {
		W "<P><P><B>Access Denied !!!</B>"
		Q
	}
	//// build hidden modal form for acquring new field values
 	w ..buildmodalNewValue()
 	
 	
 	
 	S MsgHeaderId=%request.Get("MsgHeaderID")
	s SessionId=%request.Get("SessionId")
	s MessageSent="False"
	
	W "<BR><HR><FONT color=""Blue""><B>&nbsp;&nbsp;ORIGINAL MESSAGE</B></FONT><BR>"
	
	If (MsgHeaderId="") {
		W "<P><P><B>&nbsp;&nbsp;Message Edit - No Message found !!! </B><P>"
		Q
	} 
	
	S %session.Data("MessageEdits")="Message Edits (format: path{new value}): "
	
	S MsgHeaderObj=##class(Ens.MessageHeader).%OpenId(MsgHeaderId)
	S MsgBodyObj=##class(EnsLib.HL7.Message).%OpenId(MsgHeaderObj.MessageBodyId)
	
	S tSC=..MsgOutputHTML(MsgBodyObj,"Compare")
	
	
	s newMsgBodyObj=MsgBodyObj.%ConstructClone()
	d newMsgBodyObj.BuildMap(1)
	s hSC=newMsgBodyObj.%Save()
	s newMsgBodyId=newMsgBodyObj.%Id()
	

	w "<BR><HR>"
	
	//Send Button
	W "<Table cellSpacing='15'><TR>"
	W "<TD><FONT color=""Blue""><B>&nbsp;&nbsp;NEW MESSAGE. </B><I>( Select a field and update )</I></FONT></TD>"
	W "<TD>Target:&nbsp;<Select ID='newTarget'>"
	
	s rset=##Class(%ResultSet).%New()
	s rset.ClassName="Ens.Util.Statistics"
	s rset.QueryName="EnumerateHostStatus"
	D rset.Execute()
	
	while (rset.Next()) {
		if ( (rset.Data("Type")="BusinessProcess") || (rset.Data("Type")="BusinessOperation")) {
			w "<option Value='"_rset.Data("Name")_"'"
			if ( rset.Data("Name") = MsgHeaderObj.TargetConfigName ) W " selected='selected' "
			W " >"_rset.Data("Name")_"</option>"
		}
	}
	W "</TD>"
	W "<TD><input type='button' value='send' onclick='sendNewMsg("""_MsgHeaderId_""","""_newMsgBodyId_""")'>"
	W "</TD>"
	if (SessionId '= "" ) {
		//W "<TD>&nbsp;&nbsp;<A href='IIBAUtilEnsMsgTrace.csp?$ID1="_SessionId_"' target='_blank'>Trace</A></TD>"
		W "<TD>&nbsp;&nbsp;<A href='EnsPortal.VisualTrace.zen?$ZEN_POPUP=1&SESSIONID="_SessionId_"' target='_blank'>Trace</A></TD>"
	}
	W "</TR></Table>"
	S tSC=..MsgOutputHTML(newMsgBodyObj,"Edit")
	W "<BR><HR>"
	W "<Input type='hidden' id='messageSent' value='True' />"
	Q $$$OK
]]></Implementation>
</Method>

<Method name="MsgOutputHTML">
<ClassMethod>1</ClassMethod>
<FormalSpec>MsgBodyObj:EnsLib.HL7.Message,Action:%String=""</FormalSpec>
<Language>cache</Language>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	
	s msgBodyObjId=MsgBodyObj.%Id()
	
    Set tSC=$$$OK
    &html<
    <table border="0" cellspacing="0" cellpadding="0" cols="2" width="100%"><tr><td align="center"><div class="Text" style="margin: 3px;">>
    If ""'=MsgBodyObj.DocType {
    	Do:""=MsgBodyObj.BuildMapStatus||'$D(MsgBodyObj.%maps("runtimePath")) MsgBodyObj.BuildMap()
    	Set tDesc=##class(EnsLib.HL7.Schema).GetDescription("MT:"_MsgBodyObj.MessageTypeCategory_":"_MsgBodyObj.Name)
    	Set:""=tDesc tDesc=##class(EnsLib.HL7.Schema).GetDescription("MS:"_MsgBodyObj.DocType)
        //&html<HL7 <b>#($ZCVT(MsgBodyObj.Name,"O","HTML"))#</b> Message - Id = <b>#(MsgBodyObj.%Id())#</b>, DocType = '<a#($S(""=tDesc:"",1:" title='"_$ZCVT(tDesc,"O","HTML")_"'")_MsgBodyObj.getLink(MsgBodyObj.DocType))#><b>#($ZCVT(MsgBodyObj.DocType,"O","HTML"))#</b></a>'
        &html<HL7 <b>#($ZCVT(MsgBodyObj.Name,"O","HTML"))#</b> Message - Id = <b>#(MsgBodyObj.%Id())#</b>, DocType = '<a#($S(""=tDesc:"",1:" title='"_$ZCVT(tDesc,"O","HTML")_"'"))#><b>#($ZCVT(MsgBodyObj.DocType,"O","HTML"))#</b></a>'
        	,MessageTypeCategory = '#($ZCVT(MsgBodyObj.MessageTypeCategory,"O","HTML"))#'
        	<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#($S(""=tDesc:"", 1:"'<b><i>"_$ZCVT(tDesc,"O","HTML")_"</i></b>', "))#<b>#(MsgBodyObj.SegCount)#</b> Segments#(..linkParents(MsgBodyObj))#>
        
	    If $$$ISERR(MsgBodyObj.BuildMapStatus) {
        	Set tErr=$ZCVT($$GetOneErrorText^%apiOBJ(MsgBodyObj.BuildMapStatus),"O","HTML")
        	&html<<br>&nbsp;&nbsp;&nbsp;BuildMapStatus = '<b>#(tErr)#</b>'>
        	For i=2:1 { Set tErr=$$GetOneErrorText^%apiOBJ(MsgBodyObj.BuildMapStatus,i) Quit:""=tErr
        		&html<<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;'#($ZCVT(tErr,"O","HTML"))#'>
            }
        }
        
    } Else {
            &html<HL7 <b>#($ZCVT(MsgBodyObj.Name,"O","HTML"))#</b> Message - Id = <b>#(MsgBodyObj.%Id())#</b>, DocType = <b>''</b>, MessageTypeCategory = '#($ZCVT(MsgBodyObj.MessageTypeCategory,"O","HTML"))#', <b>#(HL7Msg.SegCount)#</b> Segments#(..linkParents(HL7Msg))#>
    }
    &html<</div></td></tr></table>>
    Do:'$D(MsgBodyObj.%maps("runtimeIndex"))&&$D(MsgBodyObj.%maps("runtimePath")) HL7Msg.buildRuntimeIndexFromPath()
    Set tCnt=$G(MsgBodyObj.%maps("runtimeIndex"))
    If tCnt<=0 { &html<<center>No Segments</center>> }
                
    Else {
    	&html<<table class="EDIDocumentTable" BORDER="0" CELLSPACING="0" CELLPADDING="0">>
        For i=1:1:tCnt {
        	If i>300&&(i<=(tCnt-100)) {
            	If i=301 { &html<<TR CLASS="EDIDocumentTableRow"><TD CLASS="EDIDocumentTableExpandor">&nbsp;</TD>>
                    		&html<<td class='EDIDocumentTableSegnum'>...&nbsp;</td><td class='EDIDocumentTableSegid' SegID='...'> </td>>
                        	&html<<td class='EDIDocumentTableSegname'>&nbsp;</td>>
                        	&html<<td>Segments 301 to #(tCnt-100)# not shown ...</td></TR>> 
                }
                Continue
            }
            Set tPath=$G(MsgBodyObj.%maps("bidirectionalLink",i),i)
            Set seg=MsgBodyObj.getSegmentByIndex(i)
            &html<<TR CLASS="EDIDocumentTableRow"><TD CLASS="EDIDocumentTableExpandor">&nbsp;</TD>>
            //Set tSC=seg.OutputHTML(MsgBodyObj.Separators,i,tPath,MsgBodyObj) Quit:$$$ISERR(tSC)
            S tSC=..SegOutputHTML(MsgBodyObj.Separators,i,tPath,MsgBodyObj,seg,Action) Quit:$$$ISERR(tSC)
            //&html<<TR><TD>tCnt=#(tCnt)#, i=#(i)#</TD></TR>>
            &html<</TR>>
            Do MsgBodyObj.commitSegmentByIndex(i)
        }
        &html<</table>>
    }
                
    //Write:$$$ISERR(tSC) $ZCVT($$$StatusDisplayString(tSC),"O","HTML")
    Quit tSC
]]></Implementation>
</Method>

<Method name="SegOutputHTML">
<ClassMethod>1</ClassMethod>
<FormalSpec>pSeparators:%String,pSegNum:%String,pSegPath:%String,pDocument:EnsLib.EDI.Document,segment:EnsLib.HL7.Segment,Action:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	
	s msgBodyObjId=pDocument.%Id()
    Set:""=$G(pSeparators) pSeparators=segment.Separators
    Set tFullLen=segment.FullSize
    Do segment.decompose()
    Set tName=segment.Name, tFS=$ZCVT($E(pSeparators,1),"O","HTML"), tCS=$ZCVT($E(pSeparators,2),"O","HTML"), tRS=$ZCVT($E(pSeparators,3),"O","HTML"), tSS=$ZCVT($E(pSeparators,5),"O","HTML")
    Set:""=tName tName="x"
    Set tSegType=segment.SegType
    Do ..outputHTMLStart(pSegNum, pSegPath,segment.ID,tName,tSegType,tFullLen,$S($IsObject(pDocument):pDocument.DocType,1:""))
    Set tReplaceSpec(" ")="&nbsp;"
    Set tReplaceSpec($C(9))="\t"
    Set tReplaceSpec($C(13))="\r"
    Set tReplaceSpec($C(10))="\n"
    Set iCat=$P(tSegType,":"), iSeg=$P(tSegType,":",2)
    If ""=iCat||(""=iSeg) {
    	Set iList=""
    } Else {
        Set iList=$G($$$vaSchemaGbl(iCat,"SS",iSeg))
        Set tSC=##class(EnsLib.HL7.Schema).getFieldsContentArray(.tContents,"source",iCat,iSeg,0)
    }
                
    Set iCnt=segment.GetValueAt("*",pSeparators)
    If iCnt<1 { &html<<td class='EDISegmentsTableEmptyfield'>&nbsp</td>> }
    Else { For i=1:1:iCnt {
    			Set iN=$ZCVT($P($E($G(tContents(i,"name"),":"_i),2,*),"("),"O","HTML")
            	Set iAttrs=$LG(iList,i), iDT=$LG(iAttrs,1), iSym=$LG(iAttrs,2), iRep=$LG(iAttrs,3), iLen=$LG(iAttrs,4), isRep=$LG(iAttrs,6)
            	Set:'iRep&&isRep iRep=1
            	Set tAttr=$S(iRep>1:iRep,1:"")_iSym_$S(iLen:"("_iLen_")",1:"")
            	If ""'=iDT {
            		Set cCat=$P(iDT,":"),cTyp=$P(iDT,":",2)
                	Set cList=$G($$$vaSchemaGbl(cCat,"DS",cTyp))
            	}                              
            	If $Case(tName,"MSH":1,"FHS":1,"BHS":1,:0) && (i<=2) {
	        		s fPath=pSegPath_":"_i
	            	s fieldTitle=##class(%CSP.Page).EscapeHTML(i_" / "_iN_$S(""=tAttr:"",1:" / "_tAttr))
	            	if (Action="Edit") {
	            		&html<<td nowrap class='EDISegmentsTableValue' id='#(fPath)#'><a title='#(fieldTitle)#' style='cursor: pointer;' onclick='getNewValue(event,"#(fPath)#","#($ZCVT(segment.GetValueAt(i,pSeparators),"O","HTML"))#","#(fieldTitle)#","#(msgBodyObjId)#")'>#($ZCVT(segment.GetValueAt(i,pSeparators),"O","HTML"))#</a></td>>
	            	} else {
		            	&html<<td nowrap class='EDISegmentsTableValue' id='#(Action)#.#(fPath)#'><a title='#(fieldTitle)#' style='cursor: pointer;' >#($ZCVT(segment.GetValueAt(i,pSeparators),"O","HTML"))#</a></td>>
	            	}
                	//&html<<td nowrap class='EDISegmentsTableValue'><a title='#(i)# / #(iN)##($S(""=tAttr:"",1:" / "_tAttr))#' onclick='menuOptions(event,"#(fPath)#","#($ZCVT(segment.GetValueAt(i,pSeparators),"O","HTML"))#")'>#($ZCVT(segment.GetValueAt(i,pSeparators),"O","HTML"))#</a></td>>
                	Continue
            	} Else { &html<<td class='EDISegmentsTableSeparator'>#(tFS)#</td>> }
                                
            	If (""=segment.GetValueAt(i)) {
	        		s fPath=pSegPath_":"_i 
	           	    s fieldTitle=##class(%CSP.Page).EscapeHTML(i_" / "_iN_$S(""=tAttr:"",1:" / "_tAttr))
	           	    if (Action="Edit") {
	            		&html<<td class='EDISegmentsTableEmptyfield' id='#(fPath)#'><a title='#(fieldTitle)#' style='cursor: pointer;' onclick='getNewValue(event,"#(fPath)#","","#(fieldTitle)#","#(msgBodyObjId)#")'>&nbsp;&middot;</a></td>> 
	           	    } else {
		           	    &html<<td class='EDISegmentsTableEmptyfield' id='#(Action)#.#(fPath)#'><a title='#(fieldTitle)#' style='cursor: pointer;' >&nbsp;&middot;</a></td>> 
	           	    }
	           	 	//&html<<td class='EDISegmentsTableEmptyfield'><a title='#(i)# / #(iN)##($S(""=tAttr:"",1:" / "_tAttr))#' onclick='menuOptions(event,"#(fPath)#","")'>&nbsp;&middot;</a></td>> 
	            	Continue
           		}
           		Set rCnt=segment.GetValueAt(i_"(*)")
          		Set rF=1 
          		For r=1:1:rCnt {
          			Set rN=iN,rAlias=i
          			If rCnt>1||iRep { 
          				Set rp=r_$S(rCnt>iRep&&(iRep'=1):"*",1:"")
          		 		Set rN=rN_"("_rp_")"
          		 		Set rAlias=rAlias_"("_rp_")"
    				}
    				If rF { Set rF=0 } Else { &html<<td class='EDISegmentsTableSeparator'>#(tRS)#</td>> }
                                                
   					Set cCnt=segment.GetValueAt(i_"("_r_").*")
    				Set cF=1 
    				For c=1:1:cCnt {
    					Set sCnt=segment.GetValueAt(i_"("_r_")."_c_".*",pSeparators)
    					Set cN=rN,cAlias=rAlias 
    					If ""'=iDT||(cCnt>1)||(sCnt>1) {
    						Set cN=cN_"."_$ZCVT($P($G(tContents(i,c,"name"),c),"("),"O","HTML")
        					Set cAlias=cAlias_"."_c
    					}
    					Set cDT=$S(""=iDT:"",1:$LG(cList,i))
    					If cF { Set cF=0 } Else { &html<<td class='EDISegmentsTableSeparator'>#(tCS)#</td>> }
                                                                
                                                                
    					If (""=segment.GetValueAt(cAlias,pSeparators)) {
							s fPath=pSegPath_":"_i_"("_r_")"
	   						s fieldTitle=##class(%CSP.Page).EscapeHTML(cAlias_" / "_cN_$S(""=tAttr:"",1:" / "_tAttr))
	   						s zPath=pSegPath_":"_cAlias
	   						If (Action="Edit") {
	    						&html<<td class='EDISegmentsTableEmptyfield' id='#(zPath)#'><a title='#(fieldTitle)#' style='cursor: pointer;' onclick='getNewValue(event,"#(zPath)#","","#(fieldTitle)#","#(msgBodyObjId)#")'>&nbsp;&middot;</a></td>>
	   						} else {
		   						&html<<td class='EDISegmentsTableEmptyfield' id='#(Action)#.#(zPath)#'><a title='#(fieldTitle)#' style='cursor: pointer;' >&nbsp;&middot;</a></td>>
	   						}
	    					//&html<<td class='EDISegmentsTableEmptyfield' id='#(fPath)#'><a title='#(fieldTitle)#' onclick='getNewValue(event,"#(fPath)#","","#(fieldTitle)#","#(msgBodyObjId)#")'>&nbsp;&middot;</a></td>>
	   	 					//&html<<td class='EDISegmentsTableEmptyfield'><a title='#(cAlias)# / #(cN_$S(""=tAttr:"",1:" / "_tAttr))#' onclick='menuOptions(event,"#(fPath)#","")'>&nbsp;&middot;</a></td>> 
	    					Continue
    					}
    					
    					Set sF=1 For s=1:1:sCnt {
    					Set sN=cN,sAlias=cAlias 
    					If ""'=cDT||(sCnt>1) {
        					Set sN=cN_"."_$ZCVT($P($G(tContents(i,c,s,"name"),s),"("),"O","HTML")
            				Set sAlias=cAlias_"."_s
        				}
        				If sF { Set sF=0 } Else { &html<<td class='EDISegmentsTableSeparator'>#(tSS)#</td>> }
                                                                                
        			Set tVal=segment.GetValueAt(sAlias,pSeparators)
        			Set fPath=pSegPath_":"_sAlias
        			s fieldTitle=sAlias_" / "_sN_$S(""=tAttr:"",1:" / "_tAttr)
        			If (tVal="") {
        				if (Action="Edit") {
        					&html<<td class='EDISegmentsTableEmptyfield'><a title='fieldTitle' style='cursor: pointer;' onclick='getNewValue(event,"#(fPath)#","","#(fieldTitle)#","#(msgBodyObjId)#")'>&nbsp;&middot;</a></td>> 
        				} else {
	        				&html<<td class='EDISegmentsTableEmptyfield'><a title='fieldTitle' style='cursor: pointer;' >&nbsp;&middot;</a></td>> 
        				}
        				Continue
        			}
        			//If ""=tVal &html<<td class='EDISegmentsTableEmptyfield'><a title='#(sAlias)# / #(sN_$S(""=tAttr:"",1:" / "_tAttr))#' onclick='menuOptions(event,"#(fPath)#","")'>&nbsp;&middot;</a></td>> Continue
        			if (Action="Edit") {
        				&html<<td nowrap class='EDISegmentsTableValue' id='#(fPath)#'><a title='#(fieldTitle)#' style='cursor: pointer;' onclick='getNewValue(event,"#(fPath)#","#($ZCVT($E(tVal,1,2000),"O","JS"))#","#(fieldTitle)#","#(msgBodyObjId)#")'>>
        			} else {
	        			&html<<td nowrap class='EDISegmentsTableValue' id='#(Action)#.#(fPath)#'><a title='#(fieldTitle)#' style='cursor: pointer;' >>
        			}
        			//&html<<td nowrap class='EDISegmentsTableValue'><a title='#(sAlias)# / #(sN_$S(""=tAttr:"",1:" / "_tAttr))#' onclick='menuOptions(event,"#(fPath)#","#($E(tVal,1,2000))#")'>>
       				Set:$L(tVal)>2000 tVal=$E(tVal,1,2000)_" segment.."
        			While ""'=tVal { Set tPiece=$E(tVal,1,1000), tVal=$E(tVal,1001,*) Write $$replaceArray^EnsUtil($ZCVT(tPiece,"O","HTML"),.tReplaceSpec) }
        			&html<</a></td>>
   				}
   			}
   		}
   }}
                
   If $IsObject(pDocument)&&("DocsRef"=$E(tName,*-$L("DocsRef")+1,*)) {
   		Do segment.outputChildLinks(pDocument,$E(tName,1,*-$L("DocsRef")))
   }
                
   Do ..outputHTMLEnd()
   Quit msgBodyObjId
]]></Implementation>
</Method>

<Method name="outputHTMLStart">
<ClassMethod>1</ClassMethod>
<FormalSpec>pSegNum,pSegPath,pID,pName,pSegType,pFullLen,pMsgStructure</FormalSpec>
<Implementation><![CDATA[
	Set tDesc=$S(""=pSegType:"", 1:##class(EnsLib.HL7.Schema).GetDescription("SS:"_pSegType))
	Set len=$S(pFullLen<=2000:"",1:" (len="_pFullLen_")")
	&html<
	<td class='EDIDocumentTableSegnum'>#(pSegNum)#&nbsp;</td><td class='EDIDocumentTableSegid' SegID='#(pID)#'>#($S(""=pID:"*",1:"&nbsp;"))#</td>
	<td class='EDIDocumentTableSegname'>
		<a title='#($S(pSegNum=pSegPath&&(""'=pSegType):"SS:"_pSegType, 1:$ZCVT(pSegPath_$S(""=tDesc:"", 1:" - "_tDesc),"O","HTML"))_len)#' >#(pName)#
	</a></td><td><table class='EDISegmentsTable'><tr>>
]]></Implementation>
</Method>

<Method name="FieldUpdate">
<ClassMethod>1</ClassMethod>
<FormalSpec>msgObjId:%Integer,pValue:%String,pPath:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	s MsgBodyObj=##class(EnsLib.HL7.Message).%OpenId(msgObjId)
	
	//Get path and repeat value
	s key=""
	s rPath=$Reverse(pPath)
	if ( $E(rPath)=")" ) {
		s lenPath=$Length(pPath)
		S startRep=lenPath-$F(rPath,"(")+2
		s newPath=$E(pPath,1,startRep-1)
		s key=$E(pPath,startRep+1,lenPath-1)
	} else {
		s newPath=pPath
	}
	
	
	
	s tSC=MsgBodyObj.SetValueAt(pValue,newPath,"set",key)
	S %session.Data("MessageEdits")=$G(%session.Data("MessageEdits"))_newPath_"{"_pValue_"} "
	//S ^CacheTempBenTest("FieldUpdate")="s pValue="""_pValue_""" s pPath="""_pPath_""" s tSC=MsgBodyObj.SetValueAt(pValue,pPath,""set"","""")"
	s tSC=MsgBodyObj.%Save()
	Q tSC
]]></Implementation>
</Method>

<Method name="SendMessage">
<ClassMethod>1</ClassMethod>
<FormalSpec>OrigMsgHdrId:%Integer,NewMsgBodyId,NewTarget:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	s NewMsgBody=##class(EnsLib.HL7.Message).%OpenId(NewMsgBodyId)
	s tSC=##class(Ens.MessageHeader).NewDuplicatedMessage(.tNewHeader,OrigMsgHdrId,NewTarget,NewMsgBody)
	if (tSC=1) {
		s tSC=##class(Ens.Queue).EnQueue(tNewHeader)
		d $SYSTEM.Security.Audit("IIBAENSEMBLE.csp.MessageEdit","MessageEdit","Message Edit",$G(%session.Data("MessageEdits")),"Original Message Header Id: "_OrigMsgHdrId_", New Message Header Id: "_tNewHeader.%Id()_", New Target: "_NewTarget)
		S %session.Data("MessageEdits")="Message Edits (format: path{new value}): "
		S MessageSent="True"
	}
	
	Set tOut=$S($$$ISERR(tSC):msgid_":"_$TR($$$StatusDisplayString(tSC),",",";"), 1:tNewHeader.%Id())
	
	
	Q tOut
]]></Implementation>
</Method>

<Method name="buildmodalNewValue">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set sHTML = ""
	set sHTML=sHTML_"<div class='dialog' id=""modalNewValue"" >"
	
		//set sHTML=sHTML_"<div style=""margin-bottom: 10px;text-align:center""><h3>Edit Field Value</h3></div>"
		set sHTML=sHTML_"<div style=""margin-left: 20px;margin-right: 20px;"">"
		set sHTML=sHTML_"<table>"
		set sHTML=sHTML_"<tr><td width=""100px"">Field: </td>"
		set sHTML=sHTML_"<td><div id=""newValueFieldName""></div></td></tr>"
		set sHTML=sHTML_"<tr><td width=""100px"">Value: </td>"
		set sHTML=sHTML_"<td><input type=""text"" id=""newValueField"" value=""""></td></tr>"
		set sHTML=sHTML_"</table>"
		set sHTML=sHTML_"</div>"
		set sHTML=sHTML_"<input type=""hidden"" id=""newValueFieldId"" value="""">"
		set sHTML=sHTML_"<input type=""hidden"" id=""newValueFieldTitle"" value="""">"
		set sHTML=sHTML_"<input type=""hidden"" id=""newValuemsgObjId"" value="""">"
		set sHTML=sHTML_"<div style=""margin-left: 20px;margin-top: 10px""><button onclick=""hm('modalNewValue');newValueSave()"">Save</button><button onclick=""hm('modalNewValue')"">Cancel</button></div>"
	
 	set sHTML=sHTML_"</div>"
 	Quit sHTML
]]></Implementation>
</Method>

<Method name="linkParents">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec>pDocObj</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tOutStr=""
	Set tChildCount=pDocObj.ChildCount
	Set:tChildCount tOutStr=tOutStr_", <b>"_tChildCount_"</b> "_$S(tChildCount>1:"child documents", 1:"child document")
	Set tNumParents=$LL(pDocObj.ParentIds)
	If tNumParents {
		Set tOutStr=tOutStr_", "_$S(tNumParents>1:"parent documents ", 1:"parent document ")
		Set tParent=pDocObj.Parent
		While $IsObject(tParent) {
			Set tOutStr=tOutStr_": <a target='_blank' title='HL7 Document Database Id = "_tParent.%Id()_"', Type Name = '"_tParent.Name_"' method=get href="_##class(%CSP.Page).Link("EDIDocumentView.csp?CLASS="_tParent.%ClassName(1)_"&NAME="_$ZCVT("HL7 Document","O","URL")_"&ORIGIN=EDIDoc&EDIDOCID="_tParent.%Id()_"&DOCSPEC=Stored#doc_content")_">&lt;"_tParent.%Id()_"&gt;</a>"
			Set tParent=tParent.Parent
		}
	}
	Quit tOutStr
]]></Implementation>
</Method>

<Method name="outputHTMLEnd">
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	&html<</tr></table></td>>
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.Mobile">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>61066,35453.914093</TimeChanged>
<TimeCreated>60908,31118.460678</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	if ##class(%SYSTEM.Security).Check("%All") = "READ,WRITE,USE" { set Allowed = 1 }
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
   <script language=javascript>
	<!--
	function Initialize()
	{

	}
  -->
   </script>
  >
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    //
    
    &html<
    <img src="customimages/IIBA_logo.jpg">

	<H2>ENSEMBLE</H2>
	<p>
	<a
	 href="IIBASupportDetail.csp?PageName=MobileSystem"
	 target="_parent">Mobile Interface Status</a>
	<p>
	<a
	 href="IIBASupportDetail.csp?PageName=MobileAlert"
	 target="_parent">Mobile Alert Management</a>
	
	<p>
	>
	do ##class(IIBAENSEMBLE.csp.components).troubleditems(0)
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.MobileAlert">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>62675,39278.849055</TimeChanged>
<TimeCreated>60908,31118.460678</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	if ##class(%SYSTEM.Security).Check("%All") = "READ,WRITE,USE" { set Allowed = 1 }
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
   <script language=javascript>
	<!--
	function Initialize()
	{

	}
  -->
   </script>
  >
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    Set ProductionName=""
	Set ProductionStatus=""
	set status = ##class(Ens.Director).GetProductionStatus(.ProductionName,.ProductionStatus)
	
	D ..GetStatus()
	
	W "<b>Alert Management: "_ProductionName_"</b><p>"
	
	s ifn=%request.Get("Interface")
	s action=%request.Get("Action")
	s AlertException=%request.Get("AlertException")
	
	If (ifn="") {
		W "<Form Name=""Get Interface"" id=""Get Interface"" action=""IIBASupportDetail.csp?PageName=MobileAlert"" method=""post"">"
		w "<table border=""0"" cellpadding=""3"" cellspacing=""0"">"
		w "<tr><td align=""left"" nowrap>Interface Name:&nbsp;&nbsp;"
		
		//W "<select Name=""Interface"" OnChange=#server(..GetAlertInfo())#>"
		W "</td><td><select Name=""Interface"" id=""Interface"">"
		D ..GetInterfaceOptionList()
		W "</select></td>"
		
		W "<tr><td><input type=""submit"" name=""Action"" id=""Action"" Value=""Get Alerts"">"
		W "</tr></td></table>"	
		W "</form>"
		
	} else {
		
		if (action="Toggle Alerts") {
			
			//S ^CacheTempBSG("Set Alert Exception","Toggle Alerts")=$H
			S parameter=%request.Get("Parameters")
			if (parameter '="" ) {
				S AlertID=$P($P(parameter,"_",1),"Alert",2)
				S Active=$P(parameter,"_",2)
				If ( Active = 0 ) {
					Set Active=1
				} else {
					Set Active=0
				}
			
				s rs=##class(%ResultSet).%New()
				d rs.Prepare("Update IIBAENSEMBLE_Monitor.ItemParameters set Active='"_Active_"' where ID='"_AlertID_"'")
				d rs.Execute()
			}
			
			W "<META HTTP-EQUIV=""refresh"" content=""2;URL=/csp/iibaris/IIBASupportDetail.csp?PageName=MobileAlert"">"


		} elseif  (AlertException="Set Alert Exception") {
			
			//AlertExceptionTime
			S ExceptionTime=%request.Get("AlertExceptionTime")*3600
			if (ExceptionTime>0 && (ifn'="")) {
				S ^CacheTempBSG("Set Alert Exception","Exceptions")=ExceptionTime
			
			
				&sql(select max(ExceptionId) into :ExceptionId from IIBAENSEMBLE_Monitor.AlertExceptions)
				s ExceptionId=ExceptionId+1
			
				s StartDttm=$ZDT($H,3)
				s EndDttm=($P($H,",",1)+( ($P($H,",",2)+ExceptionTime)\86400) )_","_(($P($H,",",2)+ExceptionTime)#86400)
				s EndDttm=$ZDT(EndDttm,3)
				S comment="Alert Temporarily disabled using Mobile Feature"
			
				//S ^CacheTempBSG("Set Alert Exception","Exceptions")=ExceptionId_";"_ifn_";"_StartDttm_";"_EndDttm_";"_comment
			
				
				&sql( Insert into IIBAENSEMBLE_Monitor.AlertExceptions 
	           	(ExceptionId,   itemname, startdttm, enddttm, comment)
					Values (:ExceptionId, :ifn,:StartDttm,:EndDttm,:comment)  )
		    	
			}
			
		} else {
		
			W "<Form Name=""Get Alert"" id=""Get Alert"" action=""IIBASupportDetail.csp?PageName=MobileAlert"" method=""post"">"
	
			w "<table border=""0"" cellpadding=""3"" cellspacing=""0"">"
			W "<tr><td>Interface Name</td><td><select Name=""Interface"" id=""Interface"">"
			w "<Option Value=",ifn,">",ifn,"</select></td></tr>"
		
			w "<td>Parameter (alert/threshold/status):&nbsp;&nbsp;</td>"
			w "<td><Select Name=""Parameters"" id=""Parameters"">"
			W "<Option Value="""">"
	
		
			set rs=##class(%ResultSet).%New()
			s MySql="SELECT i.ID,i.Active as Active,i.Parameter as Parameter,i.Threshold as Threshold ,t.itemdescription as Description"
			s MySql=MySql_" from IIBAENSEMBLE_Monitor.ItemParameters i join IIBAENSEMBLE_Monitor.tblItems t"
			s MySql=MySql_" on  i.Threshold=t.itemvalue where i.ItemName='"_ifn_"'"
			//Do rs.Prepare("SELECT ID,Active,Parameter,Threshold  from IIBAENSEMBLE_Monitor.ItemParameters where ItemName = '"_ifn_"'")
			Do rs.Prepare(MySql)
			Do rs.Execute()
		
	
			While(rs.Next()) {
			
			    
				Set AlertValue="Alert"_rs.Data("ID")_"_"_rs.Data("Active")
				W "<Option Value="""_AlertValue_""">"_rs.Data("Parameter")_"/"_##class(%CSP.Page).EscapeHTML(rs.Data("Description"))_"/"
				if (rs.Data("Active")=1) {
					W "Active"
				} else {
					W "Inactive"
				}
				
			}
		
			W "</Select></td>"
		 
			W "<tr><td><input type=""submit"" name=""Action"" id=""Action"" Value=""Toggle Alerts"">"
			W "</td></tr>"
			W "<tr><td>"
			W "<select name='AlertExceptionTime' id='AlertExceptionTime'><option Value=""""></option>"
			F i=1,2,4,8,12,24 W "<option value="""_i_""">"_i_"</option>"
			W "</select>"
			//W "</td>"
			W "&nbsp;&nbsp;<input type=""submit"" name=""AlertException"" id=""AlertException"" Value=""Set Alert Exception"">"
			W "</td></tr>"
	
	 	
			W "</table>"
			W "</Form>"
		}
	}
]]></Implementation>
</Method>

<Method name="GetInterfaceOptionList">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
     s ifn=%request.Get("Interface")
     
     
 
 	S ol= "<Option Value="""">"
 	
 	set rs=##class(%ResultSet).%New()
 	Do rs.Prepare("SELECT DISTINCT ItemName from IIBAENSEMBLE_Monitor.ItemParameters order by ItemName")
 	Do rs.Execute()
 	While(rs.Next()) {
 		s item=rs.Data("ItemName")
 		s ol=ol_"<Option Value="""_item_""""
 		
 		if (ifn=item) {
 			s ol=ol_" selected=""selected"" "
 		}
 		
 		s ol=ol_">"_item
 	}
 
 	w ol
 	
 	
 	Q 1
]]></Implementation>
</Method>

<Method name="GetStatus">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<Implementation><![CDATA[
 	Kill SysList
 
 	Set ProductionName=""
 	Set ProductionStatus=""
 	set status = ##class(Ens.Director).GetProductionStatus(.ProductionName,.ProductionStatus)
 	set production=##class(Ens.Config.Production).%OpenId(ProductionName)
 
 	for i=1:1:production.Items.Count() {
 		
 		// collect item settings
 		s item=production.Items.GetAt(i)
 
 		s name=item.Name
 		s category=$P(item.Category,",",1)
 		s class=item.ClassName
 		s Type=item.BusinessType()
 		
 		s nl=$ListFromString(name,".")
 		s l=$ListLength(nl)
 		s package=$ListToString($List(nl,1,l-2),".")
 		
 		
 	
 		if ( category '= "" ) {
 			s SysList(name,"Enabled")=item.Enabled+0
 			S SysList(name,"ID")=i
 			s SysList(name,"Category")=category
 			s SysList(name,"Type")=item.BusinessType()
 			S SysList(name,"Comment")=item.Comment
 
 		}
 	}
 
 	Kill HostStatus
 	set rs=##class(%ResultSet).%New("Ens.Util.Statistics:EnumerateHostStatus")
 	Set r=rs.Execute()
 	
 	while rs.Next() {
 		Set name=rs.Get("Name")
 		Set HostStatus(name,"Status")=rs.Get("Status")
 		Set HostStatus(name,"AdapterState")=rs.Get("AdapterState")
 		Set HostStatus(name,"LastAction")=rs.Get("LastAction")
 		Set HostStatus(name,"ElapsedTime")=rs.Get("ElapsedTime")
 		set HostStatus(name,"Queue")=rs.Get("Queue")
 		Set HostStatus(name,"Count")=rs.Get("Count")
 	} 
 	
 	merge %session.Data("SysListArray")=SysList
 	merge %session.Data("HostStatusArray")=HostStatus
 	
 	Q 1
]]></Implementation>
</Method>

<Method name="ToggleAlert">
<ClassMethod>1</ClassMethod>
<FormalSpec>AlertID:%String</FormalSpec>
<Language>cache</Language>
<Implementation><![CDATA[
 		/*
 		if ( CurrentStatus=1) {
 			set status = ##class(Ens.Director).EnableConfigItem(InterfaceName,0)
 		} else {
 			set status = ##class(Ens.Director).EnableConfigItem(InterfaceName,1)
 		}
 		*/
 		Q 1
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.MobileNmspSelect">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>62621,50235</TimeChanged>
<TimeCreated>60908,31118.460678</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	if ##class(%SYSTEM.Security).Check("%All") = "READ,WRITE,USE" { set Allowed = 1 }
	
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
   <script language=javascript>
	<!--
	function Initialize() {
	  

	}
	
	function NewPage() {
		
		
		newNMSP=document.getElementById("Namespace").value;
		
		if ( newNMSP != '' ) {
			namespaceurl='/csp/'+newNMSP+'/IIBASupport.csp?PageName=Mobile';
			self.document.location=namespaceurl;
		}
	}
  -->
   </script>
  >
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    //
    
    
    //W "<img src='customimages/IIBA_logo.jpg'>"

	W "<H2>ENSEMBLE</H2>"
	W "<p>"
	w "<form id='namespaceSelection'>"
	W "Select Namespace"
	W "<p>"

	Set tNS = $O(^%SYS("Ensemble","InstalledNamespace",""))
	W "<select name='Namespace' id='Namespace' ><option></option>"
	While (tNS '= "") {
		
		Set tURL = "/csp/"_tNS_"/IIBASupport.csp?PageName=Mobile"
		//if tNS="IIBAENSEMBLE" {Set tURL = "/csp/healthshare/IIBASupport/"_%request.PageName}  //This is a temporary exception until we turn off IIBAENSEMBLE
		if ##class(%SYSTEM.Security).Check("NS_"_tNS) = "READ,WRITE,USE" {
			//&html<<option value="#(tURL)#" >#($ZCVT(tNS,"O","HTML"))#>
			W "<option value='",$ZCVT(tNS,"O","HTML"),"' >",$ZCVT(tNS,"O","HTML"),"</option>"
			//W "<a href='",tURL,"'>",tNS,"</a><BR>"
		}
		Set tNS = $O(^%SYS("Ensemble","InstalledNamespace",tNS))
	}
	W "</select>"
	w "&nbsp;&nbsp;&nbsp;<input type='button' value='select' onclick='NewPage();'>"
	// w "<BR>",%request.URL,"<BR>"
	
	do ##class(IIBAENSEMBLE.csp.components).troubleditems(0)
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.MobileSystem">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>62675,39366.794309</TimeChanged>
<TimeCreated>60908,31118.460678</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	if ##class(%SYSTEM.Security).Check("%All") = "READ,WRITE,USE" { set Allowed = 1 }
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
   <script language=javascript>
	<!--
	function Initialize()
	{

	}
  -->
   </script>
  >
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
		Set ProductionName=""
	Set ProductionStatus=""
	set status = ##class(Ens.Director).GetProductionStatus(.ProductionName,.ProductionStatus)
	
	D ..GetStatus()

	W "<H3>"_ProductionName_""

	//Collect interface status information

	W "<BR><br>"
	
	W "Production Status: "
		IF (ProductionStatus '= 1) {
		W "<FONT Color=Red>"
	}
	W $P("Running,Stopped,Suspended,Troubled",",",ProductionStatus)
	IF (ProductionStatus '= 1) {
		W "</FONT>"
	}	
	W "</H3>",!
	

	
	SET IfCnt=0
	W "<Form Name=""FilterForm"" id=""FilterForm"" action=""IIBASupportDetail.csp?PageName=MobileSystem"" method=""post"">"
	W "Interface:&nbsp;"

	//w "<select Name=""Interface"" OnChange=#server(..GetInterfaceInfo())#>"
	//do ..GetInterfaceOptionList()
	//w "</select>"
	
	
	&html<
	<select Name="Interface" id="Interface" OnChange=#server(..GetInterfaceInfo())#>"
	#(..GetInterfaceOptionList())#
	</select>
	
	<br>
	<table><tr><td>
	<input type="submit" name="Status" id="Status" Value="Status">
	</td><td>&nbsp;&nbsp;&nbsp;</td><td>
	<input type="submit" name="toggle" id="toggle" Value="Toggle Enabled">
	</td></tr></table>	
	>
	W "</Form>"

	//W "<BR><BR>",%request.URL,"<BR><BR>"
	s ifn=%request.Get("Interface")
	s s=%request.Get("Status")
	s t=%request.Get("toggle")
	
	//w "<BR>t="_t
	//w "<BR>s="_s
	
	if ( s="Status") {
		w "<BR><B>Show Status</B><BR>"
	}
	
	W "<BR>"
	if ( t="Toggle Enabled") {
		w "<BR><i>Toggle Enabled</i><BR>"
		s cs=%session.Data("SysListArray",ifn,"Enabled")
		do ..ToggleInterface(ifn,cs)
		do ..GetStatus()
	}
	W "<BR>"
	W "<SPAN id=InterfaceStatus>"
		s ifn=%request.Get("Interface")
	if ( ifn '="") {
		w "Interface: ",ifn,"<BR>"
		if ( %session.Data("SysListArray",ifn,"Enabled")=1 ) {
			W "Enabled<BR>"
		} Else {
			W "<B>Disabled</B><BR>"
		}
		w "Status: ",%session.Data("HostStatusArray",ifn,"Status"),"<BR>"
		w "Adapter State: ",%session.Data("HostStatusArray",ifn,"AdapterState"),"<BR>"
		if (%session.Data("SysListArray",ifn,"Type")="1") {
			w "Count: ",%session.Data("HostStatusArray",ifn,"Count")+0,"<BR>"
		} else {
			w "Queue: ",%session.Data("HostStatusArray",ifn,"Queue")+0,"<BR>"
		}
		w "Last Action: ",%session.Data("HostStatusArray",ifn,"LastAction"),"<BR>"
	}

	
	W "</SPAN>"
	W "</CENTER>"
]]></Implementation>
</Method>

<Method name="GetInterfaceInfo">
<ClassMethod>1</ClassMethod>
<FormalSpec>vPackage:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 	
 //set Interface=%session.Data("Interface")
 //W "<B>"_Interface_"</B>"
 //&js<alert('test')>
 //document.getElementById('InterfaceStatus').innerHTML='<B>Ben</B>'
 s ifn=%request.Get("Interface")
 S NewStatus=""
 if ( ifn '="") {
 	s NewStatus="Interface: "_ifn_"<BR>"
 	S NewStatus=NewStatus_"Status: "_%session.Data("HostStatusArray",ifn,"Status")_"<BR>"
 	S NewStatus=NewStatus_"Adapter State: "_%session.Data("HostStatusArray",ifn,"AdapterState")_"<BR>"
 	S NewStatus=NewStatus_"Queue: "_%session.Data("HostStatusArray",ifn,"Queue")+0_"<BR>"
 	S NewStatus=NewStatus_"Last Action: "_%session.Data("HostStatusArray",ifn,"LastAction")_"<BR>"
 }
 
 &js<document.getElementById('InterfaceStatus').innerHTML='#(NewStatus)#'>
 s %request.URL=%request.URL_"?Ben=1"
 
 //w "<B>Ben</B>"
 Q 1
]]></Implementation>
</Method>

<Method name="GetInterfaceOptionList">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
     s ifn=%request.Get("Interface")
 
 	S ol= "<Option Value="""">"
 	
 
 	Set item=""
 	For  {
 		
 		Set item=$O(%session.Data("SysListArray",item))
 		Q:item=""
 		s ol=ol_"<Option Value="""_item_""""
 		
 		if ( ifn = item ) {
 			s ol=ol_"selected=""selected"""
 		}
 		
 		s ol=ol_">"_item
 		
 		
 	
 	}
 	Q ol
]]></Implementation>
</Method>

<Method name="GetStatus">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<Implementation><![CDATA[
 	Kill SysList
 	Set ProductionName=""
 	Set ProductionStatus=""
 	set status = ##class(Ens.Director).GetProductionStatus(.ProductionName,.ProductionStatus)
 	set production=##class(Ens.Config.Production).%OpenId(ProductionName)
 
 	for i=1:1:production.Items.Count() {
 		
 		// collect item settings
 		s item=production.Items.GetAt(i)
 
 		s name=item.Name
 		s category=$P(item.Category,",",1)
 		s class=item.ClassName
 		s Type=item.BusinessType()
 		
 		s nl=$ListFromString(name,".")
 		s l=$ListLength(nl)
 		s package=$ListToString($List(nl,1,l-2),".")
 		
 		
 	
 		if ( category '= "" ) {
 			s SysList(name,"Enabled")=item.Enabled+0
 			S SysList(name,"ID")=i
 			s SysList(name,"Category")=category
 			s SysList(name,"Type")=item.BusinessType()
 			S SysList(name,"Comment")=item.Comment
 
 		}
 	}
 
 	Kill HostStatus
 	set rs=##class(%ResultSet).%New("Ens.Util.Statistics:EnumerateHostStatus")
 	Set r=rs.Execute()
 	
 	while rs.Next() {
 		Set name=rs.Get("Name")
 		Set HostStatus(name,"Status")=rs.Get("Status")
 		Set HostStatus(name,"AdapterState")=rs.Get("AdapterState")
 		Set HostStatus(name,"LastAction")=rs.Get("LastActivity")
 		Set HostStatus(name,"ElapsedTime")=rs.Get("ElapsedTime")
 		set HostStatus(name,"Queue")=rs.Get("Queue")
 		Set HostStatus(name,"Count")=rs.Get("Count")
 	} 
 	
 	Kill %session.Data("SysListArray")	
	 merge %session.Data("SysListArray")=SysList
 
 	Kill %session.Data("HostStatusArray")
 	merge %session.Data("HostStatusArray")=HostStatus
 	
 	Q 1
]]></Implementation>
</Method>

<Method name="ToggleInterface">
<ClassMethod>1</ClassMethod>
<FormalSpec>InterfaceName:%String,CurrentStatus:%String</FormalSpec>
<Language>cache</Language>
<Implementation><![CDATA[
 		if ( CurrentStatus=1) {
 			set status = ##class(Ens.Director).EnableConfigItem(InterfaceName,0)
 		} else {
 			set status = ##class(Ens.Director).EnableConfigItem(InterfaceName,1)
 		}
 		
 		Q 1
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.MonitorDownload">
<Description>
</Description>
<Super>%CSP.Page</Super>
<TimeChanged>63728,38887.214877</TimeChanged>
<TimeCreated>61229,39958.946012</TimeCreated>

<Method name="OnPreHTTP">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set %response.ContentType = "application/force-download"
	d %response.SetHeader("Content-disposition", "attachment; filename=MedicalisMonitor.csv")
	Quit 1
]]></Implementation>
</Method>

<Method name="OnPage">
<Description><![CDATA[
Event handler for <b>PAGE</b> event: this is invoked in order to  
generate the content of a csp page.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	s EnsSysDir = ##class(%File).ParentDirectoryName(##class(%File).ManagerDirectory())
	
	set pFileStream = ##class(%FileCharacterStream).%New()
	Set pFileStream.Filename = ##class(%File).NormalizeFilename(EnsSysDir_"MedicalisMonitor\"_%request.Get("filename"))
	
	while 'pFileStream.AtEnd {
		w pFileStream.ReadLine(),!		
	}
	
	kill pFileStream
	d ##class(%File).Delete(##class(%File).NormalizeFilename(EnsSysDir_"MedicalisMonitor\"_%request.Get("filename")))
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.MsgFields">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>62675,39412.320397</TimeChanged>
<TimeCreated>60908,31118.460678</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	if ##class(%SYSTEM.Security).Check("%All") = "READ,WRITE,USE" { set Allowed = 1 }
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
   <script language=javascript>
	<!--
	function Initialize()
	{

	}
	var m_Parent = dialogArguments;

	function ReturnField(ItemSpan,Field) {
		m_Parent.SetField(ItemSpan,Field)
		window.close();
	}
  -->
   </script>
  >
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set sMsgClass = %request.Get("MsgClass")
	set sItemSpan = %request.Get("ItemSpan")

	Set rsMsgClass = ##class(%ResultSet).%New()
	Do rsMsgClass.Prepare("Select Name from %Dictionary.PropertyDefinition where UCASE(parent) = UCASE('"_sMsgClass_"') Order by Name")
	do rsMsgClass.Execute()

	set propcount = 1

	w "<table><tr><td>"

	w "<input type=""radio"" name=""MsgFieldRadio"" id=""MsgFieldRadio"" value="""" onclick=ReturnField('"_sItemSpan_"',this.value)><font size=""2"">All</font><br>"	

	While (rsMsgClass.Next()) {

		set propertyname = rsMsgClass.Get("Name") 
	
		w "<input type=""radio"" name=""MsgFieldRadio"" id=""MsgFieldRadio"" value="""_propertyname_""" onclick=ReturnField('"_sItemSpan_"',this.value)><font size=""2"">"_propertyname_"</font><br>"
	
		set propcount = propcount + 1
	
		If propcount = 35 {
		
			w "</td><td>"
			set propcount = 0
		}
	

	}

	w "</td></tr></table>"
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.RefAddAttr">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>63281,57133.567131</TimeChanged>
<TimeCreated>60908,31118.460678</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	// Req#1 - Phegel Changed to use the Reference resource so you don't need to have %All permissions to use the Reference Attribute Definition page
	if ##class(%SYSTEM.Security).Check("Reference", "WRITE")
		{ 
			set Allowed = 1 
		}
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
   <script language=javascript>
	<!--
	function Initialize()
	{

	}
	function Hello() {
		alert('Hello');
	}
	
	
	
	function loadrefparamters() {
		
			
		var xselected=document.getElementById("Name").selectedIndex;
		var xrefV=document.getElementById("Name").options[xselected].value;
		var xrefT=document.getElementById("Name").options[xselected].text;
		
		document.location="IIBASupport.csp?PageName=RefAddAttr&ID="+xrefV
		
		//alert('selected xref: '+xrefT+' ('+xrefV+')');
		
		document.getElementById("reftable").href='IIBASupport.csp?PageName=Reference&ID='+xrefV
		
		var principlesystem = #server(..GetPrincipleSystem(xrefV))#;
		document.getElementById("PrincipleName").value=principlesystem;
		
		var reflist = #server(..GetRefSystems(xrefV))#;
		
		// Remove all current related systems options
		var rel=document.getElementById("relatedsys");
		for (i=rel.length;i>-1;i--) {
			//alert('removing '+i);
			rel.remove(i);
		}
		
		// Add new related systems options
		rel.selected=0;
				
		var refarray=reflist.split("|");
		for (i=0;i<refarray.length;i++) {
			elementarray=refarray[i].split("^");
			option=document.createElement("option");
			option.text=elementarray[0];
			option.value="RS"+elementarray[1];
			rel.add(option);
		}
		
	}
	
	function loadattrclass() {
		
		
		var rselected=document.getElementById("relatedsys").selectedIndex;
		var rrefV=document.getElementById("relatedsys").options[rselected].value;
		var rrefT=document.getElementById("relatedsys").options[rselected].text;
		
		rrefV=rrefV.substr(2,rrefV.length);
		
		//alert("get attr class - value: "+rrefV+", text: "+rrefT)
		
		var attrclass = #server(..GetAttrClass(rrefV,rrefT))#;
		
		//alert("Attribute class: "+attrclass);
				
		document.getElementById("attrclass").value=attrclass;
		
		
	}
	
	function saveattr() {
		
				
		var xselected=document.getElementById("Name").selectedIndex;
		var xrefV=document.getElementById("Name").options[xselected].value;
		var xrefT=document.getElementById("Name").options[xselected].text;
		
		var refsysname=document.getElementById("relatedsys").options[document.getElementById("relatedsys").selectedIndex].text;
		var refsysid=document.getElementById("relatedsys").options[document.getElementById("relatedsys").selectedIndex].value;
		
		refsysid=refsysid.substr(2,refsysid.length);
		
		var newattrclass=document.getElementById("attrclass").value;
		
		if (xrefV=="") {
			alert('xRef table required');
			return(0);
		}
		
		if (refsysname=="") {
			alert('Related System required');
			return(0);
		}
		
		if (newattrclass=="") {
			alert('Attribute class is required');
			return(0);
		}
		
		if (#server(..ValidateAttrClass(newattrclass))# == 0 ) {
			alert('Attribute class does not exist!\nCSave aborted.');
			return(0);
		}
		
		// has the attribute class changed?
		var curattrclass = #server(..GetAttrClass(refsysid,refsysname))#;	
		//alert("current attr class: "+curattrclass+", new attr class: "+newattrclass);
			
		if ( (curattrclass!="") && (newattrclass != curattrclass)) {
			//alert("You are changing the attr class");
			
			var r=confirm("The attribute class is changing from '"+curattrclass+"' to '"+newattrclass+"'. \nAll attribute entries will be deleted. \nDo you want to continue?");
			
			if (r==true) {
				var rv=#server(..DeleteAttrEntries(refsysid,curattrclass))#;
				//alert("Delete attribute entries returned: "+rv);
				
			} else {
				alert('Attribute class defition save/update aborted');
				return(0);
			} 
				
		}
		
		
				
		//alert('xref: '+xrefV+', reference system: '+refsysid+', attribute class: '+newattrclass);
		
		var updatedef = #server(..SaveAttrClass(xrefV,refsysid,newattrclass))#;
		
		//alert('save return value: '+updatedef);
		
		if (updatedef==1) {
			alert('Attribute class definition save/update successfull');
		} else {
			alert('Attribute class definition save/update failed');
		}
		
	}
	
	function removeattr() {
		
		
		var xselected=document.getElementById("Name").selectedIndex;
		var xrefV=document.getElementById("Name").options[xselected].value;
		var xrefT=document.getElementById("Name").options[xselected].text;
		
		var refsysname=document.getElementById("relatedsys").options[document.getElementById("relatedsys").selectedIndex].text;
		var refsysid=document.getElementById("relatedsys").options[document.getElementById("relatedsys").selectedIndex].value;
		
		refsysid=refsysid.substr(2,refsysid.length);
		
		var curattrclass = #server(..GetAttrClass(refsysid,refsysname))#;
		
		var newattrclass=document.getElementById("attrclass").value;
		
		if ( (curattrclass !="" ) && (curattrclass != newattrclass) ) {
			alert('Current attribure class is: ' + curattrclass);
			document.getElementById("attrclass").value=curattrclass;
		}
		
		if (curattrclass != "" ) {
			var r=confirm("Remove Attribute Class. "+curattrclass+"\nAll Attribute entries will be deleted!! \nDo you want to continue?");
			var rv=#server(..DeleteAttrEntries(refsysid,curattrclass))#;
		
			var updatedef = #server(..SaveAttrClass(xrefV,refsysid,""))#;
		
			if (updatedef == 1) {
				document.getElementById("attrclass").value="";
			}
			
			alert("Attribute class '"+curattrclass+" and all attribute values removed successfully");
		} else {
			document.getElementById("attrclass").value="";
		}
	
	
	}
	
	
	
	function validateattr() {
		var attrclass=document.getElementById("attrclass").value;
		
		
		var validate=#server(..ValidateAttrClass(attrclass))#;
		//alert("Validate returned: "+validate);
		
		if (validate == 0 ) {
			alert('Attribute class "'+attrclass+'" does not exist!');
			
		} 
		
		return(validate);
	}

	function cancelattr() {
		document.location='IIBASupport.csp?PageName=Reference';
	}


	
  -->
   </script>
  >
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    
	set %session.Data("refID")=%request.Get("ID")
	
	w "<table><tr><td class=""LayoutContentCol"" width=""20%"" ><div class=""DetailCommand"">"
	w "&nbsp;"
        
    w "<select NAME='Name' ID='Name' onchange='loadrefparamters()'>"
	w "<option VALUE="""">Select Reference..."

	set rs = ##class(%ResultSet).%New()
	do rs.Prepare("select ID, Name, Resource from IIBAENSEMBLE_Reference.PrincipalType order by Name")
	do rs.Execute()
	While rs.Next() {
		if (rs.Data("Resource")="")||(##class(%SYSTEM.Security).Check(rs.Data("Resource")) = "READ,WRITE,USE") {
			if rs.Data("ID") = %request.Get("ID"){
				w "<option VALUE="""_rs.Data("ID")_""" selected>"_rs.Data("Name")
			} else {
				w "<option VALUE="""_rs.Data("ID")_""">"_rs.Data("Name")
			}
		}	
	}

	w "</select>"
	w "&nbsp;|&nbsp;"
	set HideMultiples = %request.Get("HideMultiples")
	set %session.Data("HideMultiples") = %request.Get("HideMultiples")
	
	if ##class(%SYSTEM.Security).Check("%All") = "READ,WRITE,USE" {
		w "|"
		w "<A class=""DetailCommand"" target=""_top"" id='linkRefAddAttr' href=""IIBASupport.csp?PageName=RefAddAttr""><nobr>&nbsp;Reference Attribute Def&nbsp;</nobr></A>"
		w "<A class=""DetailCommand"" target='_top' id='reftable' href='IIBASupport.csp?PageName=Reference&ID="_%request.Get("ID")_"' onclick='loadreftable();return false'><nobr>&nbsp;Ref Table</nobr></A>"
	}
	w "|"
	w "<a class=""DetailCommand"" target=""_top"" href="""" onclick=""importFormShow();return false""><nobr>&nbsp;Import&nbsp;</nobr></A>"
	
	w "</div>"
	w "</td></tr></table>"


	W "<Form Name=""xRefAttributeAdd"" id=""xRefAttributeAdd"">"
	W "<Table cellpadding=10><TR><TD>"
	W "<Table>"
	
	W "<TR><TD>Principle System</TD><TD><input type='text' id='PrincipleName' "
	
	if (%request.Get("ID")'="") {
		w "value='"_..GetPrincipleSystem(%request.Get("ID"))_"' />"
	} else {
		W "value='' />"
	}
	W "</TD></TR>"
	
	W "<TR><TD>Related System</TD>"
	//  ### one row per parameter / threshold
	W "<TD><Select name='relatedsys' id='relatedsys' onchange='loadattrclass()'>"
	if (%request.Get("ID")'="") {
		s rellist=..GetRefSystems(%request.Get("ID"))
		for i=1:1:$L(rellist,"|") {
			w "<OPTION value='RS"_$P($P(rellist,"|",i),"^",2)_"'>"_$P($P(rellist,"|",i),"^",1)_"</OPTION>"
		}
	} else {
		w "<OPTION value=''/>"
	}
	w "</SELECT></TD></TR>"
	
	W "<TR><TD>Attribute Class</TD><TD><input type='text' name='attrclass' id='attrclass' value='' onchange='validateattr()' /></TD></TR>"
	
	w "<TR>"
	W "<TD><Input type='button' name='attrsave' id='attrsave' value='Save' onclick='saveattr()' /></TD>"
	w "<TD><Input type='button' name='attrcancel' id='attrcancel' value='Cancel' onclick='cancelattr()' /></TD>"
	w "<TD><Input type='button' name='attrremove' id='attrremove' value='remove' onclick='removeattr()' /></TD>"
	W "</TR>"

	W "</Table>"
	W "</TR></TD>"
	W "</Table>"
	W "</Form>"
]]></Implementation>
</Method>

<Method name="GetRefSystems">
<ClassMethod>1</ClassMethod>
<FormalSpec>PrincipleId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	S RefList=""
	
	s rs=##class(%ResultSet).%New()
	d rs.Prepare("select distinct ID,System from  IIBAENSEMBLE_Reference.RelatedType where PrincipalType='"_PrincipleId_"'")
	d rs.Execute()
	while rs.Next() {
		s RefList=RefList_"|"_rs.GetDataByName("System")_"^"_rs.GetDataByName("ID")
	}
	
	
	
	Quit RefList
]]></Implementation>
</Method>

<Method name="GetPrincipleSystem">
<ClassMethod>1</ClassMethod>
<FormalSpec>PrincipleId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	S PrincipleSys=""
	
	s rs=##class(%ResultSet).%New()
	d rs.Prepare("select System from   IIBAENSEMBLE_Reference.PrincipalType where ID='"_PrincipleId_"'")
	d rs.Execute()
	while rs.Next() {
		s PrincipleSys=rs.GetDataByName("System")
	}
	
	
	Quit PrincipleSys
]]></Implementation>
</Method>

<Method name="GetAttrClass">
<ClassMethod>1</ClassMethod>
<FormalSpec>RelatedId:%String,System:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	S AttrClass=""
	
	s rs=##class(%ResultSet).%New()
	s qry="select AttrClass from IIBAENSEMBLE_Reference.RelatedType where ID='"_RelatedId_"' and System='"_System_"'"
		
	d rs.Prepare(qry)
	d rs.Execute()
	d rs.Next() 
	s AttrClass=rs.GetDataByName("attrClass")
	
	If AttrClass=$C(0) s AttrClass=""
	
	Quit AttrClass
]]></Implementation>
</Method>

<Method name="SaveAttrClass">
<ClassMethod>1</ClassMethod>
<FormalSpec>PrincipleId:%String,AttrSystemid:%String,AttrClass:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	set returnval=$$$OK
	
	if (AttrClass'="") {
		s count=..ValidateAttrClass(AttrClass)
		if (count=0) {
			Q "Class does not exist or does not have properties "_count
		}
	}
	
	
	
	Set rs = ##class(%ResultSet).%New()
	s qry="Update IIBAENSEMBLE_Reference.RelatedType set AttrClass='"_AttrClass_"' where ID="_AttrSystemid
	
	Do rs.Prepare(qry)
	set tSC = rs.Execute() Quit:$$$ISERR(tSC) tSC
	
	Quit returnval
]]></Implementation>
</Method>

<Method name="ValidateAttrClass">
<ClassMethod>1</ClassMethod>
<FormalSpec>AttrClass:%String</FormalSpec>
<Implementation><![CDATA[
	
	
	
	Set returnval=-1
	
	Set rs = ##class(%ResultSet).%New()
	s qry="Select count(*) as rowcount from %Dictionary.PropertyDefinition where parent = '"_AttrClass_"'"
		
	Do rs.Prepare(qry)
	set tSC = rs.Execute() Quit:$$$ISERR(tSC) tSC
	do rs.Next() 
	Set returnval=rs.GetDataByName("rowcount")
	
	
	Quit returnval
]]></Implementation>
</Method>

<Method name="DeleteAttrEntries">
<ClassMethod>1</ClassMethod>
<FormalSpec>RelatedId:%String,AttrClass:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	s rs=##class(%ResultSet).%New()
	s qry="Delete from "_AttrClass_" where ID in (select attrId from IIBAENSEMBLE_Reference.Relatedvalue where relatedtype="_RelatedId_" )"
	
	s tSC=rs.Prepare(qry) Quit:$$$ISERR(tSC) tSC
	s tSC=rs.Execute()  Quit:$$$ISERR(tSC) tSC
	
	d rs.Close()
	s rs=##class(%ResultSet).%New()
	/*
	s qry="update IIBAENSEMBLE_Reference.Relatedvalue set attrId='' where RelatedType="_RelatedId
	d rs.Prepare(qry)
	s tSC=rs.Execute() Quit:$$$ISERR(tSC) tSC
	*/
	
	s qry="select ID from IIBAENSEMBLE_Reference.Relatedvalue where RelatedType="_RelatedId
	d rs.Prepare()
	s tSC=rs.Execute() Quit:$$$ISERR(tSC) tSC
	
	while( rs.Next() ) {
		s id=rs.GetDataByName("ID")
		s obj=##class(IIBAENSEMBLE.Reference.RelatedValue).%OpenId(ID)
		s obj.attrId=""
		d obj.%Save()
		
	}
	
	Q $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.RefData">
<Description>
</Description>
<Super>%CSP.Page</Super>
<TimeChanged>61466,42951.148704</TimeChanged>
<TimeCreated>61229,39958.946012</TimeCreated>

<Method name="OnPreHTTP">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set %response.ContentType = "text/html; charset=UTF-8"
	//d %response.SetHeader("Content-disposition", "attachment; filename="_%request.Get("filename"))
	Quit 1
]]></Implementation>
</Method>

<Method name="OnPage">
<Description><![CDATA[
Event handler for <b>PAGE</b> event: this is invoked in order to  
generate the content of a csp page.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	//If the SRSId value in the session is empty, create and save a new SRS and save the ID in the session
	if $G(%session.Data("SRSId"))="" {
		set oPT = ##class(IIBAENSEMBLE.Reference.PrincipalType).%OpenId(%session.Data("sPTID"))
		set SRS = oPT.getScrollableResultSet()
		d SRS.%Save()
		set %session.Data("SRSId") = SRS.%Id()
		d SRS.Close()
	}
	
	set ^CacheTempTraceSRS = %session.Data("SRSId")
	
	//Loop through the parameters in the request object and find any that start with "filter"
	//The filter parameters are a string representation of js array of objects:  filter[0][field] or filter[0][data][value]
	//if filter parameters are found, build an ArrayOfDataTypes object from them for passing to the SRS OpenIdFiltered method
	set name="", filter=""
	For { set name = $O(%request.Data(name)) Q:name="" 
		if $E(name,1,6)="filter" {
			set filter($E(name,8,$FIND(name,"]")-2)) = $E(name,10,$L(name))
		}
	}
	
	set arrFilter = ""
	if $D(filter)>1 {
		Set arrFilter=##class(%ArrayOfDataTypes).%New()
		set filterNum=""
		For { set filterNum = $O(filter(filterNum)) Q:filterNum=""
			set field = %request.Get("filter["_filterNum_"][field]")
			set value = %request.Get("filter["_filterNum_"][data][value]")
			d arrFilter.SetAt(value,field)
		}
	} 
	
	//If filter parameters were found and a arrayofdataobjects created, use the custom SRS to filter the data as it is loaded - else use the standard SRS
	if $ISOBJECT(arrFilter) {
		set SRS = ##class(IIBAENSEMBLE.cls.ScrollableResultSet).OpenIdFiltered(%session.Data("SRSId"),arrFilter)
	} else {
		set SRS = ##class(%ScrollableResultSet).%OpenId(%session.Data("SRSId"))
	}
	
	if '$ISOBJECT(SRS) {
		w %session.Data("SRSId")
	} else {	
	
		if %request.Get("start")'="" { set start = %request.Get("start")+1 } else { set start = 1 }
	
		if %request.Get("limit")'="" { set limit = %request.Get("limit") } else { set limit = 25 }
		
		if SRS.Count() < 25 set limit = SRS.Count()
		
		w "{'total':"_SRS.Count()_",'data':["
	
		if SRS.Count() > 0 {
			set countColumns = SRS.GetColumnCount()
			for i=start:1:start+limit-1 {
				set tSC = SRS.CurrRowSet(i)
				if tSC {
					if i>start w ","
					w "{'PTId':'"_SRS.Data("PTId")_"'"
					w ",'PVId':'"_SRS.Data("PVId")_"'"
					w ",'PValue':'"_SRS.Data("PValue")_"'"
					for j=3:1:countColumns {
						w ",'"_SRS.GetColumnName(j)_"':"

 							if $A(SRS.GetData(j))'=0{
	 							w "'"_SRS.GetData(j)_"'"
 							} else {
	 							w "''"
 							}
				
					}	
					w "}"
			
				}
			}
		}
	 
		w "]}"
	
		d SRS.%Save()
		
	 
	}
	 
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.RefDownload">
<Description>
</Description>
<Super>%CSP.Page</Super>
<TimeChanged>62075,59129.518194</TimeChanged>
<TimeCreated>61229,39958.946012</TimeCreated>

<Method name="OnPreHTTP">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	set %response.ContentType = "application/force-download"
	d %response.SetHeader("Content-disposition", "attachment; filename=xRefExport.csv")
	Quit 1
]]></Implementation>
</Method>

<Method name="OnPage">
<Description><![CDATA[
Event handler for <b>PAGE</b> event: this is invoked in order to  
generate the content of a csp page.]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	
	s EnsSysDir = ##class(%File).ParentDirectoryName(##class(%File).ManagerDirectory())
	
	set pFileStream = ##class(%FileCharacterStream).%New()
	Set pFileStream.Filename = ##class(%File).NormalizeFilename(EnsSysDir_"xRefExports\"_%request.Get("filename"))
	
	while 'pFileStream.AtEnd {
		w pFileStream.ReadLine(),!		
	}
	
	kill pFileStream
	d ##class(%File).Delete(##class(%File).NormalizeFilename(EnsSysDir_"xRefExports\"_%request.Get("filename")))
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.Reference">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>63732,40585.482682</TimeChanged>
<TimeCreated>60908,31118.460678</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	// Req#1 - Phegel Changed to use the Reference resource so you don't need to have %All permissions to use.
	if ##class(%SYSTEM.Security).Check("Reference", "USE")
		{ 
			set Allowed = 1 
		}
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
      	
	<script type="text/javascript" src="modalbox/modalbox.js"></script>
	<link rel="stylesheet" href="modalbox/modalbox.css" type="text/css" />
	<link rel="stylesheet" type="text/css" href="ext/resources/css/ext-all.css" />
	<link rel="stylesheet" type="text/css" href="ext/examples/form/file-upload.css"/>

	<script type="text/javascript" src="ext/adapter/ext/ext-base.js"></script>
	<script type="text/javascript" src="ext/ext-all.js"></script>
	
	<script type="text/javascript" src="ext/examples/grid-filtering/menu/EditableItem.js"></script>
	<script type="text/javascript" src="ext/examples/grid-filtering/menu/RangeMenu.js"></script>
	<script type="text/javascript" src="ext/examples/grid-filtering/grid/GridFilters.js"></script>
	<script type="text/javascript" src="ext/examples/grid-filtering/grid/filter/Filter.js"></script>
	<script type="text/javascript" src="ext/examples/grid-filtering/grid/filter/StringFilter.js"></script>
	<script type="text/javascript" src="ext/examples/grid-filtering/grid/filter/DateFilter.js"></script>
	<script type="text/javascript" src="ext/examples/grid-filtering/grid/filter/ListFilter.js"></script>
	<script type="text/javascript" src="ext/examples/grid-filtering/grid/filter/NumericFilter.js"></script>
	<script type="text/javascript" src="ext/examples/grid-filtering/grid/filter/BooleanFilter.js"></script>
	<script type="text/javascript" src="ext/examples/form/FileUploadField.js"></script>
	

   <script language=javascript>
	
	
	function Initialize()
	{
		initGridFilters()
	}
	
	window.onbeforeunload = clearSRS;
	
	function clearSRS() {
		
		var OK = #server(..clearSRS())#; 
		 
	}
	
	function testCall(){
		#call(..testCall())#;
	}
	function reloadEXT(Id) {
		var OK = #server(..gridXRef(Id))#; 
	}
	function reload(ID) {
		var M = document.getElementById('HideMultiples').checked;
		window.location = 'IIBASupport.csp?PageName=Reference&ID='+ID+'&HideMultiples='+M
	}
	function showRValues(sPVID,sRTID)
	{
		var cId = 'RVL^'+sPVID+'^'+sRTID
		
				
		if (document.getElementById(cId).innerHTML != '...')
		{
		
			while (document.getElementById(cId).hasChildNodes())
			{
				document.getElementById(cId).removeChild(document.getElementById(cId).childNodes[0]);
			}
			document.getElementById(cId).className='less'
			document.getElementById(cId).innerHTML = '...';
		}
		else
		{
			document.getElementById(cId).innerHTML = '';
			document.getElementById(cId).className='more'
			var done = #server(..showRValues(sPVID,sRTID))#;
		}
		
	}
	function columnFilter()
	{
		var rowFlt = document.getElementById('refTableHeader').rows[0].cells;
		var sFilters = '';
		for ( var i=0; i<rowFlt.length-1; ++i) {
			//alert(i+' '+rowFlt[i].childNodes[0].id);
			// SysType^ID^filter value
			var sSysType = rowFlt[i].childNodes[0].id.split('^')[1].toString()
			var sSysId = rowFlt[i].childNodes[0].id.split('^')[2].toString()
			var sFilter = rowFlt[i].childNodes[0].value;
			sFilters += sSysType+'^'+sSysId+'^'+sFilter+','
		}
		var done = #server(..getFilterPValues(sFilters))#;
		
		
	}
	

	function rowEdit(PVId) 
	{
		var row=document.getElementById('row'+PVId);
		//alert(row.cells.length);
		
		var sPTPrincipalRole = #server(..getPrincipalRole())#;
		
		for (var i=0; i<row.cells.length -2; ++i) {
			
			var cId = row.cells[i].id
			if ((cId.split("^")[0]=='RVL')&&(row.cells[i].innerHTML == '...'))
			{
				showRValues(cId.split("^")[1],cId.split("^")[2])
				row.cells[i].onclick = function () {};
				
				
			} else if (cId.split("^")[0]=='RVL') {
				row.cells[i].onclick = function () {};
				
			}
			
			if (row.cells[i].firstChild.nodeType==1)
			{
				
				var n=row.cells[i].childNodes;
				for (j=0; j<n.length; j++)
				{
					
					var nId=n[j].id
					if (nId.split("^")[0]=='RVD')
					{
						
						var tId = 'RVI^'+nId.split("^")[1]+'^'+nId.split("^")[2];
						var value = n[j].innerHTML;
						var newDiv = document.createElement('div');
						newDiv.className='blockdisplay';
						newDiv.id='layoutdiv';
						var newInput = document.createElement('input');
						newInput.type='text';
						newInput.id=tId;
						newInput.value=value.replace(/\&nbsp;/g,' ');
						newInput.className='edit'
						newDiv.appendChild(newInput);
						var newImg = document.createElement('img');
						newImg.src = 'customimages/trash.gif'
						newImg.id = 'trash^'+tId
						newImg.className = 'inlinedisplay'
						newImg.onclick = function () {removeRV(this.id)};
						newDiv.appendChild(newImg);
						row.cells[i].replaceChild(newDiv,n[j]);
						
					}
					if (nId.split("^")[0]=='PVD')
					{
						var tId = 'PVI^'+nId.split("^")[1];
						var value = n[j].innerHTML;
						var newInput = document.createElement('input');
						newInput.type='text';
						newInput.id=tId;
						newInput.value=value.replace(/\&nbsp;/g,' ');
						row.cells[i].replaceChild(newInput,n[j]);
					}
				}			
			
			} else {
				var value = row.cells[i].innerHTML;
				value = value.replace(/\&nbsp;$/,"");
				var tId = 'RVI^^'+cId.split("^")[2]
				row.cells[i].innerHTML='<input type="text" id="'+tId+'" value="'+value+'" class="edit">';
			}
			
			if ((cId.split("^")[0]!='PV')&&(sPTPrincipalRole=="target"))
			{

				var newImg = document.createElement('img');
				newImg.src = 'customimages/plus.gif'
				newImg.id = 'btn^'+cId.split("^")[0]+'^'+cId.split("^")[1]+'^'+cId.split("^")[2];
				newImg.onclick = function () {addEmptyInput(this.id)};
				row.cells[i].appendChild(newImg);
			}
			
			
			
		}
		
		row.cells[row.cells.length -2].innerHTML='<img title="Save" src="customimages/save.gif" id="save" onclick="rowEditSave(\''+PVId+'\');" >';
		row.cells[row.cells.length -1].innerHTML='<img title="Cancel" src="customimages/cancel.gif" id="cancel" onclick="rowEditCancel(\''+PVId+'\');" >';
		
		
	}
	
	function addEmptyInput(btnId) 
	{
		//alert(btnId);
		
		var c = document.getElementById(btnId.split("^")[1]+'^'+btnId.split("^")[2]+'^'+btnId.split("^")[3]);
		var b = document.getElementById(btnId);
		var newDiv = document.createElement('div');
		newDiv.className='blockdisplay';
		var newInput = document.createElement('input');
		newInput.type='text';
		newInput.className='edit'
		newInput.id='RVI^^'+btnId.split("^")[3];
		newDiv.appendChild(newInput)
		c.insertBefore(newDiv,b);		
	}
	
	function rowDelete(PVId)
	{
		var confMsg = #server(..rowDeleteConfMsg(PVId))#;
		
		var r=confirm(confMsg)
		if (r==true)
		{
			var done = #server(..rowDelete(PVId))#;
	
			var row=document.getElementById('row'+PVId);
			document.getElementById('refTable').deleteRow(row.rowIndex);

		}

	}
	function removeRV(RVIId)
	{
		
		var RVId = RVIId.split("^")[2]
		
		var RVCount = #server(..removeRVcheckatleastoneremains(RVId))#;
		if (RVCount < 2) {
			alert("At least one Related Value must remain.\n")
			return;
		}
		
		var confMsg = #server(..removeRVConfMsg(RVId))#;
		var r=confirm(confMsg)
		if (r==true)
		{
			var div=document.getElementById(RVIId).parentNode
			while (div.hasChildNodes())
			{
				div.removeChild(div.childNodes[0]);
			}
			var c = div.parentNode
			var PVId = c.id.split("^")[1]
			var done = #server(..removeRV(RVId,PVId))#;
			var row=document.getElementById('row'+PVId);
			//Req#1 - PHegel - Added permission check to Javascript for editing cells
			var bHasPermission = #server(..GetHasResourcePermission())#;
			if(bHasPermission){
				row.cells[row.cells.length -2].innerHTML='<img title="Edit" src="customimages/edit.gif" id="edit" onclick="rowEdit(\''+PVId+'\');" >';
				row.cells[row.cells.length -1].innerHTML='<img title="Delete" src="customimages/trash_bold.gif" id="delete" onclick="rowDelete(\''+PVId+'\');" >';
			}
		}
	}
	
	function rowSave() 
	{
		
		var row=document.getElementById('rowIns');
		
		var sPTPrincipalRole = #server(..getPrincipalRole())#;
		
		var sRValues = '';
		for ( var i=0; i<row.cells.length -1; ++i) {
			
			
			if ((sPTPrincipalRole=="target")&&(i==row.cells.length -2))
			{
				var sPValue = 'PVI^|'+document.getElementById('InsPV').value			
			}
			else if ((sPTPrincipalRole=="source")&&(i==0))
			{
				var sPValue = 'PVI^|'+document.getElementById('InsPV').value
			}
			else
			{
				var cId = row.cells[i].id
				var tRValue = row.cells[i].childNodes[0].value
				sRValues += String.fromCharCode(10)+'RVI^^'+cId.split("^")[1]+'|'+tRValue	
			}			
		}
		
		var alertstring = "";
		if (sPValue.split("|")[1]=="")
			alertstring = "The Principal Value must not be empty.\n\n";
		
		var RValueExists = 0;
		
		for ( var i=1; i<sRValues.split(String.fromCharCode(10)).length; ++i) {
			if (sRValues.split(String.fromCharCode(10))[i].split("|")[1]!="")
			{
				RValueExists = 1
			}
		}
		
		if ((!RValueExists)||(alertstring!=""))
		{
			if (!RValueExists)
				alertstring += "At least one Related Value must be entered.\n";
			alert(alertstring);
			return;
		}
			
		
		var sValues = sPValue+sRValues
		
		//alert(sValues);
		
		var done = #server(..rowEditSave('None',sValues))#;
		
		for ( var i=0; i<row.cells.length -1; ++i) {
			
			
			if ((sPTPrincipalRole=="target")&&(i==row.cells.length -2))
			{
				document.getElementById('InsPV').value = '';			
			}
			else if ((sPTPrincipalRole=="source")&&(i==0))
			{
				document.getElementById('InsPV').value = '';
			}
			else
			{
				row.cells[i].childNodes[0].value = '';
			}			
		}
		
		
		
	}
	
	function rowEditSave(PVId)
	{
		//alert('pt0');
		//DAP - internal server error issue when adding a related value-table is too large.
		var row=document.getElementById('row'+PVId);
		
		var sPTPrincipalRole = #server(..getPrincipalRole())#;
		
		var sRValues = '';
		
		for (var i=0; i<row.cells.length -2; ++i) {
				
			var n=row.cells[i].childNodes;
			for (j=0; j<n.length; j++)
			{
				var nId=n[j].id	
				//alert(nId)
				
				{
					var ln = n[j].childNodes;
					for (k=0; k<ln.length; k++)
					{
						var lnId=ln[k].id	
						if (lnId.split("^")[0]=='RVI')
						{
							sRValues += String.fromCharCode(10)+lnId+'|'+ln[k].value;
						}
					}
				}
				if (nId.split("^")[0]=='RVI')
				{
					sRValues += String.fromCharCode(10)+nId+'|'+n[j].value;
				}
				if (nId.split("^")[0]=='PVI')
				{
					var sPValue = nId+'|'+n[j].value;
				}
			}			
		}
		
		var alertstring = "";
		if (sPValue.split("|")[1]=="")
			alertstring = "The Principal Value must not be empty.\n\n";
		
		var RValueExists = 0;
		
		for ( var i=1; i<sRValues.split(String.fromCharCode(10)).length; ++i) {
			if (sRValues.split(String.fromCharCode(10))[i].split("|")[1]!="")
			{
				RValueExists = 1
			}
		}
		
		if ((!RValueExists)||(alertstring!=""))
		{
			if (!RValueExists)
				alertstring += "At least one Related Value must be entered.\n";
			alert(alertstring);
			return;
		}
		
		var sValues = sPValue+sRValues
		
		//alert(sValues.length);
		//alert('pt1');
		var done = #server(..rowEditSave(PVId,sValues))#;
		//alert('pt3');
		//Req#1 - PHegel - Added permission check to Javascript for editing cells
		var bHasPermission = #server(..GetHasResourcePermission())#;
		if(bHasPermission){
			row.cells[row.cells.length -2].innerHTML='<img title="Edit" src="customimages/edit.gif" id="edit" onclick="rowEdit(\''+PVId+'\');" >';
			row.cells[row.cells.length -1].innerHTML='<img title="Delete" src="customimages/trash_bold.gif" id="delete" onclick="rowDelete(\''+PVId+'\');" >';
		}
				
	}
	
	function rowEditCancel(PVId)
	{
		var done = #server(..rowEditCancel(PVId))#;
		
		var row=document.getElementById('row'+PVId);
		//Req#1 - PHegel - Added permission check to Javascript for editing cells
		var bHasPermission = #server(..GetHasResourcePermission())#;
		if(bHasPermission){
			row.cells[row.cells.length -2].innerHTML='<img title="Edit" src="customimages/edit.gif" id="edit" onclick="rowEdit(\''+PVId+'\');" >';
			row.cells[row.cells.length -1].innerHTML='<img title="Delete" src="customimages/trash_bold.gif" id="delete" onclick="rowDelete(\''+PVId+'\');" >';
		}
		
	}
	function defaultsEdit()
	{
		sm('modalDefaultsDiv',(#server(..getRTCount())#*155)+40,120)
	}
	function defaultsSaveChanges()
	{
		var table=$('defaultsTable');
		var defaultValues;
		
		for (i=0; i<table.rows[1].cells.length; i++){
			defaultValues += ","+table.rows[1].cells[i].firstChild.id+'|'+table.rows[1].cells[i].firstChild.value
		}
		var save = #server(..saveDefaultValues(defaultValues))#;
	}
	function editResource()
	{
		sm('modalEditResourceDiv',400,300)
	}
	function editResourceSave()
	{
		var editResource = $('editResourceValue').value;
		var save = #server(..saveEditResource(editResource))#;
	}
	function addRelated()
	{
		sm('modalAddRelatedDiv',400,300)
	}
	function addRelatedSave()
	{
		var addRTRTS = $('addRTRTS').value;
		
		if (addRTRTS=='')
		{
			alert('All fields are required');
			return;
		}
		
		var save = #server(..saveAddRelated(addRTRTS))#;
		if (save!="Not Saved")
			reload(save);
	}
	function newRef()
	{
		sm('modalNewRefDiv',400,400)
	}
	function newRefSave()
	{
		var newPTName = $('newPTName').value;
		var newPTS = $('newPTS').value;
		var newPTPR = $('newPTPR').value;
		var newRTRTS = $('newRTRTS').value;
		
		if (newPTName==''||newPTS==''||newPTPR==''||newRTRTS=='')
		{
			alert('All fields are required');
			return;
		}
		
		var save = #server(..saveNewRef(newPTName,newPTS,newPTPR,newRTRTS))#;
		if (save!="Not Saved")
			reload(save);
	}
	
	function importFormShow()
	{
		sm('modalImport',500,300)
	}
	
	var importparamsobj;
	
	function loadupdateImportProgress()
	{
		importparamsobj = eval('('+importparams+')');
		if (importparamsobj.validated)
		{
			sm('modalImportProgress',250,200);
			updateImportProgress();
		} else {
			alert("The import file could not be processed.\n\nPlease Ensure the Header Row is in the format of:\n\nPTName,PTSystem,PTRole,PValue,RTSystem,RValue");
		}
	}
	function updateImportProgress()
	{
		var importstatus = #server(..getImportStatus(importparamsobj.SessionId))#
		if (importstatus!='')
		{
			importstatusobj = eval('('+importstatus+')');
			$('importstatus').innerHTML = importstatusobj.status;
			$('importprogress').innerHTML = importstatusobj.rvcount.toString() + ' of ' +importstatusobj.totalcount.toString();
		} else {
			$('importstatus').innerHTML = 'Initializing, please wait...';
			$('importprogress').innerHTML = '';
		}
		
		if ($('importstatus').innerHTML!='Complete')
		{	
			importprogresstimer = setTimeout("updateImportProgress()", 500);
		} else {
			#server(..initImportData(importparamsobj.SessionId))#
		}
	}
	
	var exportRTList = new Array()
	function exportFormShow()
	{
		sm('modalExport',500,300)
	}
	function exportData(){
		
		var sRTSystems = ""
		var x = document.getElementsByName('exportRTs')
		for (var i = 0, len = x.length; i<len; i++)
		{
			if (x[i].checked == true)
			{
				sRTSystems += x[i].value + ","
			}
		}
		var sPTID = $('Name').value
		var filename = #server(..exportData(sPTID,sRTSystems))#
		window.location = 'IIBAENSEMBLE.csp.RefDownload.cls?filename='+filename
	}
	function removeRelatedFormShow()
	{
		sm('modalRemoveRelated',500,500)
	}
	function removeRelated(){
		
		var sRTSystems = ""
		var x = document.getElementsByName('removeRTs')
		for (var i = 0, len = x.length; i<len; i++)
		{
			if (x[i].checked == true)
			{
				sRTSystems += x[i].value + ","
			}
		}
		var sPTID = $('Name').value
		sPTID = #server(..removeRelated(sPTID,sRTSystems))#
		reload(sPTID);
		
	}
	var attrData = new Array();
	var attrFilters;
	var attrStore;
	var attrWin;
	var attrGridPanel;
	var xRefData = new Array();
	var xRefFilters;
	var xRefStore;
	var xRefWin;
	var xRefGridPanel;
	var eds;
	var fm = Ext.form;
	function attrEditGrid(sRTID){
		
		var AttributesPage = "IIBAENSEMBLE.Zen.xRefAttrPage.cls";
		var open = window.open(AttributesPage+"?ID="+sRTID,"_blank");
		//alert('in function atterEditGrid - sRTID is: '+sRTID);
		//#server(..attrEditGrid(sRTID))#
	}
	function attrSave(){
		attrStore.commitChanges();
	}
	function attrShowColumns() {
		var col = attrGridPanel.getColumnModel()
		for (i=0, len = col.getColumnCount(); i<len; i++)
		{
		    col.setHidden(i,false)
		}
		attrGridPanel.getTopToolbar().items.items[2].hide()
	}
	function attrUpdate(store, record, string){
		if (string=='commit')
		{
			var sRVID = record.get('id');
			var attrJSON = Ext.util.JSON.encode(record.data);
			#server(..attrUpSert(sRVID,attrJSON))#
		}
			
	}
	function attrBeforeClose(p){ 
	  if (attrStore.getModifiedRecords().length > 0) {
		Ext.Msg.show({
			title: 'Save Changes?',
			msg: 'There are unsaved edits on the attributes grid you are closing, should they be saved?',
			buttons: Ext.Msg.YESNO,
			fn: function (r) { if (r=='yes') { attrStore.commitChanges(); }	},
			icon: Ext.MessageBox.QUESTION
			})
	  }
	  return true;
	 }
	 function exportxRefAttrData(sRTID) {
		var filename = #server(..exportxRefAttrData(sRTID))#
		window.location = 'IIBAENSEMBLE.csp.RefDownload.cls?filename='+filename
	 }
	 var simpleImport;
	 function attrImport(sRTID)
	 {
		 var ok = #server(..attrImport(sRTID))#
	 }
	 function AttrDataReload(sRTID)
	 {
		 var ok = #server(..AttrDataReload(sRTID))#
	 }
	 function msg(title, msg){
        Ext.Msg.show({
            title: title, 
            msg: msg,
            minWidth: 200,
            modal: true,
            icon: Ext.Msg.INFO,
            buttons: Ext.Msg.OK
        });
    }
 
   </script>
  >
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	
    &html<
	
	<style type="text/css">
    /*Style classes for use on this page */
    .ico_save{ background-image: url("ext/examples/shared/icons/save.gif") !important; }
    .ico_export{ background-image: url("ext/examples/shared/icons/arrow-down.gif") !important; }
    .ico_import{ background-image: url("ext/examples/shared/icons/arrow-up.gif") !important; }
    .ico_col{ background-image: url("ext/resources/images/default/grid/columns.gif") !important; }
    th.clickme{
       cursor:pointer;
       cursor:hand;
     }
     .x-grid3-hd-row td.ux-filtered-column {   
        font-style: italic;  
        font-weight: bold;
    }
     td.less{
	   cursor:pointer;
       cursor:hand;
       text-align: center;
       font-weight: bolder;
       width: 155px;
     }
     td.more{
	   cursor:pointer;
       cursor:hand;
       text-align: left;
       font-weight: normal;
       width: 155px;
     }
     
     td.PTtv{
	     border-left: medium solid gray;
	     width: 155px;
     }
     td.PTsv{
	     border-right: medium solid gray;
	     width: 155px;
     }
     div.PTtv{
	     width: 155px;
     }
     div.PTsv{
	     width: 155px;
     }
     td.RT{
	     width: 155px;
     }
     div.RVD{
	     width: 155px;
	     overflow:hidden;
     }
     img{
	   cursor:pointer;
       cursor:hand;
       display: block ;
     
     }
     img.inlinedisplay{
	   cursor:pointer;
       cursor:hand;
       display: inline ;
     
     }

     input.filtercell{
	     background-color: Khaki;
	     width: 155px;
     }
     input.insertcell{
	     width: 155px;
     }
     input.btn1{
	     width: 45px;
	     height: 22px;
     }
     input.btn2{
	     width: 65px;
	     height: 22px;
     }
     input.btn3{
	     
	     height: 18px;
	     font-size: xx-small;
	      display: block ;

     }
     input.btn4{
	     
	     height: 18px;
	     font-size: xx-small;
	     display: inline ;

     }
     
     td{
	 	vertical-align: top;
	 	
	 	
	 }
	 div.blockdisplay{
		 display: block ;
	 }
	 input.edit{
		display: inline ;
		 width: 135px;
		
	 }
	 input.inlinedisplay{
		 display: inline ;
	 }
	 div.scroll {height: 600px; overflow: auto;}
	 .x-grid3-body .x-grid3-td-id{
		 background-color:#f1f2f4;

	 }
     </style>
    
    >
    
    
    w "<table><tr><td class=""LayoutContentCol"" width=""20%"" ><div class=""DetailCommand"">"
	w "&nbsp;"
        
    w "<select NAME='Name' ID='Name' onchange='reload(this.value)'>"

	// Req#1 - Phegel - initialize new variable for current resource in selected list.
	#DIM currentResource as %String = ""
	
	set rs = ##class(%ResultSet).%New()
	do rs.Prepare("select ID, Name, Resource from IIBAENSEMBLE_Reference.PrincipalType order by Name")
	set tSC = rs.Execute()
	
	if (tSC=1)
	w:tSC=1 "<option VALUE="""">Select Reference..."
	W:tSC'=1 "<option VALUE="""">ACCESS DENIED"
	While rs.Next() {
		set resource = rs.Data("Resource")
		// Req#1 - Phegel - Change to only check for Use permissioins on the resource (note: User Needs CRUD permissions on the table as well.)
		if (resource="")||(##class(%SYSTEM.Security).Check(resource,"USE")) {
			if rs.Data("ID") = %request.Get("ID"){
				w "<option VALUE="""_rs.Data("ID")_""" selected>"_rs.Data("Name")
				set currentResource = resource
			} else {
				w "<option VALUE="""_rs.Data("ID")_""">"_rs.Data("Name")
			}
		}	
	}

	w "</select>"
	w "&nbsp;|&nbsp;"
	set HideMultiples = %request.Get("HideMultiples")
	set %session.Data("HideMultiples") = %request.Get("HideMultiples")
	if HideMultiples = "false" {
	w "<Input class='inlinedisplay' Type=""checkbox"" Name=""HideMultiples"" ID=""HideMultiples"" onclick=""reload(document.getElementById('Name').value)"">"
	} else {
	w "<Input class='inlinedisplay' Type=""checkbox"" Name=""HideMultiples"" ID=""HideMultiples"" checked=true onclick=""reload(document.getElementById('Name').value)"">"
	}

	w "<nobr>&nbsp;Hide Multiples&nbsp;</nobr>"
	// Req#1 - Phegel - Changed Security Check for Create Ref and Attribute Definition.
	//
	if ( ##class(%SYSTEM.Security).Check("Reference","WRITE")) {
		w "|"
		w "<a class=""DetailCommand"" target=""_top"" href="""" onclick=""newRef();return false""><nobr>&nbsp;Create New Ref&nbsp;</nobr></A>"
		w "<a class=""DetailCommand"" target=""_top"" href=""IIBASupport.csp?PageName=RefAddAttr&ID="_%request.Get("ID")_"""><nobr>&nbsp;Attribute Definition&nbsp;</nobr></A>"
		w "|"
		w "<a class=""DetailCommand"" target=""_top"" href="""" onclick=""importFormShow();return false""><nobr>&nbsp;Import&nbsp;</nobr></A>"
		if (%request.Get("ID")'="" )&&(currentResource="" || ##class(%SYSTEM.Security).Check(currentResource,"WRITE")){
			w "<div id=""menuAddRelated"" style=""display: inline;""></div>"
			w "<div id=""menuRemoveRelated"" style=""display: inline;""></div>"
			w "|"
			w "<a class=""DetailCommand"" target=""_top"" href=""IIBAENSEMBLE.Zen.xRefAuditList.cls""><nobr>&nbsp;View xRef Audit&nbsp;</nobr></A>"
		}
	}
	if (%request.Get("ID")'="" )&&(currentResource="" || ##class(%SYSTEM.Security).Check(currentResource,"WRITE")){
		w "<div id=""menuExport"" style=""display: inline;""></div>"
		w "<div id=""menuEditDefaults"" style=""display: inline;""></div>"
		// Req#1 - Phegel - Changed Security Check 
		if ##class(%SYSTEM.Security).Check("%All","READ,WRITE,USE") {
			w "|"
			w "<a class=""DetailCommand"" target=""_top"" href="""" onclick=""editResource();return false""><nobr>&nbsp;Edit Resource&nbsp;</nobr></A>"
		}

	}
	// Req #2 - Phegel - Add the View Audit List button
	
	w "</div>"
	w "</td></tr></table>"
	&HTML<
 <div id="attrGrid" ></div>
 <div id="attrImportForm" ></div>
 >
	
 /*
	  &HTML<
 <div id="xRefGrid" ></div>
 <input type="button" name="click" id="click" value="click" onclick="#server(..gridXRef('14'))#">
 
 >
 w "//Temporary DDL for new Grid<br>"
 w "<select NAME='Name' ID='Name' onchange='reloadEXT(this.value)'>"
	w "<option VALUE="""">Select Reference..."

	set rs = ##class(%ResultSet).%New()
	do rs.Prepare("select ID, Name, Resource from IIBAENSEMBLE_Reference.PrincipalType order by Name")
	do rs.Execute()
	While rs.Next() {
		if (rs.Data("Resource")="")||(##class(%SYSTEM.Security).Check(rs.Data("Resource")) = "READ,WRITE,USE") {
			if rs.Data("ID") = %request.Get("ID"){
				w "<option VALUE="""_rs.Data("ID")_""" selected>"_rs.Data("Name")
			} else {
				w "<option VALUE="""_rs.Data("ID")_""">"_rs.Data("Name")
			}
		}	
	}

	w "</select>"
 */	
 
 	
 	
 	//// Create New Reference
 	w "<div class='dialog' id=""modalNewRefDiv"" >"
 	w ..buildmodalNewRefDiv()
 	w "</div>"
 	//// Import Data
 	w "<div class='dialog' id=""modalImport"" >"
 	w ..buildmodalImport()
 	w "</div>"
 	//// Import Data Progress
 	w "<div class='dialog' id=""modalImportProgress"" >"
 	w ..buildmodalImportProgress()
 	w "</div>"
 	
 	w "<div id='tablediv'>"
 	w "<div style=""display: none;""><br><input type=""button"" onclick=""attrImport()"" value=""click""><br></div>"
 	
 if %request.Get("Mode")="Import" {
	//w "Import file is being processed...<p>"
    s importstream = ##class(%GlobalCharacterStream).%New()
	d importstream.CopyFrom(%request.GetMimeData("importfile"))
	s importparams = ..importData(importstream,%request.Get("importType"),%session.SessionId)
	//w "<br>"_%session.SessionId
	&html<
    <script type="text/javascript" >
    #call(IIBAENSEMBLE.cls.xRefImport.ProcessNewFiles())#;
    var importparams = #(..QuoteJS(importparams))#
    var importprogresstimer = setTimeout("loadupdateImportProgress()", 200); 
	</script>
	>
	
 }

 if %request.Get("ID")'="" {
 	set sPTID = %request.Get("ID")
	set oPT = ##class(IIBAENSEMBLE.Reference.PrincipalType).%OpenId(sPTID)
	set currentResource = oPT.Resource
	if (currentResource="")||(##class(%SYSTEM.Security).Check("Reference","USE")) {
		// Bug-#5 PHegel- moved up so that variables are initialized earlier and are stored in session before other methods need them.
		merge %session.Data("oPT") = oPT
		
		set sPTName = oPT.Name
		set %session.Data("sPTName") = oPT.Name
		set %session.Data("sPTID") = sPTID
		set %session.Data("sPTSystem") = %session.Data("oPT").System
		set %session.Data("sPTPrincipalRole") = %session.Data("oPT").PrincipalRole
	
		set ^CacheTempMSimpson = sPTName_"^"_%session.Data("sPTSystem")_"^"_%session.Data("sPTPrincipalRole")_"^"_%session.SessionId	
		
		do ..getTblData(sPTName,%session.Data("sPTSystem"),%session.Data("sPTPrincipalRole"))

		&html<
	    <script type="text/javascript" >
	    document.getElementById("menuExport").innerHTML = "|<a class='DetailCommand' target='_top' href='' onclick='exportFormShow();return false'><nobr>&nbsp;Export&nbsp;</nobr></A>"
	  		</script>
		>
		if (currentResource="")||(##class(%SYSTEM.Security).Check(currentResource,"USE")) {
			&html<
		    <script type="text/javascript" >
		    document.getElementById("menuAddRelated").innerHTML = "|<a class='DetailCommand' target='_top' href='' onclick='addRelated();return false'><nobr>&nbsp;Add Related&nbsp;</nobr></A>"
		    document.getElementById("menuRemoveRelated").innerHTML = "|<a class='DetailCommand' target='_top' href='' onclick='removeRelatedFormShow();return false'><nobr>&nbsp;Remove Related&nbsp;</nobr></A>"
		    document.getElementById("menuEditDefaults").innerHTML = "|<a class='DetailCommand' target='_top' href='' onclick='defaultsEdit();return false'><nobr>&nbsp;Edit Defaults&nbsp;</nobr></A>"
			</script>
			>
	 	
		 	w "<div class='dialog' id=""modalRemoveRelated"" >"
		 	w ..buildmodalRemoveRelated()
		 	w "</div>"
	 			
	 	}
	
	
		w "<div class='dialog' id=""modalExport"" >"
	 	w ..buildmodalExport()
	 	w "</div>"
	 	
	 	w "<div class='dialog' id=""modalRemoveRelated"" >"
	 	w ..buildmodalRemoveRelated()
	 	w "</div>"

		set bHasPermission = ..GetHasResourcePermission()
		w ..buildTableHeader(bHasPermission)
	
		set divwidth = ((%session.Data("count")+1)*155)+125
	
		w "<div class=""scroll"" style=""width: "_divwidth_"px;"">"
		w "<table ID='refTable' class=""DetailTable"" border=""1"" cellpadding=""2"" cellspacing=""0"" >"
	
		set sUCPV="", sPValue="", i=2
		For  { Set sUCPV=$O(^CacheTempaRV(%session.SessionId_"UpperCase",sUCPV)) Q:sUCPV=""
		//For  { Set sPValue=$O(^CacheTempaRV(%session.SessionId,sPValue)) Q:sPValue=""
			set sPValue = ^CacheTempaRV(%session.SessionId_"UpperCase",sUCPV)
		 	set sPVID = ^CacheTempaRV(%session.SessionId,sPValue)
	 	
		 	if i#2=0 {
				w "<tr class=""EvenRow"" id=""row"_^CacheTempaRV(%session.SessionId,sPValue)_""">"
			} Else {
				w "<tr class=""OddRow"" id=""row"_^CacheTempaRV(%session.SessionId,sPValue)_""">"
			}	
	 	
			if %session.Data("sPTPrincipalRole") = "source" { w "<td class=""PTsv"" id=""PV^"_sPVID_"""><div class=""PTsv"" id=""PVD^"_sPVID_""">"_##class(IIBAENSEMBLE.Functions).StringReplace(sPValue," ","&nbsp;")_"</div></td>" }	
	  
			set sUCRT="",sRTSystem=""
			For  { Set sUCRT=$O(^CacheTempaRV(%session.SessionId_"UpperCase",sUCPV,sUCRT)) Q:sUCRT=""
			//For  { Set sRTSystem=$O(^CacheTempaRV(%session.SessionId,sPValue,sRTSystem)) Q:sRTSystem=""
				set sRTSystem = ^CacheTempaRV(%session.SessionId_"UpperCase",sUCPV,sUCRT)
				set sRVCount = $P(^CacheTempaRV(%session.SessionId,sPValue,sRTSystem),"^",1)
				set sRTID = $P(^CacheTempaRV(%session.SessionId,sPValue,sRTSystem),"^",2)
				if sRVCount=0{ 
					w "<td class=""RT"" id=""RV^"_sPVID_"^"_sRTID_""">&nbsp;</td>" 
				} 
			
				set sUCRV="", sRValue="", iRVCount = 0
				For  { Set sUCRV=$O(^CacheTempaRV(%session.SessionId_"UpperCase",sUCPV,sUCRT,sUCRV)) Q:sUCRV=""
				//For  { Set sRValue=$O(^CacheTempaRV(%session.SessionId,sPValue,sRTSystem,sRValue)) Q:sRValue=""
					set sRValue = ^CacheTempaRV(%session.SessionId_"UpperCase",sUCPV,sUCRT,sUCRV)
					set sRVID = ^CacheTempaRV(%session.SessionId,sPValue,sRTSystem,sRValue)
				
					if sRVCount=1{
						w "<td class=""RT"" id=""RV^"_sPVID_"^"_sRTID_""">"
						w "<div class=""RVD"" id=""RVD^"_sRVID_"^"_sRTID_""">"_##class(IIBAENSEMBLE.Functions).StringReplace(sRValue," ","&nbsp;")_"</div>"
					} elseif sRVCount>1  {
						if HideMultiples="true" {
							w "<td id=""RVL^"_sPVID_"^"_sRTID_""" class='less' onclick=""showRValues('"_sPVID_"','"_sRTID_"')"">...</td>"
						
							Quit
						} else {
							set iRVCount = iRVCount+1
							if iRVCount = 1 {
								w "<td class=""RT"" id=""RV^"_sPVID_"^"_sRTID_""">"
							}
							w "<div class=""RVD"" id=""RVD^"_sRVID_"^"_sRTID_""">"_##class(IIBAENSEMBLE.Functions).StringReplace(sRValue," ","&nbsp;")_"</div>"
							if iRVCount = sRVCount {
								w "</td>"
							}
						}
					}	
				}
			}
		  	if %session.Data("sPTPrincipalRole") = "target" { w "<td class=""PTtv"" id=""PV^"_sPVID_"""><div class=""PTtv"" id=""PVD^"_sPVID_""">"_##class(IIBAENSEMBLE.Functions).StringReplace(sPValue," ","&nbsp;")_"</div></td>" }
		  	//Req#1 - PHegel - Added permission check for editing cells
		  	set bHasPermission = ..GetHasResourcePermission()
			if (bHasPermission=1){
		  		w "<td><img Title='Edit' src='customimages/edit.gif' id='edit' onclick=""rowEdit('"_^CacheTempaRV(%session.SessionId,sPValue)_"');""></td>"
		  		w "<td><img Title='Delete' src='customimages/trash_bold.gif' id='delete' onclick=""rowDelete('"_^CacheTempaRV(%session.SessionId,sPValue)_"');""></td>"
			}
			else
			{
				w "<td colspan='2'/>"
			}
			
		  	w "</tr>",!
		  	set i=i+1	
		}
		w "</table>"
		w "</div>"
	
 	}	
 }
 w "</div>"
]]></Implementation>
</Method>

<Method name="buildmodalDefaultsDiv">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set sHTML=""
	set sHTML=sHTML_"<div style=""margin-bottom: 10px;text-align:center""><h3>Default Values for reference "_%session.Data("sPTName")_"</h3></div>"
 	set sHTML=sHTML_"<Table id=""defaultsTable"" class=""DetailTable"" border=""1"" cellpadding=""2"" cellspacing=""0"" ><tr>"
 	set sUCRT="",sRTSystem=""
	for  { Set sUCRT=$O(%session.Data("aRTSystemUpperCase",sUCRT)) Q:sUCRT=""	
	//for  { Set sRTSystem=$O(%session.Data("aRTSystem",sRTSystem)) Q:sRTSystem=""	
 		set sRTSystem = %session.Data("aRTSystemUpperCase",sUCRT)
		set sHTML=sHTML_"<th>"
 		set sHTML=sHTML_sRTSystem_"</th>" 
 	}
 	set sHTML=sHTML_"</tr><tr>"
 	set sUCRT="",sRTSystem=""
	for  { Set sUCRT=$O(%session.Data("aRTSystemUpperCase",sUCRT)) Q:sUCRT=""	
	//for  { Set sRTSystem=$O(%session.Data("aRTSystem",sRTSystem)) Q:sRTSystem=""	
 		set sRTSystem = %session.Data("aRTSystemUpperCase",sUCRT)
		set sHTML=sHTML_"<td><input type=""text"" name=""RTD"_%session.Data("aRTSystem",sRTSystem,"ID")_""" id=""RTD^"_%session.Data("aRTSystem",sRTSystem,"ID")_""" value="""
 		set sHTML=sHTML_##class(IIBAENSEMBLE.Reference.RelatedType).%OpenId(%session.Data("aRTSystem",sRTSystem,"ID")).DefaultValue_"""></td>" 
 	}
 	set sHTML=sHTML_"</tr></table>"
 	set sHTML=sHTML_"<div style=""margin-left: 20px;margin-top: 10px""><button onclick=""hm('modalDefaultsDiv');defaultsSaveChanges()"">Save Changes</button><button onclick=""hm('modalDefaultsDiv')"">Cancel</button></div>"
 	Quit sHTML
]]></Implementation>
</Method>

<Method name="buildmodalEditResourceDiv">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set sHTML=""
	set sHTML=sHTML_"<div style=""margin-bottom: 10px;text-align:center""><h3>Edit Resource Required for reference "_%session.Data("sPTName")_"</h3></div>"
	set sHTML=sHTML_"<div style=""margin-left: 20px;margin-right: 20px;"">"
	set sHTML=sHTML_"<fieldset>"
		set sHTML=sHTML_"<legend>Resource</legend>"
		set sHTML=sHTML_"<table>"
		set sHTML=sHTML_"<tr><td width=""200px"">Resource: </td>"
		set sHTML=sHTML_"<td><input type=""text"" id=""editResourceValue"" value="""_##class(IIBAENSEMBLE.Reference.PrincipalType).%OpenId(%session.Data("sPTID")).Resource_"""></td></tr>"
		set sHTML=sHTML_"</table>"
	set sHTML=sHTML_"</fieldset>"	
	set sHTML=sHTML_"</div>"
	set sHTML=sHTML_"<div style=""margin-left: 20px;margin-top: 10px""><button onclick=""hm('modalEditResourceDiv');editResourceSave()"">Save</button><button onclick=""hm('modalEditResourceDiv')"">Cancel</button></div>"
	Quit sHTML
]]></Implementation>
</Method>

<Method name="buildmodalAddRelatedDiv">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set sHTML=""
	set sHTML=sHTML_"<div style=""margin-bottom: 10px;text-align:center""><h3>Add Related System for reference "_%session.Data("sPTName")_"</h3></div>"
	set sHTML=sHTML_"<div style=""margin-left: 20px;margin-right: 20px;"">"
	set sHTML=sHTML_"<fieldset>"
		set sHTML=sHTML_"<legend>Principal</legend>"
		set sHTML=sHTML_"<table>"
		set sHTML=sHTML_"<tr><td width=""200px"">Principal System: </td>"
		set sHTML=sHTML_"<td>"_%session.Data("sPTSystem")_"</td></tr>"
		set sHTML=sHTML_"<tr><td width=""200px"">Principal Role: </td>"
		set sHTML=sHTML_"<td>"_%session.Data("sPTPrincipalRole")_"</td></tr>"
		set sHTML=sHTML_"</table>"
	set sHTML=sHTML_"</fieldset>"
	set sHTML=sHTML_"<fieldset>"
		set sHTML=sHTML_"<legend>Related</legend>"
		set sHTML=sHTML_"<table>"
		set sHTML=sHTML_"<tr><td width=""200px"">Related System: </td>"
		set sHTML=sHTML_"<td><input type=""text"" id=""addRTRTS"" value=""""></td></tr>"
		set sHTML=sHTML_"</table>"
	set sHTML=sHTML_"</fieldset>"	
	set sHTML=sHTML_"</div>"
	set sHTML=sHTML_"<div style=""margin-left: 20px;margin-top: 10px""><button onclick=""hm('modalAddRelatedDiv');addRelatedSave()"">Save</button><button onclick=""hm('modalAddRelatedDiv')"">Cancel</button></div>"
	Quit sHTML
]]></Implementation>
</Method>

<Method name="buildmodalNewRefDiv">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set sHTML=""
	set sHTML=sHTML_"<div style=""margin-bottom: 10px;text-align:center""><h3>Create New Reference</h3></div>"
	set sHTML=sHTML_"<div style=""margin-left: 20px;margin-right: 20px;"">"
	set sHTML=sHTML_"<fieldset>"
		set sHTML=sHTML_"<legend>Principal</legend>"
		set sHTML=sHTML_"<table>"
		set sHTML=sHTML_"<tr><td width=""200px"">Reference Name: </td>"
		set sHTML=sHTML_"<td><input type=""text"" id=""newPTName"" value=""""></td></tr>"
		set sHTML=sHTML_"<tr><td width=""200px"">Principal System: </td>"
		set sHTML=sHTML_"<td><input type=""text"" id=""newPTS"" value=""""></td></tr>"
		set sHTML=sHTML_"<tr><td width=""200px"">Principal Role: </td>"
		set sHTML=sHTML_"<td><select id=""newPTPR"" ><option value=""source"">source<option value=""target"">target</select></td></tr>"
		set sHTML=sHTML_"<tr><td width=""200px"">Principal Resource: </td>"
		set sHTML=sHTML_"<td><input type=""text"" id=""newResource"" value=""Reference""></td></tr>"
		set sHTML=sHTML_"</table>"
	set sHTML=sHTML_"</fieldset>"
	set sHTML=sHTML_"<fieldset>"
		set sHTML=sHTML_"<legend>Related</legend>"
		set sHTML=sHTML_"<table>"
		set sHTML=sHTML_"<tr><td width=""200px"">Related System: </td>"
		set sHTML=sHTML_"<td><input type=""text"" id=""newRTRTS"" value=""""></td></tr>"
		set sHTML=sHTML_"</table>"
	set sHTML=sHTML_"</fieldset>"	
	set sHTML=sHTML_"</div>"
	set sHTML=sHTML_"<div style=""margin-left: 20px;margin-top: 10px""><button onclick=""hm('modalNewRefDiv');newRefSave()"">Save</button><button onclick=""hm('modalNewRefDiv')"">Cancel</button></div>"
	Quit sHTML
]]></Implementation>
</Method>

<Method name="buildmodalImport">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set sHTML=""
	set sHTML=sHTML_"<form id=""import"" method=""post"" target="""" action=""IIBASupport.csp?PageName=Reference&Mode=Import"" enctype=""multipart/form-data"">"
	set sHTML=sHTML_"<div style=""margin-bottom: 10px;text-align:center""><h3>Import Reference Data</h3></div>"
	set sHTML=sHTML_"<div style=""margin-left: 20px;margin-right: 20px;"">"
	set sHTML=sHTML_"The import file must be a csv file and must have a header row with the following columns.<br><b>PTName,PTSystem,PTRole,PValue,RTSystem,RValue</b><p>"
	set sHTML=sHTML_"Enter the path and name of the import file:<br>"
	set sHTML=sHTML_"<input type=""file"" size=""50"" id=""importfile"" name=""importfile"" value=""""><p>"
	set sHTML=sHTML_"<input type=""radio"" name=""radioImportUpdate"" id=""radioImportUpdate"" value=""Update"" checked onclick=""$('importTypeText').value=this.value;"">Insert New <b>AND</b> Update Existing Mappings.<br>"
	set sHTML=sHTML_"<input type=""radio"" name=""radioImportReplace"" id=""radioImportReplace"" value=""Replace"" onclick=""$('importTypeText').value=this.value;"">Replace All Mappings for Related Types being imported.<br>"
	set sHTML=sHTML_"<input type=""hidden"" name=""importTypeText"" id=""importTypeText"" value="""">"
	set sHTML=sHTML_"</div>"
	set sHTML=sHTML_"<div style=""margin-left: 20px;margin-top: 10px""><input type=""submit"" value=""Import"" onclick=""hm('modalImport');return true;""><button onclick=""hm('modalImport');return false;"">Cancel</button></div>"
	set sHTML=sHTML_"</form>"
	Quit sHTML
]]></Implementation>
</Method>

<Method name="buildmodalImportProgress">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set sHTML=""
	//set sHTML=sHTML_"<div style=""margin-bottom: 10px;text-align:center""><h3>Import Progress</h3></div>"
	set sHTML=sHTML_"<div style=""margin-left: 0px;margin-right: 0px;text-align:center"">"
	set sHTML=sHTML_"<b>Import Status:</b> <div id=""importstatus""></div><p>"
	set sHTML=sHTML_"<b>Import progress:</b> <div id=""importprogress""></div><p>"
	set sHTML=sHTML_"</div>"
	set sHTML=sHTML_"<div style=""margin-left: 0px;margin-top: 10px;text-align:center""><button onclick=""clearTimeout(importprogresstimer);hm('modalImportProgress');window.location = 'IIBASupport.csp?PageName=Reference';"">Close</button></div>"
	Quit sHTML
]]></Implementation>
</Method>

<Method name="buildmodalExport">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set sHTML=""
	set sHTML=sHTML_"<div style=""margin-bottom: 10px;text-align:center""><h3>Export Reference Data</h3></div>"
	set sHTML=sHTML_"<div style=""margin-left: 20px;margin-right: 20px;"">"
	set sHTML=sHTML_"Select which Related Systems to include in the export.<p>"
	set sUCRT="",sRTSystem=""
	for  { Set sUCRT=$O(%session.Data("aRTSystemUpperCase",sUCRT)) Q:sUCRT=""	
	//for  { Set sRTSystem=$O(%session.Data("aRTSystem",sRTSystem)) Q:sRTSystem=""	
 		set sRTSystem = %session.Data("aRTSystemUpperCase",sUCRT)
		set sHTML=sHTML_"<input type=""checkbox"" name=""exportRTs"" id=""checkExport"_sRTSystem_""" value = """_sRTSystem_""" >"_sRTSystem_"<br>"
 	}
	//set sHTML=sHTML_"<br>Enter the path and name of the export file:<br>"
	//set sHTML=sHTML_"<input type=""file"" size=""50"" id=""exportfilename"" value=""""><p>"
	set sHTML=sHTML_"</div>"
	set sHTML=sHTML_"<div style=""margin-left: 20px;margin-top: 10px""><button onclick=""hm('modalExport');exportData()"">Export</button><button onclick=""hm('modalExport');"">Cancel</button></div>"
	Quit sHTML
]]></Implementation>
</Method>

<Method name="buildmodalRemoveRelated">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set sHTML=""
	set sHTML=sHTML_"<div style=""margin-bottom: 10px;text-align:center""><h3>Remove Related Systems</h3></div>"
	set sHTML=sHTML_"<div style=""margin-left: 20px;margin-right: 20px;"">"
	set sHTML=sHTML_"Select which Related Systems to remove.<p><br>"
	set sUCRT="",sRTSystem=""
	for  { Set sUCRT=$O(%session.Data("aRTSystemUpperCase",sUCRT)) Q:sUCRT=""	
	//for  { Set sRTSystem=$O(%session.Data("aRTSystem",sRTSystem)) Q:sRTSystem=""	
 		set sRTSystem = %session.Data("aRTSystemUpperCase",sUCRT)
 		set sRTId = %session.Data("aRTSystem",sRTSystem,"ID")
		set sHTML=sHTML_"<input type=""checkbox"" name=""removeRTs"" id=""checkRemove"_sRTSystem_""" value = """_sRTId_""" >"_sRTSystem_"<br>"
 	}
	set sHTML=sHTML_"<br><p style=""color: red;"">If all Related Systems are selected, the entire table will be removed!</p>"
	set sHTML=sHTML_"</div>"
	set sHTML=sHTML_"<div style=""margin-left: 20px;margin-top: 10px""><button onclick=""hm('modalRemoveRelated');removeRelated()"">Submit</button><button onclick=""hm('modalRemoveRelated');"">Cancel</button></div>"
	Quit sHTML
]]></Implementation>
</Method>

<Method name="buildHiddenForms">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set sHTML=""
	
	//// Edit Defaults
 	set sHTML=sHTML_"<div class='dialog' id=""modalDefaultsDiv"" >"
 	set sHTML=sHTML_..buildmodalDefaultsDiv()
 	set sHTML=sHTML_"</div>"
 	
 	//// Add Related System
 	set sHTML=sHTML_"<div class='dialog' id=""modalAddRelatedDiv"" >"
 	set sHTML=sHTML_..buildmodalAddRelatedDiv()
 	set sHTML=sHTML_"</div>"
 	
 	//// Edit Resource
 	set sHTML=sHTML_"<div class='dialog' id=""modalEditResourceDiv"" >"
 	set sHTML=sHTML_..buildmodalEditResourceDiv()
 	set sHTML=sHTML_"</div>"
 	
	
 	Quit sHTML
]]></Implementation>
</Method>

<Method name="GetCurrentResource">
<Description>
Req#1 - Phegel - Added to get resource from selected principal object</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	#DIM currentResource as %String = ""
	
	set sPTID = %session.Data("sPTID")
	
	if (sPTID'="")
	{
		set oPT = ##class(IIBAENSEMBLE.Reference.PrincipalType).%OpenId(sPTID)
		set currentResource = oPT.Resource	
	}
	
	QUIT currentResource
]]></Implementation>
</Method>

<Method name="GetHasResourcePermission">
<ClassMethod>1</ClassMethod>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	#DIM currentResource as %String = ..GetCurrentResource()
	set hasPermssion = ##class(%SYSTEM.Security).Check(currentResource,"Write")
	if currentResource="" { set hasPermssion = 1}
	quit hasPermssion
]]></Implementation>
</Method>

<Method name="buildHeaderRowhtml">
<ClassMethod>1</ClassMethod>
<FormalSpec>Resource:%String=""</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set sHTML=""
	
	//Header cell for Principal Type when source
 	if %session.Data("sPTPrincipalRole") = "source" {set sHTML=sHTML_"<th style=""background: gray none repeat scroll 0%"" id=""PT^"_%session.Data("sPTID")_""">"_%session.Data("sPTSystem")_"</th>" }
 	//Header cells for Related Types
 	set sUCRT="",sRTSystem=""
	for  { Set sUCRT=$O(%session.Data("aRTSystemUpperCase",sUCRT)) Q:sUCRT=""	
	//for  { Set sRTSystem=$O(%session.Data("aRTSystem",sRTSystem)) Q:sRTSystem=""	
 		set sRTSystem = %session.Data("aRTSystemUpperCase",sUCRT)
		set sHTML=sHTML_"<th id=""RT^"_%session.Data("aRTSystem",sRTSystem,"ID")_""" class=""clickme"" title=""Default: "_##class(IIBAENSEMBLE.Reference.RelatedType).%OpenId(%session.Data("aRTSystem",sRTSystem,"ID")).DefaultValue_""" >"
		
 		If ( ..attrClassExists(%session.Data("aRTSystem",sRTSystem,"ID")) ) {
			s sHTML=sHTML_"<img style='display:inline;float:right;padding-right:2px;padding-top:1px' alt='Attributes' Title='Attributes' src='customimages/categories-cropped.gif'  onclick=""attrEditGrid('"_%session.Data("aRTSystem",sRTSystem,"ID")_"')""/>"
		}
		set sHTML=sHTML_sRTSystem
 		s sHTML=sHTML_"</th>" 
 	}
 	//Header cell for Principal Type when target
 	if %session.Data("sPTPrincipalRole") = "target" {set sHTML=sHTML_"<th style=""background: gray none repeat scroll 0%"" id=""PT^"_%session.Data("sPTID")_""">"_%session.Data("sPTSystem")_"</th>" }
		
	Quit sHTML
]]></Implementation>
</Method>

<Method name="buildTableHeader">
<ClassMethod>1</ClassMethod>
<FormalSpec>hasPermission:%Boolean=0</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 	set sHTML=""
 	
 	set sHTML=sHTML_..buildHiddenForms()
 	
 	set sHTML=sHTML_"<table ID='refTableHeader' class=""DetailTable"" border=""1"" cellpadding=""2"" cellspacing=""0"" >"
 	
 	set sHTML=sHTML_"<tr>"
 	
 	//Filter cell for Principal Type when source
 	if %session.Data("sPTPrincipalRole") = "source" {
 		set sHTML=sHTML_"<td class=""PTsv""><input type=""text"" name=""flt^PT^"_%session.Data("sPTSystem")_""" id=""flt^PT^"_%session.Data("sPTID")_""" class='filtercell' value='"
 		if $DATA(%session.Data("aFilters",%session.Data("sPTSystem")))'=0 {
 			set sHTML=sHTML_%session.Data("aFilters",%session.Data("sPTSystem"))
 		}
 		set sHTML=sHTML_"' onchange=""columnFilter('"_%session.Data("sPTSystem")_"','PT');""></td>"
 	}
 	//Filter cells for Related Types
 	set sUCRT="",sRTSystem=""
	for  { Set sUCRT=$O(%session.Data("aRTSystemUpperCase",sUCRT)) Q:sUCRT=""	
	//for  { Set sRTSystem=$O(%session.Data("aRTSystem",sRTSystem)) Q:sRTSystem=""	
 		set sRTSystem = %session.Data("aRTSystemUpperCase",sUCRT)
 		set sRTID = %session.Data("aRTSystem",sRTSystem,"ID")
		set sHTML=sHTML_"<td><input type=""text"" name=""flt^RT^"_sRTID_""" id=""flt^RT^"_sRTID_""" class='filtercell' value='"
 		if $DATA(%session.Data("aFilters",sRTSystem))'=0 {
 			set sHTML=sHTML_%session.Data("aFilters",sRTSystem)
 		}
 		set sHTML=sHTML_"' onchange=""columnFilter('"_sRTSystem_"','RT');""></td>"
 	}
 	//Filter cell for Principal Type when target
 	if %session.Data("sPTPrincipalRole") = "target" {
 		set sHTML=sHTML_"<td class=""PTsv""><input type=""text"" name=""flt^PT^"_%session.Data("sPTID")_""" id=""flt^PT^"_%session.Data("sPTID")_""" class='filtercell' value='"
 		if $DATA(%session.Data("aFilters",%session.Data("sPTSystem")))'=0 {
 			set sHTML=sHTML_%session.Data("aFilters",%session.Data("sPTSystem"))
 		}
 		set sHTML=sHTML_"' onchange=""columnFilter('"_%session.Data("sPTSystem")_"','PT');""></td>"
 	}
 	
 	set sHTML=sHTML_"<td><img alt='Filter' Title='Filter' src='customimages/filter.gif' id='filter' onclick=""return true;""></td>"
 	
 	set sHTML=sHTML_"</tr>"
 	
 	set sHTML=sHTML_"<tr>"
 	
 	set sHTML=sHTML_..buildHeaderRowhtml()
 	 	
 	set sHTML=sHTML_"</tr>"
 	
 	if (hasPermission=1){
	 	set sHTML=sHTML_"<tr ID=""rowIns"">"
	 	
	 	//Input boxes for Insert Row
	 	set i=1
	 	if %session.Data("sPTPrincipalRole") = "source" {set sHTML=sHTML_"<td class=""PTsv""><Input Type=""Text"" Name=""InsPV"" ID=""InsPV"" class='insertcell' Value=""""></td>" }
	 	set sUCRT="",sRTSystem=""
		for  { Set sUCRT=$O(%session.Data("aRTSystemUpperCase",sUCRT)) Q:sUCRT=""	
		//for  { Set sRTSystem=$O(%session.Data("aRTSystem",sRTSystem)) Q:sRTSystem=""	
	 		set sRTSystem = %session.Data("aRTSystemUpperCase",sUCRT)
			set sHTML=sHTML_"<td id='RVInsert^"_%session.Data("aRTSystem",sRTSystem,"ID")_"'><Input Type=""Text"" Name=""InsRV"" id=""InsRV"" class=""insertcell"" Value=""""></td>" 
	 	}
	 	if %session.Data("sPTPrincipalRole") = "target" {set sHTML=sHTML_"<td class=""PTtv""><Input Type=""Text"" Name=""InsPV"" ID=""InsPV"" class='insertcell' Value=""""></td>" }
	 	
	 	set sHTML=sHTML_"<td><img alt='Insert' Title='Insert' src='customimages/save.gif' id='save' onclick=""rowSave();""></td>"
	 	  	
	 	set sHTML=sHTML_"</tr>"
	}
 	set sHTML=sHTML_"</table>"
 	
 Quit sHTML
]]></Implementation>
</Method>

<Method name="checkPValueExists">
<ClassMethod>1</ClassMethod>
<FormalSpec>Value:%String,PTId:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 
 set Return = 0
 
 &sql(select CASE WHEN ID <> '' THEN 1 ELSE 0 END into :Return from IIBAENSEMBLE_Reference.PrincipalValue WHERE PValue = :Value and PrincipalType = :PTId)
 
 Quit Return
]]></Implementation>
</Method>

<Method name="checkRValueExists">
<ClassMethod>1</ClassMethod>
<FormalSpec>Value:%String,PTId:%String,RTId:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
 
 //&js<alert('#(Value_" - "_PTId_" - "_RTId)#')>
 
 set Return = 0
 
 &sql(select CASE WHEN ID <> '' THEN 1 ELSE 0 END into :Return from IIBAENSEMBLE_Reference.RelatedValue WHERE RValue = :Value and PrincipalValue->PrincipalType = :PTId and RelatedType = :RTId)
 
 Quit Return
]]></Implementation>
</Method>

<Method name="getFilterPValues">
<ClassMethod>1</ClassMethod>
<FormalSpec>sFilters:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 	set Filtered=0
 	
 	for i=1:1:$L(sFilters,",")-1 {
 		if $P($P(sFilters,",",i),"^",3)'=""{
 			set SystemType = $P($P(sFilters,",",i),"^",1)
 			set SystemId = $P($P(sFilters,",",i),"^",2)
 			if SystemType = "PT" {
 				set System = %session.Data("sPTSystem")
 			} else {
	 			set System = ##class(IIBAENSEMBLE.Reference.RelatedType).%OpenId(SystemId).System
 			}
 			set Filter = $P($P(sFilters,",",i),"^",3)
 			
 			set %session.Data("aFilters",System)=Filter
 			set %session.Data("aFilters",System,"Found")=0
 			
 			set Filtered=1
 		
 		}
 	}
 	
 
 	
 	
 if Filtered {
	 
	// build an array named aPValues that contain all the primary values for all rows where any principal or related value matches a filter
 	
 	set sPValue=""
 	For  { Set sPValue=$O(^CacheTempaRV(%session.SessionId,sPValue)) Q:sPValue=""
 		
 		// Loop through each system that is filtered
 		// if any filter matches any of its corresponding values, found is set to 1
 		set sFiltSystem=""
 		For  { Set sFiltSystem=$O(%session.Data("aFilters",sFiltSystem)) Q:sFiltSystem=""
 			//check to see if the principal system is filtered
 			//else handle as related system filter
 			if sFiltSystem = %session.Data("sPTSystem"){
	 			if $FIND($ZCVT(sPValue,"U"),$ZCVT(%session.Data("aFilters",sFiltSystem),"U"))>0 { 
	 				set %session.Data("aFilters",sFiltSystem,"Found") = 1
	 			}
 			} else {
				set RValue = ""
 				For  { set RValue = $O(^CacheTempaRV(%session.SessionId,sPValue,sFiltSystem,RValue)) Q:RValue=""
 					if ($FIND($ZCVT(RValue,"U"),$ZCVT(%session.Data("aFilters",sFiltSystem),"U"))>0) { 
 						set %session.Data("aFilters",sFiltSystem,"Found") = 1
 					}
 				}
 			}
 		}
 		
 		// loop through each system that is filtered and verify that all systems found a match befor adding this pvalue to the list
 		// this will enforce an AND condition so that if one system filter matches and another does not, that values is not added to the list
 		set bAND = 1
 		For  { Set sFiltSystem=$O(%session.Data("aFilters",sFiltSystem)) Q:sFiltSystem=""
 			//if any system that is filtered on didn't match its corresponding values, don't add it to the list
 			if %session.Data("aFilters",sFiltSystem,"Found") '= 1 {
	 			set bAND = 0
 			}
 		}
 		
 		if bAND { set aPValues(sPValue)="" }
 		
 		//reset all found to 0 for next pvalue
 		For  { Set sFiltSystem=$O(%session.Data("aFilters",sFiltSystem)) Q:sFiltSystem=""
 			set %session.Data("aFilters",sFiltSystem,"Found") = 0
 		}
 		
 		
 	}
 	
 	//Req#1 - PHegel - Added permission check for editing cells
	/*
	set PTID = %session.Data("sPTID")
	&js< alert("Has Permission = " + #(bHasPermission)# + " to PTID: " + "'#(PTID)#'" ) >
	*/
	
	set bHasPermission = ..GetHasResourcePermission()
 	set newHTML = ..buildTableHeader(bHasPermission)
 	set newHTML = newHTML_"</table>"
 	
 	set divwidth = ((%session.Data("count")+1)*155)+125
	
	set newHTML = newHTML_"<div class=""scroll"" style=""width: "_divwidth_"px;"">"
	set newHTML = newHTML_"<table ID='refTable' class=""DetailTable"" border=""1"" cellpadding=""2"" cellspacing=""0"" >"
	set newHTML = newHTML_"</table></div>"
 	
 	set newHTML = ##class(IIBAENSEMBLE.Functions).StringReplace(newHTML,"'","\'")
 	
 	
 	&js<document.getElementById('tablediv').innerHTML='';>
 	&js<document.getElementById('tablediv').innerHTML='#(newHTML)#';>
 	
 	for i=1:1:$L(sFilters,",")-1 {
 		if $P($P(sFilters,",",i),"^",3)'=""{
 			set SystemType = $P($P(sFilters,",",i),"^",1)
 			set SystemId = $P($P(sFilters,",",i),"^",2)
 			&js<document.getElementById('flt^'+'#(SystemType)#'+'^'+'#(SystemId)#').focus()>
 		}
 	}
 	
 	kill %session.Data("aFilters")
 		
 	set sUCPV="", sPValue="", i=0
 	For  { Set sUCPV=$O(^CacheTempaRV(%session.SessionId_"UpperCase",sUCPV)) Q:sUCPV=""
 	//For  { Set sPValue=$O(^CacheTempaRV(%session.SessionId,sPValue)) Q:sPValue=""
 		set sPValue = ^CacheTempaRV(%session.SessionId_"UpperCase",sUCPV)
 	 	set sPVID = ^CacheTempaRV(%session.SessionId,sPValue)
 	 	
 	   if $DATA(aPValues(sPValue))'=0 {
 		//&js<alert(document.getElementById('refTable').rows.length);>
 		//&js<document.getElementById('refTable').insertRow(0);>
 		&js<
 		document.getElementById('refTable').insertRow(#(i)#);
 		document.getElementById('refTable').rows[#(i)#].id = 'row#(sPVID)#';
 		>
 	 	
 	 	if i#2=0 {
 			&js<document.getElementById('refTable').rows[#(i)#].className = 'EvenRow';>
 		} Else {
 			&js<document.getElementById('refTable').rows[#(i)#].className = 'OddRow';>
 		}	
 	 	
 	 	set cellcount=0
 	 	
 		if %session.Data("sPTPrincipalRole") = "source" { 
 			&js<var r=document.getElementById('refTable').rows[#(i)#];
 			var c=r.insertCell(#(cellcount)#);
 			c.id='PV^#(sPVID)#';
 			c.className='PTsv';
 			var newdiv = document.createElement('div');
 			newdiv.id = 'PVD^#(sPVID)#';
 			newdiv.innerHTML="#(sPValue)#".replace(/ /g,'&nbsp;');
 			newdiv.className='PTsv';
 			c.appendChild(newdiv);>
 			set cellcount = cellcount+1
 		}	
 		
 		
 	  
 		set sUCRT="",sRTSystem=""
 		For  { Set sUCRT=$O(^CacheTempaRV(%session.SessionId_"UpperCase",sUCPV,sUCRT)) Q:sUCRT=""
 		//For  { Set sRTSystem=$O(^CacheTempaRV(%session.SessionId,sPValue,sRTSystem)) Q:sRTSystem=""
 			set sRTSystem = ^CacheTempaRV(%session.SessionId_"UpperCase",sUCPV,sUCRT)
 			set sRVCount = $P(^CacheTempaRV(%session.SessionId,sPValue,sRTSystem),"^",1)
 			set sRTID = $P(^CacheTempaRV(%session.SessionId,sPValue,sRTSystem),"^",2)
 			if sRVCount=0{ 
 				&js<var r=document.getElementById('refTable').rows[#(i)#];
 				var c=r.insertCell(#(cellcount)#);
 				c.id='RV^#(sPVID)#^#(sRTID)#';
 				c.className='RT';
 				c.innerHTML='&nbsp;';>
 				set cellcount = cellcount+1
 			}
 			
 			set sUCRV="", sRValue="", iRVCount = 0
			For  { Set sUCRV=$O(^CacheTempaRV(%session.SessionId_"UpperCase",sUCPV,sUCRT,sUCRV)) Q:sUCRV=""
			//For  { Set sRValue=$O(^CacheTempaRV(%session.SessionId,sPValue,sRTSystem,sRValue)) Q:sRValue=""
				set sRValue = ^CacheTempaRV(%session.SessionId_"UpperCase",sUCPV,sUCRT,sUCRV)
 				set sRVID = ^CacheTempaRV(%session.SessionId,sPValue,sRTSystem,sRValue)
 				
 				if sRVCount=1{
 					&js<var r=document.getElementById('refTable').rows[#(i)#];
 					var c=r.insertCell(#(cellcount)#);
 					c.id='RV^#(sPVID)#^#(sRTID)#';
 					c.className='RT';
 					var newdiv = document.createElement('div');
 					newdiv.className='RVD';
 					newdiv.id = 'RVD^#(sRVID)#^#(sRTID)#';
 					newdiv.innerHTML="#(sRValue)#".replace(/ /g,'&nbsp;');
 					c.appendChild(newdiv);
 					>
 					set cellcount = cellcount+1
 				} elseif sRVCount>1  {
 					if %session.Data("HideMultiples")="true" {
 						
 						&js<var r=document.getElementById('refTable').rows[#(i)#];
 						var c=r.insertCell(#(cellcount)#);
 						c.id='RVL^#(sPVID)#^#(sRTID)#';
 						c.innerHTML='...';
 						c.className='less';
 						c.onclick = function () {showRValues('#(sPVID)#','#(sRTID)#')};
 						>
 						
 						set cellcount = cellcount+1
 						
 						Quit
 					} else {
 						set iRVCount = iRVCount+1
 						if iRVCount = 1 {
 							&js<var r=document.getElementById('refTable').rows[#(i)#];
 							var c=r.insertCell(#(cellcount)#);
 							c.id='RV^#(sPVID)#^#(sRTID)#';
 							c.className='RT';
 							>
 							set cellcount = cellcount+1
 						}
 						&js<var c=document.getElementById('RV^#(sPVID)#^#(sRTID)#');
 							var newdiv = document.createElement('div');
 							newdiv.className='RVD';
 							newdiv.id = 'RVD^#(sRVID)#^#(sRTID)#';
 							newdiv.innerHTML="#(sRValue)#".replace(/ /g,'&nbsp;');
 							c.appendChild(newdiv);
 						>
 						
 					}
 				}	
 			}
 		}
 	  	if %session.Data("sPTPrincipalRole") = "target" {
 			&js<var r=document.getElementById('refTable').rows[#(i)#];
 			var c=r.insertCell(#(cellcount)#);
 			c.id='PV^#(sPVID)#';
 			c.className='PTtv';
 			var newdiv = document.createElement('div');
 			newdiv.id = 'PVD^#(sPVID)#';
 			newdiv.innerHTML="#(sPValue)#".replace(/ /g,'&nbsp;');
 			newdiv.className='PTtv'
 			c.appendChild(newdiv);>
 			set cellcount = cellcount+1
 		}
 		

 		//Req#1 - PHegel - Added permission check for editing cells
		if (bHasPermission=1){
	 		&js<var r=document.getElementById('refTable').rows[#(i)#];
	 			var c=r.insertCell(#(cellcount)#);
	 			c.innerHTML='<img title="Edit" src="customimages/edit.gif" id="edit" onclick="rowEdit(\'#(sPVID)#\');" >';
	 		>
	 		set cellcount = cellcount+1
	 		&js<var r=document.getElementById('refTable').rows[#(i)#];
	 			var c=r.insertCell(#(cellcount)#);
	 			c.innerHTML='<img title="Delete" src="customimages/trash_bold.gif" id="delete" onclick="rowDelete(\'#(sPVID)#\');" >';
	 		>
		}
 		set cellcount = cellcount+1
 		 
 	  	set i=i+1	
 	  	
 	   }
 	   
 	   	
 	}
 } else {
 	&js<reload('#(%session.Data("sPTID"))#');>
 }
 
 
 Quit "OK"
]]></Implementation>
</Method>

<Method name="getPrincipalRole">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 Quit %session.Data("sPTPrincipalRole")
]]></Implementation>
</Method>

<Method name="getRTCount">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 Quit %session.Data("count")
]]></Implementation>
</Method>

<Method name="getPTID">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 Quit %session.Data("sPTID")
]]></Implementation>
</Method>

<Method name="getTblData">
<ClassMethod>1</ClassMethod>
<FormalSpec>sPTName:%String,sPTSystem:%String,sPTPrincipalRole:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 
 if sPTName'="" {
 	
 	kill ^CacheTempaRV(%session.SessionId)
 	kill ^CacheTempaRV(%session.SessionId_"UpperCase")
 	
 	
 	set rs = ##class(%ResultSet).%New()
 	do rs.Prepare("select ID, System from IIBAENSEMBLE_Reference.RelatedType where PrincipalType = "_%session.Data("sPTID")_" order by System")
 	do rs.Execute()
 	kill aRTSystem
 	set count = 0
 	While rs.Next() {
	 		set count = count+1
	 		set aRTSystemUpperCase($ZCVT(rs.Data("System"),"U")) = rs.Data("System")
	 		set aRTSystem(rs.Data("System")) = ""
	 		set aRTSystem(rs.Data("System"),"ID") = rs.Data("ID")
 	}
 	
 	do rs.Close()
 	
 	kill %session.Data("aRTSystem")
 	kill %session.Data("aRTSystemUpperCase")
 	merge %session.Data("aRTSystem") = aRTSystem
 	merge %session.Data("aRTSystemUpperCase") = aRTSystemUpperCase
 	set %session.Data("count") = count
 	
 	set sUCRT="",sRTSystem=""
	for  { Set sUCRT=$O(%session.Data("aRTSystemUpperCase",sUCRT)) Q:sUCRT=""	
	//for  { Set sRTSystem=$O(%session.Data("aRTSystem",sRTSystem)) Q:sRTSystem=""	
 		set sRTSystem = %session.Data("aRTSystemUpperCase",sUCRT)
		
 		set SQL = "select PrincipalValue, PrincipalValue->PValue, RValue, ID from IIBAENSEMBLE_Reference.RelatedValue WHERE PrincipalValue->PrincipalType->Name = '"_sPTName_"' AND RelatedType = "_%session.Data("aRTSystem",sRTSystem,"ID")
 		
 		do rs.Prepare(SQL)
 		do rs.Execute()
 		While rs.Next() {
 			
 			set sPValue = rs.Data("PValue")
 			set sRValue = rs.Data("RValue")
 			
 			set sUCRT2="",sRTSystem2=""
			for  { Set sUCRT2=$O(%session.Data("aRTSystemUpperCase",sUCRT2)) Q:sUCRT2=""	
			//for  { Set sRTSystem2=$O(%session.Data("aRTSystem",sRTSystem2)) Q:sRTSystem2=""
 				set sRTSystem2 = %session.Data("aRTSystemUpperCase",sUCRT2)
	
 				if $DATA(^CacheTempaRV(%session.SessionId,sPValue,sRTSystem2))=0 {
	 				set ^CacheTempaRV(%session.SessionId_"UpperCase",$ZCVT(sPValue,"U"),$ZCVT(sRTSystem2,"U"))=sRTSystem2
 					set ^CacheTempaRV(%session.SessionId,sPValue,sRTSystem2)="0^"_%session.Data("aRTSystem",sRTSystem2,"ID")
 				}
 			}
 			
 			set ^CacheTempaRV(%session.SessionId_"UpperCase",$ZCVT(sPValue,"U"))=sPValue
 			set ^CacheTempaRV(%session.SessionId_"UpperCase",$ZCVT(sPValue,"U"),$ZCVT(sRTSystem,"U"))=sRTSystem
 			set ^CacheTempaRV(%session.SessionId_"UpperCase",$ZCVT(sPValue,"U"),$ZCVT(sRTSystem,"U"),$ZCVT(sRValue,"U"))=sRValue
 		
 			set ^CacheTempaRV(%session.SessionId,sPValue)=rs.Data("PrincipalValue")
 			
 			set ^CacheTempaRV(%session.SessionId,sPValue,sRTSystem) = $P(^CacheTempaRV(%session.SessionId,sPValue,sRTSystem),"^",1)+1_"^"_%session.Data("aRTSystem",sRTSystem,"ID")
 			
 			set ^CacheTempaRV(%session.SessionId,sPValue,sRTSystem,sRValue)=rs.Data("ID")
 			
 			
 			
 		}
 		do rs.Close()	
 		
 	}
 	
 	
 }
 
 
 Quit "OK"
]]></Implementation>
</Method>

<Method name="removeRV">
<ClassMethod>1</ClassMethod>
<FormalSpec>RVId:%String,PVId:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 do ..AuditChanges("removeRV","remove RValue: "_##class(IIBAENSEMBLE.Reference.RelatedValue).%OpenId(RVId).RValue,%session.Data("sPTID"),,PVId,RVId)
 
 do ##class(IIBAENSEMBLE.Reference.RelatedValue).%OpenId(RVId).attrDelete()
 
 do ##class(IIBAENSEMBLE.Reference.RelatedValue).%DeleteId(RVId)
 
 do ..getTblData(%session.Data("sPTName"),%session.Data("sPTSystem"),%session.Data("sPTPrincipalRole"))
 
 do ..rowEditCancel(PVId)
 
 Quit "OK"
]]></Implementation>
</Method>

<Method name="removeRVConfMsg">
<ClassMethod>1</ClassMethod>
<FormalSpec>RVId:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 set Results = ""
 set rs = ##class(%ResultSet).%New()
 set SQL = "select RValue, RelatedType->System "
 set SQL=SQL_" from IIBAENSEMBLE_Reference.RelatedValue WHERE ID = "_RVId
 do rs.Prepare(SQL)
 do rs.Execute()
 set tNext = rs.Next()
 if tNext = 1 {
 	set Results = "Do you wish to delete "_rs.Data("System")_" value: "_rs.Data("RValue")_"?"
 }
 Quit Results
]]></Implementation>
</Method>

<Method name="removeRVcheckatleastoneremains">
<ClassMethod>1</ClassMethod>
<FormalSpec>RVId:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 set PVId = ""
 set RVCount = ""
 &sql(select PrincipalValue->ID into :PVId from IIBAENSEMBLE_Reference.RelatedValue WHERE ID = :RVId)
 &sql(select count(RValue) as RVcount into :RVCount from IIBAENSEMBLE_Reference.RelatedValue WHERE PrincipalValue->ID = :PVId)
 
 Quit RVCount
]]></Implementation>
</Method>

<Method name="rowDelete">
<ClassMethod>1</ClassMethod>
<FormalSpec>PVId:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 set rs = ##class(%ResultSet).%New()
 do rs.Prepare("select ID from IIBAENSEMBLE_Reference.RelatedValue WHERE PrincipalValue->ID = "_PVId)
 do rs.Execute()
 While rs.Next() {
	do ..AuditChanges("rowDelete","remove RValue: "_##class(IIBAENSEMBLE.Reference.RelatedValue).%OpenId(rs.Data("ID")).RValue,%session.Data("sPTID"),##class(IIBAENSEMBLE.Reference.RelatedValue).%OpenId(rs.Data("ID")).RelatedType.%Id(),PVId,rs.Data("ID"))
	do ##class(IIBAENSEMBLE.Reference.RelatedValue).%OpenId(rs.Data("ID")).attrDelete() 
 	do ##class(IIBAENSEMBLE.Reference.RelatedValue).%DeleteId(rs.Data("ID"))
 }
 do rs.Close()
 //&sql(DELETE from IIBAENSEMBLE_Reference.RelatedValue WHERE PrincipalValue->ID = :PVId)
 do ..AuditChanges("rowDelete","remove PValue: "_##class(IIBAENSEMBLE.Reference.PrincipalValue).%OpenId(PVId).PValue,%session.Data("sPTID"),,PVId)
 do ##class(IIBAENSEMBLE.Reference.PrincipalValue).%DeleteId(PVId)
 
 do ..getTblData(%session.Data("sPTName"),%session.Data("sPTSystem"),%session.Data("sPTPrincipalRole"))
 
 Quit "OK"
]]></Implementation>
</Method>

<Method name="rowDeleteConfMsg">
<ClassMethod>1</ClassMethod>
<FormalSpec>PVId:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 set Results = ""
 
 set rs = ##class(%ResultSet).%New()
 set SQL = "select RValue, RelatedType->System, PrincipalValue->PValue "
 set SQL=SQL_" from IIBAENSEMBLE_Reference.RelatedValue WHERE PrincipalValue->ID = "_PVId
 do rs.Prepare(SQL)
 do rs.Execute()
 set tNext = rs.Next()
 if tNext = 1 {
 	set Results = "Do you wish to delete "_%session.Data("sPTSystem")_" "_%session.Data("sPTPrincipalRole")_" value: "_rs.Data("PValue")_$C(13,10)_$C(13,10)_"AND the following related values?"_$C(13,10)_$C(13,10)
 	set Results=Results_rs.Data("System")_": "_rs.Data("RValue")_$C(13,10)
 
 }
 
 While rs.Next() {
 	set Results=Results_rs.Data("System")_": "_rs.Data("RValue")_$C(13,10)
 }
 do rs.Close()
 
 Quit Results
]]></Implementation>
</Method>

<Method name="rowEditCancel">
<ClassMethod>1</ClassMethod>
<FormalSpec>PVId:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 	
 	&js<
 		var row=document.getElementById('row'+#(PVId)#);
 		for (var i=0; i &lt; row.cells.length -2; ++i) {
 			while (row.cells[i].hasChildNodes())
 			{
 				row.cells[i].removeChild(row.cells[i].childNodes[0]);
 			}
 				
 		}
 		
 				
 	>
 	
 	
 	
 	
 	set oPV = ##class(IIBAENSEMBLE.Reference.PrincipalValue).%OpenId(PVId)
 	
 	set sPValue = oPV.PValue
 	
 	
 	
 	&js<
 	var c=document.getElementById('PV^'+'#(^CacheTempaRV(%session.SessionId,sPValue))#');
 	var newdiv = document.createElement('div');
 	newdiv.id = 'PVD^#(PVId)#';
 	newdiv.innerHTML="#(sPValue)#".replace(/ /g,'&nbsp;');
 	newdiv.className = 'PTsv';
 	c.appendChild(newdiv);
 	>
 	
 	set i=0
 	set sUCRT="",sRTSystem=""
	For  { Set sUCRT=$O(^CacheTempaRV(%session.SessionId_"UpperCase",$ZCVT(sPValue,"U"),sUCRT)) Q:sUCRT=""
	//For  { Set sRTSystem=$O(^CacheTempaRV(%session.SessionId,sPValue,sRTSystem)) Q:sRTSystem=""
 		set sRTSystem = ^CacheTempaRV(%session.SessionId_"UpperCase",$ZCVT(sPValue,"U"),sUCRT)
 		set sRVCount = $P(^CacheTempaRV(%session.SessionId,sPValue,sRTSystem),"^",1)
 		set sRTID = $P(^CacheTempaRV(%session.SessionId,sPValue,sRTSystem),"^",2)
 		if sRVCount=0{ 
 			&js<
 			//var row=document.getElementById('row#(PVId)#');
 			//var c=row.cells[#(i)#]
 			var c=document.getElementById('RV^#(PVId)#^#(sRTID)#')
 			c.innerHTML='&nbsp;';
 			
 			>
 			
 		}
 		
 		
 		
 		set sUCRV="", sRValue=""
 		For  { Set sUCRV=$O(^CacheTempaRV(%session.SessionId_"UpperCase",$ZCVT(sPValue,"U"),sUCRT,sUCRV)) Q:sUCRV=""
 		//For  { Set sRValue=$O(^CacheTempaRV(%session.SessionId,sPValue,sRTSystem,sRValue)) Q:sRValue=""
 			set sRValue = ^CacheTempaRV(%session.SessionId_"UpperCase",$ZCVT(sPValue,"U"),sUCRT,sUCRV)
 			set sRVID = ^CacheTempaRV(%session.SessionId,sPValue,sRTSystem,sRValue)
 			
 			if sRVCount=1{
 					&js<
 					//var row=document.getElementById('row#(PVId)#');
 					//var c=row.cells[#(i)#]
 					var c=document.getElementById('RV^#(PVId)#^#(sRTID)#')
 					if (!c)
 					{
 						var c=document.getElementById('RVL^#(PVId)#^#(sRTID)#')
 						c.id = 'RV^#(PVId)#^#(sRTID)#'
 						c.className='RT';
 					}
 					var newdiv = document.createElement('div');
 					newdiv.className='RVD';
 					newdiv.id = 'RVD^#(sRVID)#^#(sRTID)#';
 					newdiv.innerHTML="#(sRValue)#".replace(/ /g,'&nbsp;');
 					c.appendChild(newdiv);
 					>
 			} elseif sRVCount>1  {
 				if %session.Data("HideMultiples")="true" {
 						
 					&js<
 					//var row=document.getElementById('row#(PVId)#');
 					//	var c=row.cells[#(i)#]
 						var c=document.getElementById('RVL^#(PVId)#^#(sRTID)#')
 						if (!c)
 						{
 							var c=document.getElementById('RV^#(PVId)#^#(sRTID)#')
 							c.id = 'RVL^#(PVId)#^#(sRTID)#'
 						}
 						c.className='less'
 						c.innerHTML='...';
 						c.onclick = function () {showRValues('#(PVId)#','#(sRTID)#')};
 					>
 						
 					Quit
 				} else {
 						
 					&js<
 					//var row=document.getElementById('row#(PVId)#');
 					//	var c=row.cells[#(i)#]
 						var c=document.getElementById('RV^#(PVId)#^#(sRTID)#')
 						var newdiv = document.createElement('div');
 						newdiv.className='RVD';
 						newdiv.id = 'RVD^#(sRVID)#^#(sRTID)#';
 						newdiv.innerHTML="#(sRValue)#".replace(/ /g,'&nbsp;');
 						c.appendChild(newdiv);
 					>
 						
 				}
 			}
 		}
 	set i=i+1
 	}
 	
 
 Quit "OK"
]]></Implementation>
</Method>

<Method name="rowEditSave">
<ClassMethod>1</ClassMethod>
<FormalSpec>PVId:%String,sValues:%CSP.CharacterStream</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 	
 	set newRV = "false"
 	
 	//failing on large strings 32656.
 	//fix-input 'sValues As %CSP.CharacterStream'
 	s tValidOBJ = $CLASSNAME(sValues)
 	
 	s tStream = ##class(%GlobalCharacterStream).%New()
 	do tStream.LineTerminatorSet($C(10))
		
	if tValidOBJ = "%CSP.CharacterStream"{
		//For larger files use CopyFrom
		//Larger files will be passed as %CSP.CharacterStream reference to the page.
		d tStream.CopyFrom(sValues)
	}else{
		//This is used with smaller files where the sValues passes the value as a Text %String and will need to write to %GlobalCharacterStream
		d tStream.Write(sValues)
	}
 	//&js<alert('test');>
 	while 'tStream.AtEnd {
	 	
	 	
	 	s ValueIDSet = tStream.ReadLine()
	 	//&js<alert('#(ValueIDSet)#');>
	 	set IDSet = $P(ValueIDSet,"|",1)
		set Value = $P(ValueIDSet,"|",2)
		set vType = $P(IDSet,"^",1)
		set vID = $P(IDSet,"^",2)
		set RTId = $P(IDSet,"^",3)
		
		//...
		
	/* 	
 	}
//OLD CODE 	
	for i=1:1:$L(sValues,$C(10)) {
		set ValueIDSet = $P(sValues,$C(10),i)
		set IDSet = $P(ValueIDSet,"|",1)
		set Value = $P(ValueIDSet,"|",2)
		set vType = $P(IDSet,"^",1)
		set vID = $P(IDSet,"^",2)
		set RTId = $P(IDSet,"^",3)
	*/
		
		//&js<alert('#(Value)#'+'-'+'#(vID)#'+'-'+'#(%session.Data("sPTID"))#')>
		if Value'=""{
			
			if vID="" {
				//create new
				if vType = "PVI" {
					set newPV = "true"
					
					
					if ..checkPValueExists(Value,%session.Data("sPTID"))=1 {
						//raise alert
						&js<alert('The value: '+'#(Value)#'+' for PrincipalType: '+'#(%session.Data("sPTSystem"))#'+' already exists.');>
						
					} else {
						set oPV = ##class(IIBAENSEMBLE.Reference.PrincipalValue).%New()
						set oPV.PValue = Value
						set oPV.PrincipalType = ##class(IIBAENSEMBLE.Reference.PrincipalType).%OpenId(%session.Data("sPTID"))
						do oPV.%Save()
						set PVId = oPV.%Id()
						do ..AuditChanges("rowEditSave","new PValue:"_Value,%session.Data("sPTID"),,PVId)
					}
					
				}
		
				if (vType = "RVI")&&(PVId'="None") {
					if ..checkRValueExists(Value,%session.Data("sPTID"),RTId) && (%session.Data("sPTPrincipalRole")="target") {
						//raise alert
						&js<alert('The value: '+'#(Value)#'+' for RelatedType: '+'#(##class(IIBAENSEMBLE.Reference.RelatedType).%OpenId(RTId).System)#'+' already exists.');>
					} else {
						set oRV = ##class(IIBAENSEMBLE.Reference.RelatedValue).%New()
						set oRV.RValue = Value
						set oRV.PrincipalValue = oPV
						set oRV.RelatedType = ##class(IIBAENSEMBLE.Reference.RelatedType).%OpenId(RTId)
						do oRV.%Save()
						do ..AuditChanges("rowEditSave","new RValue:"_Value,%session.Data("sPTID"),RTId,PVId,oRV.%Id())
						do oRV.%Close()
						set oRV = ""
						set newRV = "true"
						
					}
				}
			} else {
				if vType = "PVI" {
					set newPV = "false"
					//update Principal Value
					set oPV = ##class(IIBAENSEMBLE.Reference.PrincipalValue).%OpenId(vID)
					if oPV.PValue'=Value {
						//Check to see that the new value is unique
						if ..checkPValueExists(Value,oPV.PrincipalType.%Id())=1 {
							//raise alert
							&js<alert('The value: '+'#(Value)#'+' for PrincipalType: '+'#(%session.Data("sPTSystem"))#'+' already exists.');>
						} else {
							do ..AuditChanges("rowEditSave","old PValue:"_oPV.PValue_", new PValue:"_Value,%session.Data("sPTID"),,PVId)
							set oPV.PValue=Value
							do oPV.%Save()
						}
					}

				}
				if vType = "RVI" {
					//update Related Value
					set oRV = ##class(IIBAENSEMBLE.Reference.RelatedValue).%OpenId(vID)
					if oRV.RValue'=Value {
						//Check to see that the new value is unique
						if ..checkRValueExists(Value,oRV.PrincipalValue.PrincipalType.%Id(),oRV.RelatedType.%Id()) && (%session.Data("sPTPrincipalRole")="target"){
							//raise alert
							&js<alert('The value: '+'#(Value)#'+' for RelatedType: '+'#(##class(IIBAENSEMBLE.Reference.RelatedType).%OpenId(RTId).System)#'+' already exists.');>
						} else {
							do ..AuditChanges("rowEditSave","old RValue:"_oRV.RValue_", new RValue:"_Value,%session.Data("sPTID"),oRV.RelatedType.%Id(),oRV.PrincipalValue.%Id(),oRV.%Id())
							set oRV.RValue=Value
							do oRV.%Save()
						}
					}
					do oRV.%Close()
					set oRV = ""	
				}
			}
			
		} else {
			if (vID'="")&&(vType="RVI") {
				&js<alert('Existing related values cannot be removed by clearing the input box, please use the trash icon instead.');>
			}
		}
	}
	
	do ..getTblData(%session.Data("sPTName"),%session.Data("sPTSystem"),%session.Data("sPTPrincipalRole"))
	
	if newPV'="true" {
		do ..rowEditCancel(PVId)
	} else {
		if PVId '= "None" {
			if newRV = "false" {
				do ##class(IIBAENSEMBLE.Reference.PrincipalValue).%DeleteId(PVId)
				&js<alert('Principal Value not saved because no new Related Values were entered.');>
			} elseif newRV = "true" {
				do ..rowInsert(PVId)
			}
		}
	}
	set newPV=""
	
	if PVId '= "None" {
		do oPV.%Close()
	}
	set oPV = ""	
	

	Quit tStream
]]></Implementation>
</Method>

<Method name="rowInsert">
<ClassMethod>1</ClassMethod>
<FormalSpec>PVId:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 	set oPV = ##class(IIBAENSEMBLE.Reference.PrincipalValue).%OpenId(PVId)
 	
 	set sPValue = oPV.PValue
 	
 	set sPVID = PVId
 
 	&js<
 	var row = document.getElementById('refTable').insertRow(0);
 	row.className = 'EvenRow';
 	row.id = 'row#(sPVID)#'
 	>
 	
 	set cellcount=0
 	
 	if %session.Data("sPTPrincipalRole") = "source" { 
 		&js<var r=document.getElementById('refTable').rows[0];
 		var c=r.insertCell(#(cellcount)#);
 			c.id='PV^#(sPVID)#';
 			c.className='PTsv';
 			var newdiv = document.createElement('div');
 			newdiv.id = 'PVD^#(sPVID)#';
 			newdiv.innerHTML="#(sPValue)#".replace(/ /g,'&nbsp;');
 			newdiv.className = 'PTsv';
 			c.appendChild(newdiv);>
 			set cellcount = cellcount+1
 		}
 	
 	
 	set sUCRT="",sRTSystem=""
	For  { Set sUCRT=$O(^CacheTempaRV(%session.SessionId_"UpperCase",$ZCVT(sPValue,"U"),sUCRT)) Q:sUCRT=""
	//For  { Set sRTSystem=$O(^CacheTempaRV(%session.SessionId,sPValue,sRTSystem)) Q:sRTSystem=""
 		set sRTSystem = ^CacheTempaRV(%session.SessionId_"UpperCase",$ZCVT(sPValue,"U"),sUCRT)
 		set sRVCount = $P(^CacheTempaRV(%session.SessionId,sPValue,sRTSystem),"^",1)
 		set sRTID = $P(^CacheTempaRV(%session.SessionId,sPValue,sRTSystem),"^",2)
 		if sRVCount=0{ 
 			&js<var r=document.getElementById('refTable').rows[0];
 			var c=r.insertCell(#(cellcount)#);
 			c.id='RV^#(sPVID)#^#(sRTID)#';
 			c.className='RT';
 			c.innerHTML='&nbsp;';>
 			set cellcount = cellcount+1
 		}	
 		
 		
 		set sUCRV="", sRValue="", iRVCount = 0
		For  { Set sUCRV=$O(^CacheTempaRV(%session.SessionId_"UpperCase",$ZCVT(sPValue,"U"),sUCRT,sUCRV)) Q:sUCRV=""
		//For  { Set sRValue=$O(^CacheTempaRV(%session.SessionId,sPValue,sRTSystem,sRValue)) Q:sRValue=""
 			set sRValue = ^CacheTempaRV(%session.SessionId_"UpperCase",$ZCVT(sPValue,"U"),sUCRT,sUCRV)
 			set sRVID = ^CacheTempaRV(%session.SessionId,sPValue,sRTSystem,sRValue)
 			
 			if sRVCount=1{
 				&js<var r=document.getElementById('refTable').rows[0];
 				var c=r.insertCell(#(cellcount)#);
 				c.id='RV^#(sPVID)#^#(sRTID)#';
 				c.className='RT';
 				var newdiv = document.createElement('div');
 				newdiv.className='RVD';
 				newdiv.id = 'RVD^#(sRVID)#^#(sRTID)#';
 				newdiv.innerHTML="#(sRValue)#".replace(/ /g,'&nbsp;');
 				c.appendChild(newdiv);
 				>
 				set cellcount = cellcount+1
 			
 			} elseif sRVCount>1  {
 				if %session.Data("HideMultiples")="true" {
 						
 					&js<var r=document.getElementById('refTable').rows[0];
 					var c=r.insertCell(#(cellcount)#);
 					c.id='RVL^#(sPVID)#^#(sRTID)#';
 					c.innerHTML='...';
 					c.className='less';
 					c.onclick = function () {showRValues('#(sPVID)#','#(sRTID)#')};
 					>
 						
 					set cellcount = cellcount+1
 						
 					Quit
 				} else {
 					set iRVCount = iRVCount+1
 					if iRVCount = 1 {
 						&js<var r=document.getElementById('refTable').rows[0];
 						var c=r.insertCell(#(cellcount)#);
 						c.id='RV^#(sPVID)#^#(sRTID)#';
 						c.className='RT';
 						>
 						set cellcount = cellcount+1
 					}
 					&js<var c=document.getElementById('RV^#(sPVID)#^#(sRTID)#');
 						var newdiv = document.createElement('div');
 						newdiv.className='RVD';
 						newdiv.id = 'RVD^#(sRVID)#^#(sRTID)#';
 						newdiv.innerHTML="#(sRValue)#".replace(/ /g,'&nbsp;');
 						c.appendChild(newdiv);
 					>
 						
 				}
 			}
 			
 		}
 	
 	}
 	if %session.Data("sPTPrincipalRole") = "target" {
 		&js<var r=document.getElementById('refTable').rows[0];
 		var c=r.insertCell(#(cellcount)#);
 		c.id='PV^#(^CacheTempaRV(%session.SessionId,sPValue))#';
 		c.className='PTtv';
 		var newdiv = document.createElement('div');
 		newdiv.id = 'PVD^#(sPVID)#';
 		newdiv.innerHTML="#(sPValue)#".replace(/ /g,'&nbsp;');
 		newdiv.className='PTtv';
 		c.appendChild(newdiv);>
 		set cellcount = cellcount+1
 	}
 	//Req#1 - PHegel - Added permission check for editing cells
 	set bHasPermission = ..GetHasResourcePermission()
	if (bHasPermission=1){
	 	&js<var r=document.getElementById('refTable').rows[0];
	 		var c=r.insertCell(#(cellcount)#);
	 		c.innerHTML='<img title="Edit" src="customimages/edit.gif" id="edit" onclick="rowEdit(\'#(sPVID)#\');" >';
	 	>
	 	set cellcount = cellcount+1
	 	&js<var r=document.getElementById('refTable').rows[0];
	 		var c=r.insertCell(#(cellcount)#);
	 		c.innerHTML='<img title="Delete" src="customimages/trash_bold.gif" id="delete" onclick="rowDelete(\'#(sPVID)#\');" >';
	 	>
 	}
 	set cellcount = cellcount+1
 
 Quit "OK"
]]></Implementation>
</Method>

<Method name="showRValues">
<ClassMethod>1</ClassMethod>
<FormalSpec>sPVID:%String,sRTID:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 set cId = "RVL^"_sPVID_"^"_sRTID
 
 set rs = ##class(%ResultSet).%New()
 	
 do rs.Prepare("select ID, RValue from IIBAENSEMBLE_Reference.RelatedValue WHERE PrincipalValue = '"_sPVID_"' AND RelatedType = '"_sRTID_"' ORDER BY RValue")
 do rs.Execute()
 
 While rs.Next() {
 	
 	&js<
 	
 	var newdiv = document.createElement('div');
 	newdiv.className='RVD';
 	newdiv.id = 'RVD^#(rs.Data("ID"))#^#(sRTID)#';
 	newdiv.innerHTML = "#(rs.Data("RValue"))#".replace(/ /g,'&nbsp;');
 	document.getElementById('#(cId)#').appendChild(newdiv);
 	
 	
 	>
 	
 }
 do rs.Close()
 
 Quit "OK"
]]></Implementation>
</Method>

<Method name="saveDefaultValues">
<ClassMethod>1</ClassMethod>
<FormalSpec>DefaultValues:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	for i=2:1:$L(DefaultValues,",") {
		set ValueIDSet = $P(DefaultValues,",",i)
		set IDSet = $P(ValueIDSet,"|",1)
		set Value = $P(ValueIDSet,"|",2)
		set RTId = $P(IDSet,"^",2)
	
		set oRT = ##class(IIBAENSEMBLE.Reference.RelatedType).%OpenId(RTId)
		if oRT.DefaultValue '= Value {
			set oldValue = oRT.DefaultValue
			set oRT.DefaultValue = Value
			do oRT.%Save()
			set auditDesc = "Change RT Value from: "_oldValue_" To: "_Value
			do ..AuditChanges("saveDefaultValues",auditDesc,"",oRT.%Id())
		}
		set oRT = ""
		&js<document.getElementById('RT^'+'#(RTId)#').title='Default: '+'#(Value)#'>
	}
	set sHTML=..buildmodalDefaultsDiv()
	&js<document.getElementById('modalDefaultsDiv').innerHTML=#(..QuoteJS(sHTML))#;>
]]></Implementation>
</Method>

<Method name="saveEditResource">
<ClassMethod>1</ClassMethod>
<FormalSpec>strResource:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set oPT = ##class(IIBAENSEMBLE.Reference.PrincipalType).%OpenId(%session.Data("sPTID"))
	set auditDesc = "Change Resource from: "_oPT.Resource _" To: "_strResource
	set oPT.Resource = strResource
	d oPT.%Save()
	d ..AuditChanges("saveEditResource", auditDesc,oPT.%Id())
	set sHTML=..buildmodalEditResourceDiv()
	&js<document.getElementById('modalEditResourceDiv').innerHTML=#(..QuoteJS(sHTML))#;>	
 	Quit "OK"
]]></Implementation>
</Method>

<Method name="saveAddRelated">
<ClassMethod>1</ClassMethod>
<FormalSpec>addRTRTS:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set PTId = %session.Data("sPTID")
	
	//Check to see of RT is truly new
	set RTExists = 0
 	&sql(select CASE WHEN ID <> '' THEN 1 ELSE 0 END into :RTExists from IIBAENSEMBLE_Reference.RelatedType WHERE System = :addRTRTS AND PrincipalType = :PTId)
 	if RTExists {
	 	&js<alert('The Related Type #(addRTRTS)# already exists.');>
	 	Quit "Not Saved"
 	}
 	
 	//Create the RT using the PT
 	set oRT = ##class(IIBAENSEMBLE.Reference.RelatedType).%New()
 	set oRT.System = addRTRTS
 	set oRT.PrincipalType = ##class(IIBAENSEMBLE.Reference.PrincipalType).%OpenId(%session.Data("sPTID"))
 	set tSC = oRT.%Save()
 	set auditDesc = "Create Related Type: "_addRTRTS
	d ..AuditChanges("saveAddRelated", auditDesc,oRT.PrincipalType.%Id(), oRT.%Id())

 	Quit %session.Data("sPTID")
]]></Implementation>
</Method>

<Method name="saveNewRef">
<ClassMethod>1</ClassMethod>
<FormalSpec>newPTName:%String,newPTS:%String,newPTPR:%String,newRTRTS:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	//Check to see of PT is truly new
	set PTExists = 0
 	&sql(select CASE WHEN ID <> '' THEN 1 ELSE 0 END into :PTExists from IIBAENSEMBLE_Reference.PrincipalType WHERE Name = :newPTName)
 	if PTExists {
	 	&js<alert('The Reference Name #(newPTName)# already exists.');>
	 	Quit "Not Saved"
 	}
 	
 	//Create the PT
 	set oPT=##class(IIBAENSEMBLE.Reference.PrincipalType).%New()
 	set oPT.Name = newPTName
 	set oPT.System = newPTS
 	set oPT.PrincipalRole = newPTPR
 	set tSC = oPT.%Save()
 	
 	//Create the RT using the PT
 	set oRT = ##class(IIBAENSEMBLE.Reference.RelatedType).%New()
 	set oRT.System = newRTRTS
 	set oRT.PrincipalType = oPT
 	set tSC = oRT.%Save()
 	
 	set auditDesc = "PricipalType: "_newPTName_" RelatedType: "_newRTRTS
	d ..AuditChanges("saveNewRef", auditDesc,oPT.%Id(), oRT.%Id())

 		
	Quit oPT.%Id()
]]></Implementation>
</Method>

<Method name="ValidateHeader">
<ClassMethod>1</ClassMethod>
<FormalSpec>FileHeader:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 
 set lHeader = $LB("PTName","PTSystem","PTRole","PValue","RTSystem","RValue")
 
 set lCSV = ##class(IIBAENSEMBLE.Functions).ParseCSV(FileHeader)
 
 Set ReturnVal=1
 
 for i=1:1:$LL(lHeader) { 
 	if ($LL(lCSV)'=$LL(lHeader))||($LI(lCSV,i)'=$LI(lHeader,i)){
 		Set ReturnVal=0
 	}
 }
 
 
 Quit ReturnVal
]]></Implementation>
</Method>

<Method name="initImportData">
<ClassMethod>1</ClassMethod>
<FormalSpec>SessionId:%String</FormalSpec>
<Language>cache</Language>
<Implementation><![CDATA[
	kill ^CacheTempaImport(SessionId)
	kill ^CacheTempaPTAttr(SessionId)
	kill ^CacheTempaRTAttr(SessionId)
	kill ^CacheTempImportErrors(SessionId)
	kill ^CacheTempImportStatus(SessionId)
]]></Implementation>
</Method>

<Method name="collectImportData">
<ClassMethod>1</ClassMethod>
<FormalSpec>line:%String,SessionId:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set lCSV = ##class(IIBAENSEMBLE.Functions).ParseCSV(line)
 
	set sPTName=$LI(lCSV,1)
	set sPTSystem = $LI(lCSV,2)
	set sPTPrincipalRole = $LI(lCSV,3)
	set sPV = $LI(lCSV,4)
	set sRTSystem = $LI(lCSV,5)
	set sRV = $LI(lCSV,6)

	set ^CacheTempaImport(SessionId,sPTName,sPV,sRTSystem,sRV)=""
	set ^CacheTempaPTAttr(SessionId,sPTName,"System")=sPTSystem
	set ^CacheTempaPTAttr(SessionId,sPTName,"PrincipalRole")=sPTPrincipalRole
	set ^CacheTempaRTAttr(SessionId,sRTSystem) = ""
]]></Implementation>
</Method>

<Method name="removeExisting">
<ClassMethod>1</ClassMethod>
<FormalSpec>SessionId:%String</FormalSpec>
<Language>cache</Language>
<Implementation><![CDATA[
	set sPTName=""
	For  { Set sPTName=$O(^CacheTempaImport(SessionId,sPTName)) Q:sPTName=""
		set sRTSystem=""
		For  { Set sRTSystem=$O(^CacheTempaRTAttr(SessionId,sRTSystem)) Q:sRTSystem=""
			s RTId="",PTId=""
			&sql(SELECT ID INTO :RTId
				FROM IIBAENSEMBLE_Reference.RelatedType 
				WHERE System = :sRTSystem AND PrincipalType->Name = :sPTName)
			if SQLCODE = 0 d ..removeRVsforRT(RTId)
		}				
	}
]]></Implementation>
</Method>

<Method name="removeRVsforRT">
<ClassMethod>1</ClassMethod>
<FormalSpec>RTId:%Integer</FormalSpec>
<Language>cache</Language>
<Implementation><![CDATA[
	set oRT = ##class(IIBAENSEMBLE.Reference.RelatedType).%OpenId(RTId)
	set oPT = oRT.PrincipalType
	
	set rs = ##class(%ResultSet).%New()
	set SQL = "select ID, PrincipalValue as PVID "
	set SQL=SQL_"from IIBAENSEMBLE_Reference.RelatedValue "
	set SQL=SQL_"WHERE RelatedType = "_RTId_" AND PrincipalValue->PrincipalType = "_oPT.%Id()_" "
	
	set auditDesc = "Remove for PrincipalType: "_oPT.Name _" RelatedType: "_oRT.System
	d ..AuditChanges("removeRVsforRT", auditDesc,oPT.%Id(), oRT.%Id())
	
	do rs.Prepare(SQL)
	do rs.Execute()	
	While rs.Next() {
		set oRV = ##class(IIBAENSEMBLE.Reference.RelatedValue).%OpenId(rs.Data("ID"))
		set oPV = ##class(IIBAENSEMBLE.Reference.PrincipalValue).%OpenId(rs.Data("PVID"))
		d oPV.RelatedValues.UnRelate(oRV)
		d oRT.RelatedValues.UnRelate(oRV)
		set RVID = rs.Data("ID")
		kill oRV
		&sql(DELETE FROM IIBAENSEMBLE_Reference.RelatedValue WHERE ID = :RVID)
		if oPV.RelatedValues.Count() = 0 {
			d oPT.PrincipalValues.UnRelate(oPV)
			set PVID = rs.Data("PVID")
			kill oPV
			&sql(DELETE FROM IIBAENSEMBLE_Reference.PrincipalValue WHERE ID = :PVID)
		}
	}
	do rs.Close()
]]></Implementation>
</Method>

<Method name="removeRT">
<ClassMethod>1</ClassMethod>
<FormalSpec>RTId:%Integer</FormalSpec>
<Language>cache</Language>
<Implementation><![CDATA[
	d ..removeRVsforRT(RTId)
	set oRT = ##class(IIBAENSEMBLE.Reference.RelatedType).%OpenId(RTId)
	set oPT = oRT.PrincipalType
	d oPT.RelatedTypes.UnRelate(oRT)
	set auditDescription="Remove RVs for: "_RTId
	do ..AuditChanges("removeRT",auditDescription,oPT.%Id(),RTId)
	kill oRT
	&sql(DELETE FROM IIBAENSEMBLE_Reference.RelatedType WHERE ID = :RTId)
]]></Implementation>
</Method>

<Method name="removeRelated">
<ClassMethod>1</ClassMethod>
<FormalSpec>sPTId:%String,RTSystems:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set lRTSystems = $LFS(RTSystems)
	for i=1:1:$LL(lRTSystems)-1 {
		d ..removeRT($LI(lRTSystems,i))
	}
	s oPT = ##class(IIBAENSEMBLE.Reference.PrincipalType).%OpenId(sPTId)
	set auditDescription="Remove Related Systems: "_RTSystems_" PTId: "_sPTId
	do ..AuditChanges("removeRelated",auditDescription,sPTId)
	if oPT.RelatedTypes.Count() = 0 {
		kill oPT
		&sql(DELETE FROM IIBAENSEMBLE_Reference.PrincipalType WHERE ID = :sPTId)
		Quit ""
	} else { 
		Quit sPTId
	}
]]></Implementation>
</Method>

<Method name="importData">
<ClassMethod>1</ClassMethod>
<FormalSpec>importstream:%GlobalCharacterStream,importType:%String,SessionId:%String=""</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 	if SessionId = "" { set SessionId = %session.SessionId }
 	set result="{"
 	
 	if '..ValidateHeader(importstream.ReadLine()) {
		set result=result_"validated: false"
		set result=result_"}"
		Quit result
	} else {
		set result=result_"validated: true,"
	}
	
	
	s EnsSysDir = ##class(%File).ParentDirectoryName(##class(%File).ManagerDirectory())
	s filetimestamp = ##class(Ens.Util.Time).FormatDateTime("%Y%m%d%H%M%S")
	
	s xRefImportDir = ##class(%File).NormalizeDirectory(EnsSysDir_"xRefImports\new\")
	if '##class(%File).DirectoryExists(xRefImportDir) { 
		d ##class(%File).CreateDirectoryChain(xRefImportDir) 
	}
	
	s file = ##class(%File).%New(xRefImportDir_importType_"_"_%session.SessionId_"_"_filetimestamp_".csv")
	d file.Open("WSN")
	
	set count = 0
	
	while 'importstream.AtEnd { 
		d file.WriteLine(importstream.ReadLine()) 
		set count = count+1
	}
	
	d file.Close()
	
	do ..AuditChanges("importData","Import file name: "_xRefImportDir_importType_"_"_%session.SessionId_"_"_filetimestamp_".csv")
	
	set result=result_"EnsSysDir: "_..QuoteJS(EnsSysDir)_","
	set result=result_"filetimestamp: """_filetimestamp_""","
	set result=result_"count: "_count_","
	set result=result_"SessionId: """_SessionId_""""
	set result=result_"}"
	
	Quit result
]]></Implementation>
</Method>

<Method name="getPTobj">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[sPTName:%String,sPTRole:%String,sPTSystem:%String,&tSC:%Status=1]]></FormalSpec>
<ReturnType>IIBAENSEMBLE.Reference.PrincipalType</ReturnType>
<Implementation><![CDATA[
	set sPTID=""
	&sql(select ID into :sPTID from IIBAENSEMBLE_Reference.PrincipalType where Name = :sPTName)
	if SQLCODE '= 0 s sPTID = ""
	if sPTID'="" {
		set oPT = ##class(IIBAENSEMBLE.Reference.PrincipalType).%OpenId(sPTID)
	} else {
		set oPT = ##class(IIBAENSEMBLE.Reference.PrincipalType).%New()
		set oPT.Name=sPTName
		set oPT.System=sPTSystem
		set oPT.PrincipalRole=$ZCVT(sPTRole,"L")
		set tSC = oPT.%Save()
		//if 'tSC { set ^CacheTempImportErrors(%session.SessionId,"PT",sPTName)=$System.OBJ.DisplayError(tSC) }
		set sPTID=oPT.%Id()
	}
	Quit oPT
]]></Implementation>
</Method>

<Method name="getPVobj">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[sPV:%String,sPTID:%String,&tSC:%Status=1]]></FormalSpec>
<ReturnType>IIBAENSEMBLE.Reference.PrincipalValue</ReturnType>
<Implementation><![CDATA[
	set sPVID=""
	
	&sql(select ID into :sPVID from IIBAENSEMBLE_Reference.PrincipalValue where PValue = :sPV AND PrincipalType = :sPTID)
	if SQLCODE '= 0 s sPVID = ""
	
	if sPVID'=""{
		set oPV = ##class(IIBAENSEMBLE.Reference.PrincipalValue).%OpenId(sPVID)
	} else {
		set oPV = ##class(IIBAENSEMBLE.Reference.PrincipalValue).%New()
		set oPV.PValue=sPV
		set oPV.PrincipalType=##class(IIBAENSEMBLE.Reference.PrincipalType).%OpenId(sPTID)
		set tSC = oPV.%Save()
		//if 'tSC { set ^CacheTempImportErrors(%session.SessionId,"PV",sPV)=$System.OBJ.DisplayError(tSC) }
		set sPVID=oPV.%Id()
	}
	Quit oPV
]]></Implementation>
</Method>

<Method name="getRTobj">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[sRTSystem:%String,sPTID:%String,&tSC:%Status=1]]></FormalSpec>
<ReturnType>IIBAENSEMBLE.Reference.RelatedType</ReturnType>
<Implementation><![CDATA[
	set sRTID=""
	&sql(select ID into :sRTID from IIBAENSEMBLE_Reference.RelatedType where System = :sRTSystem AND PrincipalType = :sPTID)
	if SQLCODE '= 0 s sRTID = ""
	if sRTID'="" {
		set oRT = ##class(IIBAENSEMBLE.Reference.RelatedType).%OpenId(sRTID)
	} else {
		set oRT = ##class(IIBAENSEMBLE.Reference.RelatedType).%New()
		set oRT.System=sRTSystem
		set oRT.PrincipalType=##class(IIBAENSEMBLE.Reference.PrincipalType).%OpenId(sPTID)
		set tSC = oRT.%Save()
		//if 'tSC { set ^CacheTempImportErrors(%session.SessionId,"RT",sRTSystem)=$System.OBJ.DisplayError(tSC) }
		set sRTID=oRT.%Id()
	}
	Quit oRT
]]></Implementation>
</Method>

<Method name="getRVID">
<ClassMethod>1</ClassMethod>
<FormalSpec>sRV:%String,sPVID:%String,sRTID:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set sRVID=""
	&sql(select ID into :sRVID from IIBAENSEMBLE_Reference.RelatedValue where RValue = :sRV AND PrincipalValue = :sPVID AND RelatedType = :sRTID)
	if SQLCODE '= 0 s sRVID = ""
	
	Quit sRVID
]]></Implementation>
</Method>

<Method name="doRVUpSert">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[oPT:IIBAENSEMBLE.Reference.PrincipalType,oRT:IIBAENSEMBLE.Reference.RelatedType,oPV:IIBAENSEMBLE.Reference.PrincipalValue,sRV:%String,&tSC:%Status=1]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sPTID = oPT.%Id()
	set sRTID = oRT.%Id()
	set sPVID = oPV.%Id()
	set sRVID = ""
	
	set AuditRVIDprev = ""
	set AuditRValueprev = ""
	set AuditRVIDnew = ""
	set AuditRValuenew = ""
	set AuditPVIDprev = ""
	
	set RVExists = ..checkRValueExists(sRV,sPTID,sRTID)
	set RVAlreadyMapped = 0 //This remains zero for Principal Role "target" because multiple RVs are allowed to be mapped to a target PV
	if oPT.PrincipalRole="source" {
		//this count reveals whether any other related value is already mapped to this principal value
		&sql(select COUNT(ID) as RVCount into :RVAlreadyMapped from IIBAENSEMBLE_Reference.RelatedValue WHERE PrincipalValue = :sPVID and RelatedType = :sRTID)
		
	}
	
	if RVAlreadyMapped>0 {
		//first, drop the existing mapped Related Value where the PT Role is source and a different RV is already mapped to this PV
		&sql(select ID into :sRVID from IIBAENSEMBLE_Reference.RelatedValue where PrincipalValue = :sPVID and RelatedType = :sRTID)
		if SQLCODE '= 0 s sRVID = "" 
		set oRV = ##class(IIBAENSEMBLE.Reference.RelatedValue).%OpenId(sRVID)
		set AuditRVIDprev = sRVID
		set AuditRValueprev = oRV.RValue
		d oPV.RelatedValues.UnRelate(oRV)
		d oRT.RelatedValues.UnRelate(oRV)
		kill oRV
		&sql(DELETE FROM IIBAENSEMBLE_Reference.RelatedValue WHERE ID = :sRVID)
		set sRVID = ""
	}
	
	if RVExists && (oPT.PrincipalRole="target") {
		&sql(select ID into :sRVID from IIBAENSEMBLE_Reference.RelatedValue where RValue = :sRV AND PrincipalValue->PrincipalType = :sPTID AND RelatedType = :sRTID)
		if SQLCODE '= 0 s sRVID = ""
		set oRV = ##class(IIBAENSEMBLE.Reference.RelatedValue).%OpenId(sRVID)
		set AuditRVIDprev = sRVID
		set AuditRValueprev = oRV.RValue
		set tPVID = oRV.PrincipalValue.%Id()
		set AuditPVIDprev = tPVID
		set oRV.PrincipalValue=oPV
		set tSC = oRV.%Save()
		//if 'tSC { set ^CacheTempImportErrors(%session.SessionId,"RV",sRV)=$System.OBJ.DisplayError(tSC) }
		set tPV = ##class(IIBAENSEMBLE.Reference.PrincipalValue).%OpenId(tPVID)
		if tPV.RelatedValues.Count() = 0 {
			d oPT.PrincipalValues.UnRelate(tPV)
			kill tPV
			&sql(DELETE FROM IIBAENSEMBLE_Reference.PrincipalValue WHERE ID = :tPVID)
		}
	} else {
		set oRV = ##class(IIBAENSEMBLE.Reference.RelatedValue).%New()
		set oRV.RValue=sRV
		set oRV.PrincipalValue=oPV
		set oRV.RelatedType=oRT
		set tSC = oRV.%Save()
		//if 'tSC { set ^CacheTempImportErrors(%session.SessionId,"RV",sRV)=$System.OBJ.DisplayError(tSC) }
		set sRVID=oRV.%Id()
	}
	set AuditRVIDnew = sRVID
	set AuditRValuenew = oRV.RValue
	
	//Audit the following details:
	//sPTID, sRTID, sPVID, AuditPVIDprev, AuditRVIDprev, AuditRValueprev, AuditRVIDnew, AuditRValuenew
	set auditDescription = ""
	if AuditPVIDprev '= "" set auditDescription = auditDescription_" previous PVID: "_AuditPVIDprev_","
	if AuditRVIDprev '= "" set auditDescription = auditDescription_" previous RVID: "_AuditRVIDprev_", previous RValue: "_AuditRValueprev_","
	set auditDescription = auditDescription_" new Rvalue:"_AuditRValuenew
	do ..AuditChanges("doRVUpSert",auditDescription,sPTID,sRTID,sPVID,sRVID)
	
	Quit tSC
]]></Implementation>
</Method>

<Method name="testCall">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	//set result = ..importData()
	//d ..removeExisting()
	//&js<alert("#(result)#");>
]]></Implementation>
</Method>

<Method name="AuditChanges">
<ClassMethod>1</ClassMethod>
<FormalSpec>method:%String,Description:%String="",PTId:%String="",RTId:%String="",PVId:%String="",RVId:%String=""</FormalSpec>
<Implementation><![CDATA[
	set sPTName = ""
	set sRTSystem = ""
	set PValue = ""
	set RValue = ""
	set:PTId'="" sPTName = ##class(IIBAENSEMBLE.Reference.PrincipalType).%OpenId(PTId).Name
	if RTId '= "" set sRTSystem = ##class(IIBAENSEMBLE.Reference.RelatedType).%OpenId(RTId).System
	if PVId '= "" set PValue = ##class(IIBAENSEMBLE.Reference.PrincipalValue).%OpenId(PVId).PValue
	if RVId '= "" set RValue = ##class(IIBAENSEMBLE.Reference.RelatedValue).%OpenId(RVId).RValue	
	if $L(Description)>128
		set Description = $E(Description,1,128)
	set Source = "IIBAENSEMBLE.csp.Reference"
	set Type = "xRef"
	set Name = "Edit"
	set EventData = "{""method"":"""_method_""",""PTName"":"""_sPTName_""",""PTId"":"""_PTId_""",""RTSystem"":"""_sRTSystem_""",""RTId"":"""_RTId_""",""PValue"":"""_PValue_""",""PVId"":"""_PVId_""",""RValue"":"""_RValue_""",""RVId"":"""_RVId_"""}"
	d $SYSTEM.Security.Audit(Source,Type,Name,EventData,Description)
]]></Implementation>
</Method>

<Method name="getImportStatus">
<ClassMethod>1</ClassMethod>
<FormalSpec>SessionId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set result = ""
	
	if $D(^CacheTempImportStatus(SessionId,"rvcount"))'=0{
		set result="{"
		set result=result_"totalcount: "_^CacheTempImportStatus(SessionId,"totalcount")_","
		set result=result_"rvcount: "_^CacheTempImportStatus(SessionId,"rvcount")_","
		set result=result_"status: """_^CacheTempImportStatus(SessionId,"status")_""""
		set result=result_"}"
	}
	
	Quit result
]]></Implementation>
</Method>

<Method name="exportData">
<ClassMethod>1</ClassMethod>
<FormalSpec>sPTID:%String,RTSystems:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set lRTSystems = $LFS(RTSystems)
	
	s EnsSysDir = ##class(%File).ParentDirectoryName(##class(%File).ManagerDirectory())
	s filetimestamp = ##class(Ens.Util.Time).FormatDateTime("%Y%m%d%H%M%S")
	s xRefExportsDir = ##class(%File).NormalizeDirectory(EnsSysDir_"xRefExports")
	
	if '##class(%File).DirectoryExists(xRefExportsDir) { 
		d ##class(%File).CreateDirectoryChain(xRefExportsDir) 
	}
		
	s file = ##class(%File).%New(xRefExportsDir_%session.SessionId_".csv")
	d file.Open("WSN")
	d file.WriteLine("PTName,PTSystem,PTRole,PValue,RTSystem,RValue")
	
	
	
	for i=1:1:$LL(lRTSystems)-1 {
		set SQL = "select PrincipalValue->PrincipalType->Name, "
		set SQL=SQL_"PrincipalValue->PrincipalType->System as PTSystem, "
		set SQL=SQL_"PrincipalValue->PrincipalType->PrincipalRole, "
		set SQL=SQL_"PrincipalValue->PValue, "
		set SQL=SQL_"RelatedType->System as RTSystem, "
		set SQL=SQL_"RValue "
		set SQL=SQL_"from IIBAENSEMBLE_Reference.RelatedValue "
		set SQL=SQL_"WHERE PrincipalValue->PrincipalType = "_sPTID_" AND RelatedType->System = '"_$LI(lRTSystems,i)_"'"
		
		s ^CacheTempSQL = SQL
 		
 		set rs = ##class(%ResultSet).%New()
 		do rs.Prepare(SQL)
 		do rs.Execute()
 		While rs.Next() {
 			
 			set strLine = ""
 			set strLine=strLine_$C(34)_##class(IIBAENSEMBLE.Functions).StringReplace(rs.Data("Name"),$C(34),$C(34,34))_$C(34)_","
 			set strLine=strLine_$C(34)_##class(IIBAENSEMBLE.Functions).StringReplace(rs.Data("PTSystem"),$C(34),$C(34,34))_$C(34)_","
 			set strLine=strLine_$C(34)_##class(IIBAENSEMBLE.Functions).StringReplace(rs.Data("PrincipalRole"),$C(34),$C(34,34))_$C(34)_","
 			set strLine=strLine_$C(34)_##class(IIBAENSEMBLE.Functions).StringReplace(rs.Data("PValue"),$C(34),$C(34,34))_$C(34)_","
 			set strLine=strLine_$C(34)_##class(IIBAENSEMBLE.Functions).StringReplace(rs.Data("RTSystem"),$C(34),$C(34,34))_$C(34)_","
 			set strLine=strLine_$C(34)_##class(IIBAENSEMBLE.Functions).StringReplace(rs.Data("RValue"),$C(34),$C(34,34))_$C(34)
 			
 			d file.WriteLine(strLine) 
 			
 		}
 		do rs.Close()	
	}
	d file.Close()
	kill file
 	Quit %session.SessionId_".csv"
]]></Implementation>
</Method>

<Method name="exportxRefAttrData">
<ClassMethod>1</ClassMethod>
<FormalSpec>sRTID:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	s EnsSysDir = ##class(%File).ParentDirectoryName(##class(%File).ManagerDirectory())
	s filetimestamp = ##class(Ens.Util.Time).FormatDateTime("%Y%m%d%H%M%S")
	
	if '##class(%File).DirectoryExists(EnsSysDir_"xRefExports") { 
		d ##class(%File).CreateDirectory(EnsSysDir_"xRefExports") 
	}
		
	s file = ##class(%File).%New(EnsSysDir_"xRefExports\"_%session.SessionId_".csv")
	d file.Open("WSN")
	
	set oRT = ##class(IIBAENSEMBLE.Reference.RelatedType).%OpenId(sRTID)
	
	set attrString = oRT.getAttrList()
		
	d file.WriteLine("PTName,RTSystem,PValue,RValue,"_attrString)
	
	//Create list from Class Name
	set MCL = $LFS(oRT.attrClass,".")
	//Create a new sublist of all parts of the name except the last part
	set MCLt = $LI(MCL,1,$LL(MCL)-1)
	//Join the parts of that name back into a string delimited by _ except the last part
	set sClassTable = $LTS(MCLt,"_")
	//Add the last part in, but delimited by . 
	set sClassTable = sClassTable_"."_$LI(MCL,$LL(MCL))

	set SQL=""
	set SQL=SQL_"Select PrincipalValue->PrincipalType->Name, RelatedType->System, PrincipalValue->PValue, RValue"_attrString_" from IIBAENSEMBLE_Reference.RelatedValue "
	set SQL=SQL_"LEFT OUTER JOIN "_sClassTable_" "
	set SQL=SQL_"ON attrId = "_$LI(MCL,$LL(MCL))_".id "
	set SQL=SQL_"WHERE RelatedType = "_sRTID_" "
	set SQL=SQL_"ORDER BY PrincipalValue->PValue"
	
		
	set rs = ##class(%ResultSet).%New()
	do rs.Prepare(SQL)
	do rs.Execute()
	set rsCount = rs.GetColumnCount()
	While rs.Next() {
		set strLine = ""
		for i=1:1:rsCount {
			set strLine=strLine_$C(34)_##class(IIBAENSEMBLE.Functions).StringReplace(rs.Data(arrColNames(i)),$C(34),$C(34,34))_$C(34)_","
		}	
		d file.WriteLine(strLine) 
		
	}
	do rs.Close()
	
	d file.Close()
	kill file
 	Quit %session.SessionId_".csv"
]]></Implementation>
</Method>

<Method name="attrClassExists">
<ClassMethod>1</ClassMethod>
<FormalSpec>sRTID:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set oRT = ##class(IIBAENSEMBLE.Reference.RelatedType).%OpenId(sRTID)
	
	set attrClassExists = "", attrClass = oRT.attrClass
 	&sql(select ID into :attrClassExists from %Dictionary.ClassDefinition WHERE ID = :attrClass)
 	if SQLCODE '= 0 { s attrClassExists = 0 } else { s attrClassExists = 1 }
 	Quit attrClassExists
]]></Implementation>
</Method>

<Method name="attrDataArray">
<ClassMethod>1</ClassMethod>
<FormalSpec>sRTID:%String</FormalSpec>
</Method>

<Method name="attrEditGrid">
<ClassMethod>1</ClassMethod>
<FormalSpec>sRTID:%String</FormalSpec>
<Implementation><![CDATA[
	&js< attrData = []; >
	
	if '..attrClassExists(sRTID) {
		&js<alert('No Attribute Class exists for this System in this NameSpace.');>
		Quit
	}
	
	set oRT = ##class(IIBAENSEMBLE.Reference.RelatedType).%OpenId(sRTID)
		
	set rs = oRT.getAttrData()
	set rsCount = rs.GetColumnCount()
	for i=1:1:rsCount {
		set arrColNames(i)=rs.GetColumnName(i)
	}
	
	While rs.Next() {
			s arrAttr="["_rs.Data("ID")
			s arrAttr=arrAttr_",'"_rs.Data(oRT.PrincipalType.System)_"'"
			s arrAttr=arrAttr_",'"_rs.Data(oRT.System)_"'"
			for i=4:1:rsCount {
				s arrAttr=arrAttr_",'"_rs.Data(arrColNames(i))_"'"
			}
			s arrAttr=arrAttr_"]"
			//w arrAttr,!
			&js< attrData.push(#(arrAttr)#); >
	}
	
	/*
	//I think the following code was used to put the data in $Order rather than SQL order for consistency with the main grid 
	//I have replaced this with a SQL order, but could move this logic to the related type class if necessary
	While rs.Next() {
		
		set arrRS(rs.Data(oRT.PrincipalType.System)) = ""
		set arrRS(rs.Data(oRT.PrincipalType.System),rs.Data(oRT.System)) = rs.Data("ID")
				
		for i=4:1:rsCount {
			set arrRS(rs.Data(oRT.PrincipalType.System),rs.Data(oRT.System),arrColNames(i)) = rs.Data(arrColNames(i))
		}	

		
	}
	set PValue=""
	for  { Set PValue=$O(arrRS(PValue)) Q:PValue=""	
		set RValue=""
		for  { Set RValue=$O(arrRS(PValue,RValue)) Q:RValue=""	
			s arrAttr="["_arrRS(PValue,RValue)
			s arrAttr=arrAttr_",'"_PValue_"'"
			s arrAttr=arrAttr_",'"_RValue_"'"
			for i=4:1:rsCount {
				s arrAttr=arrAttr_",'"_arrRS(PValue,RValue,arrColNames(i))_"'"
			}
			s arrAttr=arrAttr_"]"
			//w arrAttr,!
			&js< attrData.push(#(arrAttr)#); >
		}		
	}
	
	*/
	set sFields = "[{name: 'id'}"
	for i=2:1:rsCount {
		set sFields=sFields_",{name: '"_arrColNames(i)_"'}"
	}
	set sFields=sFields_"]"
	
	s sColumns=""
	if %session.Data("sPTPrincipalRole") = "target" {
		set sColumns=sColumns_"[{id: 'id',header: '"_oRT.System_"', width: 100, dataIndex: '"_oRT.System_"', sortable: true}"
		set sColumns=sColumns_",{header: '"_oRT.PrincipalType.System_"', width: 100, dataIndex: '"_oRT.PrincipalType.System_"', sortable: true}"
	}
	if %session.Data("sPTPrincipalRole") = "source" {
		set sColumns=sColumns_"[{header: '"_oRT.PrincipalType.System_"', width: 100, dataIndex: '"_oRT.PrincipalType.System_"', sortable: true}"
		set sColumns=sColumns_",{id: 'id',header: '"_oRT.System_"', width: 100, dataIndex: '"_oRT.System_"', sortable: true}"
	}
	
	for i=4:1:rsCount {
		set sColumns=sColumns_",{header: '"_arrColNames(i)_"', width: 100, dataIndex: '"_arrColNames(i)_"', editor: new fm.TextField({selectOnFocus: true}), sortable: true}"
	}
	set sColumns=sColumns_"]"
	
	set sFilters="[{type: 'string',  dataIndex: '"_oRT.PrincipalType.System_"'}"
	set sFilters=sFilters_",{type: 'string',  dataIndex: '"_oRT.System_"'}"
	for i=4:1:rsCount {
		set sFilters=sFilters_",{type: 'string',  dataIndex: '"_arrColNames(i)_"'}"
	}
	set sFilters=sFilters_"]"
	
	
	&js<
	
	function callxRefExport() {
		exportxRefAttrData(#(sRTID)#);
	}
	function callxRefImport() {
		attrImport(#(sRTID)#);
	}
	
	var myReader = new Ext.data.ArrayReader({
		id: 0
		}, #(sFields)#);
	
	attrStore = new Ext.data.Store({
		reader: myReader,
		remoteSort: false
		//,
		//sortInfo: {field: 'RValue', direction: 'ASC'}
	});
	
	attrStore.loadData(attrData);
	Ext.grid.filter.StringFilter.prototype.icon = 'ext/examples/grid-filtering/img/find.png';
	
	//attrFilters = "({ local: true , filters: #(sFilters)# });	"
	
	attrFilters = new Ext.grid.GridFilters({
		local: true ,
	    filters: #(sFilters)#
	  });

	attrGridPanel = new Ext.grid.EditorGridPanel({
		store: attrStore,
	    columns: #(sColumns)#,
	    title:'#(%session.Data("sPTName"))#<br>#(oRT.System)# Attributes',
	    clicksToEdit:1,
	    tbar: [{
	    	text: 'Save',
	    	iconCls:'ico_save',
	    	handler : attrSave
	    },{
		    text: 'Export',
		    iconCls:'ico_export',
		    handler: callxRefExport
		},{
		    text: 'Import',
		    iconCls:'ico_import',
		    handler: callxRefImport
		}],
		plugins: attrFilters
	});
	


	
	$('attrGrid').innerHTML='';
	attrWin = new Ext.Window({
		el: 'attrGrid',
		layout: 'fit',
		width: #(((rsCount-1)*100)+37)#,
		height:400,
		closeAction:'hide',
		plain: true,
		draggable: false,
		modal: true,
		items: attrGridPanel
		});
	attrWin.on('beforehide', attrBeforeClose);
	attrWin.show('RT^#(sRTID)#');
	attrGridPanel.getColumnModel().on('hiddenchange', function (cm,i,hidden){ if (hidden) {attrGridPanel.getTopToolbar().items.items[4].show();}});
	attrStore.on('update',attrUpdate);
	
	attrGridPanel.getTopToolbar().addFill();
	
	attrGridPanel.getTopToolbar().addButton({ 
		text: 'Show', 
		iconCls: 'ico_col', 
		hidden: true,
		handler: attrShowColumns 
	});
	
	
	>
]]></Implementation>
</Method>

<Method name="AttrDataReload">
<ClassMethod>1</ClassMethod>
<FormalSpec>sRTID:%String</FormalSpec>
<Implementation><![CDATA[
	&js< attrData = []; >
	
	if '..attrClassExists(sRTID) {
		&js<alert('No Attribute Class exists for this System in this NameSpace.');>
		Quit
	}
	
	set oRT = ##class(IIBAENSEMBLE.Reference.RelatedType).%OpenId(sRTID)
		
	set rs = oRT.getAttrData()
	set rsCount = rs.GetColumnCount()
	for i=1:1:rsCount {
		set arrColNames(i)=rs.GetColumnName(i)
	}
	
	While rs.Next() {
			s arrAttr="["_rs.Data("ID")
			s arrAttr=arrAttr_",'"_rs.Data(oRT.PrincipalType.System)_"'"
			s arrAttr=arrAttr_",'"_rs.Data(oRT.System)_"'"
			for i=4:1:rsCount {
				s arrAttr=arrAttr_",'"_rs.Data(arrColNames(i))_"'"
			}
			s arrAttr=arrAttr_"]"
			//w arrAttr,!
			&js< attrData.push(#(arrAttr)#); >
	}
	&js< attrStore.loadData(attrData); >
]]></Implementation>
</Method>

<Method name="attrImport">
<ClassMethod>1</ClassMethod>
<FormalSpec>sRTID:%String</FormalSpec>
<Implementation><![CDATA[
	&js<
	
	function callAttrDataReload() {
		AttrDataReload(#(sRTID)#);
	}

    function ImportSuccess(simpleImport,o) {
	    attrImportWin.hide();
	    // attrWin.hide();
	    callAttrDataReload();
	    msg('Success',o.result.resultstring);	    
    }    
    
    function ImportFailure(simpleImport,o) {
	    msg('Failure',o.result.resultstring);
	    //console.log(simpleImport)
	    //console.log(o)
    }
    function ImportSubmit(){
	    simpleImport.getForm().submit({url: 'IIBAENSEMBLE.csp.FileUpload.cls?Class=IIBAENSEMBLE.Reference.RelatedValue&Method=attrImport&MethodParams=#(sRTID)#',waitMsg: 'Uploading...', success: ImportSuccess, failure: ImportFailure})
    }
    simpleImport = new Ext.FormPanel({
        labelWidth: 75, // label settings here cascade unless overridden
        fileUpload: true,
        frame:true,
        title: 'Import Attributes',
        bodyStyle:'padding:5px 5px 0',
        width: 400,
        defaults: {width: 230},
        defaultType: 'label',

        items: [{html:'The import file must be a csv file and must have a header row with the following columns.<br><br><b>PTName,RTSystem,PValue,RValue,#(##class(IIBAENSEMBLE.Reference.RelatedType).%OpenId(sRTID).getAttrList())#</b><br><br>'
        	},new Ext.form.FileUploadField({
                fieldLabel: 'File Name',
                name: 'uploadfilename'
            })
        ],

        buttons: [{
            text: 'Import',
            handler: ImportSubmit
        }]
    });

$('attrImportForm').innerHTML='';
	attrImportWin = new Ext.Window({
		el: 'attrImportForm',
		layout: 'fit',
		width: 400,
		height:200,
		closeAction:'hide',
		plain: true,
		draggable: false,
		modal: true,
		items: simpleImport
		});
attrImportWin.show('RT^#(sRTID)#');
	
	
	>
]]></Implementation>
</Method>

<Method name="attrUpSert">
<ClassMethod>1</ClassMethod>
<FormalSpec>sRVID:%String,attrJSON:%String</FormalSpec>
<Implementation><![CDATA[
	set oRV = ##class(IIBAENSEMBLE.Reference.RelatedValue).%OpenId(sRVID)
	d oRV.attrUpSertJSON(attrJSON)
]]></Implementation>
</Method>

<Method name="clearSRS">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	if $G(%session.Data("SRSId"))'="" {
		set SRS = ##class(%ScrollableResultSet).%OpenId(%session.Data("SRSId"))
		If $ISOBJECT(SRS) d SRS.Close()
	}
	set %session.Data("SRSId") = ""
]]></Implementation>
</Method>

<Method name="gridXRef">
<ClassMethod>1</ClassMethod>
<FormalSpec>sPTId:%String</FormalSpec>
<Implementation><![CDATA[
	set %session.Data("sPTID") = sPTId
	
	// Clear any existing SRS prior to loading new table
	d ..clearSRS()
	
	// Get a de-normalized scrollable result set of the xRef data
	set oPT = ##class(IIBAENSEMBLE.Reference.PrincipalType).%OpenId(sPTId)
	
	//The following variables will be supplied with the necessary information to configure the Ext components
	s sFields = ""
	s sFilters = ""
	s sColumns = ""
		
	set countColumns = oPT.GetColumnCount()
	
	//Populate the sFields variable with the actual column names from the SRS
	//The display names will be specified in the sColumns variable
	s sFields = "[{name: 'id'}"
	s sFields=sFields_",{name: 'PValue'}"
	for i=3:1:countColumns {
		s sFields=sFields_",{name: '"_oPT.GetColumnName(i)_"'}"
	}		
	set sFields=sFields_"]"
	
	//Populate the sColumns variable with the column definitions with friendly names.
	//The PValue column goes first when PT is source, last when target
	set sColumns=sColumns_"["
	if oPT.PrincipalRole = "source" {
		set sColumns=sColumns_"{id: 'id',header: '"_oPT.System_"', width: 155, dataIndex: 'PValue', editor: new fm.TextField({selectOnFocus: true, allowBlank: false}), sortable: false},"
	}
	
	for i=3:1:countColumns {
		set RTSystem = ##class(IIBAENSEMBLE.Reference.RelatedType).%OpenId($P(oPT.GetColumnName(i),"_",2)).System
		set sColumns=sColumns_"{header: '"_RTSystem_"', width: 155, dataIndex: '"_oPT.GetColumnName(i)_"', editor: new EditRValueField, renderer: renderValue, sortable: false},"
	}
		
	if oPT.PrincipalRole = "target" {
		set sColumns=sColumns_"{id: 'id',header: '"_oPT.System_"', width: 155, dataIndex: 'PValue', editor: new fm.TextField({selectOnFocus: true, allowBlank: false}), sortable: false}"
	}
	if $E(sColumns,$L(sColumns))="," set sColumns = $E(sColumns,1,$L(sColumns)-1)
	set sColumns=sColumns_"]"
	
	//Populate the sFilters variable with the actual column names from the SRS
	set sFilters="[{type: 'string',  dataIndex: 'PValue'}"
	for i=3:1:countColumns {
		set sFilters=sFilters_",{type: 'string',  dataIndex: '"_oPT.GetColumnName(i)_"'}"
	}
	set sFilters=sFilters_"]"
	
	&js<
	
	function renderValue(v,m) {
		//console.log(v);
		//console.log(m);
		if (v.length == 1)
		{
			return v[0].split('|')[1];
		} else {
			return '...';
		}
	}
	function fieldShow(field) {
		if (field.value) {
			console.log(field)
			console.log(field.value);
			console.log(field.getRawValue());
			field.setValue(field.value[0].split('|')[1])
		}
	}
	var EditRValueField = function(config) {
    	// Call the superclass to preserve baseclass functionality
	    EditRValueField.superclass.constructor.call(this, Ext.apply({
    	    //Reusable config options here
        	selectOnFocus: true,
        	listeners: {'beforeshow' : {fn: fieldShow, scope: this}}
	    }, config));
 
    	// After superclass constructor add functionality that requires
	    // the object to exist (like event handling...listeners)
    	//this.on('beforeshow', fieldrender, this);
	};
	// Here you can add static variables for the class. variables that will have 
    // the same value for all object instances of this class.
    // If you are not sure put it in the constructor above. Dont put any abject
    // created with 'new' or 'xtype' here. You are safer putting it in the config
    // option in the constructor.
	Ext.extend(EditRValueField, fm.TextField)

	
	$('xRefGrid').innerHTML='';
	
	var xRefStore = new Ext.data.JsonStore({
		url:'IIBAENSEMBLE.csp.RefData.cls',
	    id: 'id',
	    totalProperty: 'total',
	    root: 'data',
	    fields: #(sFields)#
	});
	
	Ext.grid.filter.StringFilter.prototype.icon = 'ext/examples/grid-filtering/img/find.png';
	
	xRefFilters = new Ext.grid.GridFilters({
		filters: #(sFilters)#
	  });

	xRefGridPanel = new Ext.grid.EditorGridPanel({
		store: xRefStore,
	    columns: #(sColumns)#,
	    title:'#(oPT.Name)#',
	    clicksToEdit:1,
	    tbar: [{
	    	text: 'Save',
	    	iconCls:'ico_save',
	    	handler : attrSave
		}],
		plugins: xRefFilters,
		width: #(((countColumns-1)*155)+5)#,
		height:640,       
	    el: 'xRefGrid',
	    trackMouseOver: true,
	    bbar: new Ext.PagingToolbar({
		    store: xRefStore,
		    pageSize: 25,
		    plugins: xRefFilters
		})
	});
	xRefGridPanel.render();
	xRefStore.load({params:{start: 0, limit: 25}})

	
	
	>
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.ReportAttachQueue">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%CSP.Page</Super>
<TimeChanged>62675,39717.537114</TimeChanged>
<TimeCreated>61062,59286.195636</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	if ##class(%SYSTEM.Security).Check("%All") = "READ,WRITE,USE" { set Allowed = 1 }
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
  
  <!-- Tigra Calendar American format mm/dd/yyyy -->
<script language="JavaScript" src="calendar2.js"></script>
<script language="JavaScript" src="date.js"></script><!-- Date only with year scrolling -->
<script type="text/JavaScript">
<!--
	function Hello() {
		alert('Hello');
	}
	
	function Initialize()
	{
	
	}
	
	function ProcessSelected()
	{
		alert('In process selected entries');
	}
	

	function TDate(strElement) {
		var tvalue = document.getElementById(strElement).value;
		var tvaluefirst = tvalue.substr(0,1)
		
		
		if (tvaluefirst.toUpperCase() == 'T')
		{
			var tdate = new Date();
			if (tvalue.length == 1)
			{
				document.getElementById(strElement).value = tdate.format('MM/dd/yyyy');
				
			} 
			else 
			{
				var tdays = tvalue.substr(1,tvalue.length)
				tdate.add('d',tdays);
				document.getElementById(strElement).value = tdate.format('MM/dd/yyyy');
			}
		} else if (tvalue !="") {
			
			var tdate=tvalue.split("/");
			var month=tdate[0];
			var day=tdate[1];
			var year=tdate[2];
						
			if ( (month != "" ) && (day != "" ) ) {
				if ( (tdate.length == 2) || (year.length == 0) ) {
					var d=new Date()
					year=d.getFullYear()
					document.getElementById(strElement).value=month+"/"+day+"/"+year;
					
				} else if (year.length == 2) {
					document.getElementById(strElement).value=month+"/"+day+"/20"+year;
				}
			}
						
		}		
	}
	
	
	function MoveRight(option) {
   
   
   f=document.getElementById("FromList");
   t=document.getElementById("ToList");
   var SelectionCount=f.options.length
   
   for (i=0;i<SelectionCount;i=i+1) {
     if (f.options[i].selected == 1 ) {
	var y=document.createElement('option');
	y.text=f.options[i].text;
	t.add(y);
     }
   }
   
   for (j=SelectionCount-1;j>=0;j=j-1) {
      
      if (f.options[j].selected == 1 ) {
      	f.options[j]=null;
      }
   }
}

function MoveLeft(option) {
   
   
   f=document.getElementById("FromList");
   t=document.getElementById("ToList");
   var SelectionCount=t.options.length
   
   for (i=0;i<SelectionCount;i=i+1) {
     if (t.options[i].selected == 1 ) {
		var y=document.createElement('option');
		y.text=t.options[i].text;
		f.add(y);
     }
   }
   
   for (j=SelectionCount-1;j>=0;j=j-1) {
      
      if (t.options[j].selected == 1 ) {
      	t.options[j]=null;
      }
   }
}


function AddExceptions(exceptionId) {
	

	
	var errMsg='';
	t=document.getElementById("ToList");
	SelectionCount=t.options.length;
	
	if ( SelectionCount == 0) {
		errMsg='Please select interface(s). ';
	}
	
	if (!document.getElementById("DateStart").value) {
		errMsg=errMsg+'Start Date is required. ';
	} else {
	
		if ( !document.getElementById("DateEnd").value ) {
		document.getElementById("DateEnd").value=document.getElementById("DateStart").value;
		
		}
		
		
		var tmp='';
		
		var startDttm=document.getElementById("DateStart").value+' '+document.getElementById("TimeStart").value+':00';
		tmp=new Date(startDttm);
		var OdbcStartDttm=tmp.format('yyyy-MM-dd HH:mm:ss');
		
		var endDttm=document.getElementById("DateEnd").value+' '+document.getElementById("TimeEnd").value+':00';
		tmp=new Date(endDttm);
		var OdbcEndDttm=tmp.format('yyyy-MM-dd HH:mm:ss');
		
		// Start date/time must be greater than the end date/time
		if ( (Date.parse(startDttm)) >= (Date.parse(endDttm)) ) {
			errMsg='The end Date/Time must be greater than the start Date/Time. ';
		}
		
		// End date/time must be in the future
		if ( (Date.parse(Date())>Date.parse(endDttm))) {
			errMsg=errMsg+'Please enter a future date for the end date/time. ';
			
		}
	}
	
	if ( errMsg ) {
		alert(errMsg);	
	
		
	} else {	
   		
   		if (exceptionId+0<1) {
			exceptionId=#server(..GetExceptionID())#;
			
			
		} else {
			var rv=#server(..DeleteException(exceptionId))#;
		}
		
		

   		
   		for (selection=0;selection<SelectionCount;selection=selection+1) {
			
			
			var ExportData = #server(..AddException(exceptionId,t.options[selection].text,OdbcStartDttm,OdbcEndDttm,document.getElementById("comment").value))#;
			
			
			location.replace('IIBASupport.csp?PageName=AlertExceptionView');
     		
   		}
	
		
	}
	
}




 //-->
</script>

  >
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	
	Set Hday=$P($H,",",1)
	Set Htime=$P($H,",",2)
	
	Set NewTime=Htime-3600
	Set NewDay=Hday
	If (NewTime<0)  {
		
		Set DayCount=NewTime\86400-1
		Set NewTime=NewTime-(86400*DayCount)
		Set NewDay=NewDay+DayCount
	
	}

	
	s rs=##class(%ResultSet).%New()
	s Query="Select ID, Org, Accession, CreatedOn, ProcessedOn, ReportFileName, ReportFilePath from ICOrderResult_msg.ReportFileQueue "
	s Query=Query_" WHERE ProcessedOn IS NULL "
	s Query=Query_" AND CreatedOn < '"_$ZDT(NewDay_","_NewTime,3)_"' "
	s Query=Query_" AND ( (LastAlert is NULL) OR (LastAlert < '"_$ZDT(NewDay_","_NewTime,3)_"') ) "
	
	s tSC=rs.Prepare(Query)
	s tSC=rs.Execute()
	
	
	w "<form name='QueryBuilder' id='QueryBuilder' onsubmit='ProcessSelected()'>"
	

	w "<TABLE><TR><TD></TD><TD>ID</TD><TD>Org</TD><TD>Accession</TD><TD>Created On</TD><TD>ProcessedOn</TD><TD>Report File Name</TD><TD>Report File Path</TD></TR>"
	
	while (rs.Next()) {
		w "<tr>"
		w "<td><input type='checkbox' name='qb"_rs.Get(1)_"' id='qb"_rs.Get(1)_"' ></td>",!
		w "<td>"_rs.Get(2)_"</td>"
		w "<td>"_rs.Get(3)_"</td>"
		w "<td>"_rs.Get(4)_"</td>"
		w "<td>"_rs.Get(5)_"</td>"
		w "<td>"_##class(%File).GetFilename(rs.Get(6))_"</td>"
		w "<td>"_rs.Get(7)_"</td>"
		w "</tr>"
		
	}
	w "<tr><td span='2'><input type='submit' name='submit' id='submit' value='submit></td></tr>"
	w "</Table>"
	
	w "</form>"
]]></Implementation>
</Method>

<Method name="jsCalfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
  
  <script language="JavaScript">
			<!-- // create calendar object(s) just after form tag closed
				 // specify form element as the only parameter (document.forms['formname'].elements['inputname']);
				 // note: you can have as many calendar objects as you need for your application
				var cal1 = new calendar2(document.forms['QueryBuilder'].elements['DateStart']);
				cal1.year_scroll = true;
				cal1.time_comp = false;
				var cal2 = new calendar2(document.forms['QueryBuilder'].elements['DateEnd']);
				cal2.year_scroll = false;
				cal2.time_comp = false;
document.QueryBuilder.comment.onkeydown = enterKey;
document.QueryBuilder.DateStart.onkeydown = enterKeyDateStart;
document.QueryBuilder.DateEnd.onkeydown = enterKeyDateEnd;

function enterKey(e) {
	//check to see if the return key was pressed ...
	if ((event.keyCode == 13)||(event.keyCode == 9))
	{ 
		//call the ValidateSearch function ...
		document.QueryBuilder.btnSearch.focus();
		ValidateSearch();
		//prevent the page from reloading ...
		return false;
	}
}
function enterKeyDateStart(e) {

	if ((event.keyCode == 13)||(event.keyCode == 9))
	{ 
		TDate('DateStart');
		document.QueryBuilder.TimeStart.focus();
		return false;
	}
}
function enterKeyDateEnd(e) {
	if ((event.keyCode == 13)||(event.keyCode == 9))
	{ 
		TDate('DateEnd');
		document.QueryBuilder.TimeEnd.focus();
		return false;
	}	
}
	

//-->
			
</script>
  
  >
]]></Implementation>
</Method>

<Method name="UpdateQueueEntry">
<ClassMethod>1</ClassMethod>
<FormalSpec>QueueEntryID:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	s QueueEntry=##class(ICOrderResult.msg.ReportFileQueue).%OpenId(QueueEntryID)
	
	If ($ISOBJECT(QueueEntry) ){
		s QueueEntry.ProcessedOn=$ZDT($H,3)
		s QueueEntry.Filename="Skipped"
		s tSC=QueueEntry.%Save()
	} else {
		s tSC="not found"
	}
	
	

	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.SearchUtil">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>63308,39695.025402</TimeChanged>
<TimeCreated>60908,31118.460678</TimeCreated>

<Method name="CheckPermissions">
<Description>
Use this flag to turn on the printing of the Search Query for both this page and the EMP msg browser
set ^Ens.Debug("UtilEnsMessages","sql")=1</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	//Req#5 - PHegel Tab Security Use for page name
	if ##class(%SYSTEM.Security).Check("SearchUtil","USE"){ 
		set Allowed = 1 
	}
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
<script language="JavaScript" src="calendar2.js"></script>
<script language="JavaScript" src="date.js"></script><!-- Date only with year scrolling -->
<script language="javascript" src="xp_progress.js"></script> 
   <script language=javascript>
	var ddDisplay= "none";
	var search = 1;
	var cachedSelected = new Array();
	var cachedSearchString = new Array();
	
	function AddSearchCriteria() {
	    captureValues();
	    search++;
	    var objTo = document.getElementById('searchCriteria');
	    var divSearch = document.createElement("div");
		divSearch.id = "propertiesDiv"+ search;
		divSearch.name = "propertiesDiv"+ search; 
		divSearch.style.display = ddDisplay;
		
		var strObjName = "clearSearchString(this,'SearchString" + search +"')";
		//alert ('id="searchCriteria'+ search + '"<end>')
		
		if (search==1){
			divSearch.innerHTML = '<label for="propertySelect">Search Table Properties:</label><br/>';
		}
		divSearch.innerHTML += '<select name="propertySelect'+ search +'" id="propertySelect'+ search +'" style="width:200;" onchange="'+ strObjName +'">';
		//divSearch.innerHTML += '	<option value=""></option>';
		divSearch.innerHTML += '</select>';
		
		if (search>=2){
			objTo.innerHTML += '<br/>';
		}
		objTo.appendChild(divSearch);
		objTo.innerHTML += '<input type="Text" name="SearchString'+ search +'" ID="SearchString'+ search +'" value="All">';
		
		// additional variables to help decide if this class already has a host.
		/**/
		if (ddDisplay="inline"){
			var hostName = document.getElementById("ItemS").value;
			var type = ((hostName=="") ? "target":"source");
	    	loadSearchTableProperties(hostName, type);
		}
		//put back cleared values.
	    resetValues();
		
	}
	function captureValues(){
		for (var i = 1; i <= search; i++){
			s = i-1;
			cachedSelected[s] = document.getElementById("propertySelect"+i).value;
			cachedSearchString[s] = document.getElementById("SearchString"+i).value;
			//alert("CAPTUREVALUES: cachedSelected["+ s +"]: " + cachedSelected[s] + "  cachedSearchString["+ s +"]: " + cachedSearchString[s]);
		}
		
	}
	function resetValues(){
		for (var i = 1; i <= cachedSelected.length; i++){
			s = i-1
			//alert("RESETVALUES:  cachedSelected["+ s +"]: " + cachedSelected[s] + "  cachedSearchString["+ s +"]: " + cachedSearchString[s]);
			document.getElementById("SearchString"+i).value = cachedSearchString[s];
			var x = document.getElementById("propertySelect"+i);
			for (var j = 0; j < x.length; j++){
				//alert(x.options[j].value);
				if (cachedSelected[s] == x.options[j].value){
					x.options[j].selected = true;
				}
				else {
					x.options[j].selected = false;
				}
			}
		}	
	}

	function Hello() {
		alert('Hello');
	}
	
	function PreExecuteQuery() {
		document.getElementById('Results').style.display = 'none';
		document.getElementById('NoResults').style.display = 'none';

		document.getElementById('ResultsCell').align="center"

		document.getElementById('Searching').style.display = 'inline';
		
		setTimeout("ExecuteQuery()",5);
		
		
	}
	
	function ExecuteQuery() {
		
		
		var sSource = '';
		var sTarget = '';
		var sMsgClass = '';
		var sMsgField = '';
		var sStatus = '';
		var sDate1 = '';
		var sDate2 = '';
		var sTime1 = '';
		var sTime2 = '';
		var sSearchString = '';
		var sSTCClass = '';
		var sSTCProperty = '';
		
		if (document.QueryBuilder.ItemS.options[0].selected != 1) {
			sSource = document.QueryBuilder.ItemS.options[document.QueryBuilder.ItemS.options.selectedIndex].value;
			var radioObj = document.getElementsByName("SM")
			for(var i = 0; i < radioObj.length; i++) {
 				if(radioObj[i].checked)
  				sMsgClass=radioObj[i].value;
			}
		}
		
		if (document.QueryBuilder.ItemT.options[0].selected != 1) {
			sTarget = document.QueryBuilder.ItemT.options[document.QueryBuilder.ItemT.options.selectedIndex].value;
			var radioObj = document.getElementsByName("TM")
			for(var i = 0; i < radioObj.length; i++) {
 				if(radioObj[i].checked)
  				sMsgClass=radioObj[i].value;
			}
		}
		
		//alert(sSource+' - '+sMsgClass);
		
		sDate1 = document.QueryBuilder.Date1.value;
		sDate2 = document.QueryBuilder.Date2.value;
		
		sTime1 = (document.QueryBuilder.HourStart.selectedIndex == 0 ? '0' : document.QueryBuilder.HourStart.selectedIndex -1);
		sTime2 = (document.QueryBuilder.HourEnd.selectedIndex == 0 ? '0' : document.QueryBuilder.HourEnd.selectedIndex -1);
		
		sStatus = document.QueryBuilder.Status.value;
		
		sMsgField = document.QueryBuilder.MsgField.value;
		
		
		sSTCClass = document.getElementById("stcClass").value;
		
		var searchString = "";
		var sTCProperty = "";
		for (var i = 1; i <= search; i++){
			var ddobject = document.getElementById('propertiesDiv'+ i)
			ddobject.style.display = ddDisplay;
			searchString = document.getElementById('SearchString' + i).value;
			sTCProperty = document.getElementById('propertySelect' + i).value;
		
			if (sTCProperty != "" && searchString == "")
			{
				alert("You must enter a search value when using the Search Table Properties.");
				return;	
			}
			sSearchString += "," + searchString
			sSTCProperty += "," + sTCProperty
		}
		sSearchString = sSearchString.substring(1);
		sSTCProperty = sSTCProperty.substring(1);
		
		/*
		alert(" sSource=" + sSource + " sTarget=" + sTarget + " sMsgClass=" + sMsgClass + " sMsgField=" + sMsgField + " sStatus=" + sStatus);
		alert(" sDate1=" + sDate1 + " sDate2=" + sDate2 + " sTime1=" + sTime1 + " sTime2=" + sTime2);
		alert(" sSearchString=" + sSearchString + " sSTCClass=" + sSTCClass + " sTCProperty=" + sSTCProperty);
		*/
	try
	{
		var ExecuteQuery = #server(..ExecuteQuery(sSource,sTarget,sMsgClass,sMsgField,sStatus,sDate1,sDate2,sTime1,sTime2,sSearchString, sSTCClass, sSTCProperty))#;
	}
	catch(err)
	{
		alert('The query timed out or encountered an error.\n\nAdjust selections and try again.\n message:'+err.message + '\n file:'+ err.fileName + "\n line:"+ err.lineNumber);
		
	}
	/*
	alert("ExecuteQuery = " + ExecuteQuery );
	*/
	document.getElementById('Searching').style.display = 'none';
	
	document.getElementById('ResultsCell').align="left"
	
	if (ExecuteQuery != null)
	{
		if (ExecuteQuery==0)
		{
			document.getElementById('ResultsCell').align="center"
			document.getElementById('NoResults').style.display = 'inline';
		}
		else
		{	
			document.getElementById('Results').style.display = 'inline';
			FirstMsg();
		}
	}	
		
		
	}
	
	function Msgs(ItemName,ItemType) {
		//alert(ItemName);
		//alert(ItemType);
				
		if (ItemType==document.getElementById('MsgFieldSetBy').value)
		{
			document.getElementById('MsgField').value = '';
			document.getElementById('MsgFieldSetBy').value = '';
			document.getElementById('SearchField').innerHTML= '';
		}
				
		var MsgRadio = #server(..GetMsgs(ItemName,ItemType))#;
		document.getElementById(ItemType+'Msg').innerHTML=MsgRadio.substr(0,MsgRadio.length-1)
		if (MsgRadio.substr(MsgRadio.length-1,MsgRadio.length)==1)
			document.getElementById(ItemType+'M1').click()
			
		var radioObj = document.getElementsByName(ItemType+'M')
			for(var i = 0; i < radioObj.length; i++) {
 				if(radioObj[i].checked)
  				sMsgClass=radioObj[i].value;
			}
		/*
		if (sMsgClass == 'ENSLIB.HL7.MESSAGE'){
			setSearchStrings('MSH');
		} else {
			setSearchStrings('All');
		}
		*/
		setSearchStrings('All');
		
	}
	
	// Req#4 - PHegel - used to reset all values...
	function setSearchStrings(sValue){
		for (var i = 1; i <= search; i++){
			var ssobject = document.getElementById('SearchString'+ i)
			ssobject.value = sValue;
		}
			
	}
	
	function GetField(MsgClass,ItemType) {
		//alert(MsgClass);
		//alert(ItemType);
		var url ='IIBASupportDetail.csp?PageName=MsgFields&MsgClass='+MsgClass+'&ItemSpan='+ItemType
		var rValue = window.showModalDialog(url, window,'dialogHeight: 800px; dialogWidth: 500px; dialogTop: 100px; dialogRight: 100px; edge: Raised; center: Yes; help: No; resizable: No; status: No;');
	}
	
	function SetField(ItemType,Field) {
		//alert(Field);
		document.getElementById('MsgField').value = Field;
		
		document.getElementById('MsgFieldSetBy').value = ItemType;
		
		document.getElementById('SearchField').innerHTML='Field: '+Field
		
		if (Field=='')
		{
		  document.getElementById('SearchField').innerHTML=Field
		  document.getElementById('SearchString1').value='All'
		}
	}
	
	function TDate(strElement) {
		var tvalue = document.getElementById(strElement).value;
		var tvaluefirst = tvalue.substr(0,1)
		
		
		if (tvaluefirst.toUpperCase() == 'T')
		{
			var tdate = new Date();
			if (tvalue.length == 1)
			{
				document.getElementById(strElement).value = tdate.format('MM/dd/yyyy');
				
			} 
			else 
			{
				var tdays = tvalue.substr(1,tvalue.length)
				tdate.add('d',tdays);
				document.getElementById(strElement).value = tdate.format('MM/dd/yyyy');
			}
		} else if (tvalue !="") {
			
			var tdate=tvalue.split("/");
			var month=tdate[0];
			var day=tdate[1];
			var year=tdate[2];
						
			if ( (month != "" ) && (day != "" ) ) {
				if ( (tdate.length == 2) || (year.length == 0) ) {
					var d=new Date()
					year=d.getFullYear()
					document.getElementById(strElement).value=month+"/"+day+"/"+year;
					
				} else if (year.length == 2) {
					document.getElementById(strElement).value=month+"/"+day+"/20"+year;
				}
			}
						
		}		
	}

	function NextMsg() {
		
		var msgtext = #server(..ChangeText("Next"))#;
		
		if (msgtext!="End")
		{
			document.getElementById('mytextarea').value=msgtext;
		}

		
	}


	function PreviousMsg() {
		
		var msgtext = #server(..ChangeText("Previous"))#;
		
		if (msgtext!="Beginning")
		{
			document.getElementById('mytextarea').value=msgtext;
		}
		
	}

	function FirstMsg() {
		
		var msgtext = #server(..ChangeText("First"))#;
		
		document.getElementById('mytextarea').value=msgtext;
				
	}

	function LastMsg() {
		
		var msgtext = #server(..ChangeText("Last"))#;
		
		document.getElementById('mytextarea').value=msgtext;
			
	}

	function GoToMsg() {
		
		var jsGoTo = document.getElementById('myGoTo').value;
		
		var msgtext = #server(..ChangeTextGoTo(jsGoTo))#;
		
		document.getElementById('mytextarea').value=msgtext;
			
	}
	
	function ExportMsg(jsHowMany) {
		var filename = #server(..ExportData(jsHowMany))#;
		window.location = 'IIBAENSEMBLE.csp.FileDownload.cls?filename='+filename;		
	}
	
	
	function ResendMsg(jsHowMany) {
		var key = #server(..ResendData(jsHowMany))#;
	
		window.open('EnsPortal.MessageResend.zen?KEY='+key);
			
	}

	function ValidateSearch() {
		
		var errorMsg = "";
		var itemcount = 0;
		
			
		
		if (document.QueryBuilder.ItemS.options[0].selected != 1)
		{
			itemcount += 1
			if (!(document.getElementById('SMsg').innerHTML))
				errorMsg += "Missing Source Message Class.\n"
		}
		
		if (document.QueryBuilder.ItemT.options[0].selected != 1)
		{
			itemcount += 1
			
			if (!(document.getElementById('TMsg').innerHTML))
				errorMsg += "Missing Target Message Class.\n"				
				
		}
		
		if (itemcount == 0)
			errorMsg += "Either a Source or a Target must be selected.\n";
			
		if (!(document.QueryBuilder.Date1.value))
			errorMsg += "At least the 'From' date must be entered.\n";
		
		if (!(document.QueryBuilder.SearchString1.value))
			errorMsg += "You must enter a Search Term.\n";
			
		//if ((document.QueryBuilder.SearchString.value!='All') && (document.QueryBuilder.MsgField.value==''))
		//	errorMsg += "You must either select a field or enter 'All' as your Search Term.\n";
			
		if (document.QueryBuilder.Date2.value) {
			
			//if ((document.QueryBuilder.Date1.value) > (document.QueryBuilder.Date2.value))
			if ((Date.parse(document.QueryBuilder.Date1.value)) > (Date.parse(document.QueryBuilder.Date2.value)))
				errorMsg += "The 'To' date must be greater than the 'From' date.\n";
		
		}
		
		if ((document.QueryBuilder.HourStart.options[0].selected != 1) && (document.QueryBuilder.HourEnd.options[0].selected != 1)) {
			
			if  (document.QueryBuilder.Date2.value) {
				var startDate = new Date(document.QueryBuilder.Date1.value+' '+document.QueryBuilder.HourStart.selectedIndex+':00');
				var endDate = new Date(document.QueryBuilder.Date2.value+' '+document.QueryBuilder.HourEnd.selectedIndex+':00');
				if (endDate<startDate)
 					errorMsg += "The 'To' DateTime must be greater than the 'From' DateTime.\n";
			}
			else {
				if ((document.QueryBuilder.HourEnd.selectedIndex) < (document.QueryBuilder.HourStart.selectedIndex))
					errorMsg += "The 'End' Time must be greater than the 'Start' Time.\n";
			}
				
		}
		
		
			
		if (errorMsg)
        {
            alert(errorMsg);
        }
        else
        {
	        
	    	PreExecuteQuery();
	        			
        }
			
	}
	
	function InitStandard()
	{
				
		//Standard Initialization
		var TypeS = document.getElementById("TypeS");
		var TypeT = document.getElementById("TypeT");
		
		for (i=0;i<TypeS.length;i++) {
			if (TypeS.options[i].value=='Service')
				TypeS.options.selectedIndex=i
		}
		for (i=0;i<TypeT.length;i++) {
			if (TypeT.options[i].value=='Operation')
				TypeT.options.selectedIndex=i
		}
		
		UpdItemSelect('Service','S');
		UpdItemSelect('Operation','T');
		
		document.getElementById('ItemS').focus();
		
		var dt_datetime=new Date()
		document.getElementById('Date1').value=(dt_datetime.getMonth() < 9 ? '0' : '') + (dt_datetime.getMonth() + 1) + "/" + (dt_datetime.getDate() < 10 ? '0' : '') + dt_datetime.getDate() + "/" + dt_datetime.getFullYear()
	
	}
	//TODO: integrate with new method.
	function InitAuto()
	{
		//Auto Initialization from Interface list
		var TypeS = document.getElementById("TypeS");
		var TypeT = document.getElementById("TypeT");
		var ItemS = document.getElementById("ItemS");
		var ItemT = document.getElementById("ItemT");
		
		if (gup("direction")=="source"){
			for (i=0;i<TypeS.length;i++) {
				if (TypeS.options[i].value==gup("type"))
					TypeS.options.selectedIndex=i
			}
			for (i=0;i<TypeT.length;i++) {
				if (TypeT.options[i].value=='Operation')
					TypeT.options.selectedIndex=i
			}
			UpdItemSelect(gup("type"),'S');
			UpdItemSelect('Operation','T');
			var autoItemName = gup("item")		
			for (i=0;i<ItemS.length;i++) {
				if (ItemS.options[i].value==autoItemName)
					ItemS.options.selectedIndex=i
			}
			Msgs(autoItemName,'S')
		}
		if (gup("direction")=="target"){
			for (i=0;i<TypeS.length;i++) {
				if (TypeS.options[i].value=='Service')
					TypeS.options.selectedIndex=i
			}
			for (i=0;i<TypeT.length;i++) {
				if (TypeT.options[i].value==gup("type"))
					TypeT.options.selectedIndex=i
			}
			UpdItemSelect('Service','S');
			UpdItemSelect(gup("type"),'T');
			var autoItemName = gup("item")		
			for (i=0;i<ItemT.length;i++) {
				if (ItemT.options[i].value==autoItemName)
					ItemT.options.selectedIndex=i
			}				
			Msgs(autoItemName,'T')
		}
		
		if (gup("lastaction")!=""){
			var dt_datetime=new Date(gup("lastaction"))
		} else {
			var dt_datetime=new Date()
		}
		
		document.getElementById('Date1').value=(dt_datetime.getMonth() < 9 ? '0' : '') + (dt_datetime.getMonth() + 1) + "/" + (dt_datetime.getDate() < 10 ? '0' : '') + dt_datetime.getDate() + "/" + dt_datetime.getFullYear()
		
		resetAndLoadProperties();
	}

	function Initialize()
	{
	
		if (gup("auto")=="true") {
			InitAuto()
		} else {
			InitStandard()
		}
		
	}
	function UpdItemSelect(ItemType,SrcTgt) 
	{
		
		var ItemList=document.getElementById('Item'+SrcTgt);
		
		document.getElementById(SrcTgt+'Msg').innerHTML = ''
		
		while (ItemList.length>0)
		{
				ItemList.remove(ItemList.length-1);
		}
		
		
		var result = #server(..UpdItemSelect(ItemType,SrcTgt))#;
		
	}

	function gup( name )
	{  
	name = name.replace(/[\[]/,"\\\[").replace(/[\]]/,"\\\]");  
	var regexS = "[\\?&]"+name+"=([^&#]*)";  
	var regex = new RegExp( regexS );  
	var results = regex.exec( window.location.href );  
	if( results == null )    
	    return "";  
	else
	    return results[1];
	}
	
	//Added to do reset of data before populating dropdownlist.
	function resetAndLoadProperties(hostName, type){
		loadSearchTableProperties(hostName, type);
		ResetSearch();
	}
	
	// Req#3 - Phegel - modified ..LoadProperties function to append search count to property element names
	function loadSearchTableProperties(hostName, type)
	{
		var sclass = document.getElementById("stcClass");
		var sprop = document.getElementById("propertySelect" + search);
		var properties = document.getElementById("propertiesDiv" + search);
		var searchString = document.getElementById("SearchString" + search);
		//alert("hostName: " + hostName + " type: " + type + " psObjectName: " + 'propertySelect'+ search );	

		if (type == "target")
		{
			if (document.getElementById("ItemS").value != "" && sclass.value != "")
			{
				// do not override a source's search table
				return;	
			}
		}
		
		if (hostName == "")
		{
			ddDisplay = "none";
			sclass.value = "";
			sprop.value = "";
			
			return;
		}
		
		var className = #server(..GetSearchTableClass(hostName))#;
		
		if (className != "")
		{
			ddDisplay="inline";
			sclass.value = className;
			#server(..LoadProperties(className, sprop.name))#;
		}
		else
		{
			ddDisplay = "none";
			sclass.value = "";
			sprop.value = "";
		}
		properties.style.display = ddDisplay;
		searchString.value = "All";
	}
	
	
	<!-- Req#3 - Phegel - Used to reset search criteria -->
	function ResetSearch(){
		//window.location.reload();
		
		//reset values
		ddDisplay= "none";
		search = 0;
		var objTo = document.getElementById('searchCriteria');
		//iterate through each node and remove.
		while (objTo.hasChildNodes()) {
			objTo.removeChild(objTo.firstChild);
		};
		//re-add first search criteria
		AddSearchCriteria();
		
	}
	
	<!-- Req#3 - Phegel - To test the toggle of drop down list -->
	function ToggleDropDown(){	
		if (ddDisplay=="none"){
			ddDisplay = "inline";
		} else {
			ddDisplay= "none";
		}
	
		for (var i = 1; i <= search; i++){
			var ddobject = document.getElementById('propertiesDiv'+ i)
			ddobject.style.display = ddDisplay;
		}
	}
	
	/*
	function clearSearchString()
	{
		var ps = document.getElementById("propertySelect");
		var ss = document.getElementById("SearchString");
		if (ps.value != "" && ss.value == "All")
		{
			ss.value = "";
		}
		else if (ps.value == "" && ss.value == "")
		{
			ss.value = "All";
		}
	}
	*/
	function clearSearchString(ps, strName){
		//alert ('SearchString Obj name: '+ strName + '"<end>')
		var ss = document.getElementById(strName)
		ss.value = '';
		if (ps.value != "" && ss.value == "All")
		{
			ss.value = "";
		}
		else if (ps.value == "" && ss.value == "")
		{
			ss.value = "All";
		}
	}
	

 
   </script>
  >
]]></Implementation>
</Method>

<Method name="test">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Quit "OK"
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    &html<
    
    <form name="QueryBuilder" id="QueryBuilder">
	<TABLE Border='0'><TR><TD>
	<fieldset>
	<TABLE><TR><TD Width="75"></TD><TD Width="100">Type</TD><TD Width="400">Item</TD></TR>
	<TR><TD><b>Source:</b></TD>
	<TD><select NAME="TypeS" ID="TypeS" onchange="UpdItemSelect(this.value,'S')">
	<option VALUE="Service">Service
	<option VALUE="Process">Process
	<option VALUE="Operation">Operation
	</select></TD>
	<TD><select NAME="ItemS" ID="ItemS" onchange="Msgs(this.value,'S'); resetAndLoadProperties(this.value,'source');">
	</select></TD></TR>
	<TR><TD/><TD/><TD><SPAN id="SMsg"></SPAN></TD></TR>
	<TR><TD><b>Target:</b></TD>
	<TD><select NAME="TypeT" ID="TypeT" onchange="UpdItemSelect(this.value,'T')">
	<option VALUE="Process">Process
	<option VALUE="Operation">Operation
	</select></TD>
	<TD><select NAME="ItemT" ID="ItemT" onchange="Msgs(this.value,'T'); loadSearchTableProperties(this.value,'target');" >
	</select></TD></TR>
	<TR><TD/><TD/><TD><SPAN id="TMsg"></SPAN></TD></TR>
	</TABLE>
	</fieldset>
	
	</TD><TD width="25"/><TD vAlign="top">
	
	<fieldset>	

			<TABLE border='0' cellpadding="0">
				<TR> <TD> <b>Date Range:</b> </TD> </TR>
				<TR>
					<TD valign="top">Date Time Start:&nbsp;&nbsp;</TD>
					<TD>
						<input type="Text" style="width: 100px" name="Date1" id="Date1" value="" onblur="TDate('Date1')">&nbsp;
						<a href="javascript:cal1.popup();"><img src="img/cal.gif" width="16" height="16" border="0" alt="From Date"></a>
					<TD valign="top">&nbsp;
						<select NAME="HourStart" id="HourStart">
						<option VALUE="">
						<script language="javascript">
							for(var i=0; i<25; i++) {
							document.write('<option VALUE='+i+'>'+i);
						}
						</script> 
						</select>
					</TD>
				</TR>
				<TR>
					<TD valign="top">Date Time End:&nbsp;&nbsp;</TD>
					<TD>
						<input type="Text" style="width: 100px" name="Date2" id="Date2" value="" onblur="TDate('Date2')">&nbsp;
						<a href="javascript:cal2.popup();"><img src="img/cal.gif" width="16" height="16" border="0" alt="To Date"></a>
					</TD>
					<TD valign="top">&nbsp;
						<select NAME="HourEnd" id="HourEnd">
						<option VALUE="">
						<script language="javascript">
							for(var i=0; i<25; i++) {
							document.write('<option VALUE='+i+'>'+i);
						}
						</script> 
						</select>
					</TD>
				</TR>
				<TR>
					<TD valign="top">Status:&nbsp;&nbsp;</TD>
					<TD>
						<select NAME="Status" id="Status">
						<option VALUE="All">All
						<option VALUE="1">Created
						<option VALUE="2">Queued
						<option VALUE="3">Delivered
						<option VALUE="4">Discarded
						<option VALUE="5">Suspended
						<option VALUE="6">Deferred
						<option VALUE="7">Aborted
						<option VALUE="8">Error
						<option VALUE="9">Completed
						</select>
					</TD>
				</TR>
			</TABLE>				

	</fieldset>
	
	</TD></TR></TABLE>
	
	
	<SPAN id="SearchField"></SPAN><br>
	<!-- Req#3 - Phegel - Setup to dynamically be able to add propertySelect drop down list and the SearchString input text box -->
	<div id="searchCriteria" style="display:inline;">
		<div id="propertiesDiv1" style="display:none;">
			<label for="propertySelect">Search Table Properties: </label><br/>
			<select name="propertySelect1" id="propertySelect1" style="width:200;" onchange="clearSearchString(this,'SearchString1')">
				<!--<option value=""></option>-->
			</select>
		</div>
		<input type="Text" name="SearchString1" ID="SearchString1" value="">
	</div>
	<input type="HIDDEN" name="stcClass" id="stcClass" value="">
	<Input TYPE="HIDDEN" NAME="Mode" id="Mode" VALUE="ExecuteQuery">
	<Input TYPE="HIDDEN" NAME="MsgField" ID="MsgField" VALUE="">
	<Input TYPE="HIDDEN" NAME="MsgFieldSetBy" ID="MsgFieldSetBy" VALUE="">

	<Input Type="button" Name="btnSearch" id="btnSearch" Value="Search" onClick="ValidateSearch()"> &nbsp&nbsp
	<a href="#" onclick="AddSearchCriteria();return false;">Add Search Criteria</a>&nbsp&nbsp
	<a href="#" onClick="ResetSearch();return false;">Reset</a>&nbsp&nbsp
	<a href="#" onClick="ToggleDropDown();return false;" style="display: none;">Toggle Drop Down List</a><br><br>

	<table bgcolor="LightSteelBlue" cellpadding="30"><TR><TD ID="ResultsCell" width="943" height="575">
	
	<SPAN ID="Searching" style='display: none'>Searching...</SPAN>
	
	<SPAN ID="NoResults" style='display: none'><BR>No data found, please try again.</SPAN>
	
	<span ID='Results' style='display: none'>
	
	<table >
		
	<tr><td>
		<table border=0 padding=5><tr>
			<td>Message id</td>
			<td><a href="" id="traceURL" target="_blank">Trace</a></td>
			</tr><tr>
			<td><input type="Text" id="myMessageBodyID" name="MsgID" SIZE="20" value=""></td>
			
			
			<td><a href="" id="editURL" target="_blank"></a></td>
		</tr></table>
		
	</td><td>
		<table frame="box"><tr>
		<td><table><tr>
			<td><a id="myMsgSrc"></a></td>
			<td nowrap> -- </td>
			<td><a id="myMsgTgt"></a></td>
			</tr><tr>
			<td>
			<a id="srcRuleLog" target="_blank" href=''></a>
			<a id="srcRuleSep">&nbsp</a>
			<a id="srcRuleList" target="_blank" href=''></a>
			</td>
			<td></td>
			<td>
			<a id="tgtRuleLog" target="_blank" href=''></a>
			<a id="tgtRuleSep">&nbsp</a>
			<a id="tgtRuleList" target="_blank" href=''></a>
			</td>
			</tr></table></td></tr>
		</table></td>
	
	</tr><tr>
		<td>
		<table border=0><tr><td>Status</td>
		</tr><tr><td><input type="Text" id="myMessageStatus" name="MsgStatus" SIZE="20" value=""></td>
		</tr></table>
		</td>
		<td><table border=0><tr><td>Time Created</td><td>Time Completed</td>
		</tr><tr>
		<td><input type="Text" id="myMessageTime" name="CreatedTime" SIZE="20" value=""></td>
		<td><input type="Text" id="myMsgProcessTm" name="ProcessTime" SIZE="20" value=""></td>
		</tr></table>
	</td></tr>



	</table>
	
	
	<table><TR><TD>
	<Input Type="Button" Style="width:75" Name="First" id="First" Value="First" onclick="FirstMsg()">
	<Input Type="Button" Style="width:75" Name="Previous" id="Previous" Value="Previous" onclick="PreviousMsg()">
	<Input Type="Button" Style="width:75" Name="Next" id="Next" Value="Next" onclick="NextMsg()">
	<Input Type="Button" Style="width:75" Name="Last" id="Last" Value="Last" onclick="LastMsg()">
	</TD><TD width="200" align="right">
	<b id="myCount">1</b><b id="totalCount"></b>
	&nbsp; <input type="Text" id="myGoTo" name="GoTo" SIZE="3" value="">
	<Input Type="Button" Name="GoTo" Value="GoTo" onclick="GoToMsg()">
	</td>
	<td width=10>&nbsp;</td>
	<td>
	<table><TR><TD width="120">
	<Input Type="Button" Style="background: rgb(53,107,141);color: #E0E0E0;text-decoration: none;padding: 3px;padding-left: 10px;padding-right: 10px;margin-top: 10px;-moz-border-radius: 5px;border-radius: 5px;border-top: 1px solid lightgray;border-left: 1px solid lightgray;border-right: 2px solid gray;border-bottom: 2px solid gray;" Name="ResendCurrent" id="ResendCurrent" Value="Resend Current" onclick="ResendMsg('1');">
	</TD>
	<TD width="120">
	<Input Type="Button" Style="background: rgb(53,107,141);color: #E0E0E0;text-decoration: none;padding: 3px;padding-left: 10px;padding-right: 10px;margin-top: 10px;-moz-border-radius: 5px;border-radius: 5px;border-top: 1px solid lightgray;border-left: 1px solid lightgray;border-right: 2px solid gray;border-bottom: 2px solid gray;" Name="ResendAll" id="ResendAll" Value="Resend All" onclick="ResendMsg('all');">
	</TD></TR></table>
	<table><TR><TD width="120">
	<Input Type="Button" Style="background: rgb(72,61,139);color: #E0E0E0;text-decoration: none;padding: 3px;padding-left: 10px;padding-right: 10px;margin-top: 10px;-moz-border-radius: 5px;border-radius: 5px;border-top: 1px solid lightgray;border-left: 1px solid lightgray;border-right: 2px solid gray;border-bottom: 2px solid gray;" Name="ExportCurrent" id="ExportCurrent" Value="Export Current" onclick="ExportMsg('1');">
	</TD>
	<TD width="120">
	<Input Type="Button" Style="background: rgb(72,61,139);color: #E0E0E0;text-decoration: none;padding: 3px;padding-left: 10px;padding-right: 10px;margin-top: 10px;-moz-border-radius: 5px;border-radius: 5px;border-top: 1px solid lightgray;border-left: 1px solid lightgray;border-right: 2px solid gray;border-bottom: 2px solid gray;" Name="ExportAll" id="ExportAll" Value="Export All" onclick="ExportMsg('all');">
	</TD></TR></table>
	
	</TD></TR></TABLE>
	<FORM Name="mytextareaform">
	<textarea id="mytextarea" rows="20" cols="100">
	</textarea></FORM>
	

	
	
	</SPAN>
	<br><SPAN ID="SQLDebugStatement" style='display: none'></SPAN>	
	</TD></TR></table>
	
	</form>
	
    
    
    >
]]></Implementation>
</Method>

<Method name="jsCalfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
   <script language=javascript>
 // create calendar object(s) just after form tag closed
 // specify form element as the only parameter (document.forms['formname'].elements['inputname']);
 // note: you can have as many calendar objects as you need for your application
var cal1 = new calendar2(document.forms['QueryBuilder'].elements['Date1']);
cal1.year_scroll = true;
cal1.time_comp = false;
var cal2 = new calendar2(document.forms['QueryBuilder'].elements['Date2']);
cal2.year_scroll = false;
cal2.time_comp = false;
document.QueryBuilder.SearchString1.onkeydown = enterKey;
document.QueryBuilder.Date1.onkeydown = enterKeyDate1;
document.QueryBuilder.Date2.onkeydown = enterKeyDate2;

function enterKey(e) {
	//check to see if the return key was pressed ...
	if ((event.keyCode == 13)||(event.keyCode == 9))
	{ 
		//call the ValidateSearch function ...
		document.QueryBuilder.btnSearch.focus();
		ValidateSearch();
		//prevent the page from reloading ...
		return false;
	}
}
function enterKeyDate1(e) {

	if ((event.keyCode == 13)||(event.keyCode == 9))
	{ 
		TDate('Date1');
		document.QueryBuilder.Date2.focus();
		return false;
	}
}
function enterKeyDate2(e) {
	if ((event.keyCode == 13)||(event.keyCode == 9))
	{ 
		TDate('Date2');
		document.QueryBuilder.SearchString1.focus();
		return false;
	}	
}
	

			//-->
   </script>
  >
]]></Implementation>
</Method>

<Method name="GetItemList">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	
		set Servicerset = ##class(%ResultSet).%New()
	set Servicerset.ClassName = "Ens.Util.Statistics"
	set Servicerset.QueryName = "EnumerateHostStatus"
	Do Servicerset.Execute()
	
	set servcount = 0
	set proccount = 0
	set opcount = 0
		
	While (Servicerset.Next()) {
		
		IF (Servicerset.Data("Type") = "BusinessService") & 
		($PIECE(Servicerset.Data("Name"),".",1) '= "Ens") &
		($PIECE(Servicerset.Data("Name"),".",1) '= "EnsLib") {
			set arrServiceList(servcount) = Servicerset.Data("Name")
			set servcount = servcount + 1
		}
		
		IF (Servicerset.Data("Type") = "BusinessProcess") & 
		($PIECE(Servicerset.Data("Name"),".",1) '= "Ens") &
		($PIECE(Servicerset.Data("Name"),".",1) '= "EnsLib") {
			set arrProcessList(proccount) = Servicerset.Data("Name")
			set proccount = proccount + 1
		}

		IF (Servicerset.Data("Type") = "BusinessOperation") & 
		($PIECE(Servicerset.Data("Name"),".",1) '= "Ens") &
		($PIECE(Servicerset.Data("Name"),".",1) '= "EnsLib") {
			set arrOperationList(opcount) = Servicerset.Data("Name")
			set opcount = opcount + 1
		}
	
	}
	
	Merge %session.Data("ServiceList")=arrServiceList
	Merge %session.Data("ProcessList")=arrProcessList
	Merge %session.Data("OperationList")=arrOperationList
	Merge %session.Data("ServiceCount")=servcount
	Merge %session.Data("ProcessCount")=proccount
	Merge %session.Data("OperationCount")=opcount
]]></Implementation>
</Method>

<Method name="BuildRuleLinks">
<ClassMethod>1</ClassMethod>
<FormalSpec>Session:%String,itemname:%String,srctgt:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 set RuleLink = ""
 
 set Rule=..GetBusinessRule(itemname)
 
 if Rule '= "" {
 	set RuleLink = RuleLink_"<a id="""_srctgt_"RuleLog"" target=""_blank"" href='"_..BuildURL(Session,Rule,"log")_"'>RuleLog</a>"
 	set RuleLink = RuleLink_"<a id="""_srctgt_"RuleSep""> | </a>"
 	set RuleLink = RuleLink_"<a id="""_srctgt_"RuleList"" target=""_blank"" href='"_..BuildURL(Session,Rule,"list")_"'>RuleList</a>"
 } else {
 	set RuleLink = RuleLink_"<a id="""_srctgt_"RuleLog"" target=""_blank"" href=''></a>"
 	set RuleLink = RuleLink_"<a id="""_srctgt_"RuleSep"">&nbsp</a>"
 	set RuleLink = RuleLink_"<a id="""_srctgt_"RuleList"" target=""_blank"" href=''></a>"
 }
 
 Quit RuleLink
]]></Implementation>
</Method>

<Method name="BuildURL">
<ClassMethod>1</ClassMethod>
<FormalSpec>Session:%String,Rule:%String,loglist:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 set URL = ""
 
 if loglist = "log" {
	s:$Username'="" ^CacheTemp.EnsPortal($Username,"RuleLog","SearchCriteria")="Newest First^999^0,,,"_Session_","_Rule_"^500^0,1,0^None"
 	set URL = "EnsPortal.RuleLog.zen?RuleName="_Rule_"&SessionId="_Session
 } elseif loglist = "list" {
 	set RulePackage=""
 	for i=1:1:$L(Rule,".")-1 { set RulePackage = RulePackage_$P(Rule,".",i)_"." }
 	set RulePackage = $E(RulePackage,1,$L(RulePackage)-1)
 	//set URL = "EnsPortal.RuleEditor.zen?RULE="_$P(Rule,".",$L(Rule,"."))
 	set URL = "EnsPortal.RuleEditor.zen?RULE="_Rule
 }
 
 
 Quit URL
]]></Implementation>
</Method>

<Method name="ChangeText">
<ClassMethod>1</ClassMethod>
<FormalSpec>direction:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 		
 	If direction = "Next" {
 		
 		If %session.Data("curPos") < (%session.Data("count")) {
 			set %session.Data("curPos") = (%session.Data("curPos") + 1)
 		} Else {
 			Quit "End"
 		}
 		
 		
 		set msgtext = ..ChangeTextAction()
 					
 	}
 		
 	If direction = "Previous" {
 	
 		If %session.Data("curPos") > 1 {
 			set %session.Data("curPos") = (%session.Data("curPos") - 1)
 		} Else {
 			Quit "Beginning"
 		}
 		
 		set msgtext = ..ChangeTextAction()
 					
 	}
 	
 	If direction = "First" {
 		
 		set %session.Data("curPos") = 1
 		
 		set msgtext = ..ChangeTextAction()
 		
 	}
 	
 	If direction = "Last" {
 		
 		set %session.Data("curPos") = %session.Data("count")
 		
 		set msgtext = ..ChangeTextAction()
 		
 	}
 	
 	If direction = "GoTo" {
 		
 		set %session.Data("curPos") = GoTo
 		
 		set msgtext = ..ChangeTextAction()
 		
 	}
 	
 	Quit msgtext
]]></Implementation>
</Method>

<Method name="ChangeTextAction">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 		set DisplayedPos = %session.Data("curPos")
 		//&js<alert(#(%session.Data("curRSID"))#);>
 		set MessageIDrset=##class(%ScrollableResultSet).%OpenId(%session.Data("curRSID"))
 		Do MessageIDrset.CurrRowSet(DisplayedPos)
 		set curMsgContentID = MessageIDrset.Data("MessageBodyId")
 		set curMsgID = MessageIDrset.Data("ID")
 		set curSessionId = MessageIDrset.Data("SessionId")
 		set curMsgSrc = MessageIDrset.Data("SourceConfigName")
 		set curMsgTgt = MessageIDrset.Data("TargetConfigName")
 		set curMsgStatus = MessageIDrset.Data("Status")
 		Set curMsgStatus=$P("Created,Queued,Delivered,Discarded,Suspended,Deferred,Aborted,Error,Completed",",",curMsgStatus)
 		set curMsgTime = MessageIDrset.Data("TimeCreated")
 		set curMsgTmProc = MessageIDrset.Data("TimeProcessed")
 		set curMsgPath = curMsgSrc_"  -->  "_curMsgTgt
 		Do MessageIDrset.%Save()
 		KILL MessageIDrset
 		//		set DisplayedTrace = "IIBAUtilEnsMsgTrace.csp?$ID1="_curSessionId
 		set DisplayedTrace = "EnsPortal.VisualTrace.zen?$ZEN_POPUP=1&SESSIONID="_curSessionId
 		set DisplayedRule = "IIBAUtilEnsRuleLog.csp?SessionId="_curSessionId
 		
 		
 		// Moved the resend to a button above the message window
 		
 		
 		set DisplayedEdit = "IIBASupport.csp?PageName=MessageEdit&MsgHeaderID="_curMsgID_"&SessionId="_curSessionId
 		
 		set sMsgClass = %session.Data("sMsgClass")
 		//Create list from Message Class Name
 		set MCL = $LFS(sMsgClass,".")
 		//Create a new sublist of all parts of the name except the last part
 		set MCLt = $LI(MCL,1,$LL(MCL)-1)
 		//Join the parts of that name back into a string delimited by _ except the last part
 		set sMsgClassTable = $LTS(MCLt,"_")
 		//Add the last part in, but delimited by . 
 		set sMsgClassTable = sMsgClassTable_"."_$LI(MCL,$LL(MCL))
 		
 		Set MessageContentrset = ##class(%ResultSet).%New()
 		set curMsgText = ""
 		if sMsgClass = "ENSLIB.HL7.MESSAGE" {
	 		//The getSegsAsString method which is called by RawContent, throws a max string error even though the maxlen is supposed to be 10000 - so this is probably a bug in getSegsAsString
#; 			Do MessageContentrset.Prepare("SELECT TOP 1 RawContent, TimeCreated FROM EnsLib_HL7.Message WHERE ID = '"_curMsgContentID_"'")
#; 			Do MessageContentrset.Execute()
#; 			While (MessageContentrset.Next()) {
#; 				set curMsgText = MessageContentrset.Data("RawContent")
#; 			}
			set curMsgText = ##class(EnsLib.HL7.Message).%OpenId(curMsgContentID).OutputToString()
 		} else {
 			Do MessageContentrset.Prepare("SELECT TOP 1 * FROM "_sMsgClassTable_" WHERE ID = '"_curMsgContentID_"'")
 			Do MessageContentrset.Execute()
 			While (MessageContentrset.Next()) {
 				set curMsgText = ""
 				for i=1:1:MessageContentrset.GetColumnCount() {
 					set curMsgText = curMsgText_MessageContentrset.GetColumnName(i)_": "_MessageContentrset.Data(MessageContentrset.GetColumnName(i))_$C(13,10)	
 					set curMsgText = $TR(curMsgText,$C(0),$C(-1))
 				}
 			}
 		}
 	
 		set curMsgTime = $P(curMsgTime,".",1)
 		set curMsgTime = $ZDTH(curMsgTime,3,1)
 		set curMsgTime = $ZU(193,curMsgTime,0)
 		set curMsgTime = $ZDT(curMsgTime,3,1)
 		
 		// Message time processed
 		set curMsgTmProc = $P(curMsgTmProc,".",1)
 		set curMsgTmProc = $ZDTH(curMsgTmProc,3,1)
 		set curMsgTmProc = $ZU(193,curMsgTmProc,0)
 		set curMsgTmProc = $ZDT(curMsgTmProc,3,1)
 
 	
 		&js<document.getElementById('myMessageBodyID').value='#(curMsgContentID)#';>
 		&js<document.getElementById('traceURL').href='#(DisplayedTrace)#';>
 		//&js<document.getElementById('ruleURL').href='#(DisplayedRule)#';>
 		//&js<document.getElementById('resendURL').href='#(DisplayedResend)#';>
 		&js<document.getElementById('myMessageTime').value='#(curMsgTime)#';>
 		&js<document.getElementById('myCount').innerHTML='#(DisplayedPos)#';>
 		&js<document.getElementById('myGoTo').value='';>
 		&js<document.getElementById('myMsgSrc').innerHTML='#(curMsgSrc)#';>
 		&js<document.getElementById('myMsgTgt').innerHTML='#(curMsgTgt)#';>
 		&js<document.getElementById('myMessageStatus').value='#(curMsgStatus)#';>
 		&js<document.getElementById('myMsgProcessTm').value='#(curMsgTmProc)#';>
 
 		if ( ##class(%SYSTEM.Security).Check("IIBAMsgEdit","USE")  && (sMsgClass = "ENSLIB.HL7.MESSAGE") ) {
	 		&js<document.getElementById('editURL').href='#(DisplayedEdit)#';>
	 		&js<document.getElementById('editURL').innerHTML='Edit';>
	 		
 		} else {
	 		&js<document.getElementById('editURL').href='';>
	 		&js<document.getElementById('editURL').innerHTML='';>
 		}
 		
 		set SrcRule=..GetBusinessRule(curMsgSrc)
 		set TgtRule=..GetBusinessRule(curMsgTgt)
 		
 		if SrcRule'="" {
 			set SrcRuleLogURL = ..BuildURL(curSessionId,SrcRule,"log")
 			set SrcRuleListURL = ..BuildURL(curSessionId,SrcRule,"list")
 			&js<document.getElementById('srcRuleLog').innerHTML='RuleLog';>
 			&js<document.getElementById('srcRuleLog').href='#(SrcRuleLogURL)#';>
 			&js<document.getElementById('srcRuleSep').innerHTML=' | ';>
 			&js<document.getElementById('srcRuleList').innerHTML='RuleList';>
 			&js<document.getElementById('srcRuleList').href='#(SrcRuleListURL)#';>
 		} else {
 			&js<document.getElementById('srcRuleLog').innerHTML='';>
 			&js<document.getElementById('srcRuleLog').href='';>
 			&js<document.getElementById('srcRuleSep').innerHTML='&nbsp';>
 			&js<document.getElementById('srcRuleList').innerHTML='';>
 			&js<document.getElementById('srcRuleList').href='';>
 		
 		}
 		
 		if TgtRule'="" {
 			set TgtRuleLogURL = ..BuildURL(curSessionId,TgtRule,"log")
 			set TgtRuleListURL = ..BuildURL(curSessionId,TgtRule,"list")
 			&js<document.getElementById('tgtRuleLog').innerHTML='RuleLog';>
 			&js<document.getElementById('tgtRuleLog').href='#(TgtRuleLogURL)#';>
 			&js<document.getElementById('tgtRuleSep').innerHTML=' | ';>
 			&js<document.getElementById('tgtRuleList').innerHTML='RuleList';>
 			&js<document.getElementById('tgtRuleList').href='#(TgtRuleListURL)#';>
 		} else {
 			&js<document.getElementById('tgtRuleLog').innerHTML='';>
 			&js<document.getElementById('tgtRuleLog').href='';>
 			&js<document.getElementById('tgtRuleSep').innerHTML='&nbsp';>
 			&js<document.getElementById('tgtRuleList').innerHTML='';>
 			&js<document.getElementById('tgtRuleList').href='';>
 		
 		}	
 		
 
 	
 		Quit curMsgText
]]></Implementation>
</Method>

<Method name="ChangeTextGoTo">
<ClassMethod>1</ClassMethod>
<FormalSpec>GoTo:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 	set %session.Data("curPos") = GoTo
 		
 	set msgtext = ..ChangeTextAction()
 	
 	Quit msgtext
]]></Implementation>
</Method>

<Method name="ExecuteQuery">
<ClassMethod>1</ClassMethod>
<FormalSpec>sSource:%String,sTarget:%String,sMsgClass:%String,sMsgField:%String,sStatus:%String,sDate1:%String,sDate2:%String,sTime1:%String,sTime2:%String,sSearchString:%String,sSTCClass:%String,sSTCProperty:%Integer</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 if ('$D(%session))
 {
	set sessionID = $SYSTEM.Util.CreateGUID()
	set sessionUsername = $USERNAME 
 }
 else 
 {
 	Merge %session.Data("sMsgClass")=sMsgClass
	set sessionID = %session.SessionId	 
	set sessionUsername = %session.Username
 }
 	
 
 //sSource   sTarget   sMsgClass   sMsgField   sStatus   sDate1   sDate2   sTime1   sTime2   sSearchString
 
 
 If sDate2 = "" { set sDate2 = sDate1 }
 	
 If sTime2 = 0 {set sTime2 = 24 }
 
 		
 //This data is logged for performance analysis
 	set SearchStart = $H
 	set ^CacheTempMattsTrace(sessionID,SearchStart,"Start") = SearchStart
 	set ^CacheTempMattsTrace(sessionID,SearchStart,"User") = sessionUsername
 	set ^CacheTempMattsTrace(sessionID,SearchStart,"Source") = sSource
 	set ^CacheTempMattsTrace(sessionID,SearchStart,"Target") = sTarget
 	set ^CacheTempMattsTrace(sessionID,SearchStart,"MsgClass") = sMsgClass
 	set ^CacheTempMattsTrace(sessionID,SearchStart,"String") = sSearchString
 
 
 set StartStamp = $PIECE($ZDTH(sDate1),",",1)_","_(sTime1*3600)
 set EndStamp = $PIECE($ZDTH(sDate2),",",1)_","_((sTime2*3600)-1)
 	
 set ^CacheTempMattsTrace(sessionID,SearchStart,"StartStamp") = StartStamp
 set ^CacheTempMattsTrace(sessionID,SearchStart,"EndStamp") = EndStamp	
 	
 set StartStamp = $ZU(193,StartStamp,1)
 set EndStamp = $ZU(193,EndStamp,1)
 set StartStamp = $ZDT(StartStamp,3,1)
 set EndStamp = $ZDT(EndStamp,3,1)
 	
 set SQLStatus = ""
 if sStatus '= "All" {
 	set SQLStatus = "AND mh.Status = '"_sStatus_"' "
 }
 
 set sSourceTarget = ""
 If (sSource '= "") & (sTarget '= "") {
	set sSourceTarget = "mh.SourceConfigName = '"_sSource_"' AND mh.TargetConfigName = '"_sTarget_"' "
 } ElseIf (sSource '= "") & (sTarget = "") {
	set sSourceTarget = "mh.SourceConfigName = '"_sSource_"' "
 } ElseIf (sSource = "") & (sTarget '= "") {
	set sSourceTarget = "mh.TargetConfigName = '"_sTarget_"' "
 }
  		
 set count = 0
 

 set SQLSelect = "SELECT top 10000000 mh.MessageBodyId, mh.ID, mh.SessionId, mh.SourceConfigName, mh.TargetConfigName, mh.Status, mh.TimeCreated, mh.TimeProcessed FROM %IGNOREINDICES ""SourceConfigName,MessageBodyClassName,Status,TargetConfigName"" Ens.MessageHeader mh "
 set SQLTimeCreated = "AND mh.TimeCreated > '"_StartStamp_"' AND mh.TimeCreated < '"_EndStamp_"' "
 set SQLOrderBy = "ORDER BY mh.TimeCreated Asc, MH.ID Asc "
 set SQLJoin=""

 Set MessageIDrset = ##class(%ScrollableResultSet).%New()
 set SQL = ""
 
 //Req#4 - PHegel - Add to parse out the values from each field.
 set listSearchString = $LFS(sSearchString,",")
 set searchString = ""
 set ssptr = 0
 set listSTCProperty = $LFS(sSTCProperty, ",")
 set count = 0
 set sSearchStringConcat = ""
 set stcptr = 0
 set stcProperty = "" 
 
 	if sMsgClass = "ENSLIB.HL7.MESSAGE" {
	 	if sSearchString '= "All" {
		 	//Req#4 - PHegel - Add to parse out the values from each field.

		 	if (sSTCProperty = "") {
		 		//Req#4 - PHegel - changed to use the search string list.
		 		WHILE $LISTNEXT(listSearchString,ssptr,searchString) {
					if searchString '= "All" {
						set count = count + 1
						if count > 1 s sSearchStringConcat=sSearchStringConcat_"AND "
						For i=1:1:$L(searchString,"/") {
						 	if i > 1 s sSearchStringConcat=sSearchStringConcat_"OR "			 	
						 	s sSearchStringConcat=sSearchStringConcat_"m.RawContent LIKE '%"_$P(searchString,"/",i)_"%' "
						}
				 	}				
				 }

		 	} else {

				
				WHILE $LISTNEXT(listSearchString, ssptr ,searchString) {
					set stcNotAtEnd = $LISTNEXT(listSTCProperty, stcptr, stcProperty)
					if searchString '= "All" {
						set count = count + 1
						if count > 1 s sSearchStringConcat=sSearchStringConcat_"AND "
						if ($L(stcProperty)>0){
							set sSearchStringConcat = sSearchStringConcat_"mh.MessageBodyId IN "
							set sSearchStringConcat = sSearchStringConcat_"( "
							set sSearchStringConcat = sSearchStringConcat_"SELECT SchTbl.DocID "
							set sSearchStringConcat = sSearchStringConcat_"FROM EnsLib_HL7.SearchTable SchTbl "					
							set sSearchStringConcat = sSearchStringConcat_"WHERE SchTbl.PropId = "_stcProperty_" "
							set sSearchStringConcat = sSearchStringConcat_"AND LOWER(SchTbl.PropValue) like '%"_$ZConvert(searchString,"l")_"%' "		 	
							set sSearchStringConcat = sSearchStringConcat_") "
						}else{
							For i=1:1:$L(searchString,"/") {
							 	if i > 1 s sSearchStringConcat=sSearchStringConcat_"OR "			 	
							 	s sSearchStringConcat=sSearchStringConcat_"m.RawContent LIKE '%"_$P(searchString,"/",i)_"%' "
							}
						}
					}
				}
		 	}

 	 		set SQLJoin = "INNER JOIN EnsLib_HL7.Message m ON mh.MessageBodyId = m.ID AND ("_sSearchStringConcat_") "
 		}
 	} else {
	
 		//Create list from Message Class Name
 		set MCL = $LFS(sMsgClass,".")
 		//Create a new sublist of all parts of the name except the last part
 		set MCLt = $LI(MCL,1,$LL(MCL)-1)
 		//Join the parts of that name back into a string delimited by _ except the last part
 		set sMsgClassTable = $LTS(MCLt,"_")
 		//Add the last part in, but delimited by . 
 		set sMsgClassTable = sMsgClassTable_"."_$LI(MCL,$LL(MCL))
	
 		if sMsgField '= "" {
		 	WHILE $LISTNEXT(listSearchString, ssptr ,searchString) {	
	 			set SQLJoin = "INNER JOIN "_sMsgClassTable_" m ON mh.MessageBodyId = m.ID AND m."_sMsgField_" LIKE '%"_$ZConvert(searchString,"l")_"%' "
		 	}
 		} 		
 	}
	
 set SQL = SQLSelect_SQLJoin_"WHERE "_sSourceTarget_SQLTimeCreated_"AND mh.MessageBodyClassName = '"_sMsgClass_"' "_SQLStatus_SQLOrderBy

 if $D(^Ens.Debug("UtilEnsMessages","sql")) {
 if ^Ens.Debug("UtilEnsMessages","sql") {
	 set ^CacheTempMattsTrace("SQL") = SQL
	 set tmpVariable = "hello"
	 &js<
	 	document.getElementById('SQLDebugStatement').innerHTML=#(..QuoteJS(SQL))#;
	 	document.getElementById('SQLDebugStatement').style.display = 'inline';
	 >
 
	 }
 }

 Do MessageIDrset.Prepare(SQL)
 Do MessageIDrset.Execute()

 
 set count = MessageIDrset.Count()
  	
 set ^CacheTempMattsTrace(sessionID,SearchStart,"count") = count
 	
 If count '= 0 {
 	Do MessageIDrset.%Save()
 	set curRSID = MessageIDrset.%Id()
 	KILL MessageIDrset
 	
 	Merge %session.Data("count")=count
 	Merge %session.Data("curPos")=curPos
 	Merge %session.Data("curRSID")=curRSID	
 	
 	&js<document.getElementById('totalCount').innerHTML = '&nbsp;of '+'#(count)#'; >
 	/*
 	&js<alert('count: #(count)# msgID: #(curRSID)# session.curRSID: #(%session.Data("curRSID"))#');>
 	*/
 	set ^CacheTempMattsTrace(sessionID,SearchStart,"End") = $H
 	}
 
 Quit count
]]></Implementation>
</Method>

<Method name="ExportData">
<ClassMethod>1</ClassMethod>
<FormalSpec>pHowMany:%String="all"</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s EnsSysDir = ##class(%File).ParentDirectoryName(##class(%File).ManagerDirectory())
	s filetimestamp = ##class(Ens.Util.Time).FormatDateTime("%Y%m%d%H%M%S")
	
	if '##class(%File).DirectoryExists(EnsSysDir_"IIBAExports") { 
		d ##class(%File).CreateDirectory(EnsSysDir_"IIBAExports") 
	}
	
	s filename = "MsgExport_"_%session.SessionId_".txt"
	
	s file = ##class(%File).%New(EnsSysDir_"IIBAExports\"_filename)
	d file.Open("WSN")
	
 	set MessageIDrset=##class(%ScrollableResultSet).%OpenId(%session.Data("curRSID"))
 	set pCurrRow=MessageIDrset.CurrRow
 	
 	//Always start at the first row.
 	if (pHowMany="all") {
 		set MessageIDrset.CurrRow=1
 		set pCount=MessageIDrset.Count()
 	} else {
	 	s pCount=pHowMany+0
 	}
 	/*
 	&js<alert('pCount: #(pCount)# msgID: #(MessageIDrset.%Id())# session.curRSID: #(%session.Data("curRSID"))#'); >
 	*/
 	
 	set tSC = MessageIDrset.Previous()
 	if MessageIDrset.CurrRow = MessageIDrset.Count() do MessageIDrset.Next()
 	
 	set sMsgClass = %session.Data("sMsgClass")
	//Create list from Message Class Name
	set MCL = $LFS(sMsgClass,".")
	//Create a new sublist of all parts of the name except the last part
	set MCLt = $LI(MCL,1,$LL(MCL)-1)
	//Join the parts of that name back into a string delimited by _ except the last part
	set sMsgClassTable = $LTS(MCLt,"_")
	//Add the last part in, but delimited by . 
	set sMsgClassTable = sMsgClassTable_"."_$LI(MCL,$LL(MCL))
 	
 	if sMsgClass = "ENSLIB.HL7.MESSAGE" {
	 	While MessageIDrset.Next() {
	 		d file.WriteLine(##class(EnsLib.HL7.Message).%OpenId(MessageIDrset.Data("MessageBodyId")).OutputToString()) 		
	 		s pCount=pCount-1
	 		Q:pCount<1
	 	}
 	} else {
	 	 While MessageIDrset.Next() {
	 		Set MessageContentrset = ##class(%ResultSet).%New()
			Do MessageContentrset.Prepare("SELECT TOP 1 * FROM "_sMsgClassTable_" WHERE ID = '"_MessageIDrset.Data("MessageBodyId")_"'")
			Do MessageContentrset.Execute()
			Do MessageContentrset.Next()
			set curMsgText = ""
			for i=1:1:MessageContentrset.GetColumnCount() {
				set curMsgText = curMsgText_MessageContentrset.GetColumnName(i)_": "_MessageContentrset.Data(MessageContentrset.GetColumnName(i))_$C(13,10)	
				set curMsgText = $TR(curMsgText,$C(0),$C(-1))
			}			
			d file.WriteLine(curMsgText) 
			
			s pCount=pCount-1
	 		Q:pCount<1		
	 	}
 	}
 	s MessageIDrset.CurrRow=pCurrRow
 	Do MessageIDrset.%Save()
 	
 	KILL MessageIDrset
 	
 	d file.Close()
	kill file
 	Quit filename
]]></Implementation>
</Method>

<Method name="ResendData">
<ClassMethod>1</ClassMethod>
<FormalSpec>pHowMany:%String="all"</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	
	//
	
	Set tResendCount = 0
 	Set Key = $increment(^CacheTemp.ResendIDs)
 	
 	set MessageIDrset=##class(%ScrollableResultSet).%OpenId(%session.Data("curRSID"))
 	set pCurrRow=MessageIDrset.CurrRow
 	
 	
 	
 	//Always start at the first row.
 	if (pHowMany="all") {
 		set MessageIDrset.CurrRow=1
 		set pCount=MessageIDrset.Count()
 	} else {
	 	s pCount=pHowMany+0
 	}
 	
 	set tSC = MessageIDrset.Previous()
 	if MessageIDrset.CurrRow = MessageIDrset.Count() do MessageIDrset.Next()
 	
 	
 	
 	
 	//Queue the session for resend
 	While MessageIDrset.Next() {
	 	// Use the message header id rather then the session id
 		//set curSessionId = MessageIDrset.Data("SessionId")
 		//Set ^CacheTemp.ResendIDs(Key,curSessionId)=""
 		set curMsgHeaderId = MessageIDrset.Data("ID")
 		Set ^CacheTemp.ResendIDs(Key,curMsgHeaderId)=""
 		Set tResendCount = tResendCount + 1
 		Set ^CacheTemp.ResendIDs(Key) = tResendCount
 		//set DisplayedResend = "EnsPortal.MessageResend.zen?KEY="_Key
 		
 		s pCount=pCount-1
	 	Q:pCount<1
	 }
 	
 	/*
 	set sMsgClass = %session.Data("sMsgClass")
	//Create list from Message Class Name
	set MCL = $LFS(sMsgClass,".")
	//Create a new sublist of all parts of the name except the last part
	set MCLt = $LI(MCL,1,$LL(MCL)-1)
	//Join the parts of that name back into a string delimited by _ except the last part
	set sMsgClassTable = $LTS(MCLt,"_")
	//Add the last part in, but delimited by . 
	set sMsgClassTable = sMsgClassTable_"."_$LI(MCL,$LL(MCL))
 	
 	
 	if sMsgClass = "ENSLIB.HL7.MESSAGE" {
	 	While MessageIDrset.Next() {
	 		d file.WriteLine(##class(EnsLib.HL7.Message).%OpenId(MessageIDrset.Data("MessageBodyId")).OutputToString()) 		
	 		s pCount=pCount-1
	 		Q:pCount<1
	 	}
 	} else {
	 	 While MessageIDrset.Next() {
	 		Set MessageContentrset = ##class(%ResultSet).%New()
			Do MessageContentrset.Prepare("SELECT TOP 1 * FROM "_sMsgClassTable_" WHERE ID = '"_MessageIDrset.Data("MessageBodyId")_"'")
			Do MessageContentrset.Execute()
			Do MessageContentrset.Next()
			set curMsgText = ""
			for i=1:1:MessageContentrset.GetColumnCount() {
				set curMsgText = curMsgText_MessageContentrset.GetColumnName(i)_": "_MessageContentrset.Data(MessageContentrset.GetColumnName(i))_$C(13,10)	
				set curMsgText = $TR(curMsgText,$C(0),$C(-1))
			}			
			d file.WriteLine(curMsgText) 
			
			s pCount=pCount-1
	 		Q:pCount<1		
	 	}
 	}
 	*/
 	s MessageIDrset.CurrRow=pCurrRow
 	Do MessageIDrset.%Save()
 	
 	KILL MessageIDrset
 	
 	
 	Quit Key
]]></Implementation>
</Method>

<Method name="GetBusinessRule">
<ClassMethod>1</ClassMethod>
<FormalSpec>itemname:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 	
 	kill production
 	Set ProductionName=""
 	Set ProductionStatus=""
 	set status = ##class(Ens.Director).GetProductionStatus(.ProductionName,.ProductionStatus)
 	set production=##class(Ens.Config.Production).%OpenId(ProductionName)
 	
 	set busrule=""
 	
 	for i=1:1:production.Items.Count() {
 		
 		// Get Item name and check for match
 		s item=production.Items.GetAt(i)
 		if item.Name = itemname {
 			// Get settings and find BusinessRuleName if it exists		
 			for j=1:1:item.Settings.Count() {
 				s st = item.Settings.GetAt(j)
 				If ( st.Name ="BusinessRuleName" ) { 
 					set busrule = st.Value
 						
 				}
 			}
 		}
 	}
 		
 Quit busrule
]]></Implementation>
</Method>

<Method name="GetMsgs">
<ClassMethod>1</ClassMethod>
<FormalSpec>itemname:%String,itemtype:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 Set MessageClassrset = ##class(%ResultSet).%New()
 set msgcount = 0
 	
 set sItem = itemname
 
 Do MessageClassrset.Prepare("SELECT DISTINCT ItemValue as MessageBodyClassName FROM IIBAENSEMBLE_Task.TaskItemDefinition WHERE ItemType = 'MsgClassDef^"_itemtype_"' AND ItemName = '"_sItem_"'")	
 	Do MessageClassrset.Execute()
 	
 	set Radio = ""
 	While (MessageClassrset.Next()) {
 		//w MessageClassrset.Data("MessageBodyClassName"),!
 		set msgcount=msgcount+1
 		set MsgClass = MessageClassrset.Data("MessageBodyClassName")
 		if MsgClass="ENSLIB.HL7.MESSAGE" {
 			set Radio=Radio_"<input type=""radio"" id="""_itemtype_"M"_msgcount_""" checked=""checked"" name="""_itemtype_"M"" id="""_itemtype_"M"" value="""_MsgClass_"""><font size=""2"">"_MsgClass_"</font><br />"
 		} else {
 			set Radio=Radio_"<input type=""radio"" id="""_itemtype_"M"_msgcount_""" name="""_itemtype_"M"" id="""_itemtype_"M"" value="""_MsgClass_"""><font size=""2"">"_MsgClass_"</font>"
 			set Radio=Radio_"&nbsp;&nbsp;<input type=""button"" value=""..."" onclick=""GetField('"_MsgClass_"','"_itemtype_"')"" style=""height: 18px; font-size: xx-small; line-height: 5px"" title=""Select Field""><br />"
 		}
 			
 	}
 	
 
 Quit Radio_msgcount
]]></Implementation>
</Method>

<Method name="UpdItemSelect">
<ClassMethod>1</ClassMethod>
<FormalSpec>ItemType:%String,SrcTgt:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 &js<	var o=document.createElement('option');
 		o.text = ''
 		o.value = ''
 		//document.getElementById('Item'+'#(SrcTgt)#').add(o,null);
 		var x=document.getElementById('Item'+'#(SrcTgt)#');
	    try
	    {
	      x.add(o,null); // standards compliant
	    }
	    catch(ex)
	    {
	      x.add(o); // IE only
	    }
 >
 	For i = 0:1:%session.Data(ItemType_"Count")-1 {
 		s ItemName = %session.Data(ItemType_"List",i)
 		&js<
 		var o=document.createElement('option');
 		o.text = '#(ItemName)#'
 		o.value = '#(ItemName)#'
 		//document.getElementById('Item'+'#(SrcTgt)#').add(o,null)
 		var x=document.getElementById('Item'+'#(SrcTgt)#');
	    try
	    {
	      x.add(o,null); // standards compliant
	    }
	    catch(ex)
	    {
	      x.add(o); // IE only
	    }
	  
 		>
 		
 	}
 	&js<document.getElementById('Item'+'#(SrcTgt)#').style.width="400px";>
 	
 Quit "OK"
]]></Implementation>
</Method>

<Method name="GetSearchTableClass">
<ClassMethod>1</ClassMethod>
<FormalSpec>pHost:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s tClass = ""
	s tId = ""
	&sql(select ID into :tId from Ens_Config.Item where Name=:pHost)
	
	s tItem = ##class(Ens.Config.Item).%OpenId(tId)
	
	if $ISOBJECT(tItem)
	{
		d tItem.PopulateVirtualSettings()
		
		for i=1:1:tItem.VirtualSettings.Count()
		{
			s tList = tItem.VirtualSettings.GetAt(i)
			if $LG(tList,2) = "SearchTableClass"
			{
				s tClass = $LG(tList,3)
				q
			}
		}
	}
	
	q tClass
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Req#4 - Phegel - Added pPropSelectName which is the currently selected property

]]></Content>
</UDLText>

<Method name="LoadProperties">
<ClassMethod>1</ClassMethod>
<FormalSpec>pSearchTableClass:%String,pPropSelectName:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s results = ##class(%ResultSet).%New()
	
	s results.ClassName = "Ens.VDoc.SearchTableGenerator"
	s results.QueryName = "EnumerateSearchProps"
	d results.Execute(pSearchTableClass)
	
	while (results.Next())
	{
		s tOutput(results.Data("PropId")) = results.Data("Name")
	}
	
	s tIndex = $O(tOutput(""))
	
	&js<
		// clear all but the first (blank) option
		// Req#4 - Phegel - Added pPropSelectName so it's dynamic.
		var x=document.getElementById('#(pPropSelectName)#');
 		x.options.length = 1;
	>
	
	while (tIndex '= "")
	{
		s tPropName = tOutput(tIndex)
		
		&js<
		
		var o=new Option();
 		o.text = '#(tPropName)#';
 		o.value = '#(tIndex)#'
 		
 		var x=document.getElementById('#(pPropSelectName)#');
 		
	    try
	    {
	      x.add(o,null); // standards compliant
	    }
	    catch(ex)
	    {
	      x.add(o); // IE only
	    }

 		>
 		
 		s tIndex = $O(tOutput(tIndex))
	}
]]></Implementation>
</Method>

<Query name="QSearchTable">
<Type>%Query</Type>
<FormalSpec>STCName:%String="",PropertyId:%Integer=0,PropertyValue:%String="",SourceName:%String="",TargetName:%String="",TimeStart:%Date,TimeEnd:%Date</FormalSpec>
<Parameter name="ROWSPEC" value="MessageBodyId:%String,ID:%Integer,SessionId:%Integer,SourceConfigName:%String,TargetConfigName:%String,Status:Ens.DataType.MessageStatus,TimeCreated:Ens.DataType.UTC,TimeProcessed:Ens.DataType.UTC"/>
</Query>

<Method name="QSearchTableExecute">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,STCName:%String="",PropertyId:%Integer=0,PropertyValue:%String="",SourceName:%String="",TargetName:%String="",TimeStart:%Date,TimeEnd:%Date]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	#dim tSessionId As %String = ""
	#dim tHeaderId As %String = ""
	#dim tMessageId As %String = ""
	
	s tSC = $CLASSMETHOD(STCName, "Search", .output, PropertyId, PropertyValue) Q:'tSC
	s tSessionId=$O(output(tSessionId))
	
	while (tSessionId '= "")
	{
		s tHeaderId = $O(output(tSessionId,tHeaderId))
		while (tHeaderId '= "")
		{
			s tMessageId = $O(output(tSessionId,tHeaderId,tMessageId))
			while (tMessageId '= "")
			{
				//$LB(tTimeCreated,tSourceConfigName,tTargetConfigName)
				s tValues = output(tSessionId,tHeaderId,tMessageId)
				s tTimeCreated = $LIST(tValues,1)
				s tSourceName = $LIST(tValues,2)
				s tTargetName = $LIST(tValues,3)
				

				// does the source or target match?
				if ((tSourceName = SourceName) || (tTargetName = TargetName))
				{
					// is the TimeCreated within the defined range?
					s tTimeCreatedH = $ZDTH(tTimeCreated,3,1)
					s tTimeCreatedDayH = $P(tTimeCreatedH,",",1)
					s tTimeStartDay = $P(TimeStart,",",1)
					s tTimeEndDay = $P(TimeEnd,",",1)
				
					if ((tTimeCreatedDayH >= tTimeStartDay) && (tTimeCreatedDayH <= tTimeEndDay ))
					{
						s tMatch = 1
						// only check seconds if it's the same day
						if ( (tTimeCreatedDayH = tTimeStartDay) || (tTimeCreatedDayH = tTimeEndDay) )
						{
							s tTimeCreatedSecondsH = $P(tTimeCreatedH,",",2)
					
							if ( (tTimeCreatedDayH = tTimeStartDay) && (tTimeCreatedDayH = tTimeEndDay) )
							{
								if ((tTimeCreatedSecondsH < $P(TimeStart,",",2)) || (tTimeCreatedSecondsH > $P(TimeEnd,",",2)))
								{
									s tMatch = 0
								}
							}
							elseif (tTimeCreatedDayH = tTimeStartDay)
							{
								if (tTimeCreatedSecondsH < $P(TimeStart,",",2))
								{
									s tMatch = 0
								}
							}
							else //tTimecreatedDayH = tTimeEndDay
							{
								if (tTimeCreatedSecondsH > $P(TimeEnd,",",2))
								{
									s tMatch = 0
								}
							}
						}
						
						if (tMatch)
						{
							s tRow = $I(qHandle)
							s tMH = ##class(Ens.MessageHeader).%OpenId(tHeaderId)
							s qHandle(tRow) = $LB(tMessageId, tHeaderId, tMH.SessionId, tMH.SourceConfigName, tMH.TargetConfigName, tMH.Status, tMH.TimeCreated, tMH.TimeProcessed)
						}
					}
				}
				
				s tMessageId = $O(output(tSessionId,tHeaderId,tMessageId))
			}
		
			s tHeaderId = $O(output(tSessionId,tHeaderId))
		}
		
		s tSessionId=$O(output(tSessionId))
	}
	
	s qHandle = 0
	
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="QSearchTableClose">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary]]></FormalSpec>
<PlaceAfter>QSearchTableExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	k qHandle
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="QSearchTableFetch">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&qHandle:%Binary,&Row:%List,&AtEnd:%Integer=0]]></FormalSpec>
<PlaceAfter>QSearchTableExecute</PlaceAfter>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	s tRow = $I(qHandle)
	if ($G(qHandle(tRow)) = "")
	{
		s AtEnd = 1
		k Row
		s Row = ""
		Q $$$OK
	}
	
	k Row
	s Row = qHandle(tRow)
	
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.SupportPageDefinition.Admin">
<Description>
Copyright 2007 by Inland Imaging Business Associates
IIBAENSEMBLE.csp.SupportPageDefinition.Admin</Description>
<Super>%ZEN.application</Super>
<TimeChanged>61066,35362.420978</TimeChanged>
<TimeCreated>61048,55900.625149</TimeCreated>

<Parameter name="APPLICATIONNAME">
<Description>
This is the name of this application.</Description>
<Default>SupporPageDefinitionAdmin</Default>
</Parameter>

<Parameter name="HOMEPAGE">
<Description>
This is the URL of the main starting page of this application.</Description>
<Default>IIBAENSEMBLE.csp.SupportPageDefinition.Home.cls</Default>
</Parameter>

<XData name="Style">
<Description>
This Style block contains application-wide CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
</style>
]]></Data>
</XData>
</Class>


<Class name="IIBAENSEMBLE.csp.SupportPageDefinition.Home">
<Description>
Copyright 2007 by Inland Imaging Business Associates
Created using the page template: Default</Description>
<Super>%ZEN.Component.page</Super>
<TimeChanged>63600,41285.547272</TimeChanged>
<TimeCreated>61048,56927.475224</TimeCreated>

<Parameter name="APPLICATION">
<Description>
Class name of application this page belongs to.</Description>
<Default>IIBAENSEMBLE.csp.SupportPageDefinition.Admin</Default>
</Parameter>

<Parameter name="PAGENAME">
<Description>
Displayed name of this page.</Description>
<Default>Home</Default>
</Parameter>

<Parameter name="DOMAIN">
<Description>
Domain used for localization.</Description>
</Parameter>

<XData name="Style">
<Description>
This Style block contains page-specific CSS style definitions.</Description>
<Data><![CDATA[
<style type="text/css">
    /*Style classes for use on this page */
   
     body { font-family: arial; }
     table.tpTable caption{
       background: transparent;
       font-size: 1.4em;
       font-weight: bold;
       text-align: left;
       border: none;
     }
    /* even rows */
     .tpEven { color: black; background: #ebf3ff; }
    
    /* odd rows */
     .tpOdd { color: black; background: white; }
    /* this is a selected row */
     table.tpTable tr.tpSelected { background: #3d80df; color: white; }
   
    /* hover for odd and even rows */
     tr.tpOdd:hover,tr.tpEven:hover { 
        background-color: #3d80df; 
        color: #ffffff; }
  
    /* table header style */
    table.tpTable th {
        border-right: 1px solid gray;
        border-bottom: 1px solid gray;
        background: #C5D6D6;
        color: black;
        font-weight: bold;
        text-align: left;
        padding: 2px;
        overflow: hidden;
     }
     /* table header style */
    table.tpTable tr {
	    font-size: .8em;
    }
    /* selected column header (th) */
     table.tpTable th.tpHdrSelected { background: #3d80df; }
    /* filter layour */
     table.tpFilterLayout td { border: none; background: #C5D6D6; }

</style>
]]></Data>
</XData>

<XData name="Contents">
<Description>
This XML block defines the contents of this page.</Description>
<XMLNamespace>http://www.intersystems.com/zen</XMLNamespace>
<Data><![CDATA[
<page xmlns="http://www.intersystems.com/zen" title="">

  <hgroup width="100%"  valign="top">
    <vgroup width="5%"></vgroup>
  
    <vgroup width="90%"  valign="top">
   
    <tableNavigator id="PageNav" tablePaneId="PageTable"/>
 	
 	<hgroup valign="top">
 	
    <tablePane 
    id="PageTable" 
    pageSize="10" 
    maxRows="100000"
    showRowNumbers="true" 
    showZebra="true" 
    useSnapshot="true"
    extraColumnWidth="25px"
    caption="Page Definitions"
    orderByClause="PageName Asc, MethodOrder Asc"
	tableName="IIBAENSEMBLE_csp.SupportPageDefinition" 
    width="1200px"
    onselectrow="zenPage.fillForm('');"
    >
	<column colName="ID" hidden="true" />
   	<column header="PageName" width="100px" colName="PageName" filterType="text"/>
   	<column header="PageTitle" width="200px" colName="PageTitle" filterType="text"/>
   	<column header="PageClass" width="300px" colName="PageClass" filterType="text"/>
   	<column header="Order" width="50px" colName="MethodOrder" filterType="text"/>
   	<column header="MethodName" width="200px" colName="MethodName" filterType="text"/>
   	<column header=""	width="40px" linkCaption="edit" link="javascript:zenPage.fillForm('#(%query.ID)#');"/>


    </tablePane>
    <spacer width=".5em"/>
  <dataController id="PageData"  
    modelClass="IIBAENSEMBLE.csp.SupportPageDefinition.Model" 
    modelId=""
/>
    
    <fieldSet id="PageFormGroup" hidden="false" legend="Edit">
	<form id="PageForm" 
         controllerId="PageData" 
         layout="vertical"
         cellStyle="padding: 2px; padding-left: 5px; padding-right: 5px;">
         <text label="PageName:" dataBinding="PageName" id="PageName" name="PageName" size="25"/>
         <spacer height=".5em"/> 
		 <text label="PageTitle:" dataBinding="PageTitle" id="PageTitle" name="PageTitle" size="25"/>
         <spacer height=".5em"/> 
		 <text label="PageClass:" dataBinding="PageClass" id="PageClass" name="PageClass" size="25"/>
		 <spacer height=".5em"/> 
		 <text label="MethodOrder:" dataBinding="MethodOrder" id="MethodOrder" name="MethodOrder" size="25"/>
		 <spacer height=".5em"/> 
		 <text label="MethodName:" dataBinding="MethodName" id="MethodName" name="MethodName" size="25"/>
		 <spacer height=".5em"/> 
		  <hgroup>
  		<button caption="Save" onclick="zenPage.savePage();" />
  		<spacer width="5"/>
  		<button caption="New" onclick="zenPage.newPage();" />
  		<spacer width="5"/>
  		<button caption="Delete" onclick="zenPage.deletePage();" />
		 </hgroup>  
	</form>	
	</fieldSet>
	
	</hgroup>
    </vgroup>
  
    <vgroup width="5%"></vgroup>
  
 </hgroup>

</page>
]]></Data>
</XData>

<Method name="savePage">
<Description>
save contact model to database</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  // validate and save form
  var form = zenPage.getComponentById('PageForm');
  form.save();
  var table=zenPage.getComponentById('PageTable');
  //refresh data in contact table
  table.executeQuery();
]]></Implementation>
</Method>

<Method name="newPage">
<Description>
Create new object via dataModel</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  var controller = zenPage.getComponentById('PageData');
  controller.createNewObject();
]]></Implementation>
</Method>

<Method name="deletePage">
<Description>
Delete current item from database</Description>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  var controller = zenPage.getComponentById('PageData');
  controller.deleteId(controller.getModelId());
  var table = zenPage.getComponentById('PageTable');
   //refresh data in contact table
  table.executeQuery(true);
  controller.update();
]]></Implementation>
</Method>

<Method name="fillForm">
<FormalSpec>id</FormalSpec>
<Language>javascript</Language>
<ClientMethod>1</ClientMethod>
<Implementation><![CDATA[
  var controller = zenPage.getComponentById('PageData');
  controller.setProperty('modelId',id);
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.SupportPageDefinition.Model">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%ZEN.DataModel.ObjectDataModel</Super>
<TimeChanged>61066,35377.236046</TimeChanged>
<TimeCreated>61048,59061.906728</TimeCreated>

<Property name="PageName">
<Type>%String</Type>
</Property>

<Property name="PageTitle">
<Type>%String</Type>
</Property>

<Property name="PageClass">
<Type>%String</Type>
</Property>

<Property name="MethodOrder">
<Type>%String</Type>
</Property>

<Property name="MethodName">
<Type>%String</Type>
</Property>

<Method name="%OnOpenSource">
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[  Quit ##class(IIBAENSEMBLE.csp.SupportPageDefinition).%OpenId(pID)
]]></Implementation>
</Method>

<Method name="%OnSaveSource">
<FormalSpec>pSource:IIBAENSEMBLE.csp.SupportPageDefinition</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
   Set tSC = pSource.%Save()
   Set ..%id = pSource.%Id()
   Quit tSC
]]></Implementation>
</Method>

<Method name="%OnNewSource">
<FormalSpec>*pSC:%Status=$$$OK</FormalSpec>
<ReturnType>%RegisteredObject</ReturnType>
<Implementation><![CDATA[  Quit ##class(IIBAENSEMBLE.csp.SupportPageDefinition).%New()
]]></Implementation>
</Method>

<Method name="%OnDeleteSource">
<ClassMethod>1</ClassMethod>
<FormalSpec>pID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[  Quit ##class(IIBAENSEMBLE.csp.SupportPageDefinition).%DeleteId(pID)
]]></Implementation>
</Method>

<Method name="%OnLoadModel">
<FormalSpec>pSource:IIBAENSEMBLE.csp.SupportPageDefinition</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set ..PageName = pSource.PageName
    Set ..PageTitle = pSource.PageTitle
    Set ..PageClass = pSource.PageClass
    Set ..MethodOrder = pSource.MethodOrder
    Set ..MethodName = pSource.MethodName
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="%OnStoreModel">
<FormalSpec>pSource:IIBAENSEMBLE.csp.SupportPageDefinition</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set pSource.PageName = ..PageName
    Set pSource.PageTitle = ..PageTitle
    Set pSource.PageClass = ..PageClass
    Set pSource.MethodOrder = ..MethodOrder
    Set pSource.MethodName = ..MethodName
    Quit pSource.%Save()
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.SupportPageDefinition">
<Description><![CDATA[
Copyright 2007 by Inland Imaging Business Associates
<h2>Nuvodia Toolkit Class</h2>
<CLASS>%Persistent</CLASS> data class that renders the dynamic support pages ]]></Description>
<Super>%Persistent</Super>
<TimeChanged>63630,49593.773908</TimeChanged>
<TimeCreated>61058,44991.359685</TimeCreated>

<Property name="PageName">
<Description><![CDATA[
PageName is used as the Query Parameter &PageName=[value] to render this page.]]></Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Property name="PageTitle">
<Description>
Page Display Title</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Property name="PageClass">
<Description>
Page Class that is used to render the page</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Property name="MethodOrder">
<Description>
When there are multiple Methods for a page this give the order to execute them in.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Property name="MethodName">
<Description>
MethodName called to render the page</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="256"/>
</Property>

<Query name="GetPageMethods">
<Description><![CDATA[
Gets the Methods for this <PROPERTY>PageName</PROPERTY> in execute order.]]></Description>
<Type>%SQLQuery</Type>
<FormalSpec>PageName:%String="SystemStatus"</FormalSpec>
<SqlQuery>SELECT PageClass,MethodName FROM SupportPageDefinition
 WHERE (PageName = :PageName)
 ORDER BY MethodOrder</SqlQuery>
</Query>

<Query name="GetPageTitle">
<Description><![CDATA[
Get the Title for this <PROPERTY>PageName</PROPERTY> ]]></Description>
<Type>%SQLQuery</Type>
<FormalSpec>PageName:%String="SystemStatus"</FormalSpec>
<SqlQuery>SELECT top 1 PageTitle FROM SupportPageDefinition
 WHERE (PageName = :PageName)</SqlQuery>
</Query>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^IIBAENSEMBL4D4.SupportPageD883D</DataLocation>
<DefaultData>SupportPageDefinitionDefaultData</DefaultData>
<IdLocation>^IIBAENSEMBL4D4.SupportPageD883D</IdLocation>
<IndexLocation>^IIBAENSEMBL4D4.SupportPageD883I</IndexLocation>
<StreamLocation>^IIBAENSEMBL4D4.SupportPageD883S</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="SupportPageDefinitionDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>MethodName</Value>
</Value>
<Value name="3">
<Value>MethodOrder</Value>
</Value>
<Value name="4">
<Value>PageClass</Value>
</Value>
<Value name="5">
<Value>PageName</Value>
</Value>
<Value name="6">
<Value>PageTitle</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.csp.SystemList">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>63274,41264.176247</TimeChanged>
<TimeCreated>60908,31118.460678</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	//Req#5 - PHegel Tab Security Use for page name
	if ##class(%SYSTEM.Security).Check("SystemList","USE"){ 
		set Allowed = 1 
	}
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
   <script language=javascript>
<!--
function Initialize()
{

}

self.setInterval(refreshStats,15000);



function popup(mylink, windowname)
{
if (! window.focus)return true;
var href;
if (typeof(mylink) == 'string')
   href=mylink;
else
   href=mylink.href;
window.open(href, windowname, 'width=700,height=900,scrollbars=yes');
return false;
}

function refreshStats() {
		
	var r=#server(..UpdateStats())#;
	
}



//function columnFilter(column) {
function columnFilter() {
		
	//alert('In filter function: '+column);
	var filterName=document.getElementById('filterName').value;
	//alert('filter Name:'+filterName);
	var filterComment=document.getElementById('filterComment').value;
	//alert('filter Comment:'+filterComment);
	var filterType=document.getElementById('filterType').value;
	//alert('filter Type:'+filterType);
	var interfaceTable=document.getElementById('interfaceTable');
	
	var lastPackageRow=2;
		
		

	if ( (filterName+filterComment+filterType) == ""  ) {
		window.location.reload();
	} else {
		for (r=2;r<document.getElementById('interfaceTable').rows.length;r++) {
		//for (r=2;r<15;r++) {
			row=document.getElementById('interfaceTable').rows[r];
			rowType=row.id.split(":")[0];
			rowName=row.id.split(":")[1];
			columns=row.cells;
			
			
			if (rowType=='PackageRow' ) {
				lastPackageRow=r;
				lastPackageId=columns[0].id;
				
			}
			
	    	if ( columns[1].id.toLowerCase().match(filterName.toLowerCase()) && 
	    	     columns[4].innerHTML.toLowerCase().match(filterType.toLowerCase()) && 
	    	     columns[3].innerHTML.toLowerCase().match(filterComment.toLowerCase()) ) {
	    		document.getElementById('interfaceTable').rows[r].style.display='table-row';
	    		
	    		//document.getElementById('interfaceTable').rows[lastPackageRow].style.display='table-row';
	    		p=rowName.split(",")[0];
	    		document.getElementById("PackageRow:"+p+"Button").value='-';
	    		
    		} else {
	    		if ( (rowType == 'ItemRow') || ( rowName.split(".").length > 1 )) {
	    			document.getElementById('interfaceTable').rows[r].style.display='none';
	    		}
    		}
		}

		
	}
		
}

function changePackageView(package) {
	
	//alert('change view: '+package);
	
	
	
	if (document.getElementById("PackageRow:"+package+"Button").value == '+') {
		newDisplay='table-row';
		document.getElementById("PackageRow:"+package+"Button").value='-';
	} else {
		newDisplay='none';
		document.getElementById("PackageRow:"+package+"Button").value='+';
	}
	
	if (package == 'changeAll') {
		rowIndex=1;
		package='';
		
	} else {
		var rowIndex=document.getElementById("PackageRow:"+package).rowIndex;
	}

		
	var i=rowIndex;
	do {
		i=i+1;
		rowId=document.getElementById('interfaceTable').rows[i];
		
		

		rowType=rowId.id.split(":")[0];
		rowName=rowId.id.split(":")[1];
		nameComponents=rowName.split(".");
		//alert('rowName: '+rowName+' length: '+nameComponents.length)
		if ( rowName.match(package) ) {
			//alert('change display value');
			if ( (newDisplay=='none') && (rowType=='PackageRow') && (nameComponents.length<2)) {
				//alert('do nothing');
				
			} else {
				//alert('setting style.display');
				document.getElementById('interfaceTable').rows[i].style.display=newDisplay;
			}
			
			if (rowType=='PackageRow') {
				//alert('package row');
				if (newDisplay=='none') {
					document.getElementById("PackageRow:"+rowName+"Button").value='+';
				} else {
					document.getElementById("PackageRow:"+rowName+"Button").value='-';
				}
			}
		}
		
		
		
		
	} while (  rowName.match(package) && (document.getElementById('interfaceTable').rows.length>i+1) )
	
}
function SearchFor() 
{
	var SearchForString = document.getElementById("SearchForString").value;
	document.getElementById("foundInString").innerHTML = #server(..SearchFor(SearchForString))#;
}
//-->
  
   </script>
  >
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	
	w "<table  class=""DetailTable"" cellpadding=""0"">"
	w "<tr><td><input type=""text"" name=""SearchForString"" id=""SearchForString"" size=""25""></td>"
	w "<td><input type=""image"" src=""customimages/searchblue.gif"" onclick=""SearchFor()"" alt=""Search""></td>"
	w "<td><div id=""foundInString""></td>"				
	w "</tr></table>"

	SET IfCnt=0

	W "<SPAN id='InterfaceList'>"
	
	D ..BuildTable(%request.Get("NameFilter"))
	
	W "</SPAN>"
]]></Implementation>
</Method>

<Method name="BuildTable">
<ClassMethod>1</ClassMethod>
<FormalSpec>NameFilter:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 	
 	set status = ##class(Ens.Director).GetProductionStatus(.ProductionName,.ProductionStatus)
 
 	D ..CollectStats()
 
 	// Render the Table
 	
 	s rowNum=0
 	//Set NameFilter=%request.Get("NameFilter")
 	
 	W "<table class=""DetailTable"" id='interfaceTable' border=""1"" cellpadding=""2"" cellspacing=""0"" style='tableLayout:fixed' >"
 	W "<tr>"
 	W "<td style='width=20' ><input id='PackageRow:changeAllButton' type='button' value='+' onclick='changePackageView(""changeAll"");'></td>"
 	W "<td><input type='text' name='filterName' id='filterName' style='background-color: Khaki;width=420' value='"
 	if ( NameFilter '="" ) {
 		W NameFilter
 	}
 	W "' onchange=""columnFilter('filterName');""></td>"
 	W "<td width=20>&nbsp;</td>"
 	W "<td><input type='text' name='filterComment' id='filterComment' style='background-color: Khaki;width=250' value='' onchange=""columnFilter('filterComment');""></td>"
 	//W "<td><input type='text' name='filterType' id='filterType' style='background-color: Khaki;width=80' value='' onchange=""columnFilter('filterType');""></td>"
 	W "<td><select name='filterType' id='filterType' style='background-color: Khaki;width=80' onchange=""columnFilter('filterType');"">"
 	W "<Option Value="""">"
 	W "<Option Value=""Service"">Service"
 	W "<Option Value=""Process"">Process"
 	W "<Option Value=""Operation"">Operation"
 	W "</td>"
 	W "<td style='width=15' >&nbsp;</td>"
 	W "<td style='width=15'>&nbsp;</td>"
 	W "<td style='width=80'>&nbsp;</td>"
 	W "</tr>"
 	W "<tr>"
 	// W "<th nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;width=190"" >Category</th>"
 	W "<th nowrap align=""left"" style=""width=20"" ></th>"
 	W "<th nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;width=420"" >Name</th>"
 	W "<th width=20>&nbsp;</th>"
 	//W "<th nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;width=250"" >Comment</th>"
 	W "<th nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;width=250"" >Category</th>"
 	W "<th nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;width=80;"" >Type</th>"
 	W "<th nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;width=15;"" >Status</th>"
 	W "<th nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;width=15;"" >Queue Size</th>"
 	W "<th nowrap align=""left"" style=""text-align:left;cursor:pointer;cursor:hand;width=80;"" >LastAction</th>"
 	W "</tr>"
 	Set package=""
 	Set PrevPackage=""
 	
 	
 	
 	For {
 		//Set package=$O(SysList(package))
 		Set package=$O(%session.Data("SysListArray",package))
 		Q:package=""
 		
 		
 		
 		Set InterfaceName=""
 		Set QueueTotal=0
 		Set Status=""
 		Set LastAction=""
 		
 		
 		
 		w "<tr id='PackageRow:"_package_"' "
 		If ( ( $P(package,".",2)="" ) || ( (NameFilter'="") &&($ZCVT(package,"U")[$ZCVT(NameFilter,"U"))) ) {
 			W " style='display: table-row' "
 			
 		} else {
 			W " style='display: none' "
 			
 		}
 		
 		W ">"
 		w "<td><input id='PackageRow:"_package_"Button' type='button' value='+' onclick='changePackageView("""_package_""");'</td>"
 		
 		w "<td nowrap id='"_package_"' >"_package_"</td><td>&nbsp;</td><td>&nbsp;</td><td>&nbsp;</td>"
 		w "<td width=40>&nbsp;</td>"
 		W "<td id='"_package_":Queue' nowrap >"_$G(%session.Data("PackageSummaryArray",package,"Queue"))_"&nbsp;</td>"
 		W "<td id='"_package_":LastAction' nowrap>"
 		if ( $G(%session.Data("PackageSummaryArray",package,"LastAction")) = "" ) {
 			w "&nbsp;"
 		} else {
 			Set LaDt=$P(%session.Data("PackageSummaryArray",package,"LastAction")," ",1)
 			Set LaTm=$P(%session.Data("PackageSummaryArray",package,"LastAction")," ",2)
 			Set LaH=$ZDTH($P(LaDt,"-",2)_"/"_$P(LaDt,"-",3)_"/"_$P(LaDt,"-",1)_" "_LaTm)
 			Set LastAction=$ZD(LaH,11)_" "_$P($ZD(LaH,1),"/",1,2)_" "_$ZT($P(LaH,",",2),4)
 			W LastAction
 		}
 		W "</td>"
 		W "</tr>"
 			
 		For  {
 		
 			Set InterfaceName=$O(%session.Data("SysListArray",package,InterfaceName))
 			Q:InterfaceName=""
 		
 			S Category=$G(%session.Data("SysListArray",package,InterfaceName,"Category"))
 		
 			If ($FIND(Category,"DontMonitor")=0 ) {
 				
 				Set rowNum=rowNum+1
 				
 				W "<TR id='ItemRow:"_package_","_rowNum_"' style='display: "
 				if ( (NameFilter'="") && ($ZCVT(InterfaceName,"U")[$ZCVT(NameFilter,"U"))) {
 					w "table-row"
 				} else {
 					w "none"
 				}
 				w "' "
 				if rowNum#2=0 {
 					W " class=""EvenRow"" "
 				} Else {
 					W " class=""OddRow"" "
 				}
 				w ">"
 
 			
 				W "<TD style='width=5'>"
 				W "&nbsp;"
 				W "</TD>"
 				
 				W "<TD nowrap width=420 id='"_InterfaceName_"'><A HREF='IIBASupportDetail.csp?PageName=InterfaceStatus&InterfaceName="_InterfaceName
 				W "&InterfaceId="_%session.Data("SysListArray",package,InterfaceName,"ID")
 				W "&Mode=ShowStatus "
 				W "' Target='_blank' "
 				W "OnClick=""return popup(this,'Interface')"" "
 				If ( $G(%session.Data("SysListArray",package,InterfaceName,"Comment"))'="") {
 					W " title='"_%session.Data("SysListArray",package,InterfaceName,"Comment")_"' "
 				}
 				W ">"_InterfaceName_"</A></TD>"
 				set TypeName = $P("Service,Process,Operation",",",%session.Data("SysListArray",package,InterfaceName,"Type"))
 				W "<td><a href='IIBASupport.csp?PageName=SearchUtil&auto=true"
 				if ((TypeName = "Service")||(TypeName="Process")) {
 					w "&direction=source"
 				} elseif TypeName="Operation" {
 					w "&direction=target"
 				}
 				w "&type="_TypeName
 				w "&item="_InterfaceName
 				if ( $G(%session.Data("HostStatusArray",InterfaceName,"LastAction"))'="") {
 					w "&lastaction="_$ZD($ZDH($P($G(%session.Data("HostStatusArray",InterfaceName,"LastAction"))," ",1),3),1)
 				}
 				w "'>"
 				w "<img src='customimages/searchblue.gif' align='center' border='0' alt='Search'></a></td>"
 				
 				S:Category="" Category="&nbsp;"
 				W "<TD nowrap width=220>"_Category
 				if $FIND(InterfaceName,"metric")'=0 {
 					W "<input type='button' value='metric' OnClick=""window.open('_DeepSee.UserPortal.DashboardViewer.zen?DASHBOARD="_$P(InterfaceName,".",1)_"/"_InterfaceName_".dashboard');"" >"
 				}
 				W "</TD>"
 			
 	
 				If (ProductionStatus = 1) {
 			
 					Set InterfaceQueue=$Get(%session.Data("HostStatusArray",InterfaceName,"Queue"),0)+0
 					Set Enabled=$Get(%session.Data("SysListArray",package,InterfaceName,"Enabled"),0)
 					Set Type=%session.Data("SysListArray",package,InterfaceName,"Type")
 					W "<TD>"_$P("Service,Process,Operation",",",Type)_"</TD>"
 					//w "<TD>"
 					//W "<TD nowrap width=420 id='"_InterfaceName_"'><A HREF='IIBASupportDetail.csp?PageName=InterfaceStatus&InterfaceName="_InterfaceName
 					//W "<A HREF='EnsPortal.EventLog.zen?SOURCE="_Name_"' target='_blank'>Enabled</A>"
 					
 					W "<TD id='ItemRow:"_InterfaceName_":Status' "
 					If ($G(%session.Data("SysListArray",package,InterfaceName,"Enabled"))=1 ) {
 						
 						If ( $G(%session.Data("HostStatusArray",InterfaceName,"Status"))="Error" ) {
 							W " style='background-color:red'>"
 							//w "Error"
 							W "<A HREF='EnsPortal.EventLog.zen?SOURCE="_InterfaceName_"' target='_blank'>Error</A>"
 						} Else {
 			
 							If ( (Type=3) && 
 					 			($G(%session.Data("HostStatusArray",InterfaceName,"Status"))="Retry")  ||
 			    	 			(( Type=1) && 
 			      	 			( $G(%session.Data("HostStatusArray",InterfaceName,"AdapterState"))="1 job listening") )  ) {
 				      	 
 									W " style='background-color:yellow'/>"
 									//W $G(%session.Data("HostStatusArray",InterfaceName,"AdapterState"))
 									W "<A HREF='EnsPortal.EventLog.zen?SOURCE="_InterfaceName_"' target='_blank'>"_$G(%session.Data("HostStatusArray",InterfaceName,"AdapterState"))_"</A>"
 									
 							} Else {
 			
 									W "&nbsp;"
 							}
 						}
 						
 					} ELSE {
 
 						W " style='background-color:red'>"
 						//W "Disabled"
 						W "<A HREF='EnsPortal.EventLog.zen?SOURCE="_InterfaceName_"' target='_blank'>Disabled</A>"
 					}
 					w "</TD>"
 					
 							
 
 					W "<TD id='ItemRow:"_InterfaceName_":Queue' nowrap>"
 					W InterfaceQueue
 					W "</TD>"
 					Set LastAction="&nbsp;"
 					If ($G(%session.Data("HostStatusArray",InterfaceName,"LastAction")) '= "") {
 						Set LaDt=$P(%session.Data("HostStatusArray",InterfaceName,"LastAction")," ",1)
 						Set LaTm=$P(%session.Data("HostStatusArray",InterfaceName,"LastAction")," ",2)
 						Set LaH=$ZDTH($P(LaDt,"-",2)_"/"_$P(LaDt,"-",3)_"/"_$P(LaDt,"-",1)_" "_LaTm)
 						Set LastAction=$ZD(LaH,11)_" "_$P($ZD(LaH,1),"/",1,2)_" "_$ZT($P(LaH,",",2),4)
 					}
 					
 					W "<TD id='ItemRow:"_InterfaceName_":LastAction' nowrap>"_LastAction
 
 
 				} ELSE {
 
 					W "<TD style='background-color:red'>???</TD>"
 				}
 			
 
 				
 			}
 		
 			W "</TR>"
 		}
 			
 			
 			
 		
 	}
 	W "</TABLE>"
 	
 	Quit $$$OK
]]></Implementation>
</Method>

<Method name="CollectStats">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 //S ^CacheTempBenTrace("SystemList",$H)=1
 
 Set ProductionName=""
 Set ProductionStatus=""
 set status = ##class(Ens.Director).GetProductionStatus(.ProductionName,.ProductionStatus)
 

 
 //Collect interface status information

 Kill SysList
 Kill pkgIndex
 set production=##class(Ens.Config.Production).%OpenId(ProductionName)
 
 for i=1:1:production.Items.Count() {
 		
 	// collect item settings
 	s item=production.Items.GetAt(i)
 
 	s name=item.Name
 	s category=item.Category
 	s class=item.ClassName
 	s Type=item.BusinessType()
 		
 	s %session.Data("name")=name
 	
 	s package=..GetPackageName(name,category)
 	
 	
 	if ( package '= "" ) {
 		s SysList(package,name,"Enabled")=item.Enabled+0
 		S SysList(package,name,"ID")=item.%Id()
 		s SysList(package,name,"Category")=category
 		s SysList(package,name,"Type")=item.BusinessType()
 		s pkgIndex(name)=package
 		S comment=item.Comment
 		//If (comment="") {
 		//	S comment="&nbsp;"
 		//}
 		S SysList(package,name,"Comment")=comment
 		
 	}
 }
 
 Kill HostStatus
 Kill PacakgeSummary
 set rs=##class(%ResultSet).%New("Ens.Util.Statistics:EnumerateHostStatus")
 Set r=rs.Execute()
 	
 while rs.Next() {
 	Set name=rs.Get("Name")
 	Set HostStatus(name,"Status")=rs.Get("Status")
 	Set HostStatus(name,"AdapterState")=rs.Get("AdapterState")
 	Set HostStatus(name,"LastAction")=rs.Get("LastActivity")
 	Set HostStatus(name,"ElapsedTime")=rs.Get("ElapsedTime")
 	set HostStatus(name,"Queue")=rs.Get("Queue")
 	Set HostStatus(name,"Count")=rs.Get("Count")
 		
 	
 	s package=..GetPackageName(name)
 	s package=$G(pkgIndex(name))
 	
 	if ( package '= "" ) {
 		Set PackageSummary(package,"Queue")=$G(PackageSummary(package,"Queue"))+HostStatus(name,"Queue")
 		
 		//S ^CacheTempBenTrace("LastAction")=HostStatus(name,"LastAction")
 		//S ^CacheTempBenTrace(package,"Queue")=PackageSummary(package,"Queue")
 			
 		if (  $G(PackageSummary(package,"LastAction")) = ""  ) {
 			   
 			S PackageSummary(package,"LastAction")=HostStatus(name,"LastAction")
 				
 		} else {
 			S PkgLastAction=$ZDTH(PackageSummary(package,"LastAction"),3,1)
 			s HostLastAction=$ZDTH(HostStatus(name,"LastAction"),3,1)
 			
 			if ( $P(PkgLastAction,",",1)<$P(HostLastAction,",",1) ) {
 				
 				S PackageSummary(package,"LastAction")=HostStatus(name,"LastAction")
 				
 			} elseif (($P(PkgLastAction,",",1)=$P(HostLastAction,",",1)) && ($P(PkgLastAction,",",2)<$P(HostLastAction,",",2))) {
 				S PackageSummary(package,"LastAction")=HostStatus(name,"LastAction")
 			}
 		}
 	}
 } 
 
 //Store the information in the session
 K %session.Data("SysListArray")
 K %session.Data("HostStatusArray")
 K %session.Data("PackageSummaryArray")
 K %session.Data("ProductionStatus")

 merge %session.Data("SysListArray")=SysList
 merge %session.Data("HostStatusArray")=HostStatus
 merge %session.Data("PackageSummaryArray")=PackageSummary
 merge %session.Data("ProductionStatus")=ProductionStatus
 
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetSessionData">
<ClassMethod>1</ClassMethod>
<FormalSpec>vPackage:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 Quit $G(%session.Data(vPackage))
]]></Implementation>
</Method>

<Method name="SearchFor">
<ClassMethod>1</ClassMethod>
<FormalSpec>SearchForString:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 set Result="&nbsp;&nbsp;Found in Namespaces: |"
 set rs=##class(%ResultSet).%New()
 do rs.Prepare("SELECT DISTINCT NameSpace from IIBAENSEMBLE_Task.TaskItemDefinition WHERE ItemType = 'ProdItems' AND ItemName LIKE '%"_SearchForString_"%'")
 do rs.Execute()
 While rs.Next() {
 	set Result = Result_" <a HREF=""../"_rs.Data("NameSpace")_"/IIBASupport.csp?PageName=SystemList&NameFilter="_SearchForString_""">"_rs.Data("NameSpace")_"</a> |"
 }
 
 Quit Result
]]></Implementation>
</Method>

<Method name="SetSessionData">
<ClassMethod>1</ClassMethod>
<FormalSpec>vPackage:%String,value:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 s x="All"
 
 s %session.Data(vPackage)=value
 
 Set %session.Data("Category")="All"
 
 
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="UpdateStats">
<ClassMethod>1</ClassMethod>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 //Q $$$OK
 
 K SysList
 K HostStatus
 K PackageSummary
 
 //S ^CacheTempBenTrace("SystemList","UpdateStats")=$G(^CacheTempBenTrace("SystemList","UpdateStats"))+1
 Do ..CollectStats()
 
 Set package=""
 Set PrevPackage=""
 	
 //&js<alert('updating stats');>	
 	
 For {
 	//Set package=$O(SysList(package))
 	Set package=$O(%session.Data("SysListArray",package))
 	Q:package=""
 				
 		Set InterfaceName=""
 		Set QueueTotal=0
 		Set Status=""
 		Set LastAction=""
 		
 		Set RowId="PackageRow:"_package
 		Set QueueId=package_":Queue"
 		Set QueueSize=$G(%session.Data("PackageSummaryArray",package,"Queue"))_"&nbsp;"
 		&js<document.getElementById('#(QueueId)#').innerHTML='#(QueueSize)#';>
 		//&js<alert('#(QueueId)#'+'/'+'#(QueueSize)#');>
 
 		if ( $G(%session.Data("PackageSummaryArray",package,"LastAction")) = "" ) {
 			S LastAction="&nbsp;"
 		} else {
 			Set LaDt=$P(%session.Data("PackageSummaryArray",package,"LastAction")," ",1)
 			Set LaTm=$P(%session.Data("PackageSummaryArray",package,"LastAction")," ",2)
 			Set LaH=$ZDTH($P(LaDt,"-",2)_"/"_$P(LaDt,"-",3)_"/"_$P(LaDt,"-",1)_" "_LaTm)
 			Set LastAction=$ZD(LaH,11)_" "_$P($ZD(LaH,1),"/",1,2)_" "_$ZT($P(LaH,",",2),4)
 		}
 		set LastActionId=package_":LastAction"
 		&js<document.getElementById('#(LastActionId)#').innerHTML='#(LastAction)#';>
 		//&js<alert('#LastActionId#');>
 			
 		For  {
 		
 			Set InterfaceName=$O(%session.Data("SysListArray",package,InterfaceName))
 			Q:InterfaceName=""
 		
 			S Category=%session.Data("SysListArray",package,InterfaceName,"Category")
 		
 			If ($FIND(Category,"DontMonitor")=0 ) {
 				
 				S Status="&nbsp;"
 				S StatusBG=""
 				S Queue=""
 				S LastAction=""		
 			
 				If (%session.Data("ProductionStatus") = 1) {
 			
 					Set InterfaceQueue=$Get(%session.Data("HostStatusArray",InterfaceName,"Queue"),0)+0
 					Set Enabled=$Get(%session.Data("SysListArray",package,InterfaceName,"Enabled"),0)
 					Set Type=%session.Data("SysListArray",package,InterfaceName,"Type")
 					
 					If (%session.Data("SysListArray",package,InterfaceName,"Enabled")=1 ) {
 						
 					
 						If ( $G(%session.Data("HostStatusArray",InterfaceName,"Status"))="Error" ) {
 						
 							S Status="<TD style='background-color:red'>Error</TD>"
 							s Status="Error"
 							s StatusBG="red"
 						} Else {
 			
 							If ( (Type=3) && 
 				 				(%session.Data("HostStatusArray",InterfaceName,"Status")="Retry")  ||
 		    	 				(( Type=1) && 
 		      	 				( %session.Data("HostStatusArray",InterfaceName,"AdapterState")="1 job listening") )  ) {
 				      	 
 									// S Status= "<TD style='background-color:yellow'/>"_HostStatus(InterfaceName,"AdapterState")_"</TD>"
 									S Status= %session.Data("HostStatusArray",InterfaceName,"AdapterState")
 									s StatusBG="yellow"
 								
 							} Else {
 			
 									S Status="<TD>&nbsp;</TD>"
 									s Status="&nbsp;"
 									//s StatusBG="background-color:"
 							}
 						}
 						
 					} ELSE {
 
 						// W "<A HREF='EnsPortal.EventLog.zen?SOURCE="_InterfaceName_"' target='_blank'>Disabled</A>"
 						S Status="<TD style='background-color:red'>Disabled</TD>"
 						s Status="Disabled"
 						//s Status = "<A HREF='EnsPortal.EventLog.zen?SOURCE="_InterfaceName_"' target='_blank'>Disabled</A>"
 						s StatusBG="red"
 					}
 					
 					Set StatusHREF = "EnsPortal.EventLog.zen?SOURCE="_InterfaceName
 					set StatusId="ItemRow:"_InterfaceName_":Status"
 					//s ^CacheTempBenTrace("StatusId")=StatusId_"|"_Status
 					// to check in terminal: s a="" f  s a=$O( ^CacheTempBenTrace(a),1,b) q:a=""  w a,"  ",b,!
 					//&js<alert('#(StatusId)#');>
 					//&js<document.getElementById('#(StatusId)#').innerHTML='#(..EscapeHTML(Status))#';>
 					&js<document.getElementById('#(StatusId)#').href='#(StatusHREF)#';>
 					&js<document.getElementById('#(StatusId)#').innerHTML='#(Status)#';>
 					&js<document.getElementById('#(StatusId)#').style.backgroundColor='#(StatusBG)#';>
					

 
 							
 				
 		
 					set QueueId="ItemRow:"_InterfaceName_":Queue"
 					&js<document.getElementById('#(QueueId)#').innerHTML='#(InterfaceQueue)#';> 
 				
 					Set LastAction=" "
 					If ($G(%session.Data("HostStatusArray",InterfaceName,"LastAction")) '= "") {
 						Set LaDt=$P(%session.Data("HostStatusArray",InterfaceName,"LastAction")," ",1)
 						Set LaTm=$P(%session.Data("HostStatusArray",InterfaceName,"LastAction")," ",2)
 						Set LaH=$ZDTH($P(LaDt,"-",2)_"/"_$P(LaDt,"-",3)_"/"_$P(LaDt,"-",1)_" "_LaTm)
 						Set LastAction=$ZD(LaH,11)_" "_$P($ZD(LaH,1),"/",1,2)_" "_$ZT($P(LaH,",",2),4)
 					}
 					set LastActionId="ItemRow:"_InterfaceName_":LastAction"
 					//s ^CacheTempBenTrace("LastActionId")=LastActionId_"|"_LasAction
 					&js<document.getElementById('#(LastActionId)#').innerHTML='#(..EscapeHTML(LastAction))#';> 
 	
 
 
 				} 
 			
 
 				
 			}
 		
 			
 		}
 			
 			
 	}
 
 Quit $$$OK
]]></Implementation>
</Method>

<Method name="GetPackageName">
<ClassMethod>1</ClassMethod>
<FormalSpec>itemName:%String,category:%String=""</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	s packageName=""
	if ($P(category,",",1)'="" ) {
		s packageName=$P(category,",",1)
	} else {
		s nl=$ListFromString(itemName,".")
 		s l=$ListLength(nl)
 		if (l>1) {
 			s packageName=$ListToString($List(nl,1,l-2),".")
 		}
	}
	
 	if (packageName="") {
	 	// the default package name can be most anything except a period '.'
	 	s packageName="_default"
 	}
 	
 	Q packageName
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.SystemStatus">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>63274,41249.202037</TimeChanged>
<TimeCreated>60908,31118.460678</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	//Req#5 - PHegel Tab Security Use for page name
	if ##class(%SYSTEM.Security).Check("SystemStatus","USE"){ 
		set Allowed = 1 
	}
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
   <script language=javascript>
	<!--
	function Initialize()
	{

	}
	
function popup(mylink, windowname)
{
if (! window.focus)return true;
var href;
if (typeof(mylink) == 'string')
   href=mylink;
else
   href=mylink.href;
window.open(href, windowname, 'width=400,height=200,scrollbars=yes');
return false;
}


//-->
  
   </script>
  >
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
		
	Set ProductionName=""
	Set ProductionStatus=""
	set status = ##class(Ens.Director).GetProductionStatus(.ProductionName,.ProductionStatus)

	W "<H3>Production Status: "
	
	IF (ProductionStatus '= 1) {
		W "<FONT Color=red>"
	}
	
	W $P("Running,Stopped,Suspended,Troubled",",",ProductionStatus)
	
	IF (ProductionStatus '= 1) {
		W "</FONT>"
	}	
	W "</H3>"
	
	do ##class(IIBAENSEMBLE.csp.components).troubleditems(1)
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.TEST">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>62074,60846.355912</TimeChanged>
<TimeCreated>60908,31118.460678</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	if ##class(%SYSTEM.Security).Check("%All") = "READ,WRITE,USE" { set Allowed = 1 }
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
   <script language=javascript>
	<!--
	function Initialize()
	{

	}
  -->
  	function testCall(){
		#call(..testCall())#;
		alert('Hello')
	}
	alert('Hello')
   </script>
  >
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    //
    
    &html<
    <input type="button" Value="Click" onclick="testCall()"/>
   
	>
]]></Implementation>
</Method>

<Method name="testCall">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 h 5
 s f = ##class(%File).%New("c:\hl7\out\outext.txt")
 d f.Open("WSN")
 d f.WriteLine("newline")
 d f.Close()
 s f = ""
 Quit "ok"
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.TaskMgmt">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>63274,41336.781155</TimeChanged>
<TimeCreated>60908,31118.460678</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	//Req#5 - PHegel Tab Security Use for page name
	if ##class(%SYSTEM.Security).Check("TaskMgmt","USE"){ 
		set Allowed = 1 
	}
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
   <script language=javascript>
	<!--
	function Initialize()
	{

	}
  -->
   </script>
  >
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
 // documentation:
 // The list of tasks is dynamically build from the Task Item Definitions table.
 // To add a task to the Tasks page follow these steps:
 //	1. Create a class for the task.  You may use this class as a template: IIBAENSEMBLE.cspTask.Template. The below functions are optional and may be deleted if they are not needed.
 //		a. CheckPermissions method - if you want to limit access to this task use this method to determine access. How to call this method is detailed below.
 //		b. jsfunction method - if there are any java script functions you need to have available include them here.
 //		c. html method - put in your title, button and any other html elements here.  These may inlcude drop down lists or anything else you may need.
 //		d. cosmethod method - This is one server side method you can call from a js function.  You can have as many server side methods as you need.
 //	2. Create entries in the Task Item Definitions class to add your task to to the tasks page.
 //		a. NameSpace - Enter the namespace in which you want the task to appear.  If you want it in multiple namespaces you will need to make these entries separately for each namespace.
 //		b. ItemType - "TaskMgmtMethods"
 //		c. ItemName - two components separated by ^
 //			1) A serial number indicating the order in which you would like the task to appear on the page.
 //			2) The name of the task.  This value is also displayed as the field set caption that surrounds the html for your task.
 //		d. ItemValue - three components separated by ^
 //			1) A serial number indicating the order in which you would like the methods to be called. See below for the recommended order.
 //			2) The name of the class created in step 1 above.
 //			3) The name of the method to call.  On the recommended order in which to call the methods see 2.d.1
 //				a) CheckPermissions - if you are going to control access to the task, you must call this method first.
 //				b) jsfunction - if needed, call the jsfunction before the html function so that any js functions or objects exist in the page before building the html.
 //				c) html - 
 //				d) other - typically you will call server side methods when events occur on the page so you don't need to enter them here.  However you may call any method you need to on page load.

 
 

 set ClassName="",TaskName="",MethodName="",NameSpace=$ZNSPACE
 set tItemName="",tItemValue=""
 w "<table width=900px><tr><td width=5%/><td width=90% >"
 
				
 set rsNames = ##class(%ResultSet).%New("IIBAENSEMBLE.Task.TaskItemDefinition:GetTaskItemNames")
 do rsNames.Execute(NameSpace)
 while rsNames.Next() { 
 
	set TaskName=$P(rsNames.Data("ItemName"),"^",2)
		
	set WriteFieldSet=1
	set Allowed = 1
		
		
	set rsValues = ##class(%ResultSet).%New("IIBAENSEMBLE.Task.TaskItemDefinition:GetTaskItemValues")
 	do rsValues.Execute(NameSpace,rsNames.Data("ItemName"))
 	while rsValues.Next() { 	
	
		set ClassName = $P(rsValues.Data("ItemValue"),"^",2)
		set MethodName = $P(rsValues.Data("ItemValue"),"^",3)
				
				If MethodName="CheckPermissions" {
					TRY {	
						set Allowed = $ZOBJCLASSMETHOD(ClassName,MethodName)
					} CATCH errobj {
						w "<font color=red>Error occured with: "_errobj.Data_"</font><br>"
					}
				}
				
				Quit:Allowed=0
				
				if Allowed && WriteFieldSet {
					w "<fieldset>"
					w "<legend>"_TaskName_"</legend>"
					set WriteFieldSet=0
				}
				
				If MethodName'="CheckPermissions" {
					TRY {	
						do $ZOBJCLASSMETHOD(ClassName,MethodName)
					} CATCH errobj {
						w "<font color=red>Error occured with: "_errobj.Data_"</font><br>"
					}
				}
			
 	}
			
		
 If Allowed { w "</fieldset><p>" }
 }
		
		

 w "<td width=5%/></tr></table>"
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.TcpPortList">
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>63057,22986.632548</TimeChanged>
<TimeCreated>61655,52784.827366</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	if ##class(%SYSTEM.Security).Check("%All") = "READ,WRITE,USE" { set Allowed = 1 }
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
  
  <link rel="stylesheet" type="text/css" href="ext/resources/css/ext-all.css" />
  <script type="text/javascript" src="ext/adapter/ext/ext-base.js"></script>
  <script type="text/javascript" src="ext/ext-all.js"></script>
  <script type="text/javascript" src="ext/examples/grid-filtering/grid/GridFilters.js"></script>
  <script type="text/javascript" src="ext/examples/grid-filtering/grid/filter/Filter.js"></script>
  <script type="text/javascript" src="ext/examples/grid-filtering/grid/filter/StringFilter.js"></script>
  <script type="text/javascript" src="ext/examples/grid-filtering/grid/filter/DateFilter.js"></script>
  <script type="text/javascript" src="ext/examples/grid-filtering/grid/filter/ListFilter.js"></script>
  <script type="text/javascript" src="ext/examples/grid-filtering/grid/filter/NumericFilter.js"></script>
  <script type="text/javascript" src="ext/examples/grid-filtering/grid/filter/BooleanFilter.js"></script>
  <script type="text/javascript" src="ext/examples/grid-filtering/menu/EditableItem.js"></script>
  <script type="text/javascript" src="ext/examples/grid-filtering/menu/RangeMenu.js"></script>
	
	
   <script language=javascript>
	<!--
	
	
	var portData=[];
	
	function displayGrid(){
		
		
	
		#server(..LoadGridData())#
		
		var myData = [
			['IIBARIS','item 1','service','10001'],
			['IIBACLIN','item 2','service','10002']
		];
		
		var portList = new Ext.data.SimpleStore({
			fields: [
				{name: 'namespace'},
				{name: 'interfaceName'},
				{name: 'interfaceType'},
				{name: 'interfacePort'}
			]
		
		});
			
		
		portList.loadData(portData);
		
		
		Ext.menu.RangeMenu.prototype.icons = {
	  		gt: 'ext/examples/grid-filtering/img/greater_then.png', 
	  		lt: 'ext/examples/grid-filtering/img/less_then.png',
	  		eq: 'ext/examples/grid-filtering/img/equals.png'
		};
		Ext.grid.filter.StringFilter.prototype.icon = 'ext/examples/grid-filtering/img/find.png';
		
		var filters = new Ext.grid.GridFilters({ 
			local: true,
			filters:[
				{type: 'string', dataIndex: 'namespace'},
				{type: 'string', dataIndex: 'interfaceName'},
				{type: 'list', dataIndex: 'interfaceType', options: ['Operation','Service']},
				{type: 'numeric', dataIndex: 'interfacePort'}
			]
			
		});
		
		var portColumns = new Ext.grid.ColumnModel([
			{dataIndex: 'namespace', header: 'Namespace'},
			{dataIndex: 'interfaceName', header: 'Interface Name'},
			{dataIndex: 'interfaceType', header: 'Interface Type'},
			{dataIndex: 'interfacePort', header: 'Port'}
		]);
		portColumns.defaultSortable=true;
	
		var portGrid=new Ext.grid.GridPanel({
			store: portList,
			columns: [
				{id: 'Namespace', header: "Namespace", width: 100, sortable: true, dataIndex: 'namespace'},
				{header: "Interface", sortable: true, width: 350, dataIndex: 'interfaceName'},
				{header: "Type", width: 100, sortable: true, dataIndex: 'interfaceType'},
				{header: "Port", width: 100, sortable: true, align: 'right', dataIndex: 'interfacePort'}
			],
			stripeRows: true,
			
			plugins: filters,
			height:600,
       	 	width:675
			
		});
		
			
		
		portGrid.render('portUseDetails');
	}
	
	

	
	function Initialize()
	{
		
		displayGrid();
	}
	function changeScreenSize(w,h)  {   
		window.resizeTo( w,h )     
	}
	-->
	</script>
	>
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	k PortList
	
	set cNameSpace = $ZNSPACE
	W "<P>"
	W "<Div id='portUseDetails' >"
	W "</Div>"
	
	 
	ZN cNameSpace
]]></Implementation>
</Method>

<Method name="LoadGridData">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	&js<portData=[];>
	
	K NamespaceList
	//Do List^%SYS.NAMESPACE(.NamespaceList,0)
	K SystemInfo
	d ##class(Ens.Director).GetSystemProductionSummary(.SystemInfo)
	
	
	
	s Namespace=""
	F  {
		s Namespace=$O(SystemInfo(Namespace))
		Q:Namespace=""
		Continue:$O(SystemInfo(Namespace,""))=""
		
		zn Namespace
		Set ProductionName=""
		Set ProductionStatus=""
		set status = ##class(Ens.Director).GetProductionStatus(.ProductionName,.ProductionStatus)
		Continue:ProductionName=""
		
		set production=##class(Ens.Config.Production).%OpenId(ProductionName)
		
		for i=1:1:production.Items.Count() {
		
			s item=production.Items.GetAt(i)
			s name=item.Name
		
			for j=1:1:item.Settings.Count() {
				
				 
				
				s st = item.Settings.GetAt(j)
				I (st.Name="Port") {
					//w item.Name,"  ",$P("Service,,Operation",",",item.BusinessType()),"  ",st.Name,"  ",st.Value,!
					//w "<TR><TD>",ProductionName,"</TD><TD>",item.Name,"</TD><TD>",$P("Service,,Operation",",",item.BusinessType()),"</TD><TD>",st.Value,"</TD></TR>"
					s portRow="['"_Namespace_"','"_item.Name_"','"_$P("Service,,Operation",",",item.BusinessType())_"',"_st.Value_"]"
					
					
					
					&js< portData.push(#(portRow)#); >
					
					
				}
			}
		
		
		
		}
	}
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.WorkflowPurge">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>62656,47082.787229</TimeChanged>
<TimeCreated>60908,31118.460678</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	if ##class(%SYSTEM.Security).Check("%All") = "READ,WRITE,USE" { set Allowed = 1 }
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="calfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
   <script language=javascript>
	<!--
	// create calendar object(s) just after form tag closed
	// specify form element as the only parameter (document.forms['formname'].elements['inputname']);
	// note: you can have as many calendar objects as you need for your application
	var cal1 = new calendar2(document.forms['QueryBuilder'].elements['Age']);
	cal1.year_scroll = true;
	cal1.time_comp = false;
	document.QueryBuilder.Age.onkeydown = enterKeyAge;

  -->
   </script>
  >
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
<script language="JavaScript" src="calendar2.js"></script>
<script language="JavaScript" src="date.js"></script><!-- Date only with year scrolling -->

   <script language=javascript>
	<!--
	function Initialize()
	{

	}
	function Hello() {
		alert('Hello');
	}
	
	function enterKeyAge(e) {

		if ((event.keyCode == 13)||(event.keyCode == 9))
		{ 
			TDate('Age');
			return false;
		}
	}
	
	function TDate(strElement) {
		var tvalue = document.getElementById(strElement).value;
		var tvaluefirst = tvalue.substr(0,1);
		
		if (tvaluefirst.toUpperCase() == 'T')
		{
			var tdate = new Date();
			if (tvalue.length == 1)
			{
				document.getElementById(strElement).value = tdate.format('MM/dd/yyyy');
			} 
			else 
			{
				var tdays = tvalue.substr(1,tvalue.length);
				tdate.add('d',tdays);
				document.getElementById(strElement).value = tdate.format('MM/dd/yyyy');
			}
		}		
	}
	
	function purge() {
		var jsAge=document.getElementById('Age').value;
		var jsRole=document.getElementById('RoleName').value;
		
		if (  jsAge == '' ) {
			alert('Please enter a date ');
			
		} else if ( jsRole == '' ) {
			alert('Please select a Worfklow');
		
		} else {
		
			var d=#server(..PurgeWorklistTasks(jsRole,jsAge))#;
			
		
			alert(' Tasks purged for Workflow='+jsRole+' Prior to='+jsAge);
			location.href='IIBASupport.csp?PageName=WorkflowPurge';
		}
	}
	
	function DisplayRoleInfo() {
		
		var jsRole=document.getElementById('RoleName').value;
		if (jsRole != "" ) {
			jsRoleInfo=#server(..GetRoleInfo(jsRole))#
		} else {
			jsRoleInfo=""
		}
		document.getElementById('RoleInfo').innerHTML=jsRoleInfo;
	}


  -->
   </script>
  >
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	k RoleList
		k RoleCount
	 	S rs=##class(%ResultSet).%New("EnsLib.Workflow.Engine:Worklist")
	 	s tsc=rs.Execute()
	 	
	 	while (rs.Next(.sc) ) {
		 	
		 	// get list of role names and ages (in days)
		 			 	
		 	S ptr=0,age=0
		 
			while $LISTNEXT($LFS(rs.Data("Age")," "),ptr,value) {
			 
			 				 
			 	s l=$LENGTH(value)
			 	s n=$E(value,1,l-1)
			 	s t=$E(value,l)
			 	
			 
				if (t="w") {
				 	s age=age+n*7
				 
			 	} Elseif (t="d") {
				 	s age=age+n
				 }
			 
		 	} 
		 	
		 	//W rs.Data("RoleName"),"<BR>"
		 	s RoleList(rs.Data("RoleName"),rs.Data("TaskId"))=age
		 	
		 	s TimeCreated=rs.Data("TimeCreated")
		 	if ( $DATA(RoleCount(rs.Data("RoleName"))) > 9 ) {
			 	S RoleCount(rs.Data("RoleName"),"Count")=RoleCount(rs.Data("RoleName"),"Count")+1
			 	S Min=$P(RoleCount(rs.Data("RoleName"),"Min"),";",1)
			 	S Max=$P(RoleCount(rs.Data("RoleName"),"Max"),";",1)
			 	if ( Min > age ) {
				 	s RoleCount(rs.Data("RoleName"),"Min")=age_";"_TimeCreated
			 	}
			 	
			 	if ( Max < age ) {
				 	s RoleCount(rs.Data("RoleName"),"Max")=age_";"_TimeCreated
			 	}
		 	} else {
			 	s RoleCount(rs.Data("RoleName"),"Count")=1
			 	s RoleCount(rs.Data("RoleName"),"Min")=age_";"_TimeCreated
			 	s RoleCount(rs.Data("RoleName"),"Max")=age_";"_TimeCreated
		 	}
		 	
	 	}
		
		// Get List of roles for user
		k UserRoles
		S rs=##class(%ResultSet).%New("EnsLib.Workflow.Engine:ListRolesForUser")
	 	s tsc=rs.Execute(%session.Username)
	 	
	 	while (rs.Next(.sc) ) {
		 	s UserRoles(rs.Data("RoleName"))=%session.Username
		 	// W rs.Data("RoleName")_"<BR>"
	 	}

		
		
		w "<form name=""QueryBuilder"" id=""QueryBuilder"">"
		w "<Table padding=25><TR>"
		w "<TD>Workflow: </TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;</TD>"
		W "<TD><Select Name=""RoleName"" id=""RoleName"" onchange=""DisplayRoleInfo()"">"
		w "<option VALUE="""">"
		
		s n=""
		for {
			s n=$O(RoleList(n))
			q:n=""
			
			// Only include roles to which the user is assigned
			If ( $G(UserRoles(n)) '= "" ) {
				w "<option Value=""",n,""">",n
			}
		}
		
		w "</TD></TR>"
		
		W "<TR><TD></TD><TD></TD><TD><SPAN id=""RoleInfo""></SPAN></TD></TR>"
		
		W "<TR><TD>Before:</TD><TD>&nbsp;&nbsp;&nbsp;&nbsp;</TD>"
		w "<TD>"
		w "<input type=""Text"" name=""Age"" id=""Age"" value="""" onblur=""TDate('Age')"">&nbsp;"
		w "<a href=""javascript:cal1.popup();""><img src=""img/cal.gif"" width=""16"" height=""16"" border=""0"" alt=""Before Date""></a><br>"
		w "</TD></TR>"
		w "<TR><TD>&nbsp;&nbsp;&nbsp;&nbsp;</TD><TD></TD>"
		w "<TD><input Type=""Button"" Name=""btnPurge"" id=""btnPurge"" Value=""Purge"" OnClick=""purge()"">"
		w "</TD></TR>"
		w "</FORM>"
]]></Implementation>
</Method>

<Method name="GetRoleInfo">
<ClassMethod>1</ClassMethod>
<FormalSpec>Role:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 	s info=""
 	s Count=0
 	S From=""
 	s To=""
 	
 	S rs=##class(%ResultSet).%New("EnsLib.Workflow.Engine:Worklist")
 	s tsc=rs.Execute()
 	 	
 	while (rs.Next(.sc) ) {
 		if ( rs.Data("RoleName")=Role ) {
 			S Count=Count+1
 			s Age=rs.Data("Age")
 			If ( (To = "" ) || ( $P( To,";",1) > Age ) ) {
 				S To=Age_";"_$P(rs.Data("TimeCreated")," ",1)
 			}
 			
 			If ( (From = "" ) || ( $P( From,";",1) < Age) ) {
 				S From=Age_";"_$P(rs.Data("TimeCreated")," ",1)
 			}
 			
 		}
 					
 	}
 	
 	if (Count > 0 ) {
 		
 		s info="<Table>"
 		S info=info_"<TR><TD>Count:</TD><TD>"_Count_"</TD></TR>"
 		S info=info_"<TR><TD>From:</TD><TD>"_$P(From,";",2)_"</TD></TR>"
 		S info=info_"<TR><TD>To:</TD><TD>"_$P(To,";",2)_"</TD></TR>"
 		s info=info_"</Table>"
 		
 		
 	}
 	
 	Q info
]]></Implementation>
</Method>

<Method name="PurgeWorklistTasks">
<ClassMethod>1</ClassMethod>
<FormalSpec>Role:%String,Date:%String</FormalSpec>
<Language>cache</Language>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
 
 		S days=$P($H,",",1)-$P($ZDTH(Date),",",1)
 		
 		// Quit days
 		
 		k RoleList
 	 	S rs=##class(%ResultSet).%New("EnsLib.Workflow.Engine:Worklist")
 	 	s tsc=rs.Execute()
 	 	
 	 	while (rs.Next(.sc) ) {
 		 	
 		 			 	
 		 	if ( rs.Data("RoleName")=Role ) {
 		 		// get list of role names and ages (in days)
 		 				 	
 		 		S ptr=0,age=0
 		 		
 		 
 				while $LISTNEXT($LFS(rs.Data("Age")," "),ptr,value) {
 			 
 			 				 
 			 		s l=$LENGTH(value)
 			 		s n=$E(value,1,l-1)
 			 		s t=$E(value,l)
 			 	
 			 
 					if (t="w") {
 				 		s age=age+n*7
 				 
 			 		} Elseif (t="d") {
 				 		s age=age+n
 				 	}
 			 
 		 		} 
 		 		
 		 		 
 		 	
 		 		if ( age > days ) {
 			 		//w "purge ",tid
 			 		
 			 		d ##class(IIBAENSEMBLE.WorkflowFunctions).TaskActionFunct(Role,"Ignore",rs.Data("TaskId"))
 		 		}
 		 	
 	 		}
 	 	}
 
 
 Quit age
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.csp.components">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%Persistent,%XML.Adaptor</Super>
<TimeChanged>64202,69109.309157</TimeChanged>
<TimeCreated>60908,31118.460678</TimeCreated>
<Inheritance>right</Inheritance>

<Method name="navbar">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[

	w "<table><tr><td class=""LayoutContentCol"" width=""20%"" ><div class=""DetailCommand"">"
	//Req#5 - PHegel - Tab Security based on resource permisssion for each menu item using the page name as resource where not defined already.
	if ##class(%SYSTEM.Security).Check("SystemStatus","USE"){
		w "<a id=""linkSystemStatus"" class=""DetailCommand"" target=""_top"" href=""IIBASupport.csp?PageName=SystemStatus""><nobr>&nbsp;Home&nbsp;</nobr></A>"
		w "&nbsp;"
	}
	if ##class(%SYSTEM.Security).Check("SystemList","USE"){
		w "<a id=""linkSystemList"" class=""DetailCommand"" target=""_top"" href=""IIBASupport.csp?PageName=SystemList""><nobr>&nbsp;Interface List&nbsp;</nobr></A>"
		w "&nbsp;"
	}
	if ##class(%SYSTEM.Security).Check("SearchUtil","USE"){
		w "<a id=""linkSearchUtil"" class=""DetailCommand"" target=""_top"" href=""IIBASupport.csp?PageName=SearchUtil""><nobr>&nbsp;Message Search&nbsp;</nobr></A>"
		w "&nbsp;"
	}
	if ##class(%SYSTEM.Security).Check("LookUpTableAdmin","USE"){
		w "<a id=""linkLookUp"" class=""DetailCommand"" target=""_top"" href=""IIBASupport.csp?PageName=LookUp""><nobr>&nbsp;Lookup&nbsp;</nobr></A>"
		w "&nbsp;"
	}
	// Req#1 - PHegel - Change to just check Use permission.  Let the table resource define Read/Write permissions
	if ##class(%SYSTEM.Security).Check("Reference","USE") {
		w "<a id=""linkReference"" class=""DetailCommand"" target=""_top"" href=""IIBASupport.csp?PageName=Reference""><nobr>&nbsp;xRef&nbsp;</nobr></A>"
		w "&nbsp;"
	}
	if ##class(%SYSTEM.Security).Check("AlertAdmin","USE"){
		w "<a id=""linkAlertAdmin"" class=""DetailCommand"" target=""_top"" href=""IIBASupport.csp?PageName=AlertAdmin""><nobr>&nbsp;Alert Admin&nbsp;</nobr></A>"
		w "&nbsp;"
	}
	if ##class(%SYSTEM.Security).Check("TaskMgmt","USE"){
		w "<a id=""linkTaskMgmt"" class=""DetailCommand"" target=""_top"" href=""IIBASupport.csp?PageName=TaskMgmt""><nobr>&nbsp;Tasks&nbsp;</nobr></A>"
		w "&nbsp;"
	}
	if ##class(%SYSTEM.Security).Check("ErrorWorkflow","USE"){
		w "<a class=""DetailCommand"" target=""_blank"" href=""_DeepSee.UserPortal.Workflow.zen""><nobr>&nbsp;Error Workflow&nbsp;</nobr></A>"
		//w "&nbsp;"
		//w "<a class=""DetailCommand"" target=""_top"" href=""IIBASupportDetail.csp?PageName=Mobile""><nobr>&nbsp;Mobile&nbsp;</nobr></A>"
		
	 	w "&nbsp;"
	}
	if ##class(%SYSTEM.Security).Check("Manage","USE"){
		s tDefaultApp = $SYSTEM.CSP.GetDefaultApp($NAMESPACE)
		w "<a class=""DetailCommand"" target=""_blank"" href="""_tDefaultApp_"/%25CSP.Portal.Home.zen""><nobr>&nbsp;Manage&nbsp;</nobr></A>"

	 	w "&nbsp;"
	}
	// Updgrade - Phegel - logout method changed for upgrade to Version 2013.1.4
	//w "<a class='DetailCommand' target='_self' href='%25CSP.Login.cls?LOGOUT=1&Error:URL=IIBASupport.csp'><nobr>&nbsp;Logout&nbsp;</nobr></A>"
	w "<a class='DetailCommand' target='_self' href='?CacheLogout=end'><nobr>&nbsp;Logout&nbsp;</nobr></A>"
 	w "&nbsp;"
 	
	w "<a class=""DetailCommand""><nobr>&nbsp;NameSpace:&nbsp;</nobr></a>"
	&html<<select id="nscombo" style="font-size: 0.8em; color: darkblue; font-weight: bold;" onchange="self.document.location=this.value;">>
	Set tNS = $O(^%SYS("Ensemble","InstalledNamespace",""))
	While (tNS '= "") {
		Set tSel = $S(tNS=$ZNSPACE:"selected",1:"")
		s tDefaultApp = $SYSTEM.CSP.GetDefaultApp(tNS)
		Set tURL = tDefaultApp_"/"_$S(%request.Get("PageName")="":%request.PageName,1:"IIBASupport.csp?PageName="_%request.Get("PageName"))
		if (##class(%SYSTEM.Security).Check("NS_"_tNS) = "READ,WRITE,USE")&&(tNS'="IIBA") {
			&html<<option value="#(tURL)#" #(tSel)#>#($ZCVT(tNS,"O","HTML"))#>
		}
		Set tNS = $O(^%SYS("Ensemble","InstalledNamespace",tNS))
	}
	&html<</select>&nbsp;>
	
	//Do ##class(%CSP.Portal.Utils).%AddFavorite(pName,pLink)
	s tDefaultApp = $SYSTEM.CSP.GetDefaultApp($NAMESPACE)
	s pURL=tDefaultApp_"/"_$S(%request.Get("PageName")="":%request.PageName,1:"IIBASupport.csp?PageName="_%request.Get("PageName"))
	s pName="Nuvo "_$S(%request.Get("PageName")="":"Toolkit",1:$ZNSPACE_" / "_%request.Get("PageName"))
	w "&nbsp;"

	W "<img class='DetailCommand' target='_blank' title='add to Ensemble Favorites' src='CustomImages/star.png' alt='add to Favorites' onclick='addFavorite("""_pName_""","""_pURL_""")' />"

	w "</div></td></tr></table>"
]]></Implementation>
</Method>

<Method name="troubleditems">
<ClassMethod>1</ClassMethod>
<FormalSpec>linktopopup:%Boolean</FormalSpec>
<Implementation><![CDATA[
	set rs = ##class(%ResultSet).%New()
	do rs.Prepare("Select ItemName,Parameter,NameSpace,LastStatus,EmailText from IIBAENSEMBLE_Monitor.ItemStatus WHERE Troubled = 1 ORDER BY ItemName")
	do rs.Execute()
	
	set rowcount = 0
	
	While rs.Next() {
		
		set rowcount = rowcount + 1
		
		if rowcount = 1 {
			w "<H3><font color=red>Troubled Items:</font></H3>"
			//w "<TABLE Border=1 CellPadding=3><TR><TH>Name</TH><TH>Comment</TH><TH>Type</TH><TH>Alert Parameter</TH><TH>Current Status</TH><TH>Queue Size</TH></TR>"
			w "<TABLE Border=1 CellPadding=3><TR><TH>Name</TH><TH>Alert Parameter</TH><TH>Current Status</TH><TH>Queue Size</TH><TH>&nbsp;</TH></TR>"
		}
		
		set ItemID="", ItemName = rs.Data("ItemName"), QueueSize=0
	
		&sql(select ID into :ItemID from Ens_Config.Item where Name = :ItemName)
	
		set item = ##class(Ens.Config.Item).%OpenId(ItemID)
		
		set qrs=##class(%ResultSet).%New("Ens.Queue:Enumerate")
		do qrs.Execute()
	
		while qrs.Next() {
			if ( qrs.Get("Name") = ItemName ) {
				Set QueueSize=qrs.Get("Count")
			}
		} 
		
		
		w "<TR>"
		if linktopopup { w "<TD><A HREF='/csp/"_rs.Data("NameSpace")_"/IIBASupportDetail.csp?PageName=InterfaceStatus&InterfaceName="_ItemName_"&InterfaceId="_ItemID_"' Target='_blank'  Height=20 width=40  >"_rs.Data("ItemName")_"</A></TD>" }
		else { w "<TD>"_rs.Data("ItemName")_"</TD>" }
		//w "<TD>"_$SELECT(item.Comment="":"&nbsp",1:item.Comment)_"</TD>"
		//w "<TD>"_$P("Service,Process,Operation",",",item.BusinessType())_"</TD>"
		w "<TD>"_rs.Data("Parameter")_"</TD>"
		w "<TD>"_rs.Data("LastStatus")_"</TD>"
		w "<TD>"_QueueSize_"</TD>"
		W "<TD>"
		S EmailText=$G(rs.Data("EmailText"))
		if (EmailText'="") {
			
			W "<input type='image' src='customimages/question.gif' id='emailButton' onclick='alert("""_EmailText_""")'/>"
		} else {
			w "&nbsp;"
		}
		w "</TD></TR>"
		
				
	}
	
	if rowcount > 0 {w "</TABLE>"}
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^IIBAENSEMBLE.csp.componentsD</DataLocation>
<DefaultData>componentsDefaultData</DefaultData>
<IdLocation>^IIBAENSEMBLE.csp.componentsD</IdLocation>
<IndexLocation>^IIBAENSEMBLE.csp.componentsI</IndexLocation>
<StreamLocation>^IIBAENSEMBLE.csp.componentsS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="componentsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.cspTask.BillingDashboard">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>62675,39905.817146</TimeChanged>
<TimeCreated>61053,51897.794076</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set Allowed=1
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    w "<table width=800px><tr><td width=700px>"
    w "TCP Port List "
	w "</td><td>"
	w "<Input Type='Button' Name='btnBillingDashboard' id='btnBillingDashboard' Value='View' onclick='location.href=""/csp/iibabill/BillingDashboard.csp""'>"
	w "</td></tr></table>"
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.cspTask.DTLAutoDoc">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>62683,35881.431173</TimeChanged>
<TimeCreated>60908,31118.460678</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	if ##class(%SYSTEM.Security).Check("%All") = "READ,WRITE,USE" { set Allowed = 1 }
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
   <script language=javascript>
	
	function Initialize()
	{

	}
	function LaunchAutoDoc()
	{
		var DTL = '';
		DTL = document.getElementById('TransformsList').options[document.getElementById('TransformsList').options.selectedIndex].value;
		window.open('IIBASupportDetail.csp?PageName=DTLAutoDoc&DTL='+DTL);
	}
	
	
  
   </script>
  >
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    s rs = ##class(%ResultSet).%New()
    s rs.ClassName = "%Dictionary.ClassDefinition"
    s rs.QueryName = "SubclassOf"
    d rs.Execute("Ens.DataTransform")
        
    w "<table width=800px><tr><td width=700px>"
    w "Generate Documentation for Transform: "
    w "<select NAME=""TransformsList"" ID=""TransformsList"">"
    w "<option Value="""">"
    While rs.Next() {
	    w "<option Value="""_rs.Data("Name")_".cls"">"_rs.Data("Name")
    }
    w "</select>"
	w "</td><td>"
	w "<Input Type=""Button"" Name=""Button"" id=""Button"" Value=""Start"" onclick='LaunchAutoDoc()'>"
	w "</td></tr></table>"
]]></Implementation>
</Method>

<Method name="cosmethod">
<ClassMethod>1</ClassMethod>
<FormalSpec>param:%String</FormalSpec>
<Implementation><![CDATA[
	
	&js<alert('Hello');>
	Quit 1
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.cspTask.MRNConversions">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>64202,69160.847136</TimeChanged>
<TimeCreated>61053,51897.794076</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
		
	if (%session.Username="ddpaxton")
		||(%session.Username="ddpaxton")
		||(%session.Username="dpaxton") {
			set Allowed = 1
		}
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    w "<table width=800px><tr><td width=700px>"
    w "Conversion Monitor "
	w "</td><td>"
	//w "<Input Type='Button' Name='btnMRNcTool' id='btnMRNcTool' Value='Open' onclick='window.open(""/csp/"_$ZNSPACE_"/IIBAENSEMBLE.Zen.MRNConversion.cls"")'>"
	w "</td><td>"
	s tDefaultApp = $SYSTEM.CSP.GetDefaultApp($NAMESPACE)
	w "<Input Type='Button' Name='btnMRNcView' id='btnMRNcView' Value='View' onclick='window.open("""_tDefaultApp_"/IIBAENSEMBLE.Zen.StatsConversion.cls"")'>"
	w "</td></tr></table>"
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.cspTask.MSGCLASSDEF">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%CSP.Page</Super>
<TimeChanged>61990,29615.246655</TimeChanged>
<TimeCreated>61110,55363.687438</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	if ##class(%SYSTEM.Security).Check("%All") = "READ,WRITE,USE" { set Allowed = 1 }
	
	if ##class(%SYSTEM.Security).Check("IIBAMsgDef") = "READ,WRITE,USE" { set Allowed = 1 }
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
   
  <!-- Tigra Calendar American format mm/dd/yyyy -->
<script language="JavaScript" src="calendar2.js"></script>
<script language="JavaScript" src="date.js"></script><!-- Date only with year scrolling -->
<script language="JavaScript">
			<!-- 
			
			function msgDefUpdate() {
				
				sDate=document.getElementById("UpdateDate").value;
				msg=#server(..MsgDefQuickupdate(sDate))#;
				alert(msg);
			}
			
			function TDate(strElement) {
		var tvalue = document.getElementById(strElement).value;
		var tvaluefirst = tvalue.substr(0,1)
		
		
		if (tvaluefirst.toUpperCase() == 'T')
		{
			var tdate = new Date();
			if (tvalue.length == 1)
			{
				document.getElementById(strElement).value = tdate.format('MM/dd/yyyy');
				
			} 
			else 
			{
				var tdays = tvalue.substr(1,tvalue.length)
				tdate.add('d',tdays);
				document.getElementById(strElement).value = tdate.format('MM/dd/yyyy');
			}
		} else if (tvalue !="") {
			
			var tdate=tvalue.split("/");
			var month=tdate[0];
			var day=tdate[1];
			var year=tdate[2];
						
			if ( (month != "" ) && (day != "" ) ) {
				if ( (tdate.length == 2) || (year.length == 0) ) {
					var d=new Date()
					year=d.getFullYear()
					document.getElementById(strElement).value=month+"/"+day+"/"+year;
					
				} else if (year.length == 2) {
					document.getElementById(strElement).value=month+"/"+day+"/20"+year;
				}
			}
						
		}		
	}

			 
			//-->
			
</script>

   
  >
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    w "<table width=800px><tr><td width=700px>"
    w "Message Search - Class Def Quick Update "
	w "</td>"
	W "<TD nowrap >"
	w "<input type='Text' id='UpdateDate' value='"_$ZDATE($H)_"' onblur=""TDate('UpdateDate');"" >&nbsp;"
	w "<a href=""javascript:cal1.popup();""><img src=""img/cal.gif"" width=""16"" height=""16"" border=""0"" alt=""Message Date""></a><br>"
	W "</TD>"
	W "<td>"
	w "<Input Type=""Button"" id='btnStartUpdate' Value='Start' onclick='msgDefUpdate();'>"
	w "</td></tr></table>"
]]></Implementation>
</Method>

<Method name="MsgDefQuickupdate">
<ClassMethod>1</ClassMethod>
<FormalSpec>UpdateDate:%String</FormalSpec>
<Implementation><![CDATA[
	
	s msg=##class(IIBAENSEMBLE.Task.MSGCLASSDEF).QuickUpdate(UpdateDate)
	Quit msg
]]></Implementation>
</Method>

<Method name="jsCalfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
   <script language=javascript>
			<!-- // create calendar object(s) just after form tag closed
				 // specify form element as the only parameter (document.forms['formname'].elements['inputname']);
				 // note: you can have as many calendar objects as you need for your application
				//var cal1 = new calendar2(document.forms['QueryBuilder'].elements['HolidayDate']);
				var cal1 = new calendar2(document.getElementById('UpdateDate'));
				cal1.year_scroll = true;
				cal1.time_comp = false;
//document.QueryBuilder.submit.onkeydown = enterKey;
//document.getElementById('UpdateDate').onkeydown = enterKeyUpdateDate(event);

function enterKey(e) {
	//check to see if the return key was pressed ...
	
	if ((event.keyCode == 13)||(event.keyCode == 9))
	{ 
		//call the ValidateSearch function ...
		document.getElementById('btnStartUpdate').focus();
		//ValidateSearch();
		//prevent the page from reloading ...
		return false;
	}
}
function enterKeyUpdateDate(e) {

	if ((event.keyCode == 13)||(event.keyCode == 9))
	{ 
		TDate(document.getElementById('UpdateDate'));
		document.getElementById("btnStartUpdate").focus();
		return false;
	}
	
}

	

			//-->
   </script>
  >
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.cspTask.MedicalisMonitor">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>63818,37621.15106</TimeChanged>
<TimeCreated>61053,51897.794076</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 1
		
	if (%session.Username="ddpaxton")
		||(%session.Username="ddpaxton")
		||(%session.Username="dpaxton") {
			set Allowed = 1
		}
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
		
    w "<table width=800px><tr><td width=700px>"
    w "<p>Medicalis Monitor</p><td>"
	//w "<Input Type='Button' Name='btnView' id='btnView' Value='View' onclick='window.open(""/csp/"_$ZNSPACE_"/Medicalis.Metric.ZenView.cls"")'>"
	w "<Input Type='Button' Name='btnView' id='btnView' Value='View' onclick='alert(""Sorry, this page is temporarily disabled."");'>"
	w "</td></tr></table>"
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.cspTask.MessageExport">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%CSP.Page</Super>
<TimeChanged>63593,42264.194653</TimeChanged>
<TimeCreated>63593,38060.043924</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	if ##class(%SYSTEM.Security).Check("%All") = "READ,WRITE,USE" { set Allowed = 1 }
	
	if ##class(%SYSTEM.Security).Check("IIBAMsgDef") = "READ,WRITE,USE" { set Allowed = 1 }
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
	<script language=javascript>
	
	function ExportMsg() {
		
		var messageId = document.getElementById('MessageId').value;
		//alert('Export ' + messageId);
		var filename = #server(..messageExport(this.MessageId.value))#;
		
		if (filename!="")
		{
			window.location = 'IIBAENSEMBLE.csp.FileDownload.cls?filename='+filename;		
		}
	}  
  </script>
  >
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    w "<table width=800px><tr><td width=700px>"
    w "HL7 Message Search - Export Large Message "
	w "</td>"
	W "<TD nowrap >"
	w "<input type='Text' id='MessageId' value='Message Id' "" >&nbsp;"
	W "</TD>"
	W "<td>"
	w "<Input Type=""Button"" id='btnExport' Value='Export' onclick='ExportMsg()' >"

	w "</td></tr></table>"
]]></Implementation>
</Method>

<Method name="messageExport">
<ClassMethod>1</ClassMethod>
<FormalSpec>MessageId:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	if ($NUMBER(MessageId,"I")="")
	{
		&js<alert('No valid integer specified.');>
		Q ""
	}
	s EnsSysDir = ##class(%File).ParentDirectoryName(##class(%File).ManagerDirectory())
	s filetimestamp = ##class(Ens.Util.Time).FormatDateTime("%Y%m%d%H%M%S")
	
	if '##class(%File).DirectoryExists(EnsSysDir_"IIBAExports") { 
		d ##class(%File).CreateDirectory(EnsSysDir_"IIBAExports") 
	}
	s path = EnsSysDir_"IIBAExports\"
	s filename = "MsgExport_"_%session.SessionId_".txt"
	//&js<alert('File Name : ' + #(filename)#);>
	s message = ##class(EnsLib.HL7.Message).%OpenId(MessageId)
	if ($ISOBJECT(message))
	{
		s tSC = message.OutputToFile(path_filename)
		Q filename
	}
	&js<alert('No HL7 message found with ID: ' + #(MessageId)#);>
	Q ""
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.cspTask.OnCallMonitor">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>64202,69188.250756</TimeChanged>
<TimeCreated>61053,51897.794076</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 1
		
	if (%session.Username="ddpaxton")
		||(%session.Username="ddpaxton")
		||(%session.Username="dpaxton") {
			set Allowed = 1
		}
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	//d ##class(IIBAENSEMBLE.Zen.OnCallMonitor.Home).GetErrorCount(1,.count)
	//d ##class(IIBAENSEMBLE.Zen.OnCallMonitor.Home).GetErrorCount(0,.msg)
	
    w "<table width=800px><tr><td width=700px>"
    //w "<p>Errors: "_count_"</p>"
	w "<p>On-Call Monitor</p></td><td>"
	s tDefaultApp = $SYSTEM.CSP.GetDefaultApp($NAMESPACE)
	w "<Input Type='Button' Name='btnView' id='btnView' Value='View' onclick='window.open("""_tDefaultApp_"/IIBAENSEMBLE.Zen.OnCallMonitor.Home.cls"")'>"

	w "</td></tr></table>"
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.cspTask.ReportQueueMaint">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>62675,39979.997709</TimeChanged>
<TimeCreated>61053,51897.794076</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	if ##class(%SYSTEM.Security).Check("%All") = "READ,WRITE,USE" { set Allowed = 1 }
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    w "<table width=800px><tr><td width=700px>"
    w "Report Attach Maintenance "
	w "</td><td>"
	w "<Input Type=""Button"" Name=""btnProvider"" id=""btnProvider"" Value=""Open"" onclick='window.open(""/csp/IIBACLINspt/IIBASupport.csp?PageName=reportattachmaint"")'>"
	w "</td></tr></table>"
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.cspTask.SupportPageDefAdmin">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>64202,69229.430524</TimeChanged>
<TimeCreated>61053,51897.794076</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
		
	if (%session.Username="msimpson")
		||(%session.Username="bgraham")
		||(%session.Username="jbendinelli") {
			set Allowed = 1
		}
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    w "<table width=800px><tr><td width=700px>"
    w "Support Page Definition Admin "
	w "</td><td>"
	s tDefaultApp = $SYSTEM.CSP.GetDefaultApp($NAMESPACE)
	w "<Input Type=""Button"" Name=""btn"" id=""btn"" Value=""Open"" onclick='window.open("""_tDefaultApp_"/IIBAENSEMBLE.csp.SupportPageDefinition.Home.cls"")'>"
	w "</td></tr></table>"
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.cspTask.TaskItemDefinitionAdmin">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>64202,69256.073621</TimeChanged>
<TimeCreated>61053,51897.794076</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	if ##class(%SYSTEM.Security).Check("%All") = "READ,WRITE,USE" { set Allowed = 1 }
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    w "<table width=800px><tr><td width=700px>"
    w "Task Item Definition Admin "
	w "</td><td>"
	s tDefaultApp = $SYSTEM.CSP.GetDefaultApp($NAMESPACE)
	w "<Input Type=""Button"" Name=""btnProvider"" id=""btnProvider"" Value=""Open"" onclick='window.open("""_tDefaultApp_"/IIBAENSEMBLE.Task.TaskItemDefinitionAdmin.Home.cls"")'>"
	w "</td></tr></table>"
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.cspTask.TcpPortList">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>64202,68938.671863</TimeChanged>
<TimeCreated>61053,51897.794076</TimeCreated>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    w "<table width=800px><tr><td width=700px>"
    w "TCP Port List "
	w "</td><td>"
	//w "<Input Type='Button' Name='btnTcpPorList' Value='View' onclick='location.href=""/csp/"_$ZNSPACE_"/IIBASupport.csp?PageName=TcpPortList""'>"
	s tDefaultApp = $SYSTEM.CSP.GetDefaultApp($NAMESPACE)
	w "<Input Type='Button' Name='btnTcpPorList' id='btnTcpPorList' Value='View' onclick='window.open("""_tDefaultApp_"/IIBAENSEMBLE.Zen.TcpPortReport.cls"")'>"
	w "</td></tr></table>"
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.cspTask.Template">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>61066,35554.465748</TimeChanged>
<TimeCreated>60908,31118.460678</TimeCreated>

<Method name="CheckPermissions">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set Allowed = 0
	if ##class(%SYSTEM.Security).Check("%All") = "READ,WRITE,USE" { set Allowed = 1 }
	
	Quit Allowed
]]></Implementation>
</Method>

<Method name="jsfunction">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
  &html<
   <script language=javascript>
	<!--
	function Initialize()
	{

	}
  -->
   </script>
  >
]]></Implementation>
</Method>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    w "<table width=800px><tr><td width=700px>"
    w "Title of Task "
	w "</td><td>"
	w "<Input Type=""Button"" Name=""Button"" Value=""Start"" onclick='jsfunction()'>"
	w "</td></tr></table>"
]]></Implementation>
</Method>

<Method name="cosmethod">
<ClassMethod>1</ClassMethod>
<FormalSpec>param:%String</FormalSpec>
<Implementation><![CDATA[
	
	&js<alert('Hello');>
	Quit 1
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.cspTask.WorkFlowTaskPurge">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%CSP.Page</Super>
<TimeChanged>64202,69320.799556</TimeChanged>
<TimeCreated>61053,51897.794076</TimeCreated>

<Method name="html">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
    w "<table width=800px><tr><td width=700px>"
    w "Workflow Task Purge "
	w "</td><td>"
	s tDefaultApp = $SYSTEM.CSP.GetDefaultApp($NAMESPACE)
	w "<Input Type=""Button"" Name=""btnWorkflowPurge"" id=""btnWorkflowPurge"" Value=""Open"" onclick='location.href="""_tDefaultApp_"/IIBASupport.csp?PageName=WorkflowPurge""'>"
	w "</td></tr></table>"
]]></Implementation>
</Method>
</Class>


<Class name="IIBAENSEMBLE.msg.EmailSendRequest">
<Description>
Copyright 2007 by Inland Imaging Business Associates
Class used to send emails from Ensemble Productions through IIBAENSEMBLE.Bop.SendEmail operation</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Request</Super>
<TimeChanged>63258,40946.00388</TimeChanged>
<TimeCreated>60488,45482.807408</TimeCreated>

<Property name="Text">
<Type>%String</Type>
<Parameter name="MAXLEN" value="32768"/>
</Property>

<Property name="From">
<Description>
Email From field can be blank when sending through IIBAENSEMBLE.Bop.SendEmail operation.  It uses the email on that configuration page.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Destination">
<Description>
Email To field.  Emails should be comma separated when sending through IIBAENSEMBLE.Bop.SendEmail operation.</Description>
<Type>%String</Type>
<Parameter name="MAXLEN" value="512"/>
</Property>

<Property name="Subject">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="AttDir">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="AttFile">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>EmailSendRequestDefaultData</DefaultData>
<Data name="EmailSendRequestDefaultData">
<Structure>listnode</Structure>
<Subscript>"EmailSendRequest"</Subscript>
<Value name="1">
<Value>Destination</Value>
</Value>
<Value name="2">
<Value>Subject</Value>
</Value>
<Value name="3">
<Value>Text</Value>
</Value>
<Value name="4">
<Value>AttDir</Value>
</Value>
<Value name="5">
<Value>AttFile</Value>
</Value>
<Value name="6">
<Value>From</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.msg.FileDelivery">
<Super>Ens.Request</Super>
<TimeChanged>61430,32732.210602</TimeChanged>
<TimeCreated>61430,32731.766254</TimeCreated>

<Property name="FilePath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="FileSpec">
<Type>%String</Type>
<Parameter name="MAXLEN" value="512"/>
</Property>

<Property name="ArchivePath">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="ArchiveDays">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>FileDeliveryDefaultData</DefaultData>
<Data name="FileDeliveryDefaultData">
<Structure>listnode</Structure>
<Subscript>"FileDelivery"</Subscript>
<Value name="1">
<Value>FilePath</Value>
</Value>
<Value name="2">
<Value>FileSpec</Value>
</Value>
<Value name="3">
<Value>ArchivePath</Value>
</Value>
<Value name="4">
<Value>ArchiveDays</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.msg.FileToFTP">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%Persistent</Super>
<TimeChanged>62546,33661.720347</TimeChanged>
<TimeCreated>60837,45711.287779</TimeCreated>

<Property name="FilePath">
<Type>%String</Type>
</Property>

<Property name="FileSpec">
<Type>%String</Type>
<Parameter name="MAXLEN" value="512"/>
</Property>

<Property name="ArchivePath">
<Type>%String</Type>
</Property>

<Property name="ArchiveDays">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^IIBAENSEMBLE.msg.FileToFTPD</DataLocation>
<DefaultData>FileToFTPDefaultData</DefaultData>
<IdLocation>^IIBAENSEMBLE.msg.FileToFTPD</IdLocation>
<IndexLocation>^IIBAENSEMBLE.msg.FileToFTPI</IndexLocation>
<StreamLocation>^IIBAENSEMBLE.msg.FileToFTPS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="FileToFTPDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ArchiveDays</Value>
</Value>
<Value name="3">
<Value>ArchivePath</Value>
</Value>
<Value name="4">
<Value>FilePath</Value>
</Value>
<Value name="5">
<Value>FileSpec</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.msg.FixedWidthTest">
<Super>Ens.Request</Super>
<TimeChanged>61866,63088.894614</TimeChanged>
<TimeCreated>61866,57943.754127</TimeCreated>

<Property name="NewProperty1">
<Type>%String</Type>
<Parameter name="CAPTION" value="L "/>
<Parameter name="MAXLEN" value="12"/>
</Property>

<Property name="NewProperty2">
<Type>%String</Type>
<Parameter name="CAPTION" value="R "/>
<Parameter name="MAXLEN" value="10"/>
</Property>

<Property name="NewProperty3">
<Type>%String</Type>
<Parameter name="CAPTION" value="L "/>
<Parameter name="MAXLEN" value="20"/>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>FixedWidthTestDefaultData</DefaultData>
<Data name="FixedWidthTestDefaultData">
<Structure>listnode</Structure>
<Subscript>"FixedWidthTest"</Subscript>
<Value name="1">
<Value>NewProperty1</Value>
</Value>
<Value name="2">
<Value>NewProperty2</Value>
</Value>
<Value name="3">
<Value>NewProperty3</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.msg.StreamContainer">
<Super>Ens.Request,Ens.StreamContainer</Super>
<TimeChanged>63585,35918.596092</TimeChanged>
<TimeCreated>63582,49980.309898</TimeCreated>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>StreamContainerDefaultData</DefaultData>
<Data name="Attributes">
<Attribute>Attributes</Attribute>
<Structure>subnode</Structure>
<Subscript>"IIBAENSEMBLE.msg.StreamContainer.Attributes"</Subscript>
</Data>
<Data name="StreamContainerDefaultData">
<Subscript>"StreamContainer"</Subscript>
<Value name="1">
<Value>OriginalFilename</Value>
</Value>
<Value name="2">
<Value>Type</Value>
</Value>
<Value name="3">
<Value>StreamFC</Value>
</Value>
<Value name="4">
<Value>StreamFB</Value>
</Value>
<Value name="5">
<Value>StreamGC</Value>
</Value>
<Value name="6">
<Value>StreamGB</Value>
</Value>
<Value name="7">
<Value>StreamCF</Value>
</Value>
<Value name="8">
<Value>StreamBF</Value>
</Value>
<Value name="9">
<Value>StreamCG</Value>
</Value>
<Value name="10">
<Value>StreamBG</Value>
</Value>
<Value name="11">
<Value>CharEncodingTable</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.msg.xRefImport">
<Description>
</Description>
<ClassType>persistent</ClassType>
<ProcedureBlock>1</ProcedureBlock>
<Super>Ens.Request</Super>
<TimeChanged>61227,36133.684008</TimeChanged>
<TimeCreated>61226,38975.451915</TimeCreated>

<Property name="SessionId">
<Type>%String</Type>
</Property>

<Property name="filetimestamp">
<Type>%String</Type>
</Property>

<Property name="filename">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="importType">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>xRefImportDefaultData</DefaultData>
<Data name="xRefImportDefaultData">
<Structure>listnode</Structure>
<Subscript>"xRefImport"</Subscript>
<Value name="1">
<Value>SessionId</Value>
</Value>
<Value name="2">
<Value>filename</Value>
</Value>
<Value name="3">
<Value>filetimestamp</Value>
</Value>
<Value name="4">
<Value>importType</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.msgVolume">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<Super>%Persistent</Super>
<TimeChanged>62546,33661.917959</TimeChanged>
<TimeCreated>60747,31592.056218</TimeCreated>

<Property name="IDMsgHdr">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="Source">
<Type>%String</Type>
<Parameter name="MAXLEN" value="100"/>
</Property>

<Property name="SourceType">
<Type>%String</Type>
</Property>

<Property name="TimeCreated">
<Type>Ens.DataType.UTC</Type>
</Property>

<Property name="hh">
<Type>%String</Type>
</Property>

<Property name="mi">
<Type>%String</Type>
</Property>

<Method name="Execute">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	do ##class(IIBAENSEMBLE.msgVolume).delete()
	do ##class(IIBAENSEMBLE.msgVolume).insert()
	do ##class(IIBAENSEMBLE.msgVolume).selectwrite()
]]></Implementation>
</Method>

<Method name="delete">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[ &sql(delete from IIBAENSEMBLE.msgVolume)
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
//ClassMethod insert(dttmStart As %String = "2007-04-24 07:00:00", dttmEnd As %String = "2007-04-25 06:59:59")

]]></Content>
</UDLText>

<Method name="insert">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	set dttmStart = $ZDT($H-2,3)_" 07:00:00"
	set dttmEnd = $ZDT($H-1,3)_" 06:59:59"
	
	
	
	&sql(
	
	insert into IIBAENSEMBLE.msgVolume 
 
		(IDmsghdr, source, TimeCreated, hh, mi)

	select 
		ID
		,SourceConfigName
		,TimeCreated
		,CASE 
			WHEN DATEPART(dd,TimeCreated)=DATEPART(dd,:dttmStart) THEN DATEPART(hh,TimeCreated)-7
			ELSE DATEPART(hh,TimeCreated)+24-7
		END
		,DATEPART(mi,TimeCreated)

	from ens.messageheader 

	where TimeCreated > :dttmStart 
	AND TimeCreated < :dttmEnd
	
	)
]]></Implementation>
</Method>

<Method name="selectwrite">
<ClassMethod>1</ClassMethod>
<FormalSpec>FilePath:%String="E:\"</FormalSpec>
<Implementation><![CDATA[
	set SQL = ""
	

	set SQL = SQL_"SELECT "
	set SQL = SQL_"cast(RIGHT('0' _ hh,2) "
	set SQL = SQL_"_ RIGHT('0' _ mi,2) as int) as mi, "
	set SQL = SQL_"RIGHT('0' _ hh,2) "
	set SQL = SQL_"_ RIGHT('0' _ mi,2) as hhmi, "
	set SQL = SQL_"count(RIGHT('0' _ hh,2) "
	set SQL = SQL_"_ RIGHT('0' _ mi,2)) as msgcount "
	set SQL = SQL_"FROM IIBAENSEMBLE.msgVolume "
	set SQL = SQL_"group by "
	set SQL = SQL_"RIGHT('0' _ hh,2) "
	set SQL = SQL_"_ RIGHT('0' _ mi,2) "
	set SQL = SQL_"order by mi "
		
	Set rset = ##class(%ResultSet).%New()
	do rset.Prepare(SQL)
	do rset.Execute()
	
	if $E(FilePath,$L(FilePath),$L(FilePath))'="\"{s FilePath=FilePath_"\"}
	
	Set file=##class(%File).%New(FilePath_"msgcount"_##class(Ens.Util.Time).FormatDateTime("%Y%m%d%H%M%S")_".csv")
	Do file.Open("WSN")
	
	Do file.WriteLine("mi,hhmi,msgcount")
	
	While (rset.Next()) {	
		Do file.WriteLine(rset.Data("mi")_","_rset.Data("hhmi")_","_rset.Data("msgcount"))
	}
		
	Do file.Close()
]]></Implementation>
</Method>

<Method name="DailyStatsByType">
<Description>
Return transaction counts by business type for a given day.
Transaction date is in ODBC format (2010-02-28)
Return value: Total Transactions, Business Service, Business Process, Business Operation</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>TransactionDate:%String</FormalSpec>
<Implementation><![CDATA[
	
	s total="",bsvc="",bproc="",bop=""
	
	If (TransactionDate="" ) {
		s dateH=$H-2
		
	} else {
		s dateH=$ZDTH(TransactionDate,3)
	}
	s startdttm=$ZDT(dateH,3)_" 07:00:00"
	s enddttm=$ZDT(dateH+1,3)_" 06:59:59"
	
	set SQL="select count (*) as msgcount from Ens.MessageHeader"
	set SQL=SQL_" where TimeCreated > '"_startdttm_"'"
	set SQL=SQL_" AND TimeCreated < '"_enddttm_"'"
	
	Set rset = ##class(%ResultSet).%New()
	do rset.Prepare(SQL)
	do rset.Execute()
	do rset.Next()
	//w "Total Message Count: ",rset.Data("msgcount"),!
	S total=rset.Data("msgcount")
	
	
	set SQL="select count (*) as msgcount from Ens.MessageHeader"
	set SQL=SQL_" where TimeCreated > '"_startdttm_"'"
	set SQL=SQL_" AND TimeCreated < '"_enddttm_"'"
	set SQL=SQL_" And SourceBusinessType='1'"
	
	Set rset = ##class(%ResultSet).%New()
	do rset.Prepare(SQL)
	do rset.Execute()
	do rset.Next()
	//w "Business Service Message Count: ",rset.Data("msgcount"),!
	S bsvc=rset.Data("msgcount")



	set SQL="select count (*) as msgcount from Ens.MessageHeader"
	set SQL=SQL_" where TimeCreated > '"_startdttm_"'"
	set SQL=SQL_" AND TimeCreated < '"_enddttm_"'"
	set SQL=SQL_" And SourceBusinessType='2'"
	
	Set rset = ##class(%ResultSet).%New()
	do rset.Prepare(SQL)
	do rset.Execute()
	do rset.Next()
	//w "Business Process Message Count: ",rset.Data("msgcount"),!
	S bproc=rset.Data("msgcount")


	set SQL="select count (*) as msgcount from Ens.MessageHeader"
	set SQL=SQL_" where TimeCreated > '"_startdttm_"'"
	set SQL=SQL_" AND TimeCreated < '"_enddttm_"'"
	set SQL=SQL_" And TargetBusinessType='3'"
	
	Set rset = ##class(%ResultSet).%New()
	do rset.Prepare(SQL)
	do rset.Execute()
	do rset.Next()
	//w "Business Operation Message Count: ",rset.Data("msgcount"),!
	S bop=rset.Data("msgcount")
	
	
	Q total_","_bsvc_","_bproc_","_bop
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^IIBAENSEMBLE.msgVolumeD</DataLocation>
<DefaultData>msgVolumeDefaultData</DefaultData>
<IdLocation>^IIBAENSEMBLE.msgVolumeD</IdLocation>
<IndexLocation>^IIBAENSEMBLE.msgVolumeI</IndexLocation>
<StreamLocation>^IIBAENSEMBLE.msgVolumeS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="msgVolumeDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>IDMsgHdr</Value>
</Value>
<Value name="3">
<Value>Source</Value>
</Value>
<Value name="4">
<Value>TimeCreated</Value>
</Value>
<Value name="5">
<Value>hh</Value>
</Value>
<Value name="6">
<Value>mi</Value>
</Value>
<Value name="7">
<Value>SourceType</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="IIBAENSEMBLE.tblSearchUtil">
<Description>
Copyright 2007 by Inland Imaging Business Associates</Description>
<SqlTableName>tblSearchUtil</SqlTableName>
<Super>%Persistent</Super>
<TimeChanged>62546,33661.98534</TimeChanged>
<TimeCreated>60614,44459.761809</TimeCreated>

<Property name="cspsessionID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="msgbodyID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="msgID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="msgsessionID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="sourceID">
<Type>%String</Type>
<Parameter name="MAXLEN" value="255"/>
</Property>

<Property name="Status">
<Type>Ens.DataType.MessageStatus</Type>
</Property>

<Property name="TimeCreated">
<Type>Ens.DataType.UTC</Type>
</Property>

<Property name="TimeProcessed">
<Type>Ens.DataType.UTC</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^IIBAENSEMBLE.tblSearchUtilD</DataLocation>
<DefaultData>tblSearchUtilDefaultData</DefaultData>
<IdLocation>^IIBAENSEMBLE.tblSearchUtilD</IdLocation>
<IndexLocation>^IIBAENSEMBLE.tblSearchUtilI</IndexLocation>
<StreamLocation>^IIBAENSEMBLE.tblSearchUtilS</StreamLocation>
<ExtentSize>100000</ExtentSize>
<Data name="tblSearchUtilDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>cspsessionID</Value>
</Value>
<Value name="3">
<Value>msgID</Value>
</Value>
<Value name="4">
<Value>msgbodyID</Value>
</Value>
<Value name="5">
<Value>msgsessionID</Value>
</Value>
<Value name="6">
<Value>sourceID</Value>
</Value>
<Value name="7">
<Value>TimeCreated</Value>
</Value>
<Value name="8">
<Value>TimeProcessed</Value>
</Value>
<Value name="9">
<Value>Status</Value>
</Value>
</Data>
</Storage>
</Class>
</Export>
 