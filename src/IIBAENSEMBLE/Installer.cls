Include %occInclude

/// IIBA Toolkit Installer <br>
/// This class can be used for the creation of the IIBA namespace and for upgrading the IIBA namespace <br>
/// This class can also be used for creation or upgrade of a client's namespace <br><br>
/// This class must be imported into the %SYS namespace before calling the setup method.
/// <br>
/// In all cases, from terminal, call the method ##class(IIBAENSEMBLE.Installer).setupDefaults(...)
/// <br><br>
/// For creation of IIBA pass the following parameters
/// <ul>
/// <li>"IIBA"
/// <li>"&lt;source file directory&gt;"
/// <li>"&lt;database directory for IIBA database&gt;"
/// </ul>
/// 
/// For upgrade of IIBA pass the following parameters
/// <ul>
/// <li>"IIBA"
/// <li>"&lt;source file directory&gt;"
/// </ul>
/// 
/// For creation of Client Namespace pass the following parameters
/// <ul>
/// <li>"&lt;Namespace&gt;"
/// <li>"&lt;source file directory&gt;"
/// <li>"&lt;database directory for namespace database&gt;"
/// </ul>
/// 
/// For upgrade of Client Namespace pass the following parameters
/// <ul>
/// <li>"&lt;Namespace&gt;"
/// <li>"&lt;source file directory&gt;"
/// </ul>
/// <br>
/// The source files are generated by running ##class(IIBAENSEMBLE.Utilities).buildInstallerSourceFiles("outputPath")<br>
/// The source files should be generated in a namespace that has the toolkit csp files like IIBARIS
Class IIBAENSEMBLE.Installer
{

/// Application Definition
XData Installer [ XMLNamespace = INSTALLER ]
{
<Manifest>

<!-- Create Resources -->
<Resource Name="%DB_${NAMESPACE}" 
		Permission="RW" 
		Description="Resource for ${NAMESPACE} Database"
		/>
<Resource Name="NS_${NAMESPACE}" 
		Permission="RW" 
		Description="Resource for ${NAMESPACE} Application"
		/>
		
<If Condition='${NamespaceExists}=0'>

<!-- Create namespace -->
<Namespace Name="${NAMESPACE}"
          Create="yes"
          Code="${NAMESPACE}"
          Data="${NAMESPACE}"
          Ensemble="1"
          EnsemblePortalGrant="%DB_${NAMESPACE}"
		  >
<Configuration>

<!-- "data" and "code" database -->
<Database Name="${NAMESPACE}"
		 Dir="${NSDBDir}"
		 Create="yes"
		 Resource="%DB_${NAMESPACE}"
		 PublicPermissions=""/>

</Configuration>
</Namespace>

</If>

<!-- Post Ensemble 2010.2: Delete old 'spt' csp application if it exists -->
<If Condition='"${NAMESPACE}"&apos;="IIBA"'>

<Var Name="sptURL" Value="/csp/${NAMESPACE}spt"/>

<If Condition='##class(Security.Applications).Exists("${sptURL}")=1'>
<Invoke Class="Security.Applications" Method="Delete" CheckStatus="true">
<Arg Value="${sptURL}"/>
</Invoke>
</If>
</If>

<!-- Once the namespace exists whether it was created or not-->


<Namespace Name="${NAMESPACE}"
          Create="no"
          >



<Configuration>
<!-- database -->
<Database Name="${NAMESPACE}"
		 Create="no"
		 Resource="%DB_${NAMESPACE}"
		 />

<If Condition='"${NAMESPACE}"&apos;="IIBA"'>

<!-- Class Mapping -->
<ClassMapping Package="IIBAENSEMBLE" 						From="IIBA"/> 

<!-- Global Mapping -->
<GlobalMapping Global="IIBAENSEMBL4D4.SupportPageD883D" 	From="IIBA"/> 
<GlobalMapping Global="IIBAENSEMBLE.Monitor.tblItemsD" 		From="IIBA"/> 
<GlobalMapping Global="IIBAENSEMBL521.TaskItemDefi72BD" 	From="IIBA"/> 
<If Condition='"${pMapLookup}"="1"'>
<!--  These are not used for a new namespace that doesn't share resources with IIBA-->
<GlobalMapping Global="IIBAENSEMBLE.LookupTableD" 			From="IIBA"/> 
<GlobalMapping Global="IIBAENSEMBLE.LookupTableI" 			From="IIBA"/> 
<GlobalMapping Global="IIBAENSEMBLE.Mon676.ItemStatusD" 	From="IIBA"/> 
<GlobalMapping Global="IIBAENSEMBLE.R71D.RelatedValueD" 	From="IIBA"/> 
<GlobalMapping Global="IIBAENSEMBLE.R71D.RelatedValueI" 	From="IIBA"/> 
<GlobalMapping Global="IIBAENSEMBLE.Re71D.RelatedTypeD" 	From="IIBA"/> 
<GlobalMapping Global="IIBAENSEMBLE71D.PrincipalTypeD" 		From="IIBA"/> 
<GlobalMapping Global="IIBAENSEMBLE71D.PrincipalValueD" 	From="IIBA"/> 
<GlobalMapping Global="IIBAENSEMBLE71D.PrincipalValueI" 	From="IIBA"/> 
</If>
</If>
</Configuration>

<If Condition='"${NAMESPACE}"&apos;="IIBA"'>
<!-- Create a CSP application for the namespace -->
<Var Name="URL" Value="/csp/${NAMESPACE}"/>

<!-- Check to see if the support application exists -->
<If Condition='##class(Security.Applications).Exists("${URL}")=0'>

<CSPApplication Url="${URL}"
			   Directory="${CSPDirectory}"
	           Resource="NS_${NAMESPACE}"
	           Grant="%DB_${NAMESPACE}"
	           Description="Support Toolkit"
	           CookiePath="/csp/"
	           AuthenticationMethods="36"
	           Recurse="true"
	 />
</If>

<Invoke Class="IIBAENSEMBLE.Utilities" Method="cspfileAppNameChange" CheckStatus="1">
<Arg Value="${SourceFileDir}/iiba_modalBox_csp.xml"/>
<Arg Value="${URL}"/>
</Invoke>
<Import File="${SourceFileDir}/temp_iiba_modalBox_csp.xml" Flags="ckf"/>

<Invoke Class="%File" Method="Delete" CheckStatus="1">
<Arg Value="${SourceFileDir}/temp_iiba_modalBox_csp.xml"/>
</Invoke>

<Invoke Class="IIBAENSEMBLE.Utilities" Method="cspfileAppNameChange" CheckStatus="1">
<Arg Value="${SourceFileDir}/iiba_CustomImages_csp.xml"/>
<Arg Value="${URL}"/>
</Invoke>
<Import File="${SourceFileDir}/temp_iiba_CustomImages_csp.xml" Flags="ckf"/>

<Invoke Class="%File" Method="Delete" CheckStatus="1">
<Arg Value="${SourceFileDir}/temp_iiba_CustomImages_csp.xml"/>
</Invoke>

<Invoke Class="IIBAENSEMBLE.Utilities" Method="cspfileAppNameChange" CheckStatus="1">
<Arg Value="${SourceFileDir}/iiba_ext_csp.xml"/>
<Arg Value="${URL}"/>
</Invoke>
<Import File="${SourceFileDir}/temp_iiba_ext_csp.xml" Flags="ckf"/>

<Invoke Class="%File" Method="Delete" CheckStatus="1">
<Arg Value="${SourceFileDir}/temp_iiba_ext_csp.xml"/>
</Invoke>

<Invoke Class="IIBAENSEMBLE.Utilities" Method="cspfileAppNameChange" CheckStatus="1">
<Arg Value="${SourceFileDir}/iiba_img_csp.xml"/>
<Arg Value="${URL}"/>
</Invoke>
<Import File="${SourceFileDir}/temp_iiba_img_csp.xml" Flags="ckf"/>

<Invoke Class="%File" Method="Delete" CheckStatus="1">
<Arg Value="${SourceFileDir}/temp_iiba_img_csp.xml"/>
</Invoke>

<Invoke Class="IIBAENSEMBLE.Utilities" Method="cspfileAppNameChange" CheckStatus="1">
<Arg Value="${SourceFileDir}/iiba_csp_items.xml"/>
<Arg Value="${URL}"/>
</Invoke>
<Import File="${SourceFileDir}/temp_iiba_csp_items.xml" Flags="ckf"/>

<Invoke Class="%File" Method="Delete" CheckStatus="1">
<Arg Value="${SourceFileDir}/temp_iiba_csp_items.xml"/>
</Invoke>
</If>

<If Condition='"${NAMESPACE}"="IIBA"'>
<!-- Load IIBA classes -->
<Import File="${SourceFileDir}/iibasupport_cls.xml" Flags="ckf"/>

<!-- Load Global Data for IIBA Toolkit config -->
<Import File="${SourceFileDir}/iibasupport_globals.gof"/>

<!-- Clean up entries for TaskItemDefinition -->
<Invoke Class="IIBAENSEMBLE.Task.TaskItemDefinition" Method="setTaskItemDefinitiontoDefaults"/>
</If>

</Namespace>

<!-- Once the namespace exists whether it was created or not-->
<Namespace Name="%SYS"
          Create="no"
          >
<ClassMapping Package="IIBAENSEMBLE.Task" 						From="IIBA"/> 
<GlobalMapping Global="IIBAENSEMBLE.Monitor.tblItemsD" 		From="IIBA"/> 
<!-- Create Role directly because the installer Role tag doesn't support variables in the Resources name at this point -->
<Invoke Class="Security.Roles" Method="Create" >
<Arg name="Name" Value="NS_${NAMESPACE}"/>
<Arg name="Description" Value="Access to Toolkit applications" />
<Arg name="Resources" Value="${NAMESPACERESOURCES}" />
</Invoke>

</Namespace>

</Manifest>
}

/// This is a method generator whose code is generated by XGL.
ClassMethod setup(ByRef pVars, pLogLevel As %Integer, pInstaller As %Installer.Installer) As %Status [ CodeMode = objectgenerator, Internal ]
{
	#; Let our XGL document generate code for this method. 
	Quit ##class(%Installer.Manifest).%Generate(%compiledclass, %code, "Installer")
}

/// Setup defaults for this MyApp system
ClassMethod setupDefaults(pNamespace As %String, pSourceFileDir As %String, pNSDBDir As %String = "", pMapLookup As %Boolean = 0) As %Status
{
	if $E(pSourceFileDir,$L(pSourceFileDir),$L(pSourceFileDir)) = "\" {
		s pSourceFileDir = $E(pSourceFileDir,1,$L(pSourceFileDir)-1)
	}
	
	set CSPDIR = ##class(%File).ParentDirectoryName(##class(%File).ManagerDirectory())_"CSP\"_pNamespace
	set NamespaceExists = ##class(%SYS.Namespace).Exists(pNamespace)
	if NamespaceExists set pNSDBDir = $P(##class(%SYS.Namespace).GetGlobalDest(pNamespace),"^",2)
	
	Q:pNSDBDir="" "must have namespace directory for new namespaces"
	
	s pVars = ""
	s pVars("NAMESPACE") = pNamespace
	s pVars("NAMESPACERESOURCES") = "%DB_"_pNamespace_":RW,NS_"_pNamespace_":RWU,%DB_IIBA:RW,NS_IIBA:RWU,%DB_CACHESYS:RW"
	s pVars("CSPDirectory") = CSPDIR
	s pVars("NamespaceExists") = NamespaceExists
	s pVars("NSDBDir") = pNSDBDir
	s pVars("SourceFileDir") = pSourceFileDir
	s pVars("pMapLookup") = pMapLookup
				
	Q ..setup(.pVars)
}

}
